// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

#include <cmajor/cmdebug/DebugApi.hpp>

classmap DebuggerCommandClassMap;

prefix "cmajor/cmdebug";

tokens DebuggerCommandTokens
{
    (NL, "'newline'"),
    (EXIT, "'exit'"), (E, "'e'"), (QUIT, "'quit'"), (Q, "'q'"),
    (HELP, "'help'"), (H, "'h"),
    (NEXT, "'next'"), (N, "'n'"),
    (STEP, "'step'"), (S, "'s'"),
    (CONTINUE, "'continue'"), (C, "'c'"),
    (FINISH, "'finish'"), (F, "'f'"),
    (UNTIL, "'until'"), (U, "'u'"),
    (BREAK, "'break'"), (B, "'b'"),
    (DELETE, "'delete'"), (D, "'d'"),
    (PRINT, "'print'"), (P, "'p'"),
    (DEPTH, "'depth'"), 
    (FRAMES, "'frames'"),
    (LIST, "'list'"), (L, "'l'"),
    (SHOW, "'show'"),
    (BREAKPOINT, "'breakpoint'"),
    (BREAKPOINTS, "'breakpoints'"),
    (CAST, "'cast'"),
    (TYPEID, "'typeid'"),
    (BASE, "'base'"),
    (SET, "'set'"),
    (BREAKONTHROW, "'breakOnThrow'"),
    (CONDITION, "'condition'"),
    (TRUE, "'true'"),
    (FALSE, "'false'"),
    (ID, "id"),
    (PATH, "'path'"),
    (INTEGER, "'integer'"),
    (STRING, "'string'"),
    (COLON, "':'"),
    (AST, "'*'"),
    (AMP, "'&'"),
    (LPAREN, "'('"),
    (RPAREN, "')'"),
    (LANGLE, "'<'"),
    (RANGLE, "'>'"),
    (LBRACKET, "'['"),
    (RBRACKET, "']'"),
    (DOT, "'.'"),
    (COMMA, "','"),
    (PLUS, "'+'"),
    (MINUS, "'-'"),
    (EQ, "'='"),
    (DISJUNCTION, "'||'"),
    (CONJUNCTION, "'&&'"),
    (BITOR, "'|'"),
    (BITXOR, "'^'"),
    (EQUAL, "'=='"),
    (NOTEQUAL, "'!='"),
    (LESSEQUAL, "'<='"),
    (GREATEREQUAL, "'>='"),
    (SHIFTLEFT, "'<<'"),
    (SHIFTRIGHT, "'>>'"),
    (SLASH, "'/'"),
    (PERCENT, "'%'")
}

keywords DebuggerCommandKeywords
{
    ("exit", EXIT), ("e", EXIT), ("quit", EXIT), ("q", EXIT),
    ("help", HELP), ("h", HELP),
    ("next", NEXT), ("n", NEXT),
    ("step", STEP), ("s", STEP),
    ("continue", CONTINUE), ("c", CONTINUE),
    ("finish", FINISH), ("f", FINISH),
    ("until", UNTIL), ("u", UNTIL),
    ("break", BREAK), ("b", BREAK),
    ("delete", DELETE), ("d", DELETE),
    ("print", PRINT), ("p", PRINT),
    ("depth", DEPTH), 
    ("frames", FRAMES), 
    ("list", LIST), ("l", LIST),
    ("show", SHOW),
    ("breakpoint", BREAKPOINT),
    ("breakpoints", BREAKPOINTS),
    ("cast", CAST),
    ("typeid", TYPEID),
    ("base", BASE),
    ("set", SET),
    ("breakOnThrow", BREAKONTHROW),
    ("condition", CONDITION),
    ("true", TRUE),
    ("false", FALSE)
}

expressions
{
    ws = "[\t ]+";
    newline = "\r\n|\n|\r";
    id = "{idstart}{idcont}*";
    drive = "[a-zA-Z]";
    comp = "[a-zA-Z_.+][a-zA-Z_0-9.+-]*";
    path = "({drive}:)?(/?({comp}/)*)?{comp}";
    decdigits = "[0-9]+";
    hexdigit = "[0-9a-fA-F]";
    hexdigits = "{hexdigit}+";
    hex4 = "{hexdigit}{hexdigit}{hexdigit}{hexdigit}";
    hex8 = "{hex4}{hex4}";
    octaldigits = "[0-7]+";
    escape = "\\((x|X){hexdigits}|(d|D){decdigits}|{octaldigits}|u{hex4}|U{hex8}|[abfnrtv\"'\\])";
    string = "\"([^\\\r\n\"]|{escape})*\"";
    integer = "[0-9]+";
}

lexer api(DEBUG_API) DebuggerCommandLexer
{
    "{ws}" { }
    "{newline}"{ return NL; }
    "{id}" { int kw = GetKeywordToken(token.match); if (kw == INVALID_TOKEN) return ID; else return kw; }
    "{path}"{ return PATH; }
    "{integer}"{ return INTEGER; }
    "{string}"{ return STRING; }
    "\|\|"{ return DISJUNCTION; }
    "\&\&"{ return CONJUNCTION; }
    "\|"{ return BITOR; }
    "\^"{ return BITXOR; }
    ":"{ return COLON; }
    "\*"{ return AST; }
    "/"{ return SLASH; }
    "%"{ return PERCENT; }
    "\&"{ return AMP; }
    "=="{ return EQUAL; }
    "!="{ return NOTEQUAL; }
    "<="{ return LESSEQUAL; }
    ">="{ return GREATEREQUAL; }
    "<<"{ return SHIFTLEFT; }
    ">>"{ return SHIFTRIGHT; }
    "\("{ return LPAREN; }
    "\)"{ return RPAREN; }
    "<"{ return LANGLE; }
    ">"{ return RANGLE; }
    "\["{ return LBRACKET; }
    "\]"{ return RBRACKET; }
    "\."{ return DOT; }
    ","{ return COMMA; }
    "\+"{ return PLUS; }
    "\-"{ return MINUS; }
    "="{ return EQ; }
}
