// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Net.Http
{
    public static class HttpParser
    {
        public static HttpHeader ParseHeader(const string& header)
        {
            try
            {
                HttpLexer lexer(ToUtf32(header), "", 0);
                return HttpHeaderParser.Parse(lexer);
            }
            catch (const Exception& ex)
            {
                throw Exception("error: could not parse header '" + header + "': " + ex.Message());
            }
            return HttpHeader();
        }
        public static HttpStatus ParseStatus(const string& statusLine)
        {
            try
            {
                HttpLexer lexer(ToUtf32(statusLine), "", 0);
                return HttpStatusLineParser.Parse(lexer);
            } 
            catch (const Exception& ex)
            {
                throw Exception("error: could not parse status '" + statusLine + "': " + ex.Message());
            }
            return HttpStatus();
        }
        public static void ParseChunkHeader(const string& chunkHeader, ulong* chunkSize, ChunkExtensionAdder* adder)
        {
            try
            {
                HttpLexer lexer(ToUtf32(chunkHeader), "", 0);
                HttpChunkHeaderParser.Parse(lexer, chunkSize, adder);
            }
            catch (const Exception& ex)
            {
                throw Exception("error: could not parse chunk header '" + chunkHeader + "': " + ex.Message());
            }
        }
        public static void ParseFieldValue(const string& fieldValue, List<HttpFieldValue>* values)
        {
            try
            {
                HttpLexer lexer(ToUtf32(fieldValue), "", 0);
                HttpFieldValueParser.Parse(lexer, values);
            }
            catch (const Exception& ex)
            {
                throw Exception("error: coulnd not parse field value '" + fieldValue + "': " + ex.Message());
            }
        }
        public static MimeType ParseMediaType(const string& fieldValue)
        {
            try
            {
                HttpLexer lexer(ToUtf32(fieldValue), "", 0);
                MimeType mimeType;
                HttpMediaTypeParser.Parse(lexer, &mimeType);
                return mimeType;
            }
            catch (const Exception& ex)
            {
                throw Exception("could not parse media type '" + fieldValue + "': " + ex.Message());
            }
            return MimeType();
        }
        public static DateTime ParseDate(const string& fieldValue)
        {
            try
            {
                TrivialLexer lexer(ToUtf32(fieldValue), "", 0);
                return HttpDateParser.Parse(lexer);
            }
            catch (const Exception& ex)
            {
                throw Exception("could not parse date '" + fieldValue + "':" + ex.Message());
            }
            return DateTime();
        }
    }
}
