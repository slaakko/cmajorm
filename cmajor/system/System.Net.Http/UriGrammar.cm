using System;
using System.Collections;
using System.Text.Parsing;

// this source file has been automatically generated from 'UriGrammar.parser' using cmparsergen version 2.0.0.

namespace System.Net.Http
{
    public class UriGrammar : System.Text.Parsing.Grammar
    {
        public UriGrammar() : this(new ParsingDomain())
        {
        }
        public UriGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("UriGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("System.Net.Http")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public void Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, UriReference* uriReference)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(uriReference)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
        }

        public class UriReferenceRule : System.Text.Parsing.RuleParser
        {
            public UriReferenceRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* absoluteUriNonterminalParser = GetNonterminal(ToUtf32("AbsoluteUri"));
                absoluteUriNonterminalParser->SetPre(PreAbsoluteUri);
                NonterminalParser* relativeUriNonterminalParser = GetNonterminal(ToUtf32("RelativeUri"));
                relativeUriNonterminalParser->SetPre(PreRelativeUri);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetFragment(ustring(matchBegin, matchEnd));
            }
            public void PreAbsoluteUri(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public void PreRelativeUri(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference()
                {
                }
                public UriReference* uriReference;
            }
        }

        public class AbsoluteUriRule : System.Text.Parsing.RuleParser
        {
            public AbsoluteUriRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* hierPartNonterminalParser = GetNonterminal(ToUtf32("HierPart"));
                hierPartNonterminalParser->SetPre(PreHierPart);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetScheme(ustring(matchBegin, matchEnd));
            }
            public void PreHierPart(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference()
                {
                }
                public UriReference* uriReference;
            }
        }

        public class RelativeUriRule : System.Text.Parsing.RuleParser
        {
            public RelativeUriRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                NonterminalParser* netPathNonterminalParser = GetNonterminal(ToUtf32("NetPath"));
                netPathNonterminalParser->SetPre(PreNetPath);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->Clear();
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetPath(ustring(matchBegin, matchEnd));
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetPath(ustring(matchBegin, matchEnd));
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetQuery(ustring(matchBegin, matchEnd));
            }
            public void PreNetPath(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference()
                {
                }
                public UriReference* uriReference;
            }
        }

        public class HierPartRule : System.Text.Parsing.RuleParser
        {
            public HierPartRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* netPathNonterminalParser = GetNonterminal(ToUtf32("NetPath"));
                netPathNonterminalParser->SetPre(PreNetPath);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetPath(ustring(matchBegin, matchEnd));
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetQuery(ustring(matchBegin, matchEnd));
            }
            public void PreNetPath(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference()
                {
                }
                public UriReference* uriReference;
            }
        }

        public class NetPathRule : System.Text.Parsing.RuleParser
        {
            public NetPathRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* authorityNonterminalParser = GetNonterminal(ToUtf32("Authority"));
                authorityNonterminalParser->SetPre(PreAuthority);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetPath(ustring(matchBegin, matchEnd));
            }
            public void PreAuthority(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference()
                {
                }
                public UriReference* uriReference;
            }
        }

        public class AuthorityRule : System.Text.Parsing.RuleParser
        {
            public AuthorityRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* serverNonterminalParser = GetNonterminal(ToUtf32("Server"));
                serverNonterminalParser->SetPre(PreServer);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetHost(u"");
                context->uriReference->SetPort(0u);
                context->uriReference->SetRegName(ustring(matchBegin, matchEnd));
            }
            public void PreServer(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference()
                {
                }
                public UriReference* uriReference;
            }
        }

        public class ServerRule : System.Text.Parsing.RuleParser
        {
            public ServerRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
                AddLocalVariable(AttrOrVar(ToUtf32("ustring"), ToUtf32("userInfo")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* hostPortNonterminalParser = GetNonterminal(ToUtf32("HostPort"));
                hostPortNonterminalParser->SetPre(PreHostPort);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->userInfo = ustring(matchBegin, matchEnd);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetUserInfo(context->userInfo);
            }
            public void PreHostPort(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<UriReference*>(context->uriReference)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference(), userInfo()
                {
                }
                public UriReference* uriReference;
                public ustring userInfo;
            }
        }

        public class HostPortRule : System.Text.Parsing.RuleParser
        {
            public HostPortRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("UriReference*"), ToUtf32("uriReference")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> uriReference_value = stack.Pop();
                context->uriReference = *cast<ValueObject<UriReference*>*>(uriReference_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* portNonterminalParser = GetNonterminal(ToUtf32("port"));
                portNonterminalParser->SetPost(Postport);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetHost(ustring(matchBegin, matchEnd));
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->uriReference->SetPort(context->fromport);
            }
            public void Postport(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromport_value = stack.Pop();
                    context->fromport = *cast<ValueObject<uint>*>(fromport_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : uriReference(), fromport()
                {
                }
                public UriReference* uriReference;
                public uint fromport;
            }
        }

        public class HostNameRule : System.Text.Parsing.RuleParser
        {
            public HostNameRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddLocalVariable(AttrOrVar(ToUtf32("ustring"), ToUtf32("dl")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->dl = ustring(matchBegin, matchEnd);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                char c = cast<char>(context->dl[0]);
                if (IsDigit(c)) pass = false;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : dl()
                {
                }
                public ustring dl;
            }
        }

        public class DomainLabelRule : System.Text.Parsing.RuleParser
        {
            public DomainLabelRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (*matchBegin == '-' || matchEnd[-1] == '-') pass = false;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context()
                {
                }
            }
        }

        public class TopLabelRule : System.Text.Parsing.RuleParser
        {
            public TopLabelRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matchEnd[-1] == '-') pass = false;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context()
                {
                }
            }
        }

        public class PortRule : System.Text.Parsing.RuleParser
        {
            public PortRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("uint"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<uint>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* portNonterminalParser = GetNonterminal(ToUtf32("port"));
                portNonterminalParser->SetPost(Postport);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromport;
            }
            public void Postport(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromport_value = stack.Pop();
                    context->fromport = *cast<ValueObject<uint>*>(fromport_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromport()
                {
                }
                public uint value;
                public uint fromport;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("uint"), this, ToUtf32("System.Text.Parsing.stdlib.uint")));
            AddRule(new UriReferenceRule(ToUtf32("UriReference"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("AbsoluteUri"), ToUtf32("AbsoluteUri"), 1),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("RelativeUri"), ToUtf32("RelativeUri"), 1)))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('#'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Fragment"), ToUtf32("Fragment"), 0))))))));
            AddRule(new AbsoluteUriRule(ToUtf32("AbsoluteUri"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Scheme"), ToUtf32("Scheme"), 0)),
                        new System.Text.Parsing.CharParser(':')),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("HierPart"), ToUtf32("HierPart"), 1),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("OpaquePart"), ToUtf32("OpaquePart"), 0))))));
            AddRule(new RelativeUriRule(ToUtf32("RelativeUri"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.EmptyParser()),
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("NetPath"), ToUtf32("NetPath"), 1),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("AbsPath"), ToUtf32("AbsPath"), 0))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("RelPath"), ToUtf32("RelPath"), 0))))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('?'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Query"), ToUtf32("Query"), 0))))))));
            AddRule(new HierPartRule(ToUtf32("HierPart"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("NetPath"), ToUtf32("NetPath"), 1),
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("AbsPath"), ToUtf32("AbsPath"), 0)))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('?'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Query"), ToUtf32("Query"), 0))))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("OpaquePart"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("UriCNoSlash"), ToUtf32("UriCNoSlash"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("UriC"), ToUtf32("UriC"), 0)))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("UriCNoSlash"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Unreserved"), ToUtf32("Unreserved"), 0),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Escaped"), ToUtf32("Escaped"), 0)),
                    new System.Text.Parsing.CharSetParser(ToUtf32(";?:@&=+$,")))));
            AddRule(new NetPathRule(ToUtf32("NetPath"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.StringParser(ToUtf32("//")),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Authority"), ToUtf32("Authority"), 1)),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("AbsPath"), ToUtf32("AbsPath"), 0)))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("AbsPath"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.CharParser('/'),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("PathSegments"), ToUtf32("PathSegments"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("RelPath"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("RelSegment"), ToUtf32("RelSegment"), 0),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("AbsPath"), ToUtf32("AbsPath"), 0)))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("RelSegment"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.PositiveParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Unreserved"), ToUtf32("Unreserved"), 0),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Escaped"), ToUtf32("Escaped"), 0)),
                            new System.Text.Parsing.CharSetParser(ToUtf32(";@&=+$,")))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Scheme"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Alpha"), ToUtf32("Alpha"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Alpha"), ToUtf32("Alpha"), 0),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0)),
                                new System.Text.Parsing.CharSetParser(ToUtf32("+.-"))))))));
            AddRule(new AuthorityRule(ToUtf32("Authority"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Server"), ToUtf32("Server"), 1),
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("RegName"), ToUtf32("RegName"), 0)))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("RegName"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.PositiveParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Unreserved"), ToUtf32("Unreserved"), 0),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Escaped"), ToUtf32("Escaped"), 0)),
                            new System.Text.Parsing.CharSetParser(ToUtf32("$,;:@&=+")))))));
            AddRule(new ServerRule(ToUtf32("Server"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("UserInfo"), ToUtf32("UserInfo"), 0)),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.CharParser('@'))))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("HostPort"), ToUtf32("HostPort"), 1)))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("UserInfo"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Unreserved"), ToUtf32("Unreserved"), 0),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Escaped"), ToUtf32("Escaped"), 0)),
                            new System.Text.Parsing.CharSetParser(ToUtf32(";:&=+$,")))))));
            AddRule(new HostPortRule(ToUtf32("HostPort"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Host"), ToUtf32("Host"), 0)),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser(':'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("port"), ToUtf32("Port"), 0))))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Host"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("HostName"), ToUtf32("HostName"), 0),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("IPv4Address"), ToUtf32("IPv4Address"), 0))));
            AddRule(new HostNameRule(ToUtf32("HostName"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("DomainLabel"), ToUtf32("DomainLabel"), 0)),
                                new System.Text.Parsing.CharParser('.')))),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("TopLabel"), ToUtf32("TopLabel"), 0),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.CharParser('.'))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.EmptyParser()))))));
            AddRule(new DomainLabelRule(ToUtf32("DomainLabel"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.PositiveParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("AlphaNumOrDash"), ToUtf32("AlphaNumOrDash"), 0))))));
            AddRule(new TopLabelRule(ToUtf32("TopLabel"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Alpha"), ToUtf32("Alpha"), 0),
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.PositiveParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("AlphaNumOrDash"), ToUtf32("AlphaNumOrDash"), 0))))),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Alpha"), ToUtf32("Alpha"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("IPv4Address"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.PositiveParser(
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0)),
                                        new System.Text.Parsing.CharParser('.')),
                                    new System.Text.Parsing.PositiveParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0))),
                                new System.Text.Parsing.CharParser('.')),
                            new System.Text.Parsing.PositiveParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0))),
                        new System.Text.Parsing.CharParser('.')),
                    new System.Text.Parsing.PositiveParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0)))));
            AddRule(new PortRule(ToUtf32("Port"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.OptionalParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("port"), ToUtf32("uint"), 0))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Path"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.OptionalParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("AbsPath"), ToUtf32("AbsPath"), 0),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("OpaquePart"), ToUtf32("OpaquePart"), 0))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("PathSegments"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Segment"), ToUtf32("Segment"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('/'),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Segment"), ToUtf32("Segment"), 0)))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Segment"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("PChar"), ToUtf32("PChar"), 0)),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser(';'),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Param"), ToUtf32("Param"), 0)))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Param"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("PChar"), ToUtf32("PChar"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("PChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Unreserved"), ToUtf32("Unreserved"), 0),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Escaped"), ToUtf32("Escaped"), 0)),
                    new System.Text.Parsing.CharSetParser(ToUtf32(":@&=+$,")))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Query"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("UriC"), ToUtf32("UriC"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Fragment"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("UriC"), ToUtf32("UriC"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("UriC"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Reserved"), ToUtf32("Reserved"), 0),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Unreserved"), ToUtf32("Unreserved"), 0)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Escaped"), ToUtf32("Escaped"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Reserved"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.CharSetParser(ToUtf32(";/?:@&=+$,"))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Unreserved"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("AlphaNum"), ToUtf32("AlphaNum"), 0),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Mark"), ToUtf32("Mark"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Mark"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.CharSetParser(ToUtf32("-_.!~*'()"))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Escaped"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.CharParser('%'),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Hex"), ToUtf32("Hex"), 0)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Hex"), ToUtf32("Hex"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Hex"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0),
                    new System.Text.Parsing.CharSetParser(ToUtf32("a-fA-F")))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("AlphaNum"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Alpha"), ToUtf32("Alpha"), 0),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("AlphaNumOrDash"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("AlphaNum"), ToUtf32("AlphaNum"), 0),
                    new System.Text.Parsing.CharParser('-'))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Alpha"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("LowerAlpha"), ToUtf32("LowerAlpha"), 0),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("UpperAlpha"), ToUtf32("UpperAlpha"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("UpperAlpha"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.CharSetParser(ToUtf32("A-Z"))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("LowerAlpha"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.CharSetParser(ToUtf32("a-z"))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Digit"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.CharSetParser(ToUtf32("0-9"))));
        }
    }
} // System.Net.Http
