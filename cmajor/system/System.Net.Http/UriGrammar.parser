// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Net.Http
{
    grammar UriGrammar
    {
        using stdlib.uint;
        
        UriReference(UriReference* uriReference)
            ::= (AbsoluteUri(uriReference) | RelativeUri(uriReference))? ('#' Fragment{ uriReference->SetFragment(ustring(matchBegin, matchEnd)); })?
            ;
        
        AbsoluteUri(UriReference* uriReference)
            ::= Scheme{ uriReference->SetScheme(ustring(matchBegin, matchEnd)); } ':' (HierPart(uriReference) | OpaquePart)
            ;
        
        RelativeUri(UriReference* uriReference)
            ::= empty{ uriReference->Clear(); } 
                (NetPath(uriReference) | AbsPath{ uriReference->SetPath(ustring(matchBegin, matchEnd)); } | RelPath{ uriReference->SetPath(ustring(matchBegin, matchEnd)); })
                ('?' Query{ uriReference->SetQuery(ustring(matchBegin, matchEnd)); })?
            ;
        
        HierPart(UriReference* uriReference)
            ::= (NetPath(uriReference) | AbsPath{ uriReference->SetPath(ustring(matchBegin, matchEnd)); }) ('?' Query{ uriReference->SetQuery(ustring(matchBegin, matchEnd)); })?
            ;
        
        OpaquePart
            ::= UriCNoSlash UriC*
            ;
        
        UriCNoSlash
            ::= Unreserved | Escaped | [;?:@&=+$,]
            ;
        
        NetPath(UriReference* uriReference)
            ::= "//" Authority(uriReference) (AbsPath{ uriReference->SetPath(ustring(matchBegin, matchEnd)); })?
            ;
        
        AbsPath
            ::= '/' PathSegments
            ;
        
        RelPath
            ::= RelSegment AbsPath?
            ;
        
        RelSegment
            ::= (Unreserved | Escaped | [;@&=+$,])+
            ;
        
        Scheme
            ::= Alpha (Alpha | Digit | [+.-])*
            ;
        
        Authority(UriReference* uriReference)
            ::= Server(uriReference) | RegName{ uriReference->SetHost(u""); uriReference->SetPort(0u); uriReference->SetRegName(ustring(matchBegin, matchEnd)); }
            ;
        
        RegName
            ::= (Unreserved | Escaped | [$,;:@&=+])+
            ;
        
        Server(UriReference* uriReference, var ustring userInfo)
            ::= (UserInfo{ userInfo = ustring(matchBegin, matchEnd); } '@'{ uriReference->SetUserInfo(userInfo); })? HostPort(uriReference)?
            ;
        
        UserInfo
            ::= (Unreserved | Escaped | [;:&=+$,])*
            ;
        
        HostPort(UriReference* uriReference)
            ::= Host{ uriReference->SetHost(ustring(matchBegin, matchEnd)); } (':' Port:port{ uriReference->SetPort(port); })?
            ;
        
        Host
            ::= HostName | IPv4Address
            ;
        
        HostName(var ustring dl)
            ::= (DomainLabel{ dl = ustring(matchBegin, matchEnd); } '.')* (TopLabel '.'? | empty{ char c = cast<char>(dl[0]); if (IsDigit(c)) pass = false; })
            ;
        
        DomainLabel
            ::= (AlphaNumOrDash+){ if (*matchBegin == '-' || matchEnd[-1] == '-') pass = false; }
            ;
        
        TopLabel
            ::= Alpha (AlphaNumOrDash+){ if (matchEnd[-1] == '-') pass = false; } | Alpha
            ;
        
        IPv4Address
            ::= Digit+ '.' Digit+ '.' Digit+ '.' Digit+
            ;
        
        Port : uint
            ::= (uint:port{ value = port; })?
            ;
        
        Path
            ::= (AbsPath | OpaquePart)?
            ;
            
        PathSegments
            ::= Segment ('/' Segment)*
            ;
        
        Segment
            ::= PChar* (';' Param)*
            ;
        
        Param
            ::= PChar*
            ;
        
        PChar
            ::= Unreserved | Escaped | [:@&=+$,]
            ;
        
        Query
            ::= UriC*
            ;
        
        Fragment
            ::= UriC*
            ;
        
        UriC
            ::= Reserved | Unreserved | Escaped
            ;
        
        Reserved
            ::= [;/?:@&=+$,]
            ;
        
        Unreserved
            ::= AlphaNum | Mark
            ;
        
        Mark
            ::= [-_.!~*'()]
            ;
        
        Escaped
            ::= '%' Hex Hex
            ;
        
        Hex
            ::= Digit | [a-fA-F]
            ;
        
        AlphaNum
            ::= Alpha | Digit
            ;
        
        AlphaNumOrDash
            ::= AlphaNum | '-'
            ;
        
        Alpha
            ::= LowerAlpha | UpperAlpha
            ;
        
        UpperAlpha
            ::= [A-Z]
            ;
            
        LowerAlpha
            ::= [a-z]
            ;
        
        Digit 
            ::= [0-9]
            ;
    }        
}
