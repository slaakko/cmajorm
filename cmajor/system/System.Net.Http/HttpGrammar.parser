// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Net.Http
{
    grammar HttpHeaderGrammar
    {
        using HttpGrammar.httpHeader;
        
        header : HttpHeader
            ::= httpHeader{ value = httpHeader; }
            ;
    }
    
    grammar HttpStatusLineGrammar
    {
        using HttpGrammar.statusLine;
        
        status(HttpStatus* httpStatus)
            ::= statusLine(httpStatus)
            ;
    }
    
    grammar HttpChunkHeaderGrammar
    {
        using HttpGrammar.chunkHeader;
        
        header(ulong* chunkSize, ChunkExtensionAdder* adder)
            ::= chunkHeader(chunkSize, adder)
            ;
    }
    
    grammar HttpFieldValueGrammar
    {
        using HttpGrammar.commaSeparatedFieldValue;
        using HttpGrammar.LWS;
        skip LWS;
        
        csvFieldValue(List<HttpFieldValue>* values)
            ::= commaSeparatedFieldValue(values)
            ;
    }
    
    grammar HttpMediaTypeGrammar
    {
        using HttpGrammar.mediaType;
        using HttpGrammar.LWS;
        skip LWS;
        
        mediaTypeValue(MimeType* mediaType)
            ::= mediaType(mediaType)
            ;
    }
    
    grammar HttpDateGrammar
    {
        using HttpGrammar.dateValue;
        
        date(DateTime* date)
            ::= dateValue(date)
            ;
    }
    
    grammar HttpGrammar
    {
        statusLine(HttpStatus* httpStatus)
            ::= (httpVersion SP statusCode SP reasonPhrase){ (*httpStatus) = HttpStatus(httpVersion, statusCode, reasonPhrase); }
            ;
        
        httpVersion : ustring
            ::= ("HTTP" '/' DIGIT+ '.' DIGIT+){ value = ustring(matchBegin, matchEnd); }
            ;
            
        statusCode : ushort
            ::= (DIGIT DIGIT DIGIT){ value = ParseUShort(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;
            
        reasonPhrase : ustring
            ::= ((TEXT - (CR | LF))*){ value = ustring(matchBegin, matchEnd); }
            ;
            
        charset 
            ::= httpToken
            ;
            
        contentCoding
            ::= httpToken
            ;
        
        transferCoding
            ::= "chunked" | transferExtension
            ;
            
        commaSeparatedFieldValue(List<HttpFieldValue>* values)
            ::= generalFieldValue(values) % ','
            ;
            
        generalFieldValue(List<HttpFieldValue>* values, var HttpFieldValue fieldValue)
            ::= (httpToken{ fieldValue.SetFieldValue(httpToken); } (';' generalParameter(&fieldValue))*){ values->Add(fieldValue); }
            ;
            
        generalParameter(HttpFieldValue* fieldValue)
            ::= (attribute ('=' attrval)?){ fieldValue->SetParameter(attribute, attrval); }
            ;
            
        chunkHeader(ulong* chunkSize, ChunkExtensionAdder* adder)
            ::= (hexdigit+){ *chunkSize = ParseHexULong(ToUtf8(ustring(matchBegin, matchEnd))); } chunkExtensions(adder)?
            ;
            
        chunkExtensions(ChunkExtensionAdder* adder)
            ::= (';' (chunkExtName ('=' chunkExtVal)?){ adder->AddChunkExtension(chunkExtName, chunkExtVal); })*
            ;
            
        chunkExtName : ustring
            ::= httpToken{ value = httpToken; }
            ;
            
        chunkExtVal : ustring
            ::= httpToken{ value = httpToken; } | quotedString{ value = quotedString; }
            ;
            
        transferExtension
            ::= httpToken (';' parameter)*
            ;
            
        parameter : Pair<ustring, ustring>
            ::= (attribute '=' attrval){ value = MakePair(attribute, attrval); }
            ;
            
        attribute : ustring
            ::= httpToken{ value = httpToken; }
            ;
            
        attrval : ustring
            ::= httpToken{ value = httpToken; } | quotedString{ value = quotedString; }
            ;
            
        mediaType(MimeType* mediaType)
            ::= (type '/' subtype){ mediaType->SetValue(type, subtype); } (';' parameter{ mediaType->SetParameter(parameter.first, parameter.second); })*
            ;
            
        type : ustring
            ::= httpToken{ value = httpToken; }
            ;
            
        subtype : ustring
            ::= httpToken{ value = httpToken; }
            ;
            
        httpHeader : HttpHeader
            ::= (fieldName ':' fieldValue){ value = HttpHeader(fieldName, fieldValue); }
            ;
            
        fieldName : ustring
            ::= httpToken{ value = httpToken; }
            ;
            
        fieldValue : ustring
            ::= (anychar*){ value = ustring(matchBegin, matchEnd); }
            ;
            
        dateValue(DateTime* date)
            ::= httpDate{ *date = httpDate; }
            ;
            
        httpDate : DateTime
            ::= rfc1123Date{ value = rfc1123Date; } | rfc850Date{ value = rfc850Date; } | asctimeDate{ value = asctimeDate; }
            ;
            
        rfc1123Date : DateTime
            ::= (wkday ',' SP date1 SP time SP "GMT"){ value = DateTime(date1, time); }
            ;
            
        rfc850Date : DateTime
            ::= (weekday "," SP date2 SP time SP "GMT"){ value = DateTime(date2, time); }
            ;
            
        asctimeDate(var Date monthDay) : DateTime
            ::= (wkday SP date3{ monthDay = date3; } SP time SP Year){ value = DateTime(Date(Year, monthDay.GetMonth(), monthDay.Day()), time); }
            ;
                   
        date1 : Date
            ::= (Day SP month SP Year){ value = Date(Year, month, Day); }
            ;
            
        date2 : Date
            ::= (Day '-' month '-' Year2){ value = Date(Year2, month, Day); }
            ;
            
        date3(var Month m, var sbyte d) : Date
            ::= (month{ m = month; } SP (Day{ d = Day; } | Day1{ d = Day1; })){ value = Date(0, m, d); }
            ;

        Year : short
            ::= (DIGIT DIGIT DIGIT DIGIT){ value = ParseShort(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;

        Year2 : short
            ::= (DIGIT DIGIT){ value = 2000 + ParseShort(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;

        Day : sbyte
            ::= (DIGIT DIGIT){ value = ParseSByte(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;
            
        Day1 : sbyte
            ::= SP DIGIT{ value = ParseSByte(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;

        wkday
            ::= "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun"
            ;

        weekday
            ::= "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday"
            ;

        month : Month
            ::= "Jan"{ value = Month.january; } 
            |   "Feb"{ value = Month.february; } 
            |   "Mar"{ value = Month.march; } 
            |   "Apr"{ value = Month.april; } 
            |   "May"{ value = Month.may; }
            |   "Jun"{ value = Month.june; } 
            |   "Jul"{ value = Month.july; }
            |   "Aug"{ value = Month.august; }
            |   "Sep"{ value = Month.september; }
            |   "Oct"{ value = Month.october; }
            |   "Nov"{ value = Month.november; }
            |   "Dec"{ value = Month.december; }
            ;
            
        time : int
            ::= (Hour ':' Min ':' Sec){ value = 3600 * Hour + 60 * Min + Sec; }
            ;

        Hour : int
            ::= (DIGIT DIGIT){ value = ParseInt(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;

        Min : int
            ::= (DIGIT DIGIT){ value = ParseInt(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;

        Sec : int
            ::= (DIGIT DIGIT){ value = ParseInt(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;

        deltaSeconds : int
            ::= (DIGIT+){ value = ParseInt(ToUtf8(ustring(matchBegin, matchEnd))); }
            ;
            
        httpToken : ustring
            ::= ((CHAR - (CTL | sep))+){ value = ustring(matchBegin, matchEnd); }
            ;
        
        sep
            ::= [()<>@,;:\\"/[\]?={}] | SP | HT
            ;
            
        comment
            ::= '(' (ctext | quotedPair | comment)* ')'
            ;

        ctext : uchar
            ::= (TEXT - [()]){ value = *matchBegin; }
            ;
            
        quotedString : ustring
            ::= '"' (qdtext{ value.Append(qdtext); } | quotedPair{ value.Append(quotedPair); })* '"'
            ;
            
        qdtext : uchar
            ::= (TEXT - '"'){ value = *matchBegin; }
            ;
            
        quotedPair : uchar
            ::= '\\' CHAR{ value = CHAR; }
            ;
       
        OCTET
            ::= range(0, 255)
            ;
            
        CHAR : uchar
            ::= range(0, 127){ value = *matchBegin; }
            ;
            
        UPALPHA
            ::= [A-Z]
            ;
            
        LOALPHA
            ::= [a-z]
            ;
            
        ALPHA
            ::= UPALPHA | LOALPHA
            ;
            
        DIGIT
            ::= [0-9]
            ;
            
        CTL
            ::= range(0, 31) | '\d127'
            ;
            
        CR
            ::= '\r'
            ;
            
        LF 
            ::= '\n'
            ;
            
        SP
            ::= ' '
            ;
            
        HT
            ::= '\t'
            ;
            
        QUOTE
            ::= '"'
            ;
            
        CRLF
            ::= CR LF
            ;
            
        LWS
            ::= CRLF? (SP | HT)+
            ;
            
        TEXT
            ::= (OCTET - CTL) | CR | LF | SP | HT
            ;

        HEX
            ::= [A-Fa-f0-9]
            ;
    }
}
