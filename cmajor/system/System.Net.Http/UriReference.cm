// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Net.Http
{
    public class UriException : Exception
    {
        public nothrow UriException(const string& message_) : base(message_)
        {
        }
    }
    
    public class Authority
    {
        public enum Flags : sbyte
        {
            none = 0, hasUserInfo = 1 << 0
        }
        public nothrow Authority() : flags(Flags.none), port(-1)
        {
        }
        public inline nothrow Flags operator|(Flags left, Flags right) const
        {
            return cast<Flags>(cast<sbyte>(left) | cast<sbyte>(right));
        }
        public inline nothrow Flags operator&(Flags left, Flags right) const
        {
            return cast<Flags>(cast<sbyte>(left) & cast<sbyte>(right));
        }
        public inline nothrow Flags operator~(Flags f) const
        {
            return cast<Flags>(~cast<sbyte>(f));
        }
        public inline nothrow bool GetFlag(Flags flag) const
        {
            return (flags & flag) != Flags.none;
        }
        public inline nothrow void SetFlag(Flags flag) 
        {
            flags = cast<Flags>(flags | flag);
        }
        public inline nothrow void ResetFlag(Flags flag)
        {
            flags = cast<Flags>(flags & ~flag);
        }
        public inline nothrow const string& UserInfo() const
        {
            return userInfo;
        }
        public nothrow void SetUserInfo(const string& userInfo_)
        {
            userInfo = userInfo_;
            SetFlag(Flags.hasUserInfo); 
        }
        public inline nothrow const string& Host() const
        {
            return host; 
        }
        public nothrow void SetHost(const string& host_)
        {
            host = host_;
        }
        public inline nothrow int Port() const
        {
            return port;
        }
        public nothrow void SetPort(int port_)
        {
            port = port_;
        }
        public nothrow string ToString() const
        {
            string result;
            if (GetFlag(Flags.hasUserInfo))
            {
                result.Append(userInfo).Append('@');
            }
            result.Append(host);
            if (port != -1)
            {
                result.Append(':').Append(ToString(port));
            }
            return result;
        }
        private Flags flags;
        private string userInfo;
        private string host;
        private int port;
    }
    
    public class UriReference
    {
        public enum Flags : sbyte
        {
            none = 0, asterisk = 1 << 0, hasAuthority = 1 << 1, hasQuery = 1 << 2, hasFragment = 1 << 3
        }
        public nothrow UriReference()
        {
        }
        public UriReference(const string& uri)
        {
            UriLexer lexer(ToUtf32(uri), "", 0);
            UriReference that = Uri.Parse(lexer);
            Swap(flags, that.flags);
            Swap(scheme, that.scheme);
            Swap(authority, that.authority);
            Swap(path, that.path);
            Swap(query, that.query);
            Swap(fragment, that.fragment);
        }
        public nothrow inline bool IsAbsolute() const
        {
            return !scheme.IsEmpty();
        }
        public nothrow inline bool IsRelative() const
        {
            return !IsAbsolute();
        }
        public static UriReference Combine(const UriReference& baseUri, const UriReference& relativeUri)
        {
            if (!baseUri.IsAbsolute())
            {
                throw UriException("base URI not absolute");
            }
            if (relativeUri.IsAbsolute())
            {
                return relativeUri;
            }
            string basePath = "/";
            if (!baseUri.Path().IsEmpty())
            {
                if (baseUri.Path().StartsWith("/"))
                {
                    basePath = baseUri.Path();
                }
                else
                {
                    basePath = "/" + baseUri.Path();
                }
            }
            UriReference combined;
            combined.SetFlags(baseUri.GetFlags());
            combined.SetScheme(baseUri.Scheme());
            if (baseUri.GetFlag(Flags.hasAuthority))
            {
                combined.SetAuthority(baseUri.GetAuthority());
            }            
            combined.SetPath(GetFullNetPath(CombineNetPath(basePath, relativeUri.Path())));
            if (relativeUri.GetFlag(Flags.hasQuery))
            {
                combined.SetQuery(relativeUri.Query());
            }
            if (relativeUri.GetFlag(Flags.hasFragment))
            {
                combined.SetFragment(relativeUri.Fragment());
            }
            return combined;
        }
        public string ToString() const
        {
            if (GetFlag(Flags.asterisk))
            {
                return "*";
            }
            else
            {
                string result;
                if (!scheme.IsEmpty())
                {
                    result.Append(scheme).Append(':');
                    if (GetFlag(Flags.hasAuthority))
                    {
                        result.Append(authority.ToString());
                    }
                }
                result.Append(path);
                if (GetFlag(Flags.hasQuery))
                {
                    result.Append('?').Append(query);
                }
                if (GetFlag(Flags.hasFragment))
                {
                    result.Append('#').Append(fragment);
                }
                return result;
            }
        }
        public nothrow inline Flags GetFlags() const
        {
            return flags;
        }
        public nothrow inline void SetFlags(Flags flags_)
        {
            flags = flags_;
        }
        public nothrow inline bool GetFlag(Flags flag) const
        {
            return cast<Flags>(cast<sbyte>(flags) & cast<sbyte>(flag)) != Flags.none;
        }
        public nothrow inline void SetFlag(Flags flag)
        {
            flags = cast<Flags>(cast<sbyte>(flags) | cast<sbyte>(flag));
        }
        public nothrow inline void ResetFlag(Flags flag)
        {
            flags = cast<Flags>(cast<sbyte>(flags) & ~cast<sbyte>(flag));
        }
        public inline nothrow const string& Scheme() const
        {
            return scheme;
        }
        public nothrow void SetScheme(const string& scheme_)
        {
            scheme = scheme_;
        }
        public inline nothrow const Authority& GetAuthority() const
        {
            return authority;
        }
        public nothrow void SetAuthority(const Authority& authority_)
        {
            authority = authority_;
            SetFlag(Flags.hasAuthority);
        }
        public inline nothrow const string& Path() const
        {
            return path;
        }
        public nothrow void SetPath(const string& path_)
        {
            path = path_;
        }
        public inline nothrow const string& Query() const
        {
            return query; 
        }
        public nothrow void SetQuery(const string& query_)
        {
            query = query_;
            SetFlag(Flags.hasQuery);
        }
        public inline nothrow const string& Fragment() const
        {
            return fragment; 
        }
        public nothrow void SetFragment(const string& fragment_)
        {
            fragment = fragment_;
            SetFlag(Flags.hasFragment);
        }
        private Flags flags;
        private string scheme;
        private Authority authority;
        private string path;
        private string query;
        private string fragment;
    }

    public nothrow string CombineNetPath(const string& left, const string& right)
    {
        string combined;
        if (left.IsEmpty())
        {
            combined = right;
        }
        else if (right.IsEmpty())
        {
            combined = left;
        }
        else
        {
            if (right.StartsWith("/"))
            {
                combined = right;
            }
            else
            {
                combined.Append(left);
                if (!left.EndsWith("/"))
                {
                    combined.Append('/');
                }
                combined.Append(right);
            }
        }
        return combined;
    }

    public string GetFullNetPath(const string& path)
    {
        List<string> components = path.Split('/');
        long w = 0;
        long n = components.Count();
        for (long i = 0; i < n; ++i)
        {
            string c = components[i];
            if (i == 0 || !c.IsEmpty() && c != ".")
            {
                if (c == "..")
                {
                    --w;
                    if (w < 0)
                    {
                        throw UriException("invalid path '" + path + "'");
                    }
                }
                else
                {
                    if (w != i)
                    {
                        components[w] = components[i];
                    }
                    ++w;
                }
            }
        }
        if (w == 0)
        {
            return "/";
        }
        else
        {
            string result;
            for (long i = 0; i < w; ++i)
            {
                if (i != 0)
                {
                    result.Append('/');
                }
                result.Append(components[i]);
            }
            if (result.IsEmpty())
            {
                return "/";
            }
            else
            {
                return result;
            }            
        }
    }

/*                                
    public class UriReference
    {
        public nothrow UriReference()
        {
        }
        public UriReference(const ustring& uri)
        {
            TrivialLexer lexer(uri, "", 0);
            UriParser.Parse(lexer, this);
        }
        public static UriReference Combine(const UriReference& baseUri, const UriReference& relativeUri)
        {
            if (!baseUri.IsAbsolute())
            {
                throw UriException("base URI not absolute");
            }
            if (relativeUri.IsAbsolute())
            {
                return relativeUri;
            }
            ustring basePath = u"/";
            if (!baseUri.Path().IsEmpty())
            {
                if (baseUri.Path().StartsWith(u"/"))
                {
                    basePath = baseUri.Path();
                }
                else
                {
                    basePath = u"/" + baseUri.Path();
                }
            }
            UriReference combined;
            combined.SetScheme(baseUri.Scheme());
            combined.SetUserInfo(baseUri.UserInfo());
            combined.SetHost(baseUri.Host());
            combined.SetPort(baseUri.Port());
            combined.SetPath(GetFullNetPath(CombineNetPath(basePath, relativeUri.Path())));
            combined.SetQuery(relativeUri.Query());
            combined.SetFragment(relativeUri.Fragment());
            return combined;
        }
        public ustring ToString() const
        {
            if (asterisk)
            {
                return u"*";
            }
            else
            {
                ustring result;
                if (!scheme.IsEmpty())
                {
                    result.Append(scheme).Append(u"://");
                    if (host.IsEmpty())
                    {
                        if (!regName.IsEmpty())
                        {
                            result.Append(regName);
                        }
                    }
                    else
                    {
                        if (!userInfo.IsEmpty())
                        {
                            result.Append(userInfo).Append(u'@');
                        }
                        if (!host.IsEmpty())
                        {
                            result.Append(host);
                            if (port != 0u)
                            {
                                result.Append(u':').Append(ToUtf32(ToString(port)));
                            }
                        }
                    }
                }
                if (!path.IsEmpty())
                {
                    result.Append(path);
                }
                if (!query.IsEmpty())
                {
                    result.Append(u'?').Append(query);
                }
                if (!fragment.IsEmpty())
                {
                    result.Append(u'#').Append(fragment);
                }
                return result;
            }
        }
        public bool IsAbsolute() const
        {
            return !scheme.IsEmpty() && !Authority().IsEmpty() && !path.IsEmpty();
        }
        public bool IsRelative() const
        {
            return !IsAbsolute();
        }
        public nothrow inline bool Asterisk() const
        {
            return asterisk;
        }
        public nothrow inline void SetAsterisk(bool asterisk_)
        {
            asterisk = asterisk_;
        }
        public nothrow inline const ustring& Scheme() const
        {
            return scheme;
        }
        public nothrow inline void SetScheme(const ustring& scheme_)
        {
            scheme = scheme_;
        }
        public nothrow inline const ustring& UserInfo() const
        {
            return userInfo;
        }
        public nothrow inline void SetUserInfo(const ustring& userInfo_)
        {
            userInfo = userInfo_;
        }
        public nothrow inline const ustring& Host() const
        {
            return host;
        }
        public nothrow inline void SetHost(const ustring& host_)
        {
            host = host_;
        }
        public nothrow inline uint Port() const
        {
            return port;
        }
        public nothrow inline void SetPort(uint port_)
        {
            port = port_;
        }
        public nothrow inline const ustring& RegName() const
        {
            return regName;
        }
        public nothrow inline void SetRegName(const ustring& regName_) const
        {
            regName = regName_;
        }
        public ustring Authority() const
        {
            if (host.IsEmpty())
            {
                return regName;
            }
            else
            {
                ustring s;
                if (!userInfo.IsEmpty())
                {
                    s.Append(userInfo).Append('@');
                }
                if (!host.IsEmpty())
                {
                    s.Append(host);
                    if (port != 0u)
                    {
                        s.Append(':').Append(ToUtf32(ToString(port)));
                    }
                }
                return s;
            }
        }
        public nothrow inline const ustring& Path() const
        {
            return path;
        }
        public nothrow inline void SetPath(const ustring& path_)
        {
            path = path_;
        }
        public nothrow inline const ustring& Query() const
        {
            return query;
        }
        public nothrow inline void SetQuery(const ustring& query_)
        {
            query = query_;
        }
        public nothrow inline const ustring& Fragment() const
        {
            return fragment;
        }
        public nothrow inline void SetFragment(const ustring& fragment_)
        {
            fragment = fragment_;
        }
        public nothrow void Clear()
        {
            asterisk = false;
            scheme.Clear();
            userInfo.Clear();
            host.Clear();
            port = 0u;
            regName.Clear();
            path.Clear();
            query.Clear();
            fragment.Clear();
        }
        private bool asterisk;
        private ustring scheme;
        private ustring userInfo;
        private ustring host;
        private uint port;
        private ustring regName;
        private ustring path;
        private ustring query;
        private ustring fragment;
    }
    
    public ustring CombineNetPath(const ustring& path1, const ustring& path2)
    {
        if (path1.IsEmpty())
        {
            return path2;
        }
        else if (path2.IsEmpty())
        {
            return path1;
        }
        else
        {
            if (path2.StartsWith(u"/"))
            {
                return path2;
            }
            else
            {
                ustring result = path1;
                if (!path1.EndsWith(u"/"))
                {
                    result.Append(u'/');
                }
                result.Append(path2);
                return result;
            }
        }
    }
*/    
}
