// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Net.Http
{
    public class MediaType
    {
        public nothrow MediaType() : name()
        {
        }
        public nothrow MediaType(const string& name_) : name(name_)
        {
        }
        public default virtual ~MediaType();
        public nothrow inline const string& Name() const
        {
            return name;
        }
        public nothrow void SetName(const string& name_) 
        {
            name = name_;
        }
        private string name;
    }
    
    public class AnyMediaType : MediaType
    {
        public nothrow AnyMediaType() : base("*")
        {
        }
    }
    
    public class Subtype 
    {
        public nothrow Subtype() : name()
        {
        }
        public nothrow Subtype(const string& name_) : name(name_)
        {
        }
        public default virtual ~Subtype();
        public nothrow inline const string& Name() const
        {
            return name;
        }
        public nothrow void SetName(const string& name_) 
        {
            name = name_;
        }
        private string name;
    }
    
    public class AnySubtype : Subtype
    {
        public nothrow AnySubtype() : base("*")
        {
        }
    }
    
    public class TextMediaType : MediaType
    {
        public nothrow TextMediaType() : base("text")
        {
        }
    }
    
    public class PlainSubtype : Subtype
    {
        public nothrow PlainSubtype() : base("plain")
        {
        }
    }
    
    public class ImageMediaType : MediaType
    {
        public nothrow ImageMediaType() : base("image")
        {
        }
    }
    
    public class JpegSubtype : Subtype
    {
        public nothrow JpegSubtype() : base("jpeg")
        {
        }
    }
    
    public class AudioMediaType : MediaType
    {
        public nothrow AudioMediaType() : base("audio")
        {
        }
    }
    
    public class BasicSubtype : Subtype
    {
        public BasicSubtype() : base("basic")
        {
        }
    }
    
    public class VideoMediaType : MediaType
    {
        public nothrow VideoMediaType() : base("video")
        {
        }
    }
    
    public class MpegSubtype : Subtype
    {
        public nothrow MpegSubtype() : base("mpeg")
        {
        }
    }
    
    public class ApplicationMediaType : MediaType
    {
        public nothrow ApplicationMediaType() : base("application")
        {
        }
    }
    
    public class OctetStreamSubtype : Subtype
    {
        public nothrow OctetStreamSubtype() : base("octet-stream")
        {
        }
    }
    
    public class PostScriptSubtype : Subtype
    {
        public nothrow PostScriptSubtype() : base("postscript")
        {
        }
    }
    
    public class MultipartMediaType : MediaType
    {
        public nothrow MultipartMediaType() : base("multipart")
        {
        }
    }
    
    public class MessageMediaType : MediaType
    {
        public nothrow MessageMediaType() : base("message")
        {
        }
    }
    
    public class Rfc822Subtype : Subtype
    {
        public nothrow Rfc822Subtype() : base("rfc822")
        {
        }
    }
    
    public class PartialSubtype : Subtype
    {
        public nothrow PartialSubtype() : base("partial")
        {
        }
    }
    
    public class ExternalBodySubtype : Subtype
    {
        public nothrow ExternalBodySubtype() : base("external-body")
        {
        }
    }
    
    public class MimeType
    {
        public MimeType() : mediaType(new AnyMediaType()), subtype(new AnySubtype())
        {
        }
        public MimeType(UniquePtr<MediaType>&& mediaType_) : mediaType(mediaType_), subtype(new AnySubtype())
        {
        }
        public MimeType(UniquePtr<MediaType>&& mediaType_, UniquePtr<Subtype>&& subtype_) : mediaType(mediaType_), subtype(subtype_)
        {
        }
        public nothrow inline MediaType* GetMediaType() const 
        {
            return mediaType.Get();
        }
        public nothrow inline Subtype* GetSubtype() const
        {
            return subtype.Get();
        }
        public void SetValue(const string& mediaType_, const string& subtype_)
        {
            mediaType.Reset(new MediaType(mediaType_));
            subtype.Reset(new Subtype(subtype_));
        }
        public nothrow inline const Map<string, string>& Parameters() const
        {
            return parameters;
        }
        public string GetParameter(const string& paramName) const
        {
            Map<string, string>.ConstIterator it = parameters.CFind(paramName);
            if (it != parameters.CEnd())
            {
                return it->second;
            }
            return string();
        }
        public void SetParameter(const string& paramName, const string& paramValue)
        {
            parameters[paramName] = paramValue;
        }    
        public string ToString() const
        {
            if (parameters.IsEmpty())
            {
                return mediaType->Name() + "/" + subtype->Name();
            }
            else
            {
                string s = mediaType->Name() + "/" + subtype->Name();
                for (const Pair<string, string>& p : parameters)
                {
                    string paramValue = p.second;
                    if (paramValue.Find('"') != -1)
                    {
                        paramValue = MakeStringLiteral(paramValue);
                    }
                    s.Append(';').Append(p.first).Append('=').Append(paramValue);
                }
                return s;
            }
        }
        private UniquePtr<MediaType> mediaType;
        private UniquePtr<Subtype> subtype;
        private Map<string, string> parameters;
    }
    
    public class MediaRange 
    {
        public MediaRange() : mimeType(), quality(1)
        {
        }
        public MediaRange(MimeType&& mimeType_) : mimeType(mimeType_), quality(1)
        {
        }
        public Map<string, string>& Params() 
        {
            return params;
        }
        public HttpFieldValue ToHttpFieldValue() const
        {
            if (quality == 1 && params.IsEmpty())
            {
                return HttpFieldValue(mimeType.ToString());
            }
            else
            {
                HttpFieldValue fieldValue(mimeType.ToString());
                if (quality != 1)
                {
                    fieldValue.SetParameter("q", ToString(quality, 3));
                }
                for (const Pair<string, string>& p : params)
                {
                    fieldValue.SetParameter(p.first, p.second);
                }
                return fieldValue;
            }
        }
        private MimeType mimeType;
        private double quality;
        private Map<string, string> params;
    }
}

