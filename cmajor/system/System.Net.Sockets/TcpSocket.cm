// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Net.Sockets
{
    public enum ShutdownMode : int
    {
        receive = 0, send = 1, both = 2
    }
    
    public enum ConnectOptions : int
    {
        none = 0, useTls = 1 << 0
    }
    
    public class SocketException : Exception
    {
        public nothrow SocketException(const string& message_) : base(message_)
        {
        }
    }

    public class TcpSocket
    {
        public TcpSocket() : handle(null), connected(false), shutdown(false)
        {
            int errorStringHandle = -1;
            handle = RtCreateSocket(errorStringHandle);
            if (handle == null)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
        }
        public TcpSocket(const string& node, const string& service, ConnectOptions options) : handle(null), connected(false), shutdown(false)
        {
            int errorStringHandle = -1;
            handle = RtConnectSocket(node.Chars(), service.Chars(), cast<int>(options), errorStringHandle);
            if (handle == null)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
            else
            {
                connected = true;
            }            
        }
        public TcpSocket(const string& node, const string& service) : this(node, service, ConnectOptions.none)
        {
        }
        public nothrow TcpSocket(void* handle_) : handle(handle_), connected(true), shutdown(false)
        {
        }
        suppress TcpSocket(const TcpSocket&);
        suppress void operator=(const TcpSocket&);
        public nothrow TcpSocket(TcpSocket&& that) : handle(that.handle), connected(that.connected), shutdown(that.shutdown)
        {
            that.handle = null;
            that.connected = false;
            that.shutdown = false;
        }
        public nothrow void operator=(TcpSocket&& that) 
        {
            Swap(handle, that.handle);
            Swap(connected, that.connected);
            Swap(shutdown, that.shutdown);
        }
        public ~TcpSocket()
        {
            if (handle != null)
            {
                if (connected && !shutdown)
                {
                    try
                    {
                        Shutdown(ShutdownMode.both);
                    }                
                    catch (const Exception& ex)
                    {
                    }                
                }
                if (connected)
                {
                    int errorStringHandle = -1;
                    RtCloseSocket(handle, errorStringHandle);
                }
                RtDestroySocket(handle);
            }
        }
        public void Close()
        {
            if (handle != null)
            {
                if (connected && !shutdown)
                {
                    Shutdown(ShutdownMode.both);
                }
                int errorStringHandle = -1;
                if (!RtCloseSocket(handle, errorStringHandle))
                {
                    string errorMessage = RtGetError(errorStringHandle);
                    RtDisposeError(errorStringHandle);
                    throw SocketException(errorMessage);
                }
                handle = null;
                connected = false;
            }
        }
        public void Connect(const string& node, const string& service) 
        {
            Connect(node, service, ConnectOptions.none);
        }
        public void Connect(const string& node, const string& service, ConnectOptions options)
        {
            Close();
            int errorStringHandle = -1;
            handle = RtConnectSocket(node.Chars(), service.Chars(), cast<int>(options), errorStringHandle);
            if (handle == null)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
            else
            {
                connected = true;                
            }
        }
        public void Bind(int port)
        {
            int errorStringHandle = -1;
            if (!RtBindSocket(handle, port, errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
        }
        public void Listen(int backLog)
        {
            int errorStringHandle = -1;
            if (!RtListenSocket(handle, backLog, errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
        }
        public TcpSocket Accept()
        {
            int errorStringHandle = -1;
            void* acceptedHandle = RtAcceptSocket(handle, errorStringHandle);
            if (acceptedHandle == null)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
            return TcpSocket(acceptedHandle);
        }
        public void Shutdown(ShutdownMode mode)
        {
            shutdown = true;
            int errorStringHandle = -1;
            if (!RtShutdownSocket(handle, cast<int>(mode), errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
        }
        public int Send(byte* buffer, int count)
        {
            int errorStringHandle = -1;
            int result = RtSendSocket(handle, buffer, count, 0, errorStringHandle);
            if (result < 0)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
            return result;
        }
        public int Receive(byte* buffer, int count)
        {
            int errorStringHandle = -1;
            int result = RtReceiveSocket(handle, buffer, count, 0, errorStringHandle);
            if (result < 0)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw SocketException(errorMessage);
            }
            return result;
        }
        private void* handle;
        private bool connected;
        private bool shutdown;
    }

    public void Write(TcpSocket& socket, const string& str)
    {
        int size = cast<int>(str.Length());
        byte[4] buffer;
        MemoryWriter writer(&buffer[0], 4);
        writer.Write(size);
        int bytesToSend = 4;
        int offset = 0;
        while (bytesToSend > 0)
        {
            int bytesSent = socket.Send(&buffer[0] + offset, bytesToSend);
            bytesToSend = bytesToSend - bytesSent;
            offset = offset + bytesSent;
        }
        byte* p = cast<byte*>(cast<void*>(str.Chars()));
        int count = size;
        while (count > 0)
        {
            int bytesSent = socket.Send(p, count);
            p = p + bytesSent;
            count = count - bytesSent;
        }
    }

    public string ReadStr(TcpSocket& socket)
    {
        byte[4] buffer;
        int bytesToReceive = 4;
        int offset = 0;
        int bytesReceived = socket.Receive(&buffer[offset], bytesToReceive);
        if (bytesReceived == 0)
        {
            return string();
        }
        bytesToReceive = bytesToReceive - bytesReceived;
        offset = offset + bytesReceived;
        while (bytesToReceive > 0)
        {
            bytesReceived = socket.Receive(&buffer[offset], bytesToReceive);
            if (bytesReceived == 0)
            {
                return string();
            }
            bytesToReceive = bytesToReceive - bytesReceived;
            offset = offset + bytesReceived;
        }
        MemoryReader reader(&buffer[0], 4);
        int size = reader.ReadInt();
        if (size == 0)
        {
            return string();
        }
        UniquePtr<byte> mem(cast<byte*>(MemAlloc(size)));
        offset = 0;
        bytesToReceive = size;
        bytesReceived = socket.Receive(mem.Get() + offset, bytesToReceive);
        if (bytesReceived == 0)
        {
            return string();
        }
        bytesToReceive = bytesToReceive - bytesReceived;
        offset = offset + bytesReceived;
        while (bytesToReceive > 0)
        {
            bytesReceived = socket.Receive(mem.Get() + offset, bytesToReceive);
            if (bytesReceived == 0)
            {
                return string();
            }
            bytesToReceive = bytesToReceive - bytesReceived;
            offset = offset + bytesReceived;
        }
        string s(cast<const char*>(cast<void*>(mem.Get())), size);
        return s;
    }
}
