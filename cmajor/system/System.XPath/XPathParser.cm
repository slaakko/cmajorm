using System;
using System.Collections;
using System.Lex;
using System.Parsing;
using XPathTokens;

public static class XPathParser
{
    public static UniquePtr<System.XPath.XPathExpr> Parse(XPathLexer& lexer)
    {
        UniquePtr<System.XPath.XPathExpr> value;
        #if (DEBUG)
            if (lexer.Log() != null)
            {
                lexer.Log()->WriteBeginRule(u"parse");
                lexer.Log()->IncIndent();
            }
        #endif
        ++lexer;
        System.Lex.Span span = lexer.GetSpan();
        Match match = Expr(lexer);
        value.Reset(cast<System.XPath.XPathExpr*>(match.value));
        #if (DEBUG)
            if (lexer.Log() != null)
            {
                lexer.Log()->DecIndent();
                lexer.Log()->WriteEndRule(u"parse");
            }
        #endif
        if (match.hit)
        {
            if (*lexer == System.Lex.END_TOKEN)
            {
                return value;
            }
            else
            {
                lexer.ThrowExpectationFailure(lexer.GetSpan(), GetEndTokenInfo());
            }
        }
        else
        {
            lexer.ThrowExpectationFailure(span, u"Expr");
        }
        return value;
    }
    public static Match Expr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Expr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> orExpr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match = XPathParser.OrExpr(lexer);
            orExpr.Reset(cast<System.XPath.XPathExpr*>(match.value));
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Expr");
                    #endif
                    return Match(true, orExpr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Expr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Expr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match OrExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"OrExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        UniquePtr<System.XPath.XPathExpr> left;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.AndExpr(lexer);
                        left.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == NAME)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    Token token = lexer.GetToken(pos);
                                                    pass = lexer.GetKeywordToken(token.match) == OR;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match = XPathParser.AndExpr(lexer);
                                                    right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                    if (match.hit)
                                                    {
                                                        expr.Reset(new System.XPath.XPathOrExpr(expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"OrExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"OrExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"OrExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AndExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AndExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        UniquePtr<System.XPath.XPathExpr> left;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.EqualityExpr(lexer);
                        left.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == NAME)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    Token token = lexer.GetToken(pos);
                                                    pass = lexer.GetKeywordToken(token.match) == AND;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match = XPathParser.EqualityExpr(lexer);
                                                    right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                    if (match.hit)
                                                    {
                                                        expr.Reset(new System.XPath.XPathAndExpr(expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AndExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AndExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AndExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match EqualityExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"EqualityExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        System.XPath.Operator op;
        UniquePtr<System.XPath.XPathExpr> left;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.RelationalExpr(lexer);
                        left.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Match match(false);
                                                        if (*lexer == EQ)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            op = System.XPath.Operator.equal;
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Match match(false);
                                                                if (*lexer == NEQ)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    op = System.XPath.Operator.notEqual;
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch13 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match(true);
                                                    Match* parentMatch15 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = XPathParser.RelationalExpr(lexer);
                                                        right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch15 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"RelationalExpr");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case System.XPath.Operator.equal: expr.Reset(new System.XPath.XPathEqualExpr(expr.Release(), right.Release()));
                                                            break;
                                                            case System.XPath.Operator.notEqual: expr.Reset(new System.XPath.XPathNotEqualExpr(expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EqualityExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EqualityExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"EqualityExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match RelationalExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"RelationalExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        System.XPath.Operator op;
        UniquePtr<System.XPath.XPathExpr> left;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.AdditiveExpr(lexer);
                        left.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long save = lexer.GetPos();
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        {
                                                            long save = lexer.GetPos();
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Match match(false);
                                                                if (*lexer == LEQ)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    op = System.XPath.Operator.lessOrEqual;
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                            if (!match.hit)
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch13 = &match;
                                                                lexer.SetPos(save);
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch14 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        Match match(false);
                                                                        if (*lexer == GEQ)
                                                                        {
                                                                            ++lexer;
                                                                            match.hit = true;
                                                                        }
                                                                        if (match.hit)
                                                                        {
                                                                            op = System.XPath.Operator.greaterOrEqual;
                                                                        }
                                                                        *parentMatch14 = match;
                                                                    }
                                                                    *parentMatch13 = match;
                                                                }
                                                                *parentMatch11 = match;
                                                            }
                                                        }
                                                        *parentMatch10 = match;
                                                        if (!match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch15 = &match;
                                                            lexer.SetPos(save);
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch16 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    Match match(false);
                                                                    if (*lexer == LESS)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        op = System.XPath.Operator.less;
                                                                    }
                                                                    *parentMatch16 = match;
                                                                }
                                                                *parentMatch15 = match;
                                                            }
                                                            *parentMatch10 = match;
                                                        }
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch17 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch18 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Match match(false);
                                                                if (*lexer == GREATER)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    op = System.XPath.Operator.greater;
                                                                }
                                                                *parentMatch18 = match;
                                                            }
                                                            *parentMatch17 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch19 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch20 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match(true);
                                                    Match* parentMatch21 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = XPathParser.AdditiveExpr(lexer);
                                                        right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch21 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"AdditiveExpr");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case System.XPath.Operator.lessOrEqual: expr.Reset(new System.XPath.XPathLessOrEqualExpr(expr.Release(), right.Release()));
                                                            break;
                                                            case System.XPath.Operator.greaterOrEqual: expr.Reset(new System.XPath.XPathGreaterOrEqualExpr(expr.Release(), right.Release()));
                                                            break;
                                                            case System.XPath.Operator.less: expr.Reset(new System.XPath.XPathLessExpr(expr.Release(), right.Release()));
                                                            break;
                                                            case System.XPath.Operator.greater: expr.Reset(new System.XPath.XPathGreaterExpr(expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch20 = match;
                                                }
                                                *parentMatch19 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"RelationalExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"RelationalExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"RelationalExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AdditiveExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AdditiveExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        System.XPath.Operator op;
        UniquePtr<System.XPath.XPathExpr> left;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.MultiplicativeExpr(lexer);
                        left.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Match match(false);
                                                        if (*lexer == PLUS)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            op = System.XPath.Operator.plus;
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Match match(false);
                                                                if (*lexer == MINUS)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    op = System.XPath.Operator.minus;
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch13 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match(true);
                                                    Match* parentMatch15 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = XPathParser.MultiplicativeExpr(lexer);
                                                        right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch15 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"MultiplicativeExpr");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case System.XPath.Operator.plus: expr.Reset(new System.XPath.XPathAddExpr(expr.Release(), right.Release()));
                                                            break;
                                                            case System.XPath.Operator.minus: expr.Reset(new System.XPath.XPathSubExpr(expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AdditiveExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AdditiveExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AdditiveExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match MultiplicativeExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"MultiplicativeExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        System.XPath.Operator op;
        UniquePtr<System.XPath.XPathExpr> left;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.UnaryExpr(lexer);
                        left.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Match match(false);
                                                        if (*lexer == STAR)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            op = System.XPath.Operator.mul;
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                bool pass = true;
                                                                Match match(false);
                                                                if (*lexer == NAME)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    Token token = lexer.GetToken(pos);
                                                                    switch (lexer.GetKeywordToken(token.match))
                                                                    {
                                                                        case DIV: op = System.XPath.Operator.div;
                                                                        break;
                                                                        case MOD: op = System.XPath.Operator.mod;
                                                                        break;
                                                                        default: pass = false;
                                                                        break;
                                                                    }
                                                                }
                                                                if (match.hit && !pass)
                                                                {
                                                                    match = Match(false);
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch13 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match(true);
                                                    Match* parentMatch15 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = XPathParser.UnaryExpr(lexer);
                                                        right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch15 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"UnaryExpr");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case System.XPath.Operator.mul: expr.Reset(new System.XPath.XPathMulExpr(expr.Release(), right.Release()));
                                                            break;
                                                            case System.XPath.Operator.div: expr.Reset(new System.XPath.XPathDivExpr(expr.Release(), right.Release()));
                                                            break;
                                                            case System.XPath.Operator.mod: expr.Reset(new System.XPath.XPathModExpr(expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"MultiplicativeExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"MultiplicativeExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"MultiplicativeExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match UnaryExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"UnaryExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> subject;
        UniquePtr<System.XPath.XPathExpr> unionExpr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                if (*lexer == MINUS)
                {
                    ++lexer;
                    match.hit = true;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.UnaryExpr(lexer);
                        subject.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnaryExpr");
                                #endif
                                return Match(true, new System.XPath.XPathUnaryMinusExpr(subject.Release()));
                            }
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch4 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch5 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.UnionExpr(lexer);
                        unionExpr.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnaryExpr");
                                #endif
                                return Match(true, unionExpr.Release());
                            }
                        }
                        *parentMatch5 = match;
                    }
                    *parentMatch4 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnaryExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"UnaryExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match UnionExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"UnionExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        UniquePtr<System.XPath.XPathExpr> left;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.PathExpr(lexer);
                        left.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            if (*lexer == UNION)
                                            {
                                                ++lexer;
                                                match.hit = true;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match = XPathParser.PathExpr(lexer);
                                                    right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                    if (match.hit)
                                                    {
                                                        expr.Reset(new System.XPath.XPathUnionExpr(expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch9 = match;
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnionExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnionExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"UnionExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match PathExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"PathExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        System.XPath.Operator op;
        UniquePtr<System.XPath.XPathExpr> locationPath;
        UniquePtr<System.XPath.XPathExpr> functionCall;
        UniquePtr<System.XPath.XPathExpr> filterExpr;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long pos = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    long save = lexer.GetPos();
                    {
                        Match match = XPathParser.LocationPath(lexer);
                        locationPath.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            long tmp = lexer.GetPos();
                            lexer.SetPos(save);
                            save = tmp;
                            Match match = XPathParser.FunctionCall(lexer);
                            functionCall.Reset(cast<System.XPath.XPathExpr*>(match.value));
                            *parentMatch4 = match;
                        }
                        if (!match.hit)
                        {
                            lexer.SetPos(save);
                        }
                        *parentMatch3 = Match(!match.hit, match.value);
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PathExpr");
                        #endif
                        return Match(true, locationPath.Release());
                    }
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch5 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch6 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match(false);
                        Match* parentMatch7 = &match;
                        {
                            Match match(false);
                            Match* parentMatch8 = &match;
                            {
                                Match match(false);
                                Match* parentMatch9 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match = XPathParser.FilterExpr(lexer);
                                    filterExpr.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                    if (match.hit)
                                    {
                                        expr.Reset(filterExpr.Release());
                                    }
                                    *parentMatch9 = match;
                                }
                                *parentMatch8 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch10 = &match;
                                {
                                    Match match(true);
                                    long save = lexer.GetPos();
                                    Match* parentMatch11 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch12 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch13 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    Match match(false);
                                                    Match* parentMatch15 = &match;
                                                    {
                                                        long save = lexer.GetPos();
                                                        Match match(false);
                                                        Match* parentMatch16 = &match;
                                                        {
                                                            long pos = lexer.GetPos();
                                                            Match match(false);
                                                            if (*lexer == SLASHSLASH)
                                                            {
                                                                ++lexer;
                                                                match.hit = true;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                op = System.XPath.Operator.slashSlash;
                                                            }
                                                            *parentMatch16 = match;
                                                        }
                                                        *parentMatch15 = match;
                                                        if (!match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch17 = &match;
                                                            lexer.SetPos(save);
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch18 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    Match match(false);
                                                                    if (*lexer == SLASH)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        op = System.XPath.Operator.slash;
                                                                    }
                                                                    *parentMatch18 = match;
                                                                }
                                                                *parentMatch17 = match;
                                                            }
                                                            *parentMatch15 = match;
                                                        }
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            if (match.hit)
                                            {
                                                Match match(false);
                                                Match* parentMatch19 = &match;
                                                {
                                                    Match match(false);
                                                    Match* parentMatch20 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Match match = XPathParser.RelativeLocationPath(lexer);
                                                        right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            switch (op)
                                                            {
                                                                case System.XPath.Operator.slashSlash: 
                                                                {
                                                                    {
                                                                        #if (DEBUG)
                                                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PathExpr");
                                                                        #endif
                                                                        return Match(true, new System.XPath.XPathCombineStepExpr(expr.Release(), new System.XPath.XPathCombineStepExpr(new System.XPath.XPathLocationStepExpr(System.Dom.Axis.descendantOrSelf, new System.XPath.XPathAnyNodeTest()), right.Release())));
                                                                    }
                                                                }
                                                                case System.XPath.Operator.slash: 
                                                                {
                                                                    {
                                                                        #if (DEBUG)
                                                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PathExpr");
                                                                        #endif
                                                                        return Match(true, new System.XPath.XPathCombineStepExpr(expr.Release(), right.Release()));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        *parentMatch20 = match;
                                                    }
                                                    *parentMatch19 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            *parentMatch12 = match;
                                        }
                                        if (match.hit)
                                        {
                                            *parentMatch11 = match;
                                        }
                                        else
                                        {
                                            lexer.SetPos(save);
                                        }
                                    }
                                    *parentMatch10 = match;
                                }
                                *parentMatch8 = match;
                            }
                            *parentMatch7 = match;
                        }
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PathExpr");
                                #endif
                                return Match(true, expr.Release());
                            }
                        }
                        *parentMatch6 = match;
                    }
                    *parentMatch5 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PathExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"PathExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match FilterExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"FilterExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        UniquePtr<System.XPath.XPathExpr> primaryExpr;
        UniquePtr<System.XPath.XPathExpr> predicate;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.PrimaryExpr(lexer);
                        primaryExpr.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(primaryExpr.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Match match = XPathParser.Predicate(lexer);
                                            predicate.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                            if (match.hit)
                                            {
                                                expr.Reset(new System.XPath.XPathFilterExpr(expr.Release(), predicate.Release()));
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"FilterExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"FilterExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"FilterExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match LocationPath(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"LocationPath");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> absoluteLocationPath;
        UniquePtr<System.XPath.XPathExpr> relativeLocationPath;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long pos = lexer.GetPos();
                Match match = XPathParser.AbsoluteLocationPath(lexer);
                absoluteLocationPath.Reset(cast<System.XPath.XPathExpr*>(match.value));
                if (match.hit)
                {
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"LocationPath");
                        #endif
                        return Match(true, absoluteLocationPath.Release());
                    }
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch2 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.RelativeLocationPath(lexer);
                        relativeLocationPath.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"LocationPath");
                                #endif
                                return Match(true, relativeLocationPath.Release());
                            }
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"LocationPath");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"LocationPath");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AbsoluteLocationPath(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AbsoluteLocationPath");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        UniquePtr<System.XPath.XPathExpr> abbreviatedAbsoluteLocationPath;
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long save = lexer.GetPos();
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.AbbreviatedAbsoluteLocationPath(lexer);
                        abbreviatedAbsoluteLocationPath.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(abbreviatedAbsoluteLocationPath.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                    if (!match.hit)
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        lexer.SetPos(save);
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match(false);
                                    if (*lexer == SLASH)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        expr.Reset(new System.XPath.XPathRootNodeExpr());
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch7 = &match;
                                {
                                    Match match(true);
                                    long save = lexer.GetPos();
                                    Match* parentMatch8 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch9 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch10 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                Match match = XPathParser.RelativeLocationPath(lexer);
                                                right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                if (match.hit)
                                                {
                                                    expr.Reset(new System.XPath.XPathCombineStepExpr(expr.Release(), right.Release()));
                                                }
                                                *parentMatch10 = match;
                                            }
                                            *parentMatch9 = match;
                                        }
                                        if (match.hit)
                                        {
                                            *parentMatch8 = match;
                                        }
                                        else
                                        {
                                            lexer.SetPos(save);
                                        }
                                    }
                                    *parentMatch7 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch2 = match;
                    }
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbsoluteLocationPath");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbsoluteLocationPath");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AbsoluteLocationPath");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AbbreviatedAbsoluteLocationPath(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AbbreviatedAbsoluteLocationPath");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            if (*lexer == SLASHSLASH)
            {
                ++lexer;
                match.hit = true;
            }
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long pos = lexer.GetPos();
                    Match match = XPathParser.RelativeLocationPath(lexer);
                    right.Reset(cast<System.XPath.XPathExpr*>(match.value));
                    if (match.hit)
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedAbsoluteLocationPath");
                            #endif
                            return Match(true, new System.XPath.XPathCombineStepExpr(new System.XPath.XPathRootNodeExpr(), new System.XPath.XPathCombineStepExpr(new System.XPath.XPathLocationStepExpr(System.Dom.Axis.descendantOrSelf, new System.XPath.XPathAnyNodeTest()), right.Release())));
                        }
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedAbsoluteLocationPath");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AbbreviatedAbsoluteLocationPath");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match RelativeLocationPath(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"RelativeLocationPath");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        System.XPath.Operator op;
        UniquePtr<System.XPath.XPathLocationStepExpr> left;
        UniquePtr<System.XPath.XPathLocationStepExpr> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.Step(lexer);
                        left.Reset(cast<System.XPath.XPathLocationStepExpr*>(match.value));
                        if (match.hit)
                        {
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Match match(false);
                                                        if (*lexer == SLASHSLASH)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            op = System.XPath.Operator.slashSlash;
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Match match(false);
                                                                if (*lexer == SLASH)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    op = System.XPath.Operator.slash;
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch13 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Match match = XPathParser.Step(lexer);
                                                    right.Reset(cast<System.XPath.XPathLocationStepExpr*>(match.value));
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case System.XPath.Operator.slashSlash: 
                                                            {
                                                                expr.Reset(new System.XPath.XPathCombineStepExpr(expr.Release(), new System.XPath.XPathCombineStepExpr(new System.XPath.XPathLocationStepExpr(System.Dom.Axis.descendantOrSelf, new System.XPath.XPathAnyNodeTest()), right.Release())));
                                                                break;
                                                            }
                                                            case System.XPath.Operator.slash: 
                                                            {
                                                                expr.Reset(new System.XPath.XPathCombineStepExpr(expr.Release(), right.Release()));
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"RelativeLocationPath");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"RelativeLocationPath");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"RelativeLocationPath");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Step(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Step");
            }
        #endif
        UniquePtr<System.XPath.XPathLocationStepExpr> expr;
        UniquePtr<Value<System.Dom.Axis>> axis;
        UniquePtr<System.XPath.XPathNodeTestExpr> nodeTest;
        UniquePtr<System.XPath.XPathExpr> predicate;
        UniquePtr<System.XPath.XPathLocationStepExpr> abbreviatedStep;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long save = lexer.GetPos();
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match = XPathParser.AxisSpecifier(lexer);
                            axis.Reset(cast<Value<System.Dom.Axis>*>(match.value));
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match = XPathParser.NodeTest(lexer);
                                    nodeTest.Reset(cast<System.XPath.XPathNodeTestExpr*>(match.value));
                                    if (match.hit)
                                    {
                                        expr.Reset(new System.XPath.XPathLocationStepExpr(axis->value, nodeTest.Release()));
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch7 = &match;
                        {
                            Match match(true);
                            Match* parentMatch8 = &match;
                            {
                                while (true)
                                {
                                    long save = lexer.GetPos();
                                    {
                                        Match match(false);
                                        Match* parentMatch9 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch10 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                Match match = XPathParser.Predicate(lexer);
                                                predicate.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                if (match.hit)
                                                {
                                                    expr->AddPredicate(predicate.Release());
                                                }
                                                *parentMatch10 = match;
                                            }
                                            *parentMatch9 = match;
                                        }
                                        if (match.hit)
                                        {
                                            *parentMatch8 = match;
                                        }
                                        else
                                        {
                                            lexer.SetPos(save);
                                            break;
                                        }
                                    }
                                }
                            }
                            *parentMatch7 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                    if (!match.hit)
                    {
                        Match match(false);
                        Match* parentMatch11 = &match;
                        lexer.SetPos(save);
                        {
                            Match match(false);
                            Match* parentMatch12 = &match;
                            {
                                long pos = lexer.GetPos();
                                Match match = XPathParser.AbbreviatedStep(lexer);
                                abbreviatedStep.Reset(cast<System.XPath.XPathLocationStepExpr*>(match.value));
                                if (match.hit)
                                {
                                    expr.Reset(abbreviatedStep.Release());
                                }
                                *parentMatch12 = match;
                            }
                            *parentMatch11 = match;
                        }
                        *parentMatch2 = match;
                    }
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Step");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Step");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Step");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AxisSpecifier(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AxisSpecifier");
            }
        #endif
        UniquePtr<Value<System.Dom.Axis>> axis;
        UniquePtr<Value<System.Dom.Axis>> abbreviatedAxisSpecifier;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match = XPathParser.AxisName(lexer);
                axis.Reset(cast<Value<System.Dom.Axis>*>(match.value));
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match(false);
                        if (*lexer == COLONCOLON)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisSpecifier");
                                #endif
                                return Match(true, new Value<System.Dom.Axis>(axis->value));
                            }
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch4 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch5 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.AbbreviatedAxisSpecifier(lexer);
                        abbreviatedAxisSpecifier.Reset(cast<Value<System.Dom.Axis>*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisSpecifier");
                                #endif
                                return Match(true, new Value<System.Dom.Axis>(abbreviatedAxisSpecifier->value));
                            }
                        }
                        *parentMatch5 = match;
                    }
                    *parentMatch4 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisSpecifier");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AxisSpecifier");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AxisName(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AxisName");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            bool pass = true;
            Match match(false);
            if (*lexer == NAME)
            {
                ++lexer;
                match.hit = true;
            }
            if (match.hit)
            {
                Token token = lexer.GetToken(pos);
                switch (lexer.GetKeywordToken(token.match))
                {
                    case ANCESTOR: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.ancestor));
                        }
                    }
                    case ANCESTOR_OR_SELF: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.ancestorOrSelf));
                        }
                    }
                    case ATTRIBUTE: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.attribute));
                        }
                    }
                    case CHILD: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.child));
                        }
                    }
                    case DESCENDANT: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.descendant));
                        }
                    }
                    case DESCENDANT_OR_SELF: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.descendantOrSelf));
                        }
                    }
                    case FOLLOWING: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.following));
                        }
                    }
                    case FOLLOWING_SIBLING: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.followingSibling));
                        }
                    }
                    case NAMESPACE: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.ns));
                        }
                    }
                    case PARENT: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.parent));
                        }
                    }
                    case PRECEDING: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.preceding));
                        }
                    }
                    case PRECEDING_SIBLING: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.precedingSibling));
                        }
                    }
                    case SELF: 
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                            #endif
                            return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.self));
                        }
                    }
                    default: 
                    {
                        pass = false;
                        break;
                    }
                }
            }
            if (match.hit && !pass)
            {
                match = Match(false);
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AxisName");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AxisName");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AbbreviatedAxisSpecifier(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AbbreviatedAxisSpecifier");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long pos = lexer.GetPos();
                Match match(false);
                if (*lexer == AT)
                {
                    ++lexer;
                    match.hit = true;
                }
                if (match.hit)
                {
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedAxisSpecifier");
                        #endif
                        return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.attribute));
                    }
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch2 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match(true);
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedAxisSpecifier");
                                #endif
                                return Match(true, new Value<System.Dom.Axis>(System.Dom.Axis.child));
                            }
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedAxisSpecifier");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AbbreviatedAxisSpecifier");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match NodeTest(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"NodeTest");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> pi;
        UniquePtr<System.XPath.XPathNodeTestExpr> nodeType;
        UniquePtr<System.XPath.XPathNodeTestExpr> nameTest;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long save = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                long pos = lexer.GetPos();
                                bool pass = true;
                                Match match(false);
                                if (*lexer == NAME)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                if (match.hit)
                                {
                                    Token token = lexer.GetToken(pos);
                                    pass = lexer.GetKeywordToken(token.match) == PROCESSING_INSTRUCTION;
                                }
                                if (match.hit && !pass)
                                {
                                    match = Match(false);
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch6 = &match;
                            {
                                Match match(false);
                                if (*lexer == LPAREN)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                *parentMatch6 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch7 = &match;
                        {
                            Match match = XPathParser.Literal(lexer);
                            pi.Reset(cast<System.XPath.XPathExpr*>(match.value));
                            *parentMatch7 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch8 = &match;
                    {
                        Match match(false);
                        Match* parentMatch9 = &match;
                        {
                            long pos = lexer.GetPos();
                            Match match(false);
                            if (*lexer == RPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                {
                                    #if (DEBUG)
                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeTest");
                                    #endif
                                    return Match(true, new System.XPath.XPathPILiteralTest(pi.Release()));
                                }
                            }
                            *parentMatch9 = match;
                        }
                        *parentMatch8 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
                if (!match.hit)
                {
                    Match match(false);
                    Match* parentMatch10 = &match;
                    lexer.SetPos(save);
                    {
                        Match match(false);
                        Match* parentMatch11 = &match;
                        {
                            Match match(false);
                            Match* parentMatch12 = &match;
                            {
                                Match match = XPathParser.NodeType(lexer);
                                nodeType.Reset(cast<System.XPath.XPathNodeTestExpr*>(match.value));
                                *parentMatch12 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch13 = &match;
                                {
                                    Match match(false);
                                    if (*lexer == LPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    *parentMatch13 = match;
                                }
                                *parentMatch12 = match;
                            }
                            *parentMatch11 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch14 = &match;
                            {
                                Match match(false);
                                Match* parentMatch15 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match(false);
                                    if (*lexer == RPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        {
                                            #if (DEBUG)
                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeTest");
                                            #endif
                                            return Match(true, nodeType.Release());
                                        }
                                    }
                                    *parentMatch15 = match;
                                }
                                *parentMatch14 = match;
                            }
                            *parentMatch11 = match;
                        }
                        *parentMatch10 = match;
                    }
                    *parentMatch1 = match;
                }
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch16 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch17 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.NameTest(lexer);
                        nameTest.Reset(cast<System.XPath.XPathNodeTestExpr*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeTest");
                                #endif
                                return Match(true, nameTest.Release());
                            }
                        }
                        *parentMatch17 = match;
                    }
                    *parentMatch16 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeTest");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"NodeTest");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match NodeType(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"NodeType");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            bool pass = true;
            Match match(false);
            if (*lexer == NAME)
            {
                ++lexer;
                match.hit = true;
            }
            if (match.hit)
            {
                Token token = lexer.GetToken(pos);
                switch (lexer.GetKeywordToken(token.match))
                {
                    case COMMENT: 
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeType");
                        #endif
                        return Match(true, new System.XPath.XPathCommentNodeTest());
                    }
                    case TEXT: 
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeType");
                        #endif
                        return Match(true, new System.XPath.XPathTextNodeTest());
                    }
                    case PROCESSING_INSTRUCTION: 
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeType");
                        #endif
                        return Match(true, new System.XPath.XPathPINodeTest());
                    }
                    case NODE: 
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeType");
                        #endif
                        return Match(true, new System.XPath.XPathAnyNodeTest());
                    }
                    default: 
                    {
                        pass = false;
                        break;
                    }
                }
            }
            if (match.hit && !pass)
            {
                match = Match(false);
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NodeType");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"NodeType");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match NameTest(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"NameTest");
            }
        #endif
        UniquePtr<Value<ustring>> ncname;
        UniquePtr<Value<ustring>> qname;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long save = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long pos = lexer.GetPos();
                    Match match(false);
                    if (*lexer == STAR)
                    {
                        ++lexer;
                        match.hit = true;
                    }
                    if (match.hit)
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NameTest");
                            #endif
                            return Match(true, new System.XPath.XPathPrincipalNodeTest());
                        }
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
                if (!match.hit)
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    lexer.SetPos(save);
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match = XPathParser.NCName(lexer);
                                ncname.Reset(cast<Value<ustring>*>(match.value));
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    Match match(false);
                                    if (*lexer == COLON)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch7 = &match;
                            {
                                Match match(false);
                                Match* parentMatch8 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match(false);
                                    if (*lexer == STAR)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        {
                                            #if (DEBUG)
                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NameTest");
                                            #endif
                                            return Match(true, new System.XPath.XPathPrefixTest(ncname->value));
                                        }
                                    }
                                    *parentMatch8 = match;
                                }
                                *parentMatch7 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch1 = match;
                }
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch9 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch10 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.QName(lexer);
                        qname.Reset(cast<Value<ustring>*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NameTest");
                                #endif
                                return Match(true, new System.XPath.XPathNameTest(qname->value));
                            }
                        }
                        *parentMatch10 = match;
                    }
                    *parentMatch9 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NameTest");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"NameTest");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match AbbreviatedStep(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"AbbreviatedStep");
            }
        #endif
        Match match(false);
        long pos = lexer.GetPos();
        Span span = lexer.GetSpan();
        switch (*lexer)
        {
            case DOTDOT: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedStep");
                    #endif
                    return Match(true, new System.XPath.XPathLocationStepExpr(System.Dom.Axis.parent, new System.XPath.XPathAnyNodeTest()));
                }
                break;
            }
            case DOT: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedStep");
                    #endif
                    return Match(true, new System.XPath.XPathLocationStepExpr(System.Dom.Axis.self, new System.XPath.XPathAnyNodeTest()));
                }
                break;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"AbbreviatedStep");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"AbbreviatedStep");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Literal(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Literal");
            }
        #endif
        Match match(false);
        long pos = lexer.GetPos();
        Span span = lexer.GetSpan();
        switch (*lexer)
        {
            case DQSTRING: 
            {
                ++lexer;
                Token token = lexer.GetToken(pos);
                ustring str = System.XPath.ParseDQString(lexer.FileName(), token);
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Literal");
                    #endif
                    return Match(true, new System.XPath.XPathLiteral(str));
                }
                break;
            }
            case SQSTRING: 
            {
                ++lexer;
                Token token = lexer.GetToken(pos);
                ustring str = System.XPath.ParseSQString(lexer.FileName(), token);
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Literal");
                    #endif
                    return Match(true, new System.XPath.XPathLiteral(str));
                }
                break;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Literal");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Literal");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Number(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Number");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            if (*lexer == NUMBER)
            {
                ++lexer;
                match.hit = true;
            }
            if (match.hit)
            {
                Token token = lexer.GetToken(pos);
                ustring str = token.match.ToString();
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Number");
                    #endif
                    return Match(true, new System.XPath.XPathNumberExpr(str));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Number");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Number");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Predicate(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Predicate");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        if (*lexer == LBRACKET)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match = XPathParser.PredicateExpr(lexer);
                            expr.Reset(cast<System.XPath.XPathExpr*>(match.value));
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch5 = &match;
                    {
                        Match match(false);
                        if (*lexer == RBRACKET)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        *parentMatch5 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Predicate");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Predicate");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Predicate");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match PredicateExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"PredicateExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match = XPathParser.Expr(lexer);
            expr.Reset(cast<System.XPath.XPathExpr*>(match.value));
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PredicateExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PredicateExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"PredicateExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match PrimaryExpr(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"PrimaryExpr");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> functionCall;
        UniquePtr<System.XPath.XPathExpr> variableReference;
        UniquePtr<System.XPath.XPathExpr> expr;
        UniquePtr<System.XPath.XPathExpr> literal;
        UniquePtr<System.XPath.XPathExpr> number;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long save = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long save = lexer.GetPos();
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long save = lexer.GetPos();
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            long pos = lexer.GetPos();
                            Match match = XPathParser.FunctionCall(lexer);
                            functionCall.Reset(cast<System.XPath.XPathExpr*>(match.value));
                            if (match.hit)
                            {
                                {
                                    #if (DEBUG)
                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrimaryExpr");
                                    #endif
                                    return Match(true, functionCall.Release());
                                }
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                        if (!match.hit)
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            lexer.SetPos(save);
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match = XPathParser.VariableReference(lexer);
                                    variableReference.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                    if (match.hit)
                                    {
                                        {
                                            #if (DEBUG)
                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrimaryExpr");
                                            #endif
                                            return Match(true, variableReference.Release());
                                        }
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch3 = match;
                        }
                    }
                    *parentMatch2 = match;
                    if (!match.hit)
                    {
                        Match match(false);
                        Match* parentMatch7 = &match;
                        lexer.SetPos(save);
                        {
                            Match match(false);
                            Match* parentMatch8 = &match;
                            {
                                long pos = lexer.GetPos();
                                Match match(false);
                                Match* parentMatch9 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch10 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch11 = &match;
                                        {
                                            Match match(false);
                                            if (*lexer == LPAREN)
                                            {
                                                ++lexer;
                                                match.hit = true;
                                            }
                                            *parentMatch11 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch12 = &match;
                                            {
                                                Match match = XPathParser.Expr(lexer);
                                                expr.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                *parentMatch12 = match;
                                            }
                                            *parentMatch11 = match;
                                        }
                                        *parentMatch10 = match;
                                    }
                                    if (match.hit)
                                    {
                                        Match match(false);
                                        Match* parentMatch13 = &match;
                                        {
                                            Match match(false);
                                            if (*lexer == RPAREN)
                                            {
                                                ++lexer;
                                                match.hit = true;
                                            }
                                            *parentMatch13 = match;
                                        }
                                        *parentMatch10 = match;
                                    }
                                    *parentMatch9 = match;
                                }
                                if (match.hit)
                                {
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrimaryExpr");
                                        #endif
                                        return Match(true, expr.Release());
                                    }
                                }
                                *parentMatch8 = match;
                            }
                            *parentMatch7 = match;
                        }
                        *parentMatch2 = match;
                    }
                }
                *parentMatch1 = match;
                if (!match.hit)
                {
                    Match match(false);
                    Match* parentMatch14 = &match;
                    lexer.SetPos(save);
                    {
                        Match match(false);
                        Match* parentMatch15 = &match;
                        {
                            long pos = lexer.GetPos();
                            Match match = XPathParser.Literal(lexer);
                            literal.Reset(cast<System.XPath.XPathExpr*>(match.value));
                            if (match.hit)
                            {
                                {
                                    #if (DEBUG)
                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrimaryExpr");
                                    #endif
                                    return Match(true, literal.Release());
                                }
                            }
                            *parentMatch15 = match;
                        }
                        *parentMatch14 = match;
                    }
                    *parentMatch1 = match;
                }
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch16 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch17 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.Number(lexer);
                        number.Reset(cast<System.XPath.XPathExpr*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrimaryExpr");
                                #endif
                                return Match(true, number.Release());
                            }
                        }
                        *parentMatch17 = match;
                    }
                    *parentMatch16 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrimaryExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"PrimaryExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match VariableReference(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"VariableReference");
            }
        #endif
        UniquePtr<Value<ustring>> qname;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    if (*lexer == DOLLAR)
                    {
                        ++lexer;
                        match.hit = true;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match = XPathParser.QName(lexer);
                        qname.Reset(cast<Value<ustring>*>(match.value));
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"VariableReference");
                    #endif
                    return Match(true, new System.XPath.XPathVariableReference(qname->value));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"VariableReference");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"VariableReference");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match FunctionCall(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"FunctionCall");
            }
        #endif
        UniquePtr<System.XPath.XPathFunctionCall> functionCall;
        UniquePtr<Value<ustring>> functionName;
        UniquePtr<System.XPath.XPathExpr> arg;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match = XPathParser.FunctionName(lexer);
                            functionName.Reset(cast<Value<ustring>*>(match.value));
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match(false);
                                    if (*lexer == LPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        functionCall.Reset(new System.XPath.XPathFunctionCall(functionName->value));
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch7 = &match;
                        {
                            Match match(true);
                            long save = lexer.GetPos();
                            Match* parentMatch8 = &match;
                            {
                                Match match(false);
                                Match* parentMatch9 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch10 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch11 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Match match = XPathParser.Argument(lexer);
                                            arg.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                            if (match.hit)
                                            {
                                                functionCall->AddArgument(arg.Release());
                                            }
                                            *parentMatch11 = match;
                                        }
                                        *parentMatch10 = match;
                                    }
                                    if (match.hit)
                                    {
                                        Match match(false);
                                        Match* parentMatch12 = &match;
                                        {
                                            Match match(true);
                                            Match* parentMatch13 = &match;
                                            {
                                                while (true)
                                                {
                                                    long save = lexer.GetPos();
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch14 = &match;
                                                        {
                                                            Match match(false);
                                                            if (*lexer == COMMA)
                                                            {
                                                                ++lexer;
                                                                match.hit = true;
                                                            }
                                                            *parentMatch14 = match;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch15 = &match;
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch16 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    Match match = XPathParser.Argument(lexer);
                                                                    arg.Reset(cast<System.XPath.XPathExpr*>(match.value));
                                                                    if (match.hit)
                                                                    {
                                                                        functionCall->AddArgument(arg.Release());
                                                                    }
                                                                    *parentMatch16 = match;
                                                                }
                                                                *parentMatch15 = match;
                                                            }
                                                            *parentMatch14 = match;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            *parentMatch13 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.SetPos(save);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            *parentMatch12 = match;
                                        }
                                        *parentMatch10 = match;
                                    }
                                    *parentMatch9 = match;
                                }
                                if (match.hit)
                                {
                                    *parentMatch8 = match;
                                }
                                else
                                {
                                    lexer.SetPos(save);
                                }
                            }
                            *parentMatch7 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch17 = &match;
                    {
                        Match match(false);
                        if (*lexer == RPAREN)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        *parentMatch17 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"FunctionCall");
                    #endif
                    return Match(true, functionCall.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"FunctionCall");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"FunctionCall");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match FunctionName(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"FunctionName");
            }
        #endif
        UniquePtr<Value<ustring>> qname;
        UniquePtr<System.XPath.XPathNodeTestExpr> nodeType;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                long save = lexer.GetPos();
                {
                    Match match = XPathParser.QName(lexer);
                    qname.Reset(cast<Value<ustring>*>(match.value));
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long tmp = lexer.GetPos();
                        lexer.SetPos(save);
                        save = tmp;
                        Match match = XPathParser.NodeType(lexer);
                        nodeType.Reset(cast<System.XPath.XPathNodeTestExpr*>(match.value));
                        *parentMatch3 = match;
                    }
                    if (!match.hit)
                    {
                        lexer.SetPos(save);
                    }
                    *parentMatch2 = Match(!match.hit, match.value);
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"FunctionName");
                    #endif
                    return Match(true, new Value<ustring>(qname->value));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"FunctionName");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"FunctionName");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Argument(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Argument");
            }
        #endif
        UniquePtr<System.XPath.XPathExpr> expr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match = XPathParser.Expr(lexer);
            expr.Reset(cast<System.XPath.XPathExpr*>(match.value));
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Argument");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Argument");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Argument");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match QName(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"QName");
            }
        #endif
        UniquePtr<Value<ustring>> prefixedName;
        UniquePtr<Value<ustring>> unprefixedName;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long pos = lexer.GetPos();
                Match match = XPathParser.PrefixedName(lexer);
                prefixedName.Reset(cast<Value<ustring>*>(match.value));
                if (match.hit)
                {
                    {
                        #if (DEBUG)
                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"QName");
                        #endif
                        return Match(true, new Value<ustring>(prefixedName->value));
                    }
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch2 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = XPathParser.UnprefixedName(lexer);
                        unprefixedName.Reset(cast<Value<ustring>*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"QName");
                                #endif
                                return Match(true, new Value<ustring>(unprefixedName->value));
                            }
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"QName");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"QName");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match PrefixedName(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"PrefixedName");
            }
        #endif
        UniquePtr<Value<ustring>> prefix;
        UniquePtr<Value<ustring>> localPart;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match = XPathParser.Prefix(lexer);
                        prefix.Reset(cast<Value<ustring>*>(match.value));
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            if (*lexer == COLON)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch5 = &match;
                    {
                        Match match = XPathParser.LocalPart(lexer);
                        localPart.Reset(cast<Value<ustring>*>(match.value));
                        *parentMatch5 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrefixedName");
                    #endif
                    return Match(true, new Value<ustring>(prefix->value + u":" + localPart->value));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"PrefixedName");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"PrefixedName");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Prefix(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Prefix");
            }
        #endif
        UniquePtr<Value<ustring>> ncname;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match = XPathParser.NCName(lexer);
            ncname.Reset(cast<Value<ustring>*>(match.value));
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                    #endif
                    return Match(true, new Value<ustring>(ncname->value));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Prefix");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match UnprefixedName(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"UnprefixedName");
            }
        #endif
        UniquePtr<Value<ustring>> localPart;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match = XPathParser.LocalPart(lexer);
            localPart.Reset(cast<Value<ustring>*>(match.value));
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnprefixedName");
                    #endif
                    return Match(true, new Value<ustring>(localPart->value));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnprefixedName");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"UnprefixedName");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match LocalPart(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"LocalPart");
            }
        #endif
        UniquePtr<Value<ustring>> ncname;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match = XPathParser.NCName(lexer);
            ncname.Reset(cast<Value<ustring>*>(match.value));
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"LocalPart");
                    #endif
                    return Match(true, new Value<ustring>(ncname->value));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"LocalPart");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"LocalPart");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match NCName(XPathLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"NCName");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            if (*lexer == NAME)
            {
                ++lexer;
                match.hit = true;
            }
            if (match.hit)
            {
                Token token = lexer.GetToken(pos);
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NCName");
                    #endif
                    return Match(true, new Value<ustring>(token.match.ToString()));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NCName");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"NCName");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
}
