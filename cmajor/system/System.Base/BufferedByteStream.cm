// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public class IOBuffer
    {
        public nothrow IOBuffer(long size_) : size(size_), mem(null)
        {
        #if (MEM_DEBUG)
            mem = MemAlloc(size, typename(*this));
        #else
            mem = MemAlloc(size);
        #endif
        }
        suppress IOBuffer(const IOBuffer&);
        suppress void operator=(const IOBuffer&);
        public nothrow IOBuffer(IOBuffer&& that): size(that.size), mem(that.mem)
        {
            that.size = 0;
            that.mem = null;
        }
        public nothrow default void operator=(IOBuffer&& that);
        public ~IOBuffer()
        {
            if (mem != null)
            {
                MemFree(mem);
            }
        }
        public nothrow inline long Size() const
        {
            return size;
        }
        public nothrow inline void* Mem() const
        {
            return mem;
        }
        public inline byte operator[](long index) const
        {
            if (index < 0 || index >= size)
            {
                ThrowIndexOutOfBoundsException();
            }
            return cast<byte*>(mem)[index];
        }
        public nothrow inline byte& operator[](long index)
        {
            return cast<byte*>(mem)[index];
        }
        private long size;
        private void* mem;
    }

    public class BufferedByteStream : ByteStream
    {
        public nothrow BufferedByteStream(const SharedPtr<ByteStream>& baseStream_) : this(baseStream_, 4096)
        {
        }
        public nothrow BufferedByteStream(const SharedPtr<ByteStream>& baseStream_, long bufferSize_) :
            baseStream(baseStream_), buffer(bufferSize_), pos(buffer.Size()), bytesAvailable(0), end(0)
        {
        }
        suppress BufferedByteStream(const BufferedByteStream&);
        suppress void operator=(const BufferedByteStream&);
        public override ~BufferedByteStream()
        {
            try
            {
                if (!baseStream.IsNull())
                {
                    Flush();
                }
            }
            catch (const Exception&)
            {
            }
        }
        public override int ReadByte()
        {
            Flush();
            if (bytesAvailable == 0)
            {
                FillBuf();
                if (bytesAvailable == 0)
                {
                    return -1;
                }
            }
            byte value = buffer[pos++];
            --bytesAvailable;
            return value;
        }
        public override long Read(byte* buf, long count)
        {
            if (count < 0)
            {
                ThrowInvalidParameterException();
            }
            Flush();
            if (bytesAvailable == 0)
            {
                FillBuf();
            }
            long bytesRead = 0;
            long n = Min(bytesAvailable, count);
            for (long i = 0; i < n; ++i)
            {
                buf[i] = buffer[pos++];
                ++bytesRead;
                --bytesAvailable;
            }
            return bytesRead;
        }
        public override void Write(byte x)
        {
            if (end >= buffer.Size())
            {
                Flush();
            }
            buffer[end++] = x;
        }
        public override void Write(byte* buf, long count)
        {
            if (count < 0)
            {
                ThrowInvalidParameterException();
            }
            for (long i = 0; i < count; ++i)
            {
                Write(buf[i]);
            }
        }
        public override void Flush()
        {
            if (end != 0)
            {
                baseStream->Write(cast<byte*>(buffer.Mem()), end);
                baseStream->Flush();
                end = 0;
            }
        }
        public override void Seek(long pos, Origin origin)
        {
            Flush();
            bytesAvailable = 0;
            baseStream->Seek(pos, origin);
        }
        public override long Tell()
        {
            Flush();
            return baseStream->Tell() - bytesAvailable;
        }
        public nothrow const SharedPtr<ByteStream>& ContainedStream()
        {
            return baseStream;
        }
        private void FillBuf()
        {
            bytesAvailable = baseStream->Read(cast<byte*>(buffer.Mem()), buffer.Size());
            pos = 0;
        }
        private SharedPtr<ByteStream> baseStream;
        private IOBuffer buffer;
        private long pos;
        private long bytesAvailable;
        private long end;
    }
}
