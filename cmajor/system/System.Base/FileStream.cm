// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public const int stdin = 0;
    public const int stdout = 1;
    public const int stderr = 2;

    public enum OpenMode : byte
    {
        none = 0u,
        read = 1u << 0u,
        write = 1u << 1u,
        append = 1u << 2u,
        binary = 1u << 3u
    }

    public class FileSystemException : Exception
    {
        public nothrow FileSystemException(const string& message_) : base(message_)
        {
        }
    }

    public class IOBuffer
    {
        public nothrow IOBuffer(long size_) : size(size_), mem(null)
        {
        #if (MEM_DEBUG)
            mem = MemAlloc(size, typename(*this));
        #else
            mem = MemAlloc(size);
        #endif
        }
        suppress IOBuffer(const IOBuffer&);
        suppress void operator=(const IOBuffer&);
        public nothrow IOBuffer(IOBuffer&& that): size(that.size), mem(that.mem)
        {
            that.size = 0;
            that.mem = null;
        }
        public nothrow default void operator=(IOBuffer&& that);
        public ~IOBuffer()
        {
            if (mem != null)
            {
                MemFree(mem);
            }            
        }
        public nothrow inline long Size() const 
        {
            return size;
        }
        public nothrow inline void* Mem() const
        {
            return mem;
        }
        public nothrow inline byte operator[](long index) const
        {
            #assert(index >= 0 && index < size);
            return cast<byte*>(mem)[index];
        }
        public nothrow inline byte& operator[](long index) 
        {
            return cast<byte*>(mem)[index];
        }
        private long size;
        private void* mem;
    }

    public class InputFileStream : InputStream
    {
        public nothrow InputFileStream() : this(stdin)
        {
        }
        public nothrow InputFileStream(int fileHandle_) : this(fileHandle_, defaultBufferSize)
        {
        }
        public nothrow InputFileStream(int fileHandle_, long bufferSize_) : buffer(bufferSize_), pos(null), end(null), filePath(), fileHandle(fileHandle_), opened(false), endOfStream(false)
        {
        }
        public InputFileStream(const string& filePath_) : this(-1, defaultBufferSize)
        {
            Open(filePath_, OpenMode.read);
        }
        public InputFileStream(const string& filePath_, long bufferSize_) : this(-1, bufferSize_)
        {
            Open(filePath_, OpenMode.read);
        }
        public InputFileStream(const string& filePath_, long bufferSize_, OpenMode openMode_) : this(-1, bufferSize_)
        {
            Open(filePath_, openMode_);
        }
        suppress InputFileStream(const InputFileStream&);
        suppress void operator=(const InputFileStream&);
        public nothrow InputFileStream(InputFileStream&& that) : 
            buffer(Rvalue(that.buffer)), filePath(Rvalue(that.filePath)), fileHandle(that.fileHandle), opened(that.opened), endOfStream(that.endOfStream)
        {
            that.fileHandle = -1;
            that.opened = false;
            that.pos = null;
            that.end = null;
            that.endOfStream = false;
        }
        public nothrow default void operator=(InputFileStream&&);
        public override ~InputFileStream()
        {
            if (opened)
            {
                try
                {
                    Close();
                }
                catch (const Exception&)
                {
                }
            }
        }
        public void Open(const string& filePath_, OpenMode openMode)
        {
            if (opened)
            {
                Close();
            }
            filePath = filePath_;
            if (filePath.IsEmpty())
            {
                throw FileSystemException("provided file name is empty");
            }
            int result = RtOpen(filePath.Chars(), openMode);
            if (result < 0)
            {
                string errorMessage = RtGetError(result);
                RtDisposeError(result);
                throw FileSystemException(errorMessage);
            }
            else
            {
                fileHandle = result;
            }
            opened = true;
        }
        public void Close()
        {
            if (opened)
            {
                opened = false;
                int result = RtClose(fileHandle);
                if (result < 0)
                {
                    string errorMessage = RtGetError(result);
                    RtDisposeError(result);
                    throw FileSystemException(errorMessage);
                }
                fileHandle = -1;
            }
            else
            {
                throw FileSystemException("file not opened");
            }
        }
        public override int Read()
        {
            return RtReadByte(fileHandle);
        }
        public override string ReadLine()
        {
            string line;
            int x = RtReadByte(fileHandle);
            bool prevWasCR = false;
            while (x != -1 && cast<char>(x) != '\n')
            {
                char c = cast<char>(x);
                if (c == '\r')
                {
                    if (prevWasCR)
                    {
                        line.Append(c);
                    }
                    prevWasCR = true;
                }
                else
                {
                    if (prevWasCR)
                    {
                        line.Append('\r');
                        prevWasCR = false;
                    }
                    line.Append(c);
                }                
                x = RtReadByte(fileHandle);
            }
            endOfStream = x == -1;
            return line;
        }
        public override string ReadToEnd()
        {
            string content;
            while (!endOfStream)
            {
                long result = RtRead(fileHandle, buffer.Mem(), buffer.Size());
                if (result < 0)
                {
                    int res = cast<int>(result);
                    string errorMessage = RtGetError(res);
                    RtDisposeError(res);
                    throw FileSystemException(errorMessage);
                }
                else if (result == 0)
                {
                    endOfStream = true;
                }
                else
                {
                    content.Append(cast<const char*>(buffer.Mem()), result);
                }
            }
            return content;
        }
        public nothrow override bool EndOfStream() const
        {
            return endOfStream;
        }
        public nothrow inline const string& FilePath() const
        {
            return filePath;
        }
        public nothrow inline int FileHandle() const
        {
            return fileHandle;
        }
        public nothrow inline bool Opened() const 
        {
            return opened;
        }
        public const long defaultBufferSize = 4096;
        private IOBuffer buffer;
        private const char* pos;
        private const char* end;
        private string filePath;
        private int fileHandle;
        private bool opened;
        private bool endOfStream;
    }

    public string ReadFile(const string& filePath)
    {
        InputFileStream file(filePath, cast<long>(4) * 1024 * 1024);
        return file.ReadToEnd();
    }

    public class OutputFileStream : OutputStream
    {
        public nothrow OutputFileStream() : this(stdout)
        {
        }
        public nothrow OutputFileStream(int fileHandle_) : filePath(), fileHandle(fileHandle_), opened(false)
        {
        }
        public OutputFileStream(const string& filePath_) : filePath(), fileHandle(-1), opened(false)
        {
            Open(filePath_, OpenMode.write);
        }
        public OutputFileStream(const string& filePath_, OpenMode openMode) : filePath(), fileHandle(-1), opened(false)
        {
            Open(filePath_, openMode);
        }
        public override ~OutputFileStream()
        {
            if (opened)
            {
                try
                {
                    Close();
                }
                catch (const Exception&)
                {
                }
            }
        }
        suppress OutputFileStream(const OutputFileStream&);
        suppress void operator=(const OutputFileStream&);
        public nothrow OutputFileStream(OutputFileStream&& that) : fileHandle(that.fileHandle), opened(that.opened), filePath(Rvalue(that.filePath))
        {
            that.fileHandle = -1;
            that.opened = false;
        }
        public default nothrow void operator=(OutputFileStream&&);
        public void Open(const string& filePath_, OpenMode openMode)
        {
            if (opened)
            {
                Close();
            }
            filePath = filePath_;
            if (filePath.IsEmpty())
            {
                throw FileSystemException("provided file name is empty");
            }
            int result = RtOpen(filePath.Chars(), openMode);
            if (result < 0)
            {
                string errorMessage = RtGetError(result);
                RtDisposeError(result);
                throw FileSystemException(errorMessage);
            }
            else
            {
                fileHandle = result;
            }
            opened = true;
        }
        public void Close()
        {
            if (opened)
            {
                opened = false;
                int result = RtClose(fileHandle);
                if (result < 0)
                {
                    string errorMessage = RtGetError(result);
                    RtDisposeError(result);
                    throw FileSystemException(errorMessage);
                }
                fileHandle = -1;
            }
            else
            {
                throw FileSystemException("file not opened");
            }
        }
        public override void Write(const char* s)
        {
            int result = RtWrite(fileHandle, s, StrLen(s));
            if (result < 0)
            {
                string errorMessage = RtGetError(result);
                RtDisposeError(result);
                throw FileSystemException(errorMessage);
            }
        }
        public override void Write(const wchar* s)
        {
            Write(ToUtf8(s));
        }
        public override void Write(const uchar* s)
        {
            Write(ToUtf8(s));
        }
        public override void Write(const string& s)
        {
            int result = RtWrite(fileHandle, s.Chars(), s.Length());
            if (result < 0)
            {
                string errorMessage = RtGetError(result);
                RtDisposeError(result);
                throw FileSystemException(errorMessage);
            }
        }
        public override void Write(const wstring& s)
        {
            Write(ToUtf8(s));
        }
        public override void Write(const ustring& s)
        {
            Write(ToUtf8(s));
        }
        public override void Write(bool b)
        {
            Write(ToString(b));
        }
        public override void Write(char c)
        {
            Write(ToString(c));
        }
        public override void Write(wchar c)
        {
            Write(ToString(c));
        }
        public override void Write(uchar c)
        {
            Write(ToString(c));
        }
        public override void Write(sbyte s)
        {
            Write(ToString(s));
        }
        public override void Write(byte b)
        {
            Write(ToString(b));
        }
        public override void Write(short s)
        {
            Write(ToString(s));
        }
        public override void Write(ushort u)
        {
            Write(ToString(u));
        }
        public override void Write(int i)
        {
            Write(ToString(i));
        }
        public override void Write(uint u)
        {
            Write(ToString(u));
        }
        public override void Write(long l)
        {
            Write(ToString(l));
        }
        public override void Write(ulong u)
        {
            Write(ToString(u));
        }
        public override void Write(float f)
        {
            Write(ToString(f));
        }
        public override void Write(double d)
        {
            Write(ToString(d));
        }
        public override void Write(const Date& date)
        {
            Write(date.ToString());
        }
        public override void Write(const DateTime& dateTime)
        {
            Write(dateTime.ToString());
        }
        public override void WriteLine()
        {
            Write("\n");
        }
        public override void WriteLine(const char* s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const wchar* s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const uchar* s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const string& s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const wstring& s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const ustring& s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(bool b)
        {
            Write(b);
            WriteLine();
        }
        public override void WriteLine(char c)
        {
            Write(c);
            WriteLine();
        }
        public override void WriteLine(wchar c)
        {
            Write(c);
            WriteLine();
        }
        public override void WriteLine(uchar c)
        {
            Write(c);
            WriteLine();
        }
        public override void WriteLine(sbyte s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(byte b)
        {
            Write(b);
            WriteLine();
        }
        public override void WriteLine(short s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(ushort u)
        {
            Write(u);
            WriteLine();
        }
        public override void WriteLine(int i)
        {
            Write(i);
            WriteLine();
        }
        public override void WriteLine(uint u)
        {
            Write(u);
            WriteLine();
        }
        public override void WriteLine(long l)
        {
            Write(l);
            WriteLine();
        }
        public override void WriteLine(ulong u)
        {
            Write(u);
            WriteLine();
        }
        public override void WriteLine(float f)
        {
            Write(f);
            WriteLine();
        }
        public override void WriteLine(double d)
        {
            Write(d);
            WriteLine();
        }
        public override void WriteLine(const Date& date)
        {
            Write(date);
            WriteLine();
        }
        public override void WriteLine(const DateTime& dateTime)
        {
            Write(dateTime);
            WriteLine();
        }
        public nothrow inline const string& FilePath() const
        {
            return filePath;
        }
        public nothrow inline int FileHandle() const
        {
            return fileHandle;
        }
        public nothrow inline bool Opened() const 
        {
            return opened;
        }
        private string filePath;
        private int fileHandle;
        private bool opened;
    }
}
