// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public class InputStringStream : InputStream
    {
        public nothrow InputStringStream() : str(), pos(0)
        {
        }
        public nothrow InputStringStream(const string& str_) : str(str_), pos(0)
        {
        }
        suppress InputStringStream(const InputStringStream&);
        suppress void operator=(const InputStringStream&);
        public nothrow default InputStringStream(InputStringStream&&);
        public nothrow default void operator=(InputStringStream&&);
        public inline nothrow const string& Str() const
        {
            return str;
        }
        public nothrow void SetStr(const string& str_) 
        {
            str = str_;
        }
        public override int Read()
        {
            if (pos < str.Length())
            {
                return cast<int>(str[pos++]);
            }
            return -1;
        }
        public override string ReadLine()
        {
            string line;
            while (pos < str.Length())
            {
                char c = str[pos++];
                if (c == '\n')
                {
                    return line;
                }
                line.Append(c);
            }
            return line;
        }
        public override string ReadToEnd()
        {
            long p = pos;
            pos = str.Length();
            return str.Substring(p);
        }
        public nothrow override bool EndOfStream() const
        {
            return pos == str.Length();
        }
        private string str;
        private long pos;
    }
    
    public class OutputStringStream : OutputStream
    {
        public nothrow OutputStringStream() : str()
        {
        }
        public nothrow OutputStringStream(const string& str_) : str(str_)
        {
        }
        suppress OutputStringStream(const OutputStringStream&);
        suppress void operator=(const OutputStringStream&);
        public nothrow default OutputStringStream(OutputStringStream&&);
        public nothrow default void operator=(OutputStringStream&&);
        public inline nothrow const string& Str() const
        {
            return str;
        }
        public nothrow void SetStr(const string& str_)
        {
            str = str_;
        }
        public override void Write(const char* s)
        {
            str.Append(s);
        }
        public override void Write(const wchar* s)
        {
            str.Append(ToUtf8(s));
        }
        public override void Write(const uchar* s)
        {
            str.Append(ToUtf8(s));
        }
        public override void Write(const string& s)
        {
            str.Append(s);
        }
        public override void Write(const wstring& s)
        {
            str.Append(ToUtf8(s));
        }
        public override void Write(const ustring& s)
        {
            str.Append(ToUtf8(s));
        }
        public override void Write(bool b)
        {
            str.Append(ToString(b));
        }    
        public override void Write(char c)
        {
            str.Append(c);
        }
        public override void Write(wchar c)
        {
            str.Append(ToString(c));
        }
        public override void Write(uchar c)
        {
            str.Append(ToString(c));
        }
        public override void Write(sbyte s)
        {
            str.Append(ToString(s));
        }
        public override void Write(byte b)
        {
            str.Append(ToString(b));
        }
        public override void Write(short s)
        {
            str.Append(ToString(s));
        }
        public override void Write(ushort u)
        {
            str.Append(ToString(u));
        }
        public override void Write(int i)
        {
            str.Append(ToString(i));
        }
        public override void Write(uint u)
        {
            str.Append(ToString(u));
        }
        public override void Write(long l)
        {
            str.Append(ToString(l));
        }
        public override void Write(ulong u)
        {
            str.Append(ToString(u));
        }
        public override void Write(float f)
        {
            str.Append(ToString(f));
        }
        public override void Write(double d)
        {
            str.Append(ToString(d));
        }
        public override void Write(const Date& date)
        {
            str.Append(date.ToString());
        }
        public override void Write(const DateTime& dateTime)
        {
            str.Append(dateTime.ToString());
        }
        public override void WriteLine()
        {
            str.Append('\n');
        }
        public override void WriteLine(const char* s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const wchar* s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const uchar* s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const string& s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const wstring& s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(const ustring& s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(bool b)
        {
            Write(b);
            WriteLine();
        }
        public override void WriteLine(char c)
        {
            Write(c);
            WriteLine();
        }
        public override void WriteLine(wchar c)
        {
            Write(c);
            WriteLine();
        }
        public override void WriteLine(uchar c)
        {
            Write(c);
            WriteLine();
        }
        public override void WriteLine(sbyte s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(byte b)
        {
            Write(b);
            WriteLine();
        }
        public override void WriteLine(short s)
        {
            Write(s);
            WriteLine();
        }
        public override void WriteLine(ushort u)
        {
            Write(u);
            WriteLine();
        }
        public override void WriteLine(int i)
        {
            Write(i);
            WriteLine();
        }
        public override void WriteLine(uint u)
        {
            Write(u);
            WriteLine();
        }
        public override void WriteLine(long l)
        {
            Write(l);
            WriteLine();
        }
        public override void WriteLine(ulong u)
        {
            Write(u);
            WriteLine();
        }
        public override void WriteLine(float f)
        {
            Write(f);
            WriteLine();
        }
        public override void WriteLine(double d)
        {
            Write(d);
            WriteLine();
        }
        public override void WriteLine(const Date& date)
        {
            Write(date);
            WriteLine();
        }
        public override void WriteLine(const DateTime& dateTime)
        {
            Write(dateTime);
            WriteLine();
        }
        private string str;
    }
}
