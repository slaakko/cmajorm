// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

namespace System
{
    public constexpr nothrow inline long Align(long n, long alignment)
    {
        #assert(alignment > 0);
        return (n + alignment - 1) & -alignment;
    }

    public constexpr nothrow inline long StrLen(const char* s)
    {
        long len = 0;
        if (s != null)
        {
            while (*s != '\0')
            {
                ++len;
                ++s;
            }
        }
        return len;
    }
    
    public constexpr nothrow inline long StrLen(const wchar* s)
    {
        long len = 0;
        if (s != null)
        {
            while (*s != '\0')
            {
                ++len;
                ++s;
            }
        }
        return len;
    }
    
    public constexpr nothrow inline long StrLen(const uchar* s)
    {
        long len = 0;
        if (s != null)
        {
            while (*s != '\0')
            {
                ++len;
                ++s;
            }
        }
        return len;
    }

    public nothrow inline void StrCopy(char* buf, const char* from)
    {
        #assert(buf != null);
        if (from != null)
        {
            while (*from != '\0')
            {
                *buf++ = *from++;
            }
        }
        *buf = '\0';
    }
    
    public nothrow inline void StrCopy(wchar* buf, const wchar* from)
    {
        #assert(buf != null);
        if (from != null)
        {
            while (*from != '\0')
            {
                *buf++ = *from++;
            }
        }
        *buf = '\0';
    }
    
    public nothrow inline void StrCopy(uchar* buf, const uchar* from)
    {
        #assert(buf != null);
        if (from != null)
        {
            while (*from != '\0')
            {
                *buf++ = *from++;
            }
        }
        *buf = '\0';
    }

    public nothrow inline long StrCopy(char* buf, const char* from, long length)
    {
        long resultLen = 0;
        #assert(buf != null);
        if (from != null)
        {
            while (resultLen < length)
            {
                if (*from == '\0')
                {
                    break;
                }
                *buf++ = *from++;
                ++resultLen;
            }
        }
        *buf = '\0';
        return resultLen;
    }

    public nothrow inline long StrCopy(wchar* buf, const wchar* from, long length)
    {
        long resultLen = 0;
        #assert(buf != null);
        if (from != null)
        {
            while (resultLen < length)
            {
                if (*from == '\0')
                {
                    break;
                }
                *buf++ = *from++;
                ++resultLen;
            }
        }
        *buf = '\0';
        return resultLen;
    }

    public nothrow inline long StrCopy(uchar* buf, const uchar* from, long length)
    {
        long resultLen = 0;
        #assert(buf != null);
        if (from != null)
        {
            while (resultLen < length)
            {
                if (*from == '\0')
                {
                    break;
                }
                *buf++ = *from++;
                ++resultLen;
            }
        }
        *buf = '\0';
        return resultLen;
    }

    public nothrow long MemGrow(long size)
    {
        if (size < 8)
        {
            return 8;
        }
        else if (size < 64)
        {
            return 64;
        }
        else if (size < 512)
        {
            return 512;
        }
        else if (size < 4096)
        {
            return 4096;
        }
        else
        {
            return 2 * Align(size, 4096);
        }
    }
    
    public nothrow inline void* MemAlloc(long size)
    {
        return RtMemAlloc(size);
    }
    
    public nothrow inline void* MemAlloc(long size, const char* info)
    {
        return RtMemAllocInfo(size, info);
    }
    
    public nothrow inline void MemFree(void* ptr)
    {
    #if (DEBUG)
        RtDispose(ptr);
    #endif
        RtMemFree(ptr);
    }
}
