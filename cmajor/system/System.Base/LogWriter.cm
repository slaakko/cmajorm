// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public class LogWriter
    {
        public LogWriter() : 
            logFilePath(), writer(Console.Out())
        {
        }
        public LogWriter(const string& logFilePath_) :
            logFilePath(logFilePath_), writer(SharedPtr<ByteStream>(new FileByteStream(logFilePath, cast<OpenMode>(OpenMode.append))))
        {
        }
        public void Write(const string& str)
        {
            writer << str;
        }
        public void WriteLine(const string& str)
        {
            writer << str << endl();
            writer.Flush();
        }
        public void WriteLine()
        {
            writer.WriteLine();
            writer.Flush();
        }
        public nothrow inline const string& LogFilePath() const
        {
            return logFilePath;
        }
        public nothrow inline StreamWriter& GetStreamWriter()
        {
            return writer;
        }
        private string logFilePath;
        private StreamWriter writer;
    }

    public LogWriter& operator<<(LogWriter& writer, const string& str)
    {
        writer.Write(str);
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, char c)
    {
        writer.Write(ToString(c));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, bool b)
    {
        writer.Write(ToString(b));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, int i)
    {
        writer.Write(ToString(i));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, uint u)
    {
        writer.Write(ToString(u));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, long l)
    {
        writer.Write(ToString(l));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, ulong u)
    {
        writer.Write(ToString(u));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, const System.Endl& endl)
    {
        writer.WriteLine();
        return writer;
    }
}
