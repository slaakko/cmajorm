// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public const int stdin = 0;
    public const int stdout = 1;
    public const int stderr = 2;

    public nothrow bool IsConsoleHandle(int handle)
    {
        return RtIsConsoleHandle(handle);
    }

    public enum OpenMode : byte
    {
        none = 0u,
        read = 1u << 0u,
        write = 1u << 1u,
        append = 1u << 2u,
        binary = 1u << 3u
    }

    public class FileSystemException : Exception
    {
        public nothrow FileSystemException(const string& message_) : base(message_)
        {
        }
    }

    public class FileByteStream : ByteStream
    {
        public FileByteStream(int handle) : file(null)
        {
            int errorStringHandle = -1;
            file = RtOpenStdFile(handle, errorStringHandle);
            if (file == null)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
        public FileByteStream(const string& filePath, OpenMode openMode) : file(null)
        {
            Open(filePath, openMode);
        }
        suppress FileByteStream(const FileByteStream&);
        suppress void operator=(const FileByteStream&);
        public nothrow FileByteStream(FileByteStream&& that) : file(that.file)
        {
            that.file = null;
        }
        public default nothrow void operator=(FileByteStream&&);
        public override ~FileByteStream()
        {
            try
            {
                if (file != null)
                {
                    int errorStringHandle = -1;
                    RtDisposeFile(file, errorStringHandle);
                }
            }
            catch (const Exception&)
            {
            }
        }
        public inline nothrow bool IsOpen() const
        {
            return file != null;
        }
        public void Open(const string& filePath, OpenMode openMode)
        {
            Close();
            int errorStringHandle = -1;
            file = RtOpen(filePath.Chars(), openMode, errorStringHandle);
            if (file == null)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
        public void Close()
        {
            if (file != null)
            {
                int errorStringHandle = -1;
                if (!RtClose(file, errorStringHandle))
                {
                    string errorMessage = RtGetError(errorStringHandle);
                    RtDisposeError(errorStringHandle);
                    throw FileSystemException(errorMessage);
                }
                file = null;
            }
        }
        public override int ReadByte()
        {
            int result = RtReadByte(file);
            if (result == -1)
            {
                if (RtEof(file))
                {
                    return -1;
                }
                else
                {
                    int errorStringHandle = -1;
                    if (RtGetFileError(file, errorStringHandle))
                    {
                        string errorMessage = RtGetError(errorStringHandle);
                        RtDisposeError(errorStringHandle);
                        throw FileSystemException(errorMessage);
                    }
                }
            }
            return result;
        }
        public override long Read(byte* buffer, long count)
        {
            if (count < 0)
            {
                ThrowInvalidParameterException();
            }
            int errorStringHandle = -1;
            long result = RtRead(file, buffer, count, errorStringHandle);
            if (result == -1)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
            return result;
        }
        public override void Write(byte x)
        {
            int errorStringHandle = -1;
            if (!RtWriteByte(file, x, errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
        public override void Write(byte* buffer, long count)
        {
            if (count < 0)
            {
                ThrowInvalidParameterException();
            }
            int errorStringHandle = -1;
            long result = RtWrite(file, buffer, count, errorStringHandle);
            if (result == -1)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
        public override void Seek(long pos, Origin origin)
        {
            int errorStringHandle = -1;
            if (!RtSeek(file, pos, origin, errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
        public override long Tell()
        {
            int errorStringHandle = -1;
            long result = RtTell(file, errorStringHandle);
            if (result == -1)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
            return result;
        }
        public override void Flush()
        {
            int errorStringHandle = -1;
            if (!RtFlush(file, errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
        private void* file;
    }
}

namespace System
{
    public class Endl
    {
        public nothrow Endl()
        {
        }
    }

    public nothrow Endl endl()
    {
        return Endl();
    }
}
