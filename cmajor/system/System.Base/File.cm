// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.IO
{
    public static class File
    {
        public static nothrow bool Exists(const string& filePath)
        {
            return RtFileExists(filePath.Chars());
        }
        public static long Size(const string& filePath)
        {
            int errorStringHandle = -1;
            long fileSize = RtGetFileSize(filePath.Chars(), errorStringHandle);
            if (fileSize == -1)
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
            else
            {
                return fileSize;
            }
        }
        public static nothrow bool LastWriteTimeLess(const string& filePath1, const string& filePath2)
        {
            return RtLastWriteTimeLess(filePath1.Chars(), filePath2.Chars());
        }
        public static StreamWriter CreateText(const string& filePath)
        {
            return StreamWriter(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, OpenMode.write)))));
        }
        public static BinaryWriter CreateBinary(const string& filePath)
        {
            return BinaryWriter(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, cast<OpenMode>(OpenMode.write | OpenMode.binary))))));
        }
        public static StreamWriter AppendText(const string& filePath)
        {
            return StreamWriter(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, OpenMode.append)))));
        }
        public static StreamReader OpenRead(const string& filePath)
        {
            return StreamReader(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, OpenMode.read)))));
        }
        public static BinaryReader OpenBinary(const string& filePath)
        {
            return BinaryReader(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, cast<OpenMode>(OpenMode.read | OpenMode.binary))))));
        }
        public static string ReadAllText(const string& filePath)
        {
            StreamReader reader = OpenRead(filePath);
            string content = reader.ReadToEnd();
            if (content.Length() >= 3 && cast<byte>(content[0]) == 0xEFu && cast<byte>(content[1]) == 0xBBu && cast<byte>(content[2]) == 0xBFu)
            {
                return content.Substring(3);
            }
            else
            {
                return content;
            }
        }
        public static List<string> ReadAllLines(const string& filePath)
        {
            List<string> lines;
            bool start = true;
            StreamReader reader = OpenRead(filePath);
            string line = reader.ReadLine();
            while (!reader.EndOfStream())
            {
                if (start)
                {
                    if (line.Length() >= 3 && cast<byte>(line[0]) == 0xEFu && cast<byte>(line[1]) == 0xBBu && cast<byte>(line[2]) == 0xBFu)
                    {
                        line = line.Substring(3);
                    }
                    start = false;
                }
                lines.Add(line);
                line = reader.ReadLine();
            }
            if (!line.IsEmpty())
            {
                lines.Add(line);
            }
            return lines;
        }
        public static void Remove(const string& filePath)
        {
            int errorStringHandle = -1;
            if (!RtRemoveFile(filePath.Chars(), errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }            
        }
        public static void Copy(const string& sourceFilePath, const string& targetFilePath)
        {
            int errorStringHandle = -1;
            if (!RtCopyFile(sourceFilePath.Chars(), targetFilePath.Chars(), errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
        public static void Move(const string& sourceFilePath, const string& targetFilePath)
        {
            int errorStringHandle = -1;
            if (!RtMoveFile(sourceFilePath.Chars(), targetFilePath.Chars(), errorStringHandle))
            {
                string errorMessage = RtGetError(errorStringHandle);
                RtDisposeError(errorStringHandle);
                throw FileSystemException(errorMessage);
            }
        }
    }
}
