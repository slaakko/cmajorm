// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

namespace System
{
    public class Exception
    {
        public nothrow Exception(const string& message_) : message(message_), callStack(System.Runtime.GetCallStack())
        {
            System.Runtime.DisposeCallStack();
        }
        public default virtual ~Exception();
        public nothrow inline const string& Message() const
        {
            return message;
        }
        public nothrow inline const string& CallStack() const
        {
            return callStack;
        }
        public nothrow virtual string ToString() const
        {
            string s = typename(*this);
            s.Append(": ").Append(message).Append("\nCALL STACK:\n").Append(callStack);
            return s;
        }
        private string message;
        private string callStack;
    }
    
    public class ExceptionPtr
    {
        public nothrow ExceptionPtr() : exception(null), exceptionClassIdHi(0u), exceptionClassIdLo(0u)
        {
        }
        public nothrow ExceptionPtr(void* exception_, ulong exceptionClassIdHi_, ulong exceptionClassIdLo_) :
            exception(exception_), exceptionClassIdHi(exceptionClassIdHi_), exceptionClassIdLo(exceptionClassIdLo_)
        {
        }
        public inline nothrow void* Exception() const
        {
            return exception;
        }
        public inline nothrow ulong ExceptionClassIdHi() const
        {
            return exceptionClassIdHi;
        }
        public inline nothrow ulong ExceptionClassIdLo() const
        {
            return exceptionClassIdLo;
        }
        private void* exception;
        private ulong exceptionClassIdHi;
        private ulong exceptionClassIdLo;
    }
    
    public nothrow ExceptionPtr CaptureCurrentException()
    {
        void* exception;
        ulong exceptionClassIdHi;
        ulong exceptionClassIdLo;
        RtCaptureException(exception, exceptionClassIdHi, exceptionClassIdLo);
        return ExceptionPtr(exception, exceptionClassIdHi, exceptionClassIdLo);
    }
    
    public void ThrowCapturedException(const ExceptionPtr& capturedException)
    {
        RtThrowCapturedException(capturedException.Exception(), capturedException.ExceptionClassIdHi(), capturedException.ExceptionClassIdLo());
    }
}
