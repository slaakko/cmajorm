// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public abstract class InputStream
    {
        public nothrow default InputStream();
        public virtual default ~InputStream();
        suppress InputStream(const InputStream&);
        suppress void operator=(const InputStream&);
        public nothrow default InputStream(InputStream&&);
        public nothrow default void operator=(InputStream&&);
        public abstract int Read();
        public abstract string ReadLine();
        public abstract string ReadToEnd();
        public nothrow abstract bool EndOfStream() const;
    }

    public abstract class OutputStream
    {
        public nothrow default OutputStream();
        public virtual default ~OutputStream();
        suppress OutputStream(const OutputStream&);
        suppress void operator=(const OutputStream&);
        public nothrow default OutputStream(OutputStream&&);
        public nothrow default void operator=(OutputStream&&);
        public abstract void Write(const char* s);
        public abstract void Write(const wchar* s);
        public abstract void Write(const uchar* s);
        public abstract void Write(const string& s);
        public abstract void Write(const wstring& s);
        public abstract void Write(const ustring& s);
        public abstract void Write(bool b);
        public abstract void Write(char c);
        public abstract void Write(wchar c);
        public abstract void Write(uchar c);
        public abstract void Write(sbyte s);
        public abstract void Write(byte b);
        public abstract void Write(short s);
        public abstract void Write(ushort u);
        public abstract void Write(int i);
        public abstract void Write(uint u);
        public abstract void Write(long l);
        public abstract void Write(ulong u);
        public abstract void Write(float f);
        public abstract void Write(double d);
        public abstract void Write(const Date& date);
        public abstract void Write(const DateTime& dateTime);
        public abstract void WriteLine();
        public abstract void WriteLine(const char* s);
        public abstract void WriteLine(const wchar* s);
        public abstract void WriteLine(const uchar* s);
        public abstract void WriteLine(const string& s);
        public abstract void WriteLine(const wstring& s);
        public abstract void WriteLine(const ustring& s);
        public abstract void WriteLine(bool b);
        public abstract void WriteLine(char c);
        public abstract void WriteLine(wchar c);
        public abstract void WriteLine(uchar c);
        public abstract void WriteLine(sbyte s);
        public abstract void WriteLine(byte b);
        public abstract void WriteLine(short s);
        public abstract void WriteLine(ushort u);
        public abstract void WriteLine(int i);
        public abstract void WriteLine(uint u);
        public abstract void WriteLine(long l);
        public abstract void WriteLine(ulong u);
        public abstract void WriteLine(float f);
        public abstract void WriteLine(double d);
        public abstract void WriteLine(const Date& date);
        public abstract void WriteLine(const DateTime& dateTime);
    }

    public OutputStream& operator<<(OutputStream& s, const char* x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, const wchar* x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, const uchar* x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, const string& x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, const wstring& x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, const ustring& x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, bool x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, sbyte x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, byte x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, short x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, ushort x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, int x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, uint x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, long x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, ulong x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, float x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, double x)
    {
        s.Write(x);
        return s;
    }
    
    public OutputStream& operator<<(OutputStream& s, const Date& date)
    {
        s.Write(date);
        return s;
    }
    
    public OutputStream& operator<<(OutputStream& s, const DateTime& dateTime)
    {
        s.Write(dateTime);
        return s;
    }
    
    public OutputStream& operator<<(OutputStream& s, char x)
    {
        s.Write(x);
        return s;
    }
    
    public OutputStream& operator<<(OutputStream& s, wchar x)
    {
        s.Write(x);
        return s;
    }
    
    public OutputStream& operator<<(OutputStream& s, uchar x)
    {
        s.Write(x);
        return s;
    }

    public OutputStream& operator<<(OutputStream& s, const Endl&)
    {
        s.WriteLine();
        return s;
    }
}

namespace System
{
    public class Endl
    {
        public nothrow Endl()
        {
        }
    }

    public nothrow Endl endl()
    {
        return Endl();
    }
}
