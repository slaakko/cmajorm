// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.RegularExpressions
{
    public PtrNfa MakeNfa(PtrNfaStateFactory* factory, char c)
    {
        PtrNfaState* start = factory->MakeState();
        PtrNfaState* end = factory->MakeState();
        end->SetAccepting();
        start->AddEdge(PtrNfaEdge(CharClass(c), end));
        return PtrNfa(start, end);
    }

    public PtrNfa MakeNfa(PtrNfaStateFactory* factory, const CharClass& cls)
    {
        PtrNfaState* start = factory->MakeState();
        PtrNfaState* end = factory->MakeState();
        end->SetAccepting();
        start->AddEdge(PtrNfaEdge(cls, end));
        return PtrNfa(start, end);
    }

    public PtrNfa Cat(const PtrNfa& left, const PtrNfa& right)
    {
        PtrNfa cat(left);
        PtrNfaState* leftEnd = cat.End();
        leftEnd->ResetAccepting();
        PtrNfaState* rightStart = right.Start();
        leftEnd->SetEdges(rightStart->Edges());
        long n = right.States().Count();
        for (long i = 1; i < n - 1; ++i)
        {
            cat.AddState(right.States()[i]);
        }
        cat.SetEnd(right.End());
        return cat;
    }
    
    public PtrNfa Alt(PtrNfaStateFactory* factory, const PtrNfa& left, const PtrNfa& right)
    {
        PtrNfaState* leftStart = left.Start();
        PtrNfaState* leftEnd = left.End();
        PtrNfaState* rightStart = right.Start();
        PtrNfaState* rightEnd = right.End();
        PtrNfaState* start = factory->MakeState();
        PtrNfaState* end = factory->MakeState();
        end->SetAccepting();
        start->AddEdge(PtrNfaEdge(CharClass(eps), leftStart));
        start->AddEdge(PtrNfaEdge(CharClass(eps), rightStart));
        PtrNfa alt;
        alt.SetStart(start);
        for (PtrNfaState* state : left.States())
        {
            alt.AddState(state);
        }
        for (PtrNfaState* state : right.States())
        {
            alt.AddState(state);
        }
        leftEnd->ResetAccepting();
        leftEnd->AddEdge(PtrNfaEdge(CharClass(eps), end));
        rightEnd->ResetAccepting();
        rightEnd->AddEdge(PtrNfaEdge(CharClass(eps), end));
        alt.SetEnd(end);
        return alt;
    }
    
    public PtrNfa Kleene(PtrNfaStateFactory* factory, const PtrNfa& subject)
    {
        PtrNfa kleene;
        PtrNfaState* start = factory->MakeState();
        PtrNfaState* end = factory->MakeState();
        end->SetAccepting();
        start->AddEdge(PtrNfaEdge(CharClass(eps), end));
        kleene.SetStart(start);
        PtrNfaState* subjectStart = subject.Start();
        start->AddEdge(PtrNfaEdge(CharClass(eps), subjectStart));
        for (PtrNfaState* state : subject.States())
        {
            kleene.AddState(state);
        }
        PtrNfaState* subjectEnd = subject.End();
        subjectEnd->ResetAccepting();
        subjectEnd->AddEdge(PtrNfaEdge(CharClass(eps), end));
        subjectEnd->AddEdge(PtrNfaEdge(CharClass(eps), subjectStart));
        kleene.SetEnd(end);
        return kleene;
    }
    
    public PtrNfa Positive(PtrNfaStateFactory* factory, const PtrNfa& subject)
    {
        PtrNfa positive;
        PtrNfaState* start = factory->MakeState();
        PtrNfaState* end = factory->MakeState();
        end->SetAccepting();
        positive.SetStart(start);
        PtrNfaState* subjectStart = subject.Start();
        start->AddEdge(PtrNfaEdge(CharClass(eps), subjectStart));
        for (PtrNfaState* state : subject.States())
        {
            positive.AddState(state);
        }
        PtrNfaState* subjectEnd = subject.End();
        subjectEnd->ResetAccepting();
        subjectEnd->AddEdge(PtrNfaEdge(CharClass(eps), end));
        subjectEnd->AddEdge(PtrNfaEdge(CharClass(eps), subjectStart));
        positive.SetEnd(end);
        return positive;
    }
    
    public PtrNfa Optional(const PtrNfa& subject)
    {
        PtrNfa optional(subject);
        optional.Start()->AddEdge(PtrNfaEdge(CharClass(eps), optional.End()));
        return optional;
    }
    
    public class RegExParser
    {
        static RegExParser() : instance(new RegExParser())
        {
        }
        public RegExParser() : grammar(new RegularExpressionGrammar())
        {
        }
        suppress RegExParser(const RegExParser&);
        suppress void operator=(const RegExParser&);
        suppress RegExParser(RegExParser&&);
        suppress void operator=(RegExParser&&);
        public static RegExParser& Instance()
        {
            return *instance;
        }
        public PtrNfa Parse(PtrNfaStateFactory* factory, const string& regEx)
        {
            ustring re = ToUtf32(regEx);
            PtrNfa ptrNfa = grammar->Parse(re.Chars(), re.Chars() + re.Length(), 0, "", factory);
            ptrNfa.NumberStates();
            return ptrNfa;
        }
        private static UniquePtr<RegExParser> instance;
        private RegularExpressionGrammar* grammar;
    }
            
    public PtrNfa ParseRegEx(PtrNfaStateFactory* factory, const string& pattern, RegExFlags flags)
    {
        if ((flags & RegExFlags.matchLine) != RegExFlags.none)
        {
            string linePattern = pattern;
            if (!pattern.IsEmpty())
            {
                if (pattern[0] == '^')
                {
                    linePattern = linePattern.Substring(1);
                }
                else
                {
                    linePattern = ".*" + linePattern;
                }
                if (pattern[pattern.Length() - 1] == '$')
                {
                    linePattern = linePattern.Substring(0, linePattern.Length() - 1);
                }
                else
                {
                    linePattern.Append(".*");
                }
            }
            return RegExParser.Instance().Parse(factory, linePattern);
        }
        return RegExParser.Instance().Parse(factory, pattern);
    }            
}
