// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;

namespace System.Text.RegularExpressions
{
    public enum Class
    {
        alnum, alpha, blank, cntrl, digit, graph, lower, print, punct, space, upper, word, xdigit
    }

    public class CharClass
    {
        public nothrow CharClass() : ranges(), inverse(false), bits()
        {
            try
            {
                bits.Resize(256);
            }
            catch (const Exception& ex)
            {
                try
                {
                    Console.Error() << ex.ToString() << endl();
                }
                catch (const Exception&)
                {
                }
                RtExit(255);
            }
        }
        public CharClass(char c) : ranges(c), inverse(false), bits(256)
        {
            bits.Set(cast<byte>(c));
        }
        public CharClass(char first, char last) : ranges(string(first) + "-" + string(last)), inverse(false), bits(256)
        {
            InitBits();
        }
        public CharClass(const string& ranges_, bool inverse_) : ranges(ranges_), inverse(inverse_), bits(256)
        {
            InitBits();
        }
        public nothrow void Clear()
        {
            ranges.Clear();
            inverse = false;
            bits.Clear();
        }
        public string Ranges() const
        {
            string rep;
            for (char c : ranges)
            {
                rep.Append(CharStr(c));
            }
            return rep;
        }
        public nothrow bool Inverse() const
        {
            return inverse;
        }
        public nothrow const Bitset& Bits() const
        {
            return bits;
        }
        public bool Contains(char c) const
        {
            return bits.Test(cast<byte>(c)) != inverse;
        }
        private void InitBits()
        {
            long i = 0;
            long n = ranges.Length();
            while (i < n)
            {
                byte first = cast<byte>(ranges[i]);
                byte last = first;
                ++i;
                if (i < n)
                {
                    if (ranges[i] == '-')
                    {
                        ++i;
                        if (i < n)
                        {
                            last = cast<byte>(ranges[i]);
                            ++i;
                        }
                        else
                        {
                            bits.Set(first);
                            first = cast<byte>('-');
                            last = first;
                        }
                    }
                }
                for (byte b = first; b <= last; ++b)
                {
                    bits.Set(b);
                }
            }
        }
        private string ranges;
        private bool inverse;
        private Bitset bits;
    }
    
    public string ToRanges(Class cls)
    {
        switch (cls)
        {
            case Class.alnum:   return "a-zA-Z0-9";
            case Class.alpha:   return "a-zA-Z";
            case Class.blank:   return "\x9\xb\xc\x20";
            case Class.cntrl:   return "\x1-\x1f\x7f";
            case Class.digit:   return "0-9";
            case Class.graph:   return "\x21-x7e";
            case Class.lower:   return "a-z";
            case Class.print:   return "\x20-x7e";
            case Class.punct:   return "\x21-x2f\x3a-\x40\x5b-\x60";
            case Class.space:   return "\x9-\xd\x20";
            case Class.upper:   return "A-Z";
            case Class.word:    return "a-zA-Z0-9_";
            case Class.xdigit:  return "0-9a-fA-F";
        }        
        return string();
    }

    public OutputStream& operator<<(OutputStream& s, const CharClass& cls)
    {
        s << '[';
        if (cls.Inverse())
        {
            s << '^';
        }
        s << cls.Ranges() << ']';
        return s;
    }

    public StreamWriter& operator<<(StreamWriter& s, const CharClass& cls)
    {
        s << '[';
        if (cls.Inverse())
        {
            s << '^';
        }
        s << cls.Ranges() << ']';
        return s;
    }
}
