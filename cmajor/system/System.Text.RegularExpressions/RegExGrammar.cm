using System;
using System.Collections;
using System.Text.Parsing;

// this source file has been automatically generated from 'RegExGrammar.parser' using cmparsergen version 2.0.0.

namespace System.Text.RegularExpressions
{
    public class RegularExpressionGrammar : System.Text.Parsing.Grammar
    {
        public RegularExpressionGrammar() : this(new ParsingDomain())
        {
        }
        public RegularExpressionGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("RegularExpressionGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("System.Text.RegularExpressions")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public PtrNfa Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, PtrNfaStateFactory* factory)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(factory)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            PtrNfa result = *cast<ValueObject<PtrNfa>*>(value.Get());
            return result;
        }

        public class RegularExpressionRule : System.Text.Parsing.RuleParser
        {
            public RegularExpressionRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("PtrNfaStateFactory*"), ToUtf32("factory")));
                SetValueTypeName(ToUtf32("PtrNfa"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> factory_value = stack.Pop();
                context->factory = *cast<ValueObject<PtrNfaStateFactory*>*>(factory_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<PtrNfa>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* altNonterminalParser = GetNonterminal(ToUtf32("alt"));
                altNonterminalParser->SetPre(Prealt);
                altNonterminalParser->SetPost(Postalt);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromalt;
            }
            public void Prealt(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(context->factory)));
            }
            public void Postalt(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromalt_value = stack.Pop();
                    context->fromalt = *cast<ValueObject<PtrNfa>*>(fromalt_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : factory(), value(), fromalt()
                {
                }
                public PtrNfaStateFactory* factory;
                public PtrNfa value;
                public PtrNfa fromalt;
            }
        }

        public class AlternativeExpressionRule : System.Text.Parsing.RuleParser
        {
            public AlternativeExpressionRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("PtrNfaStateFactory*"), ToUtf32("factory")));
                SetValueTypeName(ToUtf32("PtrNfa"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> factory_value = stack.Pop();
                context->factory = *cast<ValueObject<PtrNfaStateFactory*>*>(factory_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<PtrNfa>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* leftNonterminalParser = GetNonterminal(ToUtf32("left"));
                leftNonterminalParser->SetPre(Preleft);
                leftNonterminalParser->SetPost(Postleft);
                NonterminalParser* rightNonterminalParser = GetNonterminal(ToUtf32("right"));
                rightNonterminalParser->SetPre(Preright);
                rightNonterminalParser->SetPost(Postright);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromleft;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Alt(context->factory, context->value, context->fromright);
            }
            public void Preleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(context->factory)));
            }
            public void Postleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context->fromleft = *cast<ValueObject<PtrNfa>*>(fromleft_value.Get());
                }
            }
            public void Preright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(context->factory)));
            }
            public void Postright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context->fromright = *cast<ValueObject<PtrNfa>*>(fromright_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : factory(), value(), fromleft(), fromright()
                {
                }
                public PtrNfaStateFactory* factory;
                public PtrNfa value;
                public PtrNfa fromleft;
                public PtrNfa fromright;
            }
        }

        public class SequenceExpressionRule : System.Text.Parsing.RuleParser
        {
            public SequenceExpressionRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("PtrNfaStateFactory*"), ToUtf32("factory")));
                SetValueTypeName(ToUtf32("PtrNfa"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> factory_value = stack.Pop();
                context->factory = *cast<ValueObject<PtrNfaStateFactory*>*>(factory_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<PtrNfa>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* leftNonterminalParser = GetNonterminal(ToUtf32("left"));
                leftNonterminalParser->SetPre(Preleft);
                leftNonterminalParser->SetPost(Postleft);
                NonterminalParser* rightNonterminalParser = GetNonterminal(ToUtf32("right"));
                rightNonterminalParser->SetPre(Preright);
                rightNonterminalParser->SetPost(Postright);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromleft;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Cat(context->value, context->fromright);
            }
            public void Preleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(context->factory)));
            }
            public void Postleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context->fromleft = *cast<ValueObject<PtrNfa>*>(fromleft_value.Get());
                }
            }
            public void Preright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(context->factory)));
            }
            public void Postright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context->fromright = *cast<ValueObject<PtrNfa>*>(fromright_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : factory(), value(), fromleft(), fromright()
                {
                }
                public PtrNfaStateFactory* factory;
                public PtrNfa value;
                public PtrNfa fromleft;
                public PtrNfa fromright;
            }
        }

        public class PostfixExpressionRule : System.Text.Parsing.RuleParser
        {
            public PostfixExpressionRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("PtrNfaStateFactory*"), ToUtf32("factory")));
                SetValueTypeName(ToUtf32("PtrNfa"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> factory_value = stack.Pop();
                context->factory = *cast<ValueObject<PtrNfaStateFactory*>*>(factory_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<PtrNfa>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                NonterminalParser* primaryNonterminalParser = GetNonterminal(ToUtf32("primary"));
                primaryNonterminalParser->SetPre(Preprimary);
                primaryNonterminalParser->SetPost(Postprimary);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromprimary;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Kleene(context->factory, context->value);
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Positive(context->factory, context->value);
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Optional(context->value);
            }
            public void Preprimary(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(context->factory)));
            }
            public void Postprimary(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromprimary_value = stack.Pop();
                    context->fromprimary = *cast<ValueObject<PtrNfa>*>(fromprimary_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : factory(), value(), fromprimary()
                {
                }
                public PtrNfaStateFactory* factory;
                public PtrNfa value;
                public PtrNfa fromprimary;
            }
        }

        public class PrimaryExpressionRule : System.Text.Parsing.RuleParser
        {
            public PrimaryExpressionRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("PtrNfaStateFactory*"), ToUtf32("factory")));
                SetValueTypeName(ToUtf32("PtrNfa"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> factory_value = stack.Pop();
                context->factory = *cast<ValueObject<PtrNfaStateFactory*>*>(factory_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<PtrNfa>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                ActionParser* a6ActionParser = GetAction(ToUtf32("A6"));
                a6ActionParser->SetAction(A6Action);
                ActionParser* a7ActionParser = GetAction(ToUtf32("A7"));
                a7ActionParser->SetAction(A7Action);
                ActionParser* a8ActionParser = GetAction(ToUtf32("A8"));
                a8ActionParser->SetAction(A8Action);
                ActionParser* a9ActionParser = GetAction(ToUtf32("A9"));
                a9ActionParser->SetAction(A9Action);
                ActionParser* a10ActionParser = GetAction(ToUtf32("A10"));
                a10ActionParser->SetAction(A10Action);
                ActionParser* a11ActionParser = GetAction(ToUtf32("A11"));
                a11ActionParser->SetAction(A11Action);
                ActionParser* a12ActionParser = GetAction(ToUtf32("A12"));
                a12ActionParser->SetAction(A12Action);
                ActionParser* a13ActionParser = GetAction(ToUtf32("A13"));
                a13ActionParser->SetAction(A13Action);
                ActionParser* a14ActionParser = GetAction(ToUtf32("A14"));
                a14ActionParser->SetAction(A14Action);
                NonterminalParser* chrNonterminalParser = GetNonterminal(ToUtf32("chr"));
                chrNonterminalParser->SetPost(Postchr);
                NonterminalParser* clsNonterminalParser = GetNonterminal(ToUtf32("cls"));
                clsNonterminalParser->SetPost(Postcls);
                NonterminalParser* altNonterminalParser = GetNonterminal(ToUtf32("alt"));
                altNonterminalParser->SetPre(Prealt);
                altNonterminalParser->SetPost(Postalt);
                NonterminalParser* escapeNonterminalParser = GetNonterminal(ToUtf32("escape"));
                escapeNonterminalParser->SetPost(Postescape);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, cast<char>(context->fromchr));
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(string(eps), true));
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, context->fromcls);
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromalt;
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.digit), false));
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.digit), true));
            }
            public void A6Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.space), false));
            }
            public void A7Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.space), true));
            }
            public void A8Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.word), false));
            }
            public void A9Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.word), true));
            }
            public void A10Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.lower), false));
            }
            public void A11Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.lower), true));
            }
            public void A12Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.upper), false));
            }
            public void A13Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, CharClass(ToRanges(Class.upper), true));
            }
            public void A14Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = MakeNfa(context->factory, cast<char>(context->fromescape));
            }
            public void Postchr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromchr_value = stack.Pop();
                    context->fromchr = *cast<ValueObject<uchar>*>(fromchr_value.Get());
                }
            }
            public void Postcls(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromcls_value = stack.Pop();
                    context->fromcls = *cast<ValueObject<CharClass>*>(fromcls_value.Get());
                }
            }
            public void Prealt(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<PtrNfaStateFactory*>(context->factory)));
            }
            public void Postalt(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromalt_value = stack.Pop();
                    context->fromalt = *cast<ValueObject<PtrNfa>*>(fromalt_value.Get());
                }
            }
            public void Postescape(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromescape_value = stack.Pop();
                    context->fromescape = *cast<ValueObject<uchar>*>(fromescape_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : factory(), value(), fromchr(), fromcls(), fromalt(), fromescape()
                {
                }
                public PtrNfaStateFactory* factory;
                public PtrNfa value;
                public uchar fromchr;
                public CharClass fromcls;
                public PtrNfa fromalt;
                public uchar fromescape;
            }
        }

        public class CharRule : System.Text.Parsing.RuleParser
        {
            public CharRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("uchar"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<uchar>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = *matchBegin;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public uchar value;
            }
        }

        public class CharClassRule : System.Text.Parsing.RuleParser
        {
            public CharClassRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("CharClass"));
                AddLocalVariable(AttrOrVar(ToUtf32("bool"), ToUtf32("inverse")));
                AddLocalVariable(AttrOrVar(ToUtf32("ustring"), ToUtf32("s")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<CharClass>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                NonterminalParser* classNonterminalParser = GetNonterminal(ToUtf32("Class"));
                classNonterminalParser->SetPost(PostClass);
                NonterminalParser* charRangeNonterminalParser = GetNonterminal(ToUtf32("CharRange"));
                charRangeNonterminalParser->SetPost(PostCharRange);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = System.Text.RegularExpressions.CharClass(ToUtf8(context->s), context->inverse);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->inverse = true;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s.Append(ToUtf32(ToRanges(context->fromClass)));
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s.Append(context->fromCharRange);
            }
            public void PostClass(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClass_value = stack.Pop();
                    context->fromClass = *cast<ValueObject<Class>*>(fromClass_value.Get());
                }
            }
            public void PostCharRange(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCharRange_value = stack.Pop();
                    context->fromCharRange = *cast<ValueObject<ustring>*>(fromCharRange_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), inverse(), s(), fromClass(), fromCharRange()
                {
                }
                public CharClass value;
                public bool inverse;
                public ustring s;
                public Class fromClass;
                public ustring fromCharRange;
            }
        }

        public class ClassRule : System.Text.Parsing.RuleParser
        {
            public ClassRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("Class"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Class>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                ActionParser* a6ActionParser = GetAction(ToUtf32("A6"));
                a6ActionParser->SetAction(A6Action);
                ActionParser* a7ActionParser = GetAction(ToUtf32("A7"));
                a7ActionParser->SetAction(A7Action);
                ActionParser* a8ActionParser = GetAction(ToUtf32("A8"));
                a8ActionParser->SetAction(A8Action);
                ActionParser* a9ActionParser = GetAction(ToUtf32("A9"));
                a9ActionParser->SetAction(A9Action);
                ActionParser* a10ActionParser = GetAction(ToUtf32("A10"));
                a10ActionParser->SetAction(A10Action);
                ActionParser* a11ActionParser = GetAction(ToUtf32("A11"));
                a11ActionParser->SetAction(A11Action);
                ActionParser* a12ActionParser = GetAction(ToUtf32("A12"));
                a12ActionParser->SetAction(A12Action);
                ActionParser* a13ActionParser = GetAction(ToUtf32("A13"));
                a13ActionParser->SetAction(A13Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.alnum;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.alpha;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.blank;
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.cntrl;
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.digit;
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.graph;
            }
            public void A6Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.lower;
            }
            public void A7Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.print;
            }
            public void A8Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.punct;
            }
            public void A9Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.space;
            }
            public void A10Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.upper;
            }
            public void A11Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.word;
            }
            public void A12Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.word;
            }
            public void A13Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Class.xdigit;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public Class value;
            }
        }

        public class CharRangeRule : System.Text.Parsing.RuleParser
        {
            public CharRangeRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* firstNonterminalParser = GetNonterminal(ToUtf32("first"));
                firstNonterminalParser->SetPost(Postfirst);
                NonterminalParser* lastNonterminalParser = GetNonterminal(ToUtf32("last"));
                lastNonterminalParser->SetPost(Postlast);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(context->fromfirst);
                context->value.Append(u'-');
                context->value.Append(context->fromlast);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(context->fromfirst);
            }
            public void Postfirst(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromfirst_value = stack.Pop();
                    context->fromfirst = *cast<ValueObject<uchar>*>(fromfirst_value.Get());
                }
            }
            public void Postlast(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromlast_value = stack.Pop();
                    context->fromlast = *cast<ValueObject<uchar>*>(fromlast_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromfirst(), fromlast()
                {
                }
                public ustring value;
                public uchar fromfirst;
                public uchar fromlast;
            }
        }

        public class CharClassCharRule : System.Text.Parsing.RuleParser
        {
            public CharClassCharRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("uchar"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<uchar>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* escapeNonterminalParser = GetNonterminal(ToUtf32("escape"));
                escapeNonterminalParser->SetPost(Postescape);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = *matchBegin;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromescape;
            }
            public void Postescape(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromescape_value = stack.Pop();
                    context->fromescape = *cast<ValueObject<uchar>*>(fromescape_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromescape()
                {
                }
                public uchar value;
                public uchar fromescape;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("escape"), this, ToUtf32("System.Text.Parsing.stdlib.escape")));
            AddRule(new RegularExpressionRule(ToUtf32("RegularExpression"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("alt"), ToUtf32("AlternativeExpression"), 1))));
            AddRule(new AlternativeExpressionRule(ToUtf32("AlternativeExpression"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("left"), ToUtf32("SequenceExpression"), 1)),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('|'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("right"), ToUtf32("SequenceExpression"), 1))))))));
            AddRule(new SequenceExpressionRule(ToUtf32("SequenceExpression"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("left"), ToUtf32("PostfixExpression"), 1)),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("right"), ToUtf32("PostfixExpression"), 1)))))));
            AddRule(new PostfixExpressionRule(ToUtf32("PostfixExpression"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("primary"), ToUtf32("PrimaryExpression"), 1)),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                        new System.Text.Parsing.CharParser('*')),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                        new System.Text.Parsing.CharParser('+'))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                    new System.Text.Parsing.CharParser('?'))))))));
            AddRule(new PrimaryExpressionRule(ToUtf32("PrimaryExpression"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.AlternativeParser(
                                                            new System.Text.Parsing.AlternativeParser(
                                                                new System.Text.Parsing.AlternativeParser(
                                                                    new System.Text.Parsing.AlternativeParser(
                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("chr"), ToUtf32("Char"), 0)),
                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                                            new System.Text.Parsing.CharParser('.'))),
                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("cls"), ToUtf32("CharClass"), 0))),
                                                                new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                                    new System.Text.Parsing.GroupingParser(
                                                                        new System.Text.Parsing.SequenceParser(
                                                                            new System.Text.Parsing.SequenceParser(
                                                                                new System.Text.Parsing.CharParser('('),
                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("alt"), ToUtf32("AlternativeExpression"), 1)),
                                                                            new System.Text.Parsing.CharParser(')'))))),
                                                            new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                                new System.Text.Parsing.StringParser(ToUtf32("\\d")))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                                                            new System.Text.Parsing.StringParser(ToUtf32("\\D")))),
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A6"),
                                                        new System.Text.Parsing.StringParser(ToUtf32("\\s")))),
                                                new System.Text.Parsing.ActionParser(ToUtf32("A7"),
                                                    new System.Text.Parsing.StringParser(ToUtf32("\\S")))),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A8"),
                                                new System.Text.Parsing.StringParser(ToUtf32("\\w")))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A9"),
                                            new System.Text.Parsing.StringParser(ToUtf32("\\W")))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A10"),
                                        new System.Text.Parsing.StringParser(ToUtf32("\\l")))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A11"),
                                    new System.Text.Parsing.StringParser(ToUtf32("\\L")))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A12"),
                                new System.Text.Parsing.StringParser(ToUtf32("\\u")))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A13"),
                            new System.Text.Parsing.StringParser(ToUtf32("\\U")))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A14"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("escape"), ToUtf32("escape"), 0)))));
            AddRule(new CharRule(ToUtf32("Char"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.DifferenceParser(
                            new System.Text.Parsing.AnyCharParser(),
                            new System.Text.Parsing.CharSetParser(ToUtf32("()\\[*+?|.")))))));
            AddRule(new CharClassRule(ToUtf32("CharClass"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('['),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.GroupingParser(
                                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                new System.Text.Parsing.CharParser('^'))))),
                                new System.Text.Parsing.KleeneStarParser(
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("Class"), ToUtf32("Class"), 0)),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("CharRange"), ToUtf32("CharRange"), 0)))))),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.CharParser(']')))))));
            AddRule(new ClassRule(ToUtf32("Class"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.AlternativeParser(
                                                            new System.Text.Parsing.AlternativeParser(
                                                                new System.Text.Parsing.AlternativeParser(
                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                                                        new System.Text.Parsing.StringParser(ToUtf32("[:alnum:]"))),
                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                                        new System.Text.Parsing.StringParser(ToUtf32("[:alpha:]")))),
                                                                new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                                    new System.Text.Parsing.StringParser(ToUtf32("[:blank:]")))),
                                                            new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                                new System.Text.Parsing.StringParser(ToUtf32("[:cntrl:]")))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                            new System.Text.Parsing.StringParser(ToUtf32("[:digit:]")))),
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                                                        new System.Text.Parsing.StringParser(ToUtf32("[:graph:]")))),
                                                new System.Text.Parsing.ActionParser(ToUtf32("A6"),
                                                    new System.Text.Parsing.StringParser(ToUtf32("[:lower:]")))),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A7"),
                                                new System.Text.Parsing.StringParser(ToUtf32("[:print:]")))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A8"),
                                            new System.Text.Parsing.StringParser(ToUtf32("[:punct:]")))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A9"),
                                        new System.Text.Parsing.StringParser(ToUtf32("[:space:]")))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A10"),
                                    new System.Text.Parsing.StringParser(ToUtf32("[:upper:]")))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A11"),
                                new System.Text.Parsing.StringParser(ToUtf32("[:word:]")))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A12"),
                            new System.Text.Parsing.StringParser(ToUtf32("[:w:]")))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A13"),
                        new System.Text.Parsing.StringParser(ToUtf32("[:xdigit:]"))))));
            AddRule(new CharRangeRule(ToUtf32("CharRange"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("first"), ToUtf32("CharClassChar"), 0),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('-'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("last"), ToUtf32("CharClassChar"), 0))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.EmptyParser()))))));
            AddRule(new CharClassCharRule(ToUtf32("CharClassChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.CharSetParser(ToUtf32("\\]"), true)),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("escape"), ToUtf32("escape"), 0)))));
        }
    }
} // System.Text.RegularExpressions
