// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;

namespace System.Text.RegularExpressions
{
    public const char eps = '\0';
    
    public class PtrNfaState
    {
        public PtrNfaState() : id(-1), edges(), accepting(false)
        {
        }
        suppress PtrNfaState(const PtrNfaState&);
        suppress void operator=(const PtrNfaState&);
        public nothrow inline int Id() const 
        {
            return id;
        }
        public nothrow inline void SetId(int id_)
        {
            id = id_;
        }
        public void AddEdge(const PtrNfaEdge& edge)
        {
            edges.Add(edge);
        }
        public nothrow inline const List<PtrNfaEdge>& Edges() const
        {
            return edges;
        }
        public void SetEdges(const List<PtrNfaEdge>& edges_)
        {
            edges = edges_;
        }
        public List<PtrNfaState*> Next(char c)
        {
            List<PtrNfaState*> next;
            for (const PtrNfaEdge& edge : edges)
            {
                if (edge.Chars().Contains(c))
                {
                    next.Add(edge.Next());
                }
            }
            return next;
        }
        public nothrow void Clear()
        {
            id = -1;
            edges.Clear();
            accepting = false;
        }
        public nothrow inline bool Accepting() const
        {
            return accepting;
        }
        public nothrow inline void SetAccepting()
        {
            accepting = true;
        }
        public nothrow inline void ResetAccepting()
        {
            accepting = false;
        }
        private int id;
        private List<PtrNfaEdge> edges;
        private bool accepting;  
    }

    public class PtrNfaEdge
    {
        public PtrNfaEdge() : cls(), next(null)
        {
        }
        public PtrNfaEdge(const CharClass& cls_, PtrNfaState* next_) : cls(cls_), next(next_)
        {
        }
        public nothrow inline const CharClass& Chars() const
        {
            return cls;
        }
        public nothrow inline PtrNfaState* Next() const
        {
            return next;
        }
        private CharClass cls;
        private PtrNfaState* next;
    }

    public OutputStream& operator<<(OutputStream& s, const PtrNfaEdge& edge)
    {
        s << "(" << edge.Chars() << " -> " << edge.Next()->Id() << ")";
        return s;
    }

    public StreamWriter& operator<<(StreamWriter& s, const PtrNfaEdge& edge)
    {
        s << "(" << edge.Chars() << " -> " << edge.Next()->Id() << ")";
        return s;
    }
        
    public class PtrNfaStateFactory
    {
        public ~PtrNfaStateFactory()
        {
            try
            {
                Clear();
            }            
            catch (const Exception& ex)
            {
            }
        }
        public void Clear()
        {
            for (PtrNfaState* state : states)
            {
                delete state;
            }
            states.Clear();
        }
        public PtrNfaState* MakeState()
        {
            PtrNfaState* state = new PtrNfaState();
            states.Add(state);
            return state;
        }
        private List<PtrNfaState*> states;
    }
    
    public class PtrNfa
    {
        public PtrNfa() : start(null), end(null), states()
        {
        }
        public PtrNfa(PtrNfaState* start_, PtrNfaState* end_) : start(start_), end(end_)
        {
            states.Add(start);
            states.Add(end);
        }
        public nothrow inline PtrNfaState* Start() const
        {
            return start; 
        }
        public inline void SetStart(PtrNfaState* start_)
        {
            start = start_;
            states.Add(start);
        }
        public nothrow inline PtrNfaState* End() const
        {
            return end;
        }
        public inline void SetEnd(PtrNfaState* end_)
        {
            end = end_;
            states.Add(end);
        }
        public nothrow const List<PtrNfaState*>& States() const
        {
            return states; 
        }
        public void AddState(PtrNfaState* state)
        {
            states.Add(state);
        }
        public nothrow void NumberStates()
        {
            long n = states.Count();
            for (long i = 0; i < n; ++i)
            {
                PtrNfaState* state = states[i];
                state->SetId(cast<int>(i));
            }
        }
        private PtrNfaState* start;
        private PtrNfaState* end;
        private List<PtrNfaState*> states;
    }

    public OutputStream& operator<<(OutputStream& s, const PtrNfa& nfa)
    {
        for (PtrNfaState* state : nfa.States())
        {
            string a;
            if (state->Accepting())
            {
                a.Append('*');
            }
            s << a << state->Id() << ": ";
            for (const PtrNfaEdge& edge : state->Edges())
            {
                s << edge;
            }
            s << endl();
        }
        return s;
    }

    public StreamWriter& operator<<(StreamWriter& s, const PtrNfa& nfa)
    {
        for (PtrNfaState* state : nfa.States())
        {
            string a;
            if (state->Accepting())
            {
                a.Append('*');
            }
            s << a << state->Id() << ": ";
            for (const PtrNfaEdge& edge : state->Edges())
            {
                s << edge;
            }
            s << endl();
        }
        return s;
    }
}
