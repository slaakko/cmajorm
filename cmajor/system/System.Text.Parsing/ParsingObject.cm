// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public abstract class ParsingObject 
    {
        public nothrow ParsingObject(const ustring& name_) : this(name_, null)
        {
        }
        public nothrow ParsingObject(const ustring& name_, Scope* enclosingScope_) : 
            owned(false), name(name_), enclosingScope(enclosingScope_), scope(null), owner(external)
        {
        }
        public default virtual ~ParsingObject();
        public abstract void Accept(Visitor& visitor);
        public inline nothrow const ustring& Name() const
        {
            return name;
        }
        public nothrow void SetName(const ustring& name_) 
        {
            name = name_;
        }
        public nothrow ustring FullName() const
        {
            ustring enclosingScopeFullName;
            if (enclosingScope != null)
            {
                enclosingScopeFullName = enclosingScope->FullName();
            }
            if (enclosingScopeFullName.IsEmpty())
            {
                return name;
            }
            else
            {
                return enclosingScopeFullName + u"." + name;
            }            
        }
        public nothrow inline Scope* EnclosingScope() const
        {
            return enclosingScope;
        }
        public nothrow void SetEnclosingScope(Scope* enclosingScope_)
        {
            enclosingScope = enclosingScope_;
        }
        public nothrow inline Scope* ContainerScope() const
        {
            return scope;
        }
        public nothrow void SetContainerScope(Scope* scope_)
        {
            scope = scope_;
        }
        public nothrow inline Scope* GetScope() const
        {
            if (scope != null)
            {
                return scope;
            }
            return enclosingScope;
        }
        public nothrow inline const Span& GetSpan() const
        {
            return span;
        }
        public nothrow void SetSpan(const Span& span_)
        {
            span = span_;
        }
        public nothrow inline int Owner() const 
        {
            return owner;
        }
        public nothrow inline void SetOwner(int owner_)
        {
            owner = owner_;
        }
        public nothrow inline bool IsExternal() const
        {
            return owner == external;
        }
        public virtual void AddToScope()
        {
            Scope* es = enclosingScope;
            if (es != null)
            {
                try
                {
                    es->Add(this);
                    if (scope != null)
                    {
                        scope->SetEnclosingScope(es);
                    }
                }
                catch (const Exception& ex)
                {
                    ThrowException(ex.Message(), span);
                }
            }
        }
        public void Own(ParsingObject* object)
        {
            if (object != null)
            {
                if (!object->owned)
                {
                    object->owned = true;
                    ownedObjects.Add(UniquePtr<ParsingObject>(object));
                }
            }            
        }
        public inline nothrow bool IsOwned() const
        {
            return owned;
        }
        public inline nothrow void SetOwned()
        {
            owned = true;
        }
        public void Dump(CodeFormatter& formatter)
        {
            long n = ownedObjects.Count();
            formatter.WriteLine(string(typename(*this)) + " : " + ToUtf8(name) + " : " + ToString(n));
            formatter.WriteLine("{");
            formatter.IncIndent();
            for (long i = 0; i < n; ++i)
            {
                ParsingObject* o = ownedObjects[i].Get();
                o->Dump(formatter);
            }
            formatter.DecIndent();
            formatter.WriteLine("}");
        }
        private const int external = -1;
        private bool owned;
        private List<UniquePtr<ParsingObject>> ownedObjects;
        private ustring name;
        private Scope* enclosingScope;
        private Scope* scope;
        private Span span;
        private int owner;
    }
}
