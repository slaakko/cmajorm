// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public class ParsingDomain : ParsingObject
    {
        public ParsingDomain() : 
            base(u"parsingDomain"), grammarMap(), globalNamespace(new Namespace(u"", null)), globalScope(globalNamespace->GetScope()), currentNamespace(globalNamespace), nextRuleId(0)
        {
            Own(globalNamespace);
            globalScope->SetNs(globalNamespace);
            namespaceMap[currentNamespace->FullName()] = currentNamespace;
        }
        public Grammar* GetGrammar(const ustring& grammarName) const
        {
            HashMap<ustring, Grammar*>.ConstIterator it = grammarMap.CFind(grammarName);
            if (it != grammarMap.CEnd())
            {
                return it->second;
            }
            return null;
        }
        public void AddGrammar(Grammar* grammar)
        {
            Own(grammar);
            ustring grammarFullName = grammar->FullName();
            HashMap<ustring, Grammar*>.ConstIterator it = grammarMap.CFind(grammarFullName);
            if (it == grammarMap.CEnd())
            {
                grammarMap[grammarFullName] = grammar;
                grammar->SetNs(currentNamespace);
                grammar->AddToScope();
            }
            else
            {
                Console.WriteLine("ParsingDomain.AddGrammar : grammar already found");
            }
        }
        public override void Accept(Visitor& visitor)
        {
            for (const Pair<ustring, Grammar*>& p : grammarMap)
            {
                Grammar* grammar = p.second;
                grammar->Accept(visitor);
            }
        }
        public Scope* GetNamespaceScope(const ustring& fullNamespaceName) const
        {
            if (fullNamespaceName.IsEmpty()) 
            {
                return globalScope;
            }        
            Namespace* ns = globalScope->GetNamespace(fullNamespaceName);
            if (ns == null)
            {
                ns = new Namespace(fullNamespaceName, globalScope);
                Own(ns);
                globalScope->AddNamespace(ns);
            }
            return ns->GetScope();
        }
        public void BeginNamespace(const ustring& ns)
        {
            ustring fullNamespaceName = ns;
            if (!currentNamespace->FullName().IsEmpty())
            {
                fullNamespaceName = currentNamespace->FullName() + u"." + ns;
            }
            namespaceStack.Push(currentNamespace);
            HashMap<ustring, Namespace*>.ConstIterator it = namespaceMap.CFind(fullNamespaceName);
            if (it != namespaceMap.CEnd())
            {
                currentNamespace = it->second;
            }
            else
            {
                Namespace* newNs = new Namespace(fullNamespaceName, globalScope);
                Own(newNs);
                newNs->GetScope()->SetNs(newNs);
                namespaceMap[newNs->FullName()] = newNs;
                currentNamespace = newNs;
                if (globalScope->GetNamespace(newNs->FullName()) == null)
                {
                    globalScope->AddNamespace(newNs);
                }
            }
        }
        public void EndNamespace()
        {
            currentNamespace = namespaceStack.Pop();
        }
        public inline nothrow int GetNextRuleId() 
        {
            return nextRuleId++;
        }
        public inline nothrow int NumRules() const
        {
            return nextRuleId;
        }
        public inline nothrow Namespace* GlobalNamespace() const
        {
            return globalNamespace;
        }
        public inline nothrow Namespace* CurrentNamespace() const
        {
            return currentNamespace;
        }
        public inline nothrow Scope* CurrentScope() const
        {
            return currentNamespace->GetScope();
        }
        public void Import(ParsingDomain* pd, bool importExternals)
        {
            globalNamespace->Import(pd->GlobalNamespace(), this, importExternals);
        }
        private HashMap<ustring, Grammar*> grammarMap;
        private Namespace* globalNamespace;
        private Scope* globalScope;
        private Namespace* currentNamespace;
        private HashMap<ustring, Namespace*> namespaceMap;
        private Stack<Namespace*> namespaceStack;
        private int nextRuleId;
    }
    
    public class ParsingDomainRepository
    {
        static ParsingDomainRepository() : instance(new ParsingDomainRepository())
        {
        }
        public static ParsingDomainRepository& Instance() 
        {
            return *instance;
        }
        private ParsingDomainRepository()
        {
        }
        public ~ParsingDomainRepository()
        {
        }
        public void Register(ParsingDomain* parsingDomain)
        {
            if (!parsingDomain->IsOwned())
            {
                parsingDomain->SetOwned();
                parsingDomains.Add(UniquePtr<ParsingDomain>(parsingDomain));
            }
        }
        private static UniquePtr<ParsingDomainRepository> instance;
        private List<UniquePtr<ParsingDomain>> parsingDomains;
    }
    
    public void RegisterParsingDomain(ParsingDomain* parsingDomain)
    {
        ParsingDomainRepository.Instance().Register(parsingDomain);
    }
}
