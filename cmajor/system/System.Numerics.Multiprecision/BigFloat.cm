// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Numerics.Multiprecision
{
    public class BigFloat
    {
        public BigFloat() 
        {
            int errorStrHandle = -1;
            handle = RtCreateDefaultBigFloat(errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(int v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromInt(v, errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(uint v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromUInt(v, errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(long v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromLong(v, errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(ulong v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromULong(v, errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(double v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromDouble(v, errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public nothrow BigFloat(BigFloat&& that) : handle(that.handle)
        {
            that.handle = null;
        }
        public BigFloat(const string& v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromStr(v.Chars(), errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(const BigFloat& v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromCopy(v.handle, errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public void operator=(const BigFloat& v)
        {
            if (handle == v.handle) return;
            if (handle != null)
            {
                RtDestroyBigFloat(handle);
            }            
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromCopy(v.handle, errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(const BigInt& v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromBigInt(v.Handle(), errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public BigFloat(const BigRational& v)
        {
            int errorStrHandle = -1;
            handle = RtCreateBigFloatFromBigRational(v.Handle(), errorStrHandle);
            if (handle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
        }
        public nothrow default void operator=(BigFloat&&);
        public nothrow BigFloat(void* handle_) : handle(handle_)
        {
        }
        public ~BigFloat()
        {
            if (handle != null)
            {
                RtDestroyBigFloat(handle);
            }        
        }
        public string ToString() const
        {
            int errorStrHandle = -1;
            const char* p = RtBigFloatToCharPtr(handle, errorStrHandle);
            if (p == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
            string s = p;
            RtDeleteCharPtr(p);
            return s;
        }
        public double ToDouble() const
        {
            int errorStrHandle = -1;
            double result = RtBigFloatToDouble(handle, errorStrHandle);
            if (errorStrHandle != -1)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
            return result;
        }
        public BigInt ToBigInt() const
        {
            int errorStrHandle = -1;
            void* bigIntHandle = RtBigFloatToBigInt(handle, errorStrHandle);
            if (bigIntHandle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
            return BigInt(bigIntHandle);
        }
        public BigRational ToBigRational() const
        {
            int errorStrHandle = -1;
            void* bigRationalHandle = RtBigFloatToBigRational(handle, errorStrHandle);
            if (bigRationalHandle == null)
            {
                string error = RtGetString(errorStrHandle);
                RtDisposeString(errorStrHandle);
                throw Exception(error);
            }
            return BigRational(bigRationalHandle);
        }
        public nothrow inline void* Handle() const
        {
            return handle;
        }
        private void* handle;
    }
    
    public BigFloat operator-(const BigFloat& x)
    {
        int errorStrHandle = -1;
        void* handle = RtNegBigFloat(x.Handle(), errorStrHandle);
        if (handle == null)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return BigFloat(handle);
    }

    public BigFloat operator+(const BigFloat& x)
    {
        int errorStrHandle = -1;
        void* handle = RtPosBigFloat(x.Handle(), errorStrHandle);
        if (handle == null)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return BigFloat(handle);
    }
    
    public BigFloat operator+(const BigFloat& left, const BigFloat& right)
    {
        int errorStrHandle = -1;
        void* handle = RtAddBigFloat(left.Handle(), right.Handle(), errorStrHandle);
        if (handle == null)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return BigFloat(handle);
    }
    
    public BigFloat operator-(const BigFloat& left, const BigFloat& right)
    {
        int errorStrHandle = -1;
        void* handle = RtSubBigFloat(left.Handle(), right.Handle(), errorStrHandle);
        if (handle == null)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return BigFloat(handle);
    }
    
    public BigFloat operator*(const BigFloat& left, const BigFloat& right)
    {
        int errorStrHandle = -1;
        void* handle = RtMulBigFloat(left.Handle(), right.Handle(), errorStrHandle);
        if (handle == null)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return BigFloat(handle);
    }
    
    public BigFloat operator/(const BigFloat& left, const BigFloat& right)
    {
        int errorStrHandle = -1;
        void* handle = RtDivBigFloat(left.Handle(), right.Handle(), errorStrHandle);
        if (handle == null)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return BigFloat(handle);
    }
    
    public bool operator==(const BigFloat& left, const BigFloat& right)
    {
        int errorStrHandle = -1;
        bool result = RtEqualBigFloat(left.Handle(), right.Handle(), errorStrHandle);
        if (errorStrHandle != -1)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return result;
    }

    public bool operator<(const BigFloat& left, const BigFloat& right)
    {
        int errorStrHandle = -1;
        bool result = RtLessBigFloat(left.Handle(), right.Handle(), errorStrHandle);
        if (errorStrHandle != -1)
        {
            string error = RtGetString(errorStrHandle);
            RtDisposeString(errorStrHandle);
            throw Exception(error);
        }
        return result;
    }

    public TextWriter& operator<<(TextWriter& writer, const BigFloat& x)
    {
        return writer << x.ToString();
    }
}
