// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

public extern cdecl nothrow ulong OsAllocateMemoryPage(ulong pageSize);
public extern cdecl nothrow bool OsFreeMemoryPage(ulong pageAddress);
public extern cdecl nothrow void OsCopyMemoryPage(ulong fromAddress, ulong toAddress, ulong pageSize);
public extern cdecl nothrow void OsWriteMemoryByte(ulong address, byte b);
public extern cdecl nothrow byte OsReadMemoryByte(ulong address);
public extern cdecl nothrow void* OsGetStdHandle(int stdInOutOrErr);
public extern cdecl nothrow bool OsRegisterConsoleCallback(void* consoleInputHandle, ulong callBackValue);
public extern cdecl nothrow bool OsReadConsoleInput(void* consoleInputHandle, uchar* c);
public extern cdecl nothrow bool OsGetConsoleScreenBufferInfo(void* consoleOutputHandle, int* cursorPosX, int* cursorPosY, int* screenSizeX, int* screenSizeY, ushort* attrs);
public extern cdecl nothrow bool OsSetConsoleCursorPosition(void* consoleOutputHandle, int cursorPosX, int cursorPosY);
public extern cdecl nothrow bool OsSetConsoleTextAttribute(ushort attrs);
public extern cdecl nothrow void* OsCreateConsoleOutputHandle();
public extern cdecl nothrow bool OsWriteConsole(void* consoleOutputHandle, const uchar* chars);
public extern cdecl nothrow void* OsCreateHostFile(const char* filePath);
public extern cdecl nothrow void* OsOpenHostFile(const char* filePath);
public extern cdecl nothrow void OsCloseHostFile(void* fileHandle);
public extern cdecl nothrow void* OsCreateIoCompletionPort();
public extern cdecl nothrow void* OsAssociateFileWithCompletionPort(void* fileHandle, void* completionPort, ulong completionKey);
public extern cdecl nothrow void OsCloseIoCompletionPort(void* completionPortHandle);
public extern cdecl nothrow bool OsGetQueuedCompletionStatus(void* completionPortHandle, ulong* numberOfBytes, ulong* completionKey, void** overlapped);
public extern cdecl nothrow bool OsPostQueuedCompletionStatus(void* completionPortHandle, ulong numberOfBytes, ulong completionKey);
public extern cdecl nothrow void* OsCreateOverlapped(ulong offset);
public extern cdecl nothrow void OsDestroyOverlapped(void* overlapped);
public extern cdecl nothrow bool OsReadFile(void* fileHandle, void* buffer, uint numberOfBytesToRead, void* overlapped);
public extern cdecl nothrow bool OsWriteFile(void* fileHandle, void* buffer, uint numberOfBytesToWrite, void* overlapped);
public extern cdecl nothrow void* OsCreateEvent();
public extern cdecl nothrow void OsSetEvent(void* eventHandle);
public extern cdecl nothrow void OsResetEvent(void* eventHandle);
public extern cdecl nothrow void OsWaitEvent(void* eventHandle);
public extern cdecl nothrow void OsCloseEvent(void* eventHandle);
public extern cdecl nothrow int OsWaitForMultipleObjects(uint count, void** handles);
public extern cdecl nothrow void* OsConvertThreadToFiber(void* param);
public extern cdecl nothrow void* OsCreateFiber(ulong stackSize, void* startAddress, void* param);
public extern cdecl nothrow void OsSwitchToFiber(void* fiber);
public extern cdecl nothrow void* OsGetFiberData();
public extern cdecl nothrow void OsDeleteFiber(void* fiber);
public extern cdecl nothrow ulong OsGetLastError();
public extern cdecl nothrow void OsFormatMessage(ulong errorCode, char* buffer);
public extern cdecl nothrow bool OsGetLogicalDrives(char* buffer, int bufSize);
public extern cdecl nothrow uint OsGetDriveType(const char* rootPathName);
public extern cdecl nothrow long OsGetFileSize(void* fileHandle);
public extern cdecl nothrow uint OsGetFileAttributes(const char* filePath);
public extern cdecl nothrow void* OsFindFirstFile(const char* pathMask, char* fileName);
public extern cdecl nothrow bool OsFindNextFile(void* findHandle, char* fileName);
public extern cdecl nothrow void OsFindClose(void* findHandle);
public extern cdecl nothrow bool OsGetFileTimes(const char* filePath, byte* ctime, byte* mtime, byte* atime);
public extern cdecl nothrow bool OsGetComputerName(char* buffer, int size);
public extern cdecl nothrow int OsGetMaxComputerNameLength();
