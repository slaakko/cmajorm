using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Template.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Template.cpp' using cpp2cm version 1.0.0

namespace System.Cmajor.Ast
{
    public class TemplateIdNode : Node
    {
        public TemplateIdNode(const System.Lex.Span& span_) :
            base(NodeType.templateIdNode, span_)
        {
        }
        public TemplateIdNode(const System.Lex.Span& span_, Node* primary_) :
            base(NodeType.templateIdNode, span_), primary(primary_)
        {
            primary->SetParent(this);
        }
        public Node* Primary()
        {
            return primary.Get();
        }
        public const NodeList<Node>& TemplateArguments() const
        {
            return templateArguments;
        }
        public void AddTemplateArgument(Node* templateArgument)
        {
            templateArgument->SetParent(this);
            templateArguments.Add(templateArgument);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            TemplateIdNode* clone = new TemplateIdNode(GetSpan(), primary->Clone(cloneContext));
            int n = templateArguments.Count();
            for (int i = 0; i < n; ++i)
            {
                Node* templateArgument = templateArguments[i];
                clone->AddTemplateArgument(templateArgument->Clone(cloneContext));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(primary.Get());
            templateArguments.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            primary.Reset(reader.ReadNode());
            primary->SetParent(this);
            templateArguments.Read(reader);
            templateArguments.SetParent(this);
        }
        public override string ToString() const
        {
            string s = primary->ToString();
            s.Append("<");
            int n = templateArguments.Count();
            for (int i = 0; i < n; ++i)
            {
                if (i > 0)
                {
                    s.Append(", ");
                }
                s.Append(templateArguments[i]->ToString());
            }
            s.Append(">");
            return s;
        }
        private UniquePtr<Node> primary;
        private NodeList<Node> templateArguments;
    }
    public class TemplateParameterNode : Node
    {
        public TemplateParameterNode(const System.Lex.Span& span_) :
            base(NodeType.templateParameterNode, span_), id()
        {
        }
        public TemplateParameterNode(const System.Lex.Span& span_, IdentifierNode* id_, Node* defaultTemplateArgument_) :
            base(NodeType.templateParameterNode, span_), id(id_), defaultTemplateArgument(defaultTemplateArgument_)
        {
            id->SetParent(this);
            if (!defaultTemplateArgument.IsNull())
            {
                defaultTemplateArgument->SetParent(this);
            }
        }
        public const IdentifierNode* Id() const
        {
            return id.Get();
        }
        public IdentifierNode* Id()
        {
            return id.Get();
        }
        public const Node* DefaultTemplateArgument() const
        {
            return defaultTemplateArgument.Get();
        }
        public Node* DefaultTemplateArgument()
        {
            return defaultTemplateArgument.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            Node* clonedDefaultTemplateArgument = null;
            if (!defaultTemplateArgument.IsNull())
            {
                clonedDefaultTemplateArgument = defaultTemplateArgument->Clone(cloneContext);
            }
            return new TemplateParameterNode(GetSpan(), cast<IdentifierNode*>(id->Clone(cloneContext)), clonedDefaultTemplateArgument);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(id.Get());
            bool hasDefaultTemplateArgument = defaultTemplateArgument != null;
            writer.GetBinaryWriter().Write(hasDefaultTemplateArgument);
            if (hasDefaultTemplateArgument)
            {
                writer.Write(defaultTemplateArgument.Get());
            }
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            bool hasDefaultTemplateArgument = reader.GetBinaryReader().ReadBool();
            if (hasDefaultTemplateArgument)
            {
                defaultTemplateArgument.Reset(reader.ReadNode());
                defaultTemplateArgument->SetParent(this);
            }
        }
        private UniquePtr<IdentifierNode> id;
        private UniquePtr<Node> defaultTemplateArgument;
    }
} // namespace System.Cmajor.Ast
