using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Specifier.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Specifier.cpp' using cpp2cm version 1.0.0

namespace System.Cmajor.Ast
{
    public enum Specifiers : int
    {
        none = 0, public_ = 1 << 0, protected_ = 1 << 1, private_ = 1 << 2, internal_ = 1 << 3, static_ = 1 << 4, virtual_ = 1 << 5, override_ = 1 << 6, abstract_ = 1 << 7, inline_ = 1 << 8, explicit_ = 1 << 9, external_ = 1 << 10, suppress_ = 1 << 11, default_ = 1 << 12, constexpr_ = 1 << 13, cdecl_ = 1 << 14, nothrow_ = 1 << 15, throw_ = 1 << 16, new_ = 1 << 17, const_ = 1 << 18, unit_test_ = 1 << 19, access_ = public_ | protected_ | private_ | internal_
    }
    public inline Specifiers operator|(Specifiers left, Specifiers right)
    {
        return cast<Specifiers>(cast<int>(left) | cast<int>(right));
    }
    public inline Specifiers operator&(Specifiers left, Specifiers right)
    {
        return cast<Specifiers>(cast<int>(left) & cast<int>(right));
    }
    public inline Specifiers operator~(Specifiers operand)
    {
        return cast<Specifiers>(~cast<int>(operand));
    }
    public string SpecifierStr(Specifiers specifiers)
    {
        string s;
        if ((specifiers & Specifiers.public_) != Specifiers.none)
        {
            s.Append("public");
        }
        if ((specifiers & Specifiers.protected_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("protected");
        }
        if ((specifiers & Specifiers.private_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("private");
        }
        if ((specifiers & Specifiers.internal_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("internal");
        }
        if ((specifiers & Specifiers.static_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("static");
        }
        if ((specifiers & Specifiers.virtual_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("virtual");
        }
        if ((specifiers & Specifiers.override_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("override");
        }
        if ((specifiers & Specifiers.abstract_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("abstract");
        }
        if ((specifiers & Specifiers.inline_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("inline");
        }
        if ((specifiers & Specifiers.explicit_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("explicit");
        }
        if ((specifiers & Specifiers.external_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("extern");
        }
        if ((specifiers & Specifiers.suppress_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("suppress");
        }
        if ((specifiers & Specifiers.default_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("default");
        }
        if ((specifiers & Specifiers.constexpr_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("constexpr");
        }
        if ((specifiers & Specifiers.cdecl_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("cdecl");
        }
        if ((specifiers & Specifiers.nothrow_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("nothrow");
        }
        if ((specifiers & Specifiers.throw_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("throw");
        }
        if ((specifiers & Specifiers.new_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("new");
        }
        if ((specifiers & Specifiers.unit_test_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ', 1);
            }
            s.Append("unit_test");
        }
        return s;
    }
    public bool StaticConstructorSpecifiers(Specifiers specifiers)
    {
        if ((specifiers & Specifiers.static_) == Specifiers.none) return false;
        return true;
    }
} // namespace System.Cmajor.Ast
