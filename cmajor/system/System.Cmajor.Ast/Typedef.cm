using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Typedef.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Typedef.cpp' using cpp2cm version 1.0.0

namespace System.Cmajor.Ast
{
    public class TypedefNode : Node
    {
        public TypedefNode(const System.Lex.Span& span_) :
            base(NodeType.typedefNode, span_), specifiers(Specifiers.none), typeExpr(), id()
        {
        }
        public TypedefNode(const System.Lex.Span& span_, Specifiers specifiers_, Node* typeExpr_, IdentifierNode* id_) :
            base(NodeType.typedefNode, span_), specifiers(specifiers_), typeExpr(typeExpr_), id(id_)
        {
            typeExpr->SetParent(this);
            id->SetParent(this);
        }
        public Node* TypeExpr() const
        {
            return typeExpr.Get();
        }
        public IdentifierNode* Id() const
        {
            return id.Get();
        }
        public override Specifiers GetSpecifiers() const
        {
            return specifiers;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new TypedefNode(GetSpan(), specifiers, typeExpr->Clone(cloneContext), cast<IdentifierNode*>(id->Clone(cloneContext)));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(specifiers);
            writer.Write(typeExpr.Get());
            writer.Write(id.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            specifiers = reader.ReadSpecifiers();
            typeExpr.Reset(reader.ReadNode());
            typeExpr->SetParent(this);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
        }
        private Specifiers specifiers;
        private UniquePtr<Node> typeExpr;
        private UniquePtr<IdentifierNode> id;
    }
} // namespace System.Cmajor.Ast
