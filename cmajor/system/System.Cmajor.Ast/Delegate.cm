using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Delegate.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Delegate.cpp' using cpp2cm version 1.0.0

namespace System.Cmajor.Ast
{
    public class DelegateNode : Node
    {
        public DelegateNode(const System.Lex.Span& span_) :
            base(NodeType.delegateNode, span_), specifiers(Specifiers.none), returnTypeExpr(), id(), parameters()
        {
        }
        public DelegateNode(const System.Lex.Span& span_, Specifiers specifiers_, Node* returnTypeExpr_, IdentifierNode* id_) :
            base(NodeType.delegateNode, span_), specifiers(specifiers_), returnTypeExpr(returnTypeExpr_), id(id_), parameters()
        {
            returnTypeExpr->SetParent(this);
            id->SetParent(this);
        }
        public Node* ReturnTypeExpr() const
        {
            return returnTypeExpr.Get();
        }
        public IdentifierNode* Id() const
        {
            return id.Get();
        }
        public const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public override Specifiers GetSpecifiers() const
        {
            return specifiers;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            DelegateNode* clone = new DelegateNode(GetSpan(), specifiers, returnTypeExpr->Clone(cloneContext), cast<IdentifierNode*>(id->Clone(cloneContext)));
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(specifiers);
            writer.Write(returnTypeExpr.Get());
            writer.Write(id.Get());
            parameters.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            specifiers = reader.ReadSpecifiers();
            returnTypeExpr.Reset(reader.ReadNode());
            returnTypeExpr->SetParent(this);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            parameters.Read(reader);
            parameters.SetParent(this);
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        private Specifiers specifiers;
        private UniquePtr<Node> returnTypeExpr;
        private UniquePtr<IdentifierNode> id;
        private NodeList<ParameterNode> parameters;
    }
    public class ClassDelegateNode : Node
    {
        public ClassDelegateNode(const System.Lex.Span& span_) :
            base(NodeType.classDelegateNode, span_), specifiers(Specifiers.none), returnTypeExpr(), id(), parameters()
        {
        }
        public ClassDelegateNode(const System.Lex.Span& span_, Specifiers specifiers_, Node* returnTypeExpr_, IdentifierNode* id_) :
            base(NodeType.classDelegateNode, span_), specifiers(specifiers_), returnTypeExpr(returnTypeExpr_), id(id_), parameters()
        {
            returnTypeExpr->SetParent(this);
            id->SetParent(this);
        }
        public Node* ReturnTypeExpr() const
        {
            return returnTypeExpr.Get();
        }
        public IdentifierNode* Id() const
        {
            return id.Get();
        }
        public const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public override Specifiers GetSpecifiers() const
        {
            return specifiers;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            ClassDelegateNode* clone = new ClassDelegateNode(GetSpan(), specifiers, returnTypeExpr->Clone(cloneContext), cast<IdentifierNode*>(id->Clone(cloneContext)));
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(specifiers);
            writer.Write(returnTypeExpr.Get());
            writer.Write(id.Get());
            parameters.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            specifiers = reader.ReadSpecifiers();
            returnTypeExpr.Reset(reader.ReadNode());
            returnTypeExpr->SetParent(this);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            parameters.Read(reader);
            parameters.SetParent(this);
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        private Specifiers specifiers;
        private UniquePtr<Node> returnTypeExpr;
        private UniquePtr<IdentifierNode> id;
        private NodeList<ParameterNode> parameters;
    }
} // namespace System.Cmajor.Ast
