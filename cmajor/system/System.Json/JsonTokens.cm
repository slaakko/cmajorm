using System;

// this file has been automatically generated from 'D:/work/cmajorm/cmajor/system/System.Json/JsonLexer.lexer' using soulcm lexer generator scmlg version 3.0.0

namespace JsonTokens
{
    public const int END = 0;

    public const int STRING = 1;

    public const int NUMBER = 2;

    public const int LBRACKET = 3;

    public const int RBRACKET = 4;

    public const int LBRACE = 5;

    public const int RBRACE = 6;

    public const int COMMA = 7;

    public const int COLON = 8;

    public const int TRUE = 9;

    public const int FALSE = 10;

    public const int NULL = 11;

    internal class TokenMap
    {
        static TokenMap() :
            instance(new TokenMap())
        {
        }
        public static TokenMap& Instance()
        {
            return *instance;
        }
        public int GetTokenId(const ustring& tokenName)
        {
            System.Collections.Map<ustring, int>.ConstIterator it = tokenIdMap.CFind(tokenName);
            if (it != tokenIdMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return -1;
            }
        }
        public ustring GetTokenName(int tokenId)
        {
            return tokenNameList[tokenId];
        }
        public ustring GetTokenInfo(int tokenId)
        {
            return tokenInfoList[tokenId];
        }
        private TokenMap()
        {
            tokenIdMap[u"COLON"] = 8;
            tokenIdMap[u"COMMA"] = 7;
            tokenIdMap[u"FALSE"] = 10;
            tokenIdMap[u"LBRACE"] = 5;
            tokenIdMap[u"LBRACKET"] = 3;
            tokenIdMap[u"NULL"] = 11;
            tokenIdMap[u"NUMBER"] = 2;
            tokenIdMap[u"RBRACE"] = 6;
            tokenIdMap[u"RBRACKET"] = 4;
            tokenIdMap[u"STRING"] = 1;
            tokenIdMap[u"TRUE"] = 9;
            tokenNameList.Add(u"END");
            tokenInfoList.Add(u"end of file");
            tokenNameList.Add(u"STRING");
            tokenInfoList.Add(u"'string'");
            tokenNameList.Add(u"NUMBER");
            tokenInfoList.Add(u"'number'");
            tokenNameList.Add(u"LBRACKET");
            tokenInfoList.Add(u"'['");
            tokenNameList.Add(u"RBRACKET");
            tokenInfoList.Add(u"']");
            tokenNameList.Add(u"LBRACE");
            tokenInfoList.Add(u"{'");
            tokenNameList.Add(u"RBRACE");
            tokenInfoList.Add(u"'}'");
            tokenNameList.Add(u"COMMA");
            tokenInfoList.Add(u"','");
            tokenNameList.Add(u"COLON");
            tokenInfoList.Add(u"':'");
            tokenNameList.Add(u"TRUE");
            tokenInfoList.Add(u"'true'");
            tokenNameList.Add(u"FALSE");
            tokenInfoList.Add(u"'false'");
            tokenNameList.Add(u"NULL");
            tokenInfoList.Add(u"'null'");
        }
        private static System.UniquePtr<TokenMap> instance;
        private System.Collections.Map<ustring, int> tokenIdMap;
        private System.Collections.List<ustring> tokenNameList;
        private System.Collections.List<ustring> tokenInfoList;
    }
    public int GetTokenId(const ustring& tokenName)
    {
        return TokenMap.Instance().GetTokenId(tokenName);
    }

    public ustring GetTokenName(int tokenId)
    {
        return TokenMap.Instance().GetTokenName(tokenId);
    }

    public ustring GetTokenInfo(int tokenId)
    {
        return TokenMap.Instance().GetTokenInfo(tokenId);
    }
} // namespace JsonTokens
