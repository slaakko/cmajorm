// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Xml.Serialization
{
    public abstract class XmlFactory
    {
        public nothrow XmlFactory(const string& className_) : className(className_)
        {
        }
        public abstract void* Create(System.Dom.Element* element);
        public nothrow const string& ClassName() const
        {
            return className;
        }
        private string className;
    }
 
    public class XmlClassFactory<T> : XmlFactory
    {
        private typedef T XmlSerializableClassType;
        public nothrow XmlClassFactory(const string& className) : base(className)
        {
        }
        public override void* Create(System.Dom.Element* element)
        {
            return new XmlSerializableClassType(element);
        }
    }

    public class XmlClassRegistry
    {
        static XmlClassRegistry() : instance(new XmlClassRegistry())
        {
        }
        public static XmlClassRegistry& Instance()
        {
            return *instance;
        }
        public nothrow void Register(XmlFactory* factory)
        {
            factories.Add(UniquePtr<XmlFactory>(factory));
            factoryMap[factory->ClassName()] = factory;
        }
        public void* Create(System.Dom.Element* element)
        {
            ustring classNameAttr = element->GetAttribute(u"className");
            if (classNameAttr.IsEmpty())
            {
                throw Exception("element '" + ToUtf8(element->Name()) + "' does not contain a 'className' attribute");
            }
            string className = ToUtf8(classNameAttr);
            Map<string, XmlFactory*>.ConstIterator it = factoryMap.CFind(className);
            if (it != factoryMap.CEnd())
            {
                XmlFactory* factory = it->second;
                return factory->Create(element);
            }
            throw Exception("class '" + className + "' not registered to XML class registry");
        }
        private static UniquePtr<XmlClassRegistry> instance;
        private List<UniquePtr<XmlFactory>> factories;
        private Map<string, XmlFactory*> factoryMap;
    }

    public void RegisterXmlClass<T>()
    {
        T defaultValue;
        string className = typename(defaultValue);
        XmlClassRegistry.Instance().Register(new XmlClassFactory<T>(className));
    }
}

