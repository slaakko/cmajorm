// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Text;

namespace System.Dom
{
    public abstract class DomCharacterData : DomNode
    {
        public nothrow explicit DomCharacterData(const ustring& name_) : base(name_)
        {
        }
        public nothrow DomCharacterData(const ustring& name_, const ustring& data_) : base(name_), data(data_)
        {
        }
        suppress DomCharacterData(const DomCharacterData&);
        suppress void operator=(const DomCharacterData&);
        suppress DomCharacterData(DomCharacterData&&);
        suppress void operator=(DomCharacterData&&);
        public override void Write(CodeFormatter& formatter)
        {
            formatter.Write(ToUtf8(XmlCharDataEscape(data)));
        }
        public override nothrow bool ValueContainsNewLine()
        {
            return data.Find(u'\n') != -1;
        }
        public nothrow const ustring& Data() const
        {
            return data;
        }
        public nothrow ustring& Data()
        {
            return data;
        }
        private ustring data;
    }
    
    public class DomText : DomCharacterData
    {
        public nothrow DomText() : base(u"text")
        {
        }
        public nothrow explicit DomText(const ustring& data_) : base(u"text", data_)
        {
        }
        public nothrow DomText(const ustring& name_, const ustring& data_) : base(name_, data_)
        {
        }
        suppress DomText(const DomText&);
        suppress void operator=(const DomText&);
        suppress DomText(DomText&&);
        suppress void operator=(DomText&&);
        public override UniquePtr<DomNode> CloneNode(bool deep) const
        {
            return UniquePtr<DomNode>(new DomText(Name(), Data()));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(this);
        }
    }
    
    public class DomEntityReference : DomCharacterData
    {
        public nothrow DomEntityReference() : base(u"entity_reference")
        {
        }
        public nothrow explicit DomEntityReference(const ustring& entityRef_) : base(u"entity_reference", entityRef_)
        {
        }
        suppress DomEntityReference(const DomEntityReference&);
        suppress void operator=(const DomEntityReference&);
        suppress DomEntityReference(DomEntityReference&&);
        suppress void operator=(DomEntityReference&&);
        public override void Write(CodeFormatter& formatter)
        {
            formatter.Write('&');
            formatter.Write(ToUtf8(Data()));
            formatter.Write(';');
        }
        public override UniquePtr<DomNode> CloneNode(bool deep) const
        {
            return UniquePtr<DomNode>(new DomEntityReference(Data()));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(this);
        }
    }
    
    public class DomCDataSection : DomText
    {
        public nothrow DomCDataSection() : base(u"cdata_section")
        {
        }
        public nothrow explicit DomCDataSection(const ustring& data_) : base(u"cdata_section", data_)
        {
        }
        suppress DomCDataSection(const DomCDataSection&);
        suppress void operator=(const DomCDataSection&);
        suppress DomCDataSection(DomCDataSection&&);
        suppress void operator=(DomCDataSection&&);
        public override void Write(CodeFormatter& formatter)
        {
            formatter.Write("<![CDATA[");
            formatter.Write(ToUtf8(Data()));
            formatter.Write("]]>");
        }
        public override UniquePtr<DomNode> CloneNode(bool deep) const
        {
            return UniquePtr<DomNode>(new DomCDataSection(Data()));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(this);
        }
    }
    
    public class DomComment : DomCharacterData
    {
        public nothrow DomComment() : base(u"comment")
        {
        }
        public nothrow explicit DomComment(const ustring& data_) : base(u"comment", data_)
        {
        }
        suppress DomComment(const DomComment&);
        suppress void operator=(const DomComment&);
        suppress DomComment(DomComment&&);
        suppress void operator=(DomComment&&);
        public override void Write(CodeFormatter& formatter)
        {
            formatter.Write("<!-- ");
            formatter.Write(ToUtf8(Data()));
            formatter.Write(" -->");
        }
        public override UniquePtr<DomNode> CloneNode(bool deep) const
        {
            return UniquePtr<DomNode>(new DomComment(Data()));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(this);
        }
    }
    
    public class DomProcessingInstruction : DomNode
    {
        public nothrow DomProcessingInstruction(const ustring& target_, const ustring& data_) : base(u"processing_instruction"), target(target_), data(data_)
        {
        }
        suppress DomProcessingInstruction(const DomProcessingInstruction&);
        suppress void operator=(const DomProcessingInstruction&);
        suppress DomProcessingInstruction(DomProcessingInstruction&&);
        suppress void operator=(DomProcessingInstruction&&);
        public override void Write(CodeFormatter& formatter)
        {
            formatter.WriteLine("<?" + ToUtf8(target) + " " + ToUtf8(data) + "?>");
        }
        public override UniquePtr<DomNode> CloneNode(bool deep) const
        {
            return UniquePtr<DomNode>(new DomProcessingInstruction(target, data));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(this);
        }
        public nothrow inline const ustring& Target() const
        {
            return target;
        }
        public nothrow inline ustring& Target() 
        {
            return target;
        }
        public nothrow inline const ustring& Data() const
        {
            return data;
        }
        public nothrow inline ustring& Data()
        {
            return data;
        }
        private ustring target;
        private ustring data;
    }
    
    public nothrow ustring XmlCharDataEscape(const ustring& charData)
    {
        ustring result;
        for (uchar c : charData)
        {
            switch (c)
            {
                case u'<': result.Append(u"&lt;"); break;
                case u'&': result.Append(u"&amp;"); break;
                default: result.Append(c); break;
            }
        }
        return result;
    }
}
