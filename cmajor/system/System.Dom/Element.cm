using System;
using System.Collections;
using System.Text;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngxml/dom/Element.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngxml/dom/Element.cpp' using cpp2cm version 1.0.0

namespace System.Dom
{
    public class Attr : Node
    {
        public suppress Attr(const Attr& );
        public suppress Attr(Attr&& );
        public Attr() :
            base(NodeType.attributeNode, u""), value(u"")
        {
        }
        public Attr(const ustring& name_, const ustring& value_) :
            base(NodeType.attributeNode, name_), value(value_)
        {
        }
        public suppress Attr& operator=(const Attr& );
        public suppress Attr& operator=(Attr&& );
        public const ustring& Value() const
        {
            return value;
        }
        public ustring& Value()
        {
            return value;
        }
        public override UniquePtr<Node> CloneNode(bool deep)
        {
            return UniquePtr<Node>(new Attr(Name(), value));
        }
        public override void Write(CodeFormatter& formatter)
        {
            formatter.Write(" " + ToUtf8(Name()) + "=");
            formatter.Write(ToUtf8(MakeXmlAttrValue(value)));
        }
        private ustring value;
    }
    public class Element : ParentNode
    {
        public suppress Element(const Element& );
        public suppress Element(Element&& );
        public Element(const ustring& name_) :
            base(NodeType.elementNode, name_)
        {
        }
        public Element(const ustring& name_, Map<ustring, Attr*>&& attributeMap_) :
            base(NodeType.elementNode, name_), attributeMap(Rvalue(attributeMap_))
        {
        }
        public ~Element()
        {
            for (Pair<ustring, Attr*>& p : attributeMap)
            {
                delete p.second;
            }
        }
        public suppress Element& operator=(const Element& );
        public suppress Element& operator=(Element&& );
        public const ustring& TagName() const
        {
            return Name();
        }
        public void WriteAttributes(CodeFormatter& formatter)
        {
            for (Pair<ustring, Attr*>& p : attributeMap)
            {
                Attr* attr = p.second;
                attr->Write(formatter);
            }
        }
        public bool HasMultilineContent()
        {
            if (FirstChild() != LastChild()) return true;
            Node* child = FirstChild();
            if ((child != null))
            {
                if (child->GetNodeType() == NodeType.elementNode || child->GetNodeType() == NodeType.documentNode) return true;
                if (child->ValueContainsNewLine()) return true;
            }
            return false;
        }
        public ustring GetAttribute(const ustring& attrName) const
        {
            Map<ustring, Attr*>.ConstIterator it = attributeMap.CFind(attrName);
            if (it != attributeMap.CEnd())
            {
                return it->second->Value();
            }
            return ustring();
        }
        public void AddAttribute(UniquePtr<Attr>&& attr)
        {
            RemoveAttribute(attr->Name());
            attributeMap[attr->Name()] = attr.Release();
        }
        public void SetAttribute(const ustring& attrName, const ustring& attrValue)
        {
            RemoveAttribute(attrName);
            attributeMap[attrName] = new Attr(attrName, attrValue);
        }
        public void RemoveAttribute(const ustring& attrName)
        {
            Map<ustring, Attr*>.Iterator it = attributeMap.Find(attrName);
            if (it != attributeMap.End())
            {
               delete it->second;
            }
            attributeMap.Remove(attrName);
        }
        public NodeList GetElementsByTagName(const ustring& tagName)
        {
            NodeList result;
            ElementsByTagNameVisitor visitor(result, tagName);
            Accept(visitor);
            return result;
        }
        public override UniquePtr<Node> CloneNode(bool deep)
        {
            UniquePtr<Node> clone(new Element(Name()));
            ParentNode* cloneAsParent = cast<ParentNode*>(clone.Get());
            Map<ustring, Attr*> clonedAttributeMap;
            for (const Pair<ustring, Attr*>& p : attributeMap)
            {
                UniquePtr<Node> clonedAttrNode = p.second->CloneNode(false);
                clonedAttrNode->InternalSetParent(cloneAsParent);
                clonedAttributeMap[p.first] = cast<Attr*>(clonedAttrNode.Release());
            }
            Element* cloneAsElement = cast<Element*>(clone.Get());
            cloneAsElement->attributeMap = Rvalue(clonedAttributeMap);
            if (deep)
            {
                CloneChildrenTo(cloneAsParent);
            }
            return clone;
        }
        public override bool HasAttributes() const
        {
            return !attributeMap.IsEmpty();
        }
        public override void Write(CodeFormatter& formatter)
        {
            if (HasChildNodes())
            {
                if (attributeMap.IsEmpty())
                {
                    formatter.Write("<" + ToUtf8(Name()) + ">");
                }
                else
                {
                    formatter.Write("<" + ToUtf8(Name()));
                    WriteAttributes(formatter);
                    formatter.Write(">");
                }
                bool prevPreserveSpace = formatter.PreserveSpace();
                if (GetAttribute(u"xml:space") == u"preserve")
                {
                    formatter.SetPreserveSpace(true);
                }
                bool preserveSpace = formatter.PreserveSpace() || !HasMultilineContent();
                if (!preserveSpace)
                {
                    formatter.WriteLine();
                    formatter.IncIndent();
                }
                base->Write(formatter);
                if (!preserveSpace)
                {
                    formatter.DecIndent();
                    formatter.WriteLine("</" + ToUtf8(Name()) + ">");
                }
                else if (prevPreserveSpace)
                {
                    formatter.Write("</" + ToUtf8(Name()) + ">");
                }
                else
                {
                    formatter.WriteLine("</" + ToUtf8(Name()) + ">");
                }
                formatter.SetPreserveSpace(prevPreserveSpace);
            }
            else
            {
                if (attributeMap.IsEmpty())
                {
                    formatter.WriteLine("<" + ToUtf8(Name()) + "/>");
                }
                else
                {
                    formatter.Write("<" + ToUtf8(Name()));
                    WriteAttributes(formatter);
                    formatter.WriteLine("/>");
                }
            }
        }
        public override void WalkAttribute(NodeOp& nodeOp)
        {
            for (const Pair<ustring, Attr*>& p : attributeMap)
            {
                Attr* attr = p.second;
                nodeOp.Apply(attr);
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(this);
            base->Accept(visitor);
            visitor.EndVisit(this);
        }
        private Map<ustring, Attr*> attributeMap;
    }
    public ustring AttrValueEscape(const ustring& attributeValue, uchar delimiter)
    {
        ustring result;
        for (uchar c : attributeValue)
        {
            switch (c)
            {
                case '<': result.Append(u"&lt;");
                break;
                case '&': result.Append(u"&amp;");
                break;
                case '\"': if (delimiter == '\"') result.Append(u"&quot;");
                else result.Append('\"', 1);
                break;
                case '\'': if (delimiter == '\'') result.Append(u"&apos;");
                else result.Append('\'', 1);
                break;
                default: result.Append(c, 1);
                break;
            }
        }
        return result;
    }
    public ustring MakeXmlAttrValue(const ustring& attributeValue)
    {
        ustring result;
        if (attributeValue.Find('\"') == -1)
        {
            result.Append('\"', 1);
            result.Append(AttrValueEscape(attributeValue, '\"'));
            result.Append('\"', 1);
        }
        else if (attributeValue.Find('\'') == -1)
        {
            result.Append('\'', 1);
            result.Append(AttrValueEscape(attributeValue, '\''));
            result.Append('\'', 1);
        }
        else
        {
            result.Append('\"', 1);
            result.Append(AttrValueEscape(attributeValue, '\"'));
            result.Append('\"', 1);
        }
        return result;
    }
    public class ElementsByTagNameVisitor : Visitor
    {
        public ElementsByTagNameVisitor(NodeList& elements_, const ustring& tagName_) :
            elements(elements_), tagName(tagName_)
        {
        }
        public override void BeginVisit(Element* element)
        {
            if (element->Name() == tagName)
            {
                elements.InternalAddNode(element);
            }
        }
        private NodeList& elements;
        private ustring tagName;
    }
} // namespace System.Dom
