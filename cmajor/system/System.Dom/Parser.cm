using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngxml/dom/Parser.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngxml/dom/Parser.cpp' using cpp2cm version 1.0.0

namespace System.Dom
{
    public enum Flags : int
    {
        none = 0, debug = 1 << 0
    }
    public inline Flags operator&(Flags flags, Flags flag)
    {
        return cast<Flags>(cast<int>(flags) & cast<int>(flag));
    }
    public inline Flags operator|(Flags flags, Flags flag)
    {
        return cast<Flags>(cast<int>(flags) | cast<int>(flag));
    }
    public inline Flags operator~(Flags flags)
    {
        return cast<Flags>(~cast<int>(flags));
    }
    public class DomDocumentHandler : System.Xml.XmlContentHandler
    {
        public DomDocumentHandler() :
            document(new Document())
        {
        }
        public UniquePtr<Document> GetDocument()
        {
            return Rvalue(document);
        }
        public void AddTextContent()
        {
            AddTextContent(false);
        }
        public void AddTextContent(bool addSpace)
        {
            if (!currentElement.IsNull())
            {
                ustring text = TrimAll(textContent);
                if (!text.IsEmpty())
                {
                    if (addSpace)
                    {
                        text.Append(' ', 1);
                    }
                    UniquePtr<Node> textNode(new System.Dom.Text(text));
                    currentElement->AppendChild(Rvalue(textNode));
                }
            }
            textContent.Clear();
        }
        public override void StartDocument()
        {
        }
        public override void EndDocument()
        {
        }
        public override void Version(const ustring& xmlVersion)
        {
            document->SetXmlVersion(xmlVersion);
        }
        public override void Standalone(bool standalone)
        {
            document->SetXmlStandalone(standalone);
        }
        public override void Encoding(const ustring& encoding)
        {
            document->SetXmlEncoding(encoding);
        }
        public override void HandleText(const ustring& text)
        {
            textContent.Append(text);
        }
        public override void HandleComment(const ustring& comment)
        {
            AddTextContent();
            UniquePtr<Node> commentNode(new Comment(comment));
            if (!currentElement.IsNull())
            {
                currentElement->AppendChild(Rvalue(commentNode));
            }
            else
            {
                document->AppendChild(Rvalue(commentNode));
            }
        }
        public override void HandlePI(const ustring& target, const ustring& data)
        {
            AddTextContent();
            UniquePtr<Node> processingInstructionNode(new ProcessingInstruction(target, data));
            if (!currentElement.IsNull())
            {
                currentElement->AppendChild(Rvalue(processingInstructionNode));
            }
            else
            {
                document->AppendChild(Rvalue(processingInstructionNode));
            }
        }
        public override void HandleCDataSection(const ustring& data)
        {
            AddTextContent();
            UniquePtr<Node> cdataSection(new CDataSection(data));
            if (!currentElement.IsNull())
            {
                currentElement->AppendChild(Rvalue(cdataSection));
            }
            else
            {
                document->AppendChild(Rvalue(cdataSection));
            }
        }
        public override void StartElement(const ustring& namespaceUri, const ustring& localName, const ustring& qualifiedName, const System.Xml.Attributes& attributes)
        {
            AddTextContent(true);
            elementStack.Push(Rvalue(currentElement));
            Map<ustring, Attr*> attrs;
            for (const System.Xml.Attribute& attr : attributes)
            {
                attrs[attr.QualifiedName()] = new Attr(attr.QualifiedName(), attr.Value());
            }
            currentElement.Reset(new Element(qualifiedName, Rvalue(attrs)));
            currentElement->InternalSetOwnerDocument(document.Get());
            if (!namespaceUri.IsEmpty())
            {
                currentElement->InternalSetNamespaceUri(namespaceUri);
            }
        }
        public override void EndElement(const ustring& namespaceUri, const ustring& localName, const ustring& qualifiedName)
        {
            AddTextContent();
            UniquePtr<Element> parentElement = Rvalue(elementStack.Top());
            elementStack.Pop();
            if (!parentElement.IsNull())
            {
                parentElement->AppendChild(UniquePtr<Node>(currentElement.Release()));
                currentElement = Rvalue(parentElement);
            }
            else
            {
                document->AppendChild(UniquePtr<Node>(currentElement.Release()));
            }
        }
        public override void SkippedEntity(const ustring& entityName)
        {
        }
        private UniquePtr<Document> document;
        private UniquePtr<Element> currentElement;
        private Stack<UniquePtr<Element>> elementStack;
        private ustring textContent;
    }
    public UniquePtr<Document> ParseDocument(const ustring& content, const string& systemId)
    {
        return ParseDocument(content, systemId, Flags.none);
    }
    public UniquePtr<Document> ParseDocument(const ustring& content, const string& systemId, Flags flags)
    {
        DomDocumentHandler domDocumentHandler;
        System.Xml.Flags xmlFlags = System.Xml.Flags.none;
        if ((flags & Flags.debug) != Flags.none)
        {
            xmlFlags = xmlFlags | System.Xml.Flags.debug;
        }
        System.Xml.ParseXmlContent(content, systemId, &domDocumentHandler, xmlFlags);
        return domDocumentHandler.GetDocument();
    }
    public UniquePtr<Document> ReadDocument(const string& fileName)
    {
        return ReadDocument(fileName, Flags.none);
    }
    public UniquePtr<Document> ReadDocument(const string& fileName, Flags flags)
    {
        ustring content = ToUtf32(System.IO.File.ReadAllText(fileName));
        return ParseDocument(content, fileName, flags);
    }
} // namespace System.Dom
