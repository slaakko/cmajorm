// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public enum Orientation
    {
        horizontal, vertical
    }

    public nothrow Dock SplitDock(Orientation orientation)
    {
        switch (orientation)
        {
            case Orientation.horizontal: return Dock.left;
            case Orientation.vertical: return Dock.top;
        }
        return Dock.none;
    }

    public nothrow Size SplitSize(Orientation orientation, int width)
    {
        switch (orientation)
        {
            case Orientation.horizontal: return Size(width, 0);
            case Orientation.vertical: return Size(0, width);
        }
        return Size();
    }

    public const int defaultSplitterWidth = 5;

    public class Splitter : Control
    {
        private enum Flags : sbyte
        {
            none = 0, moveSplitter = 1 << 0
        }
        public Splitter(Orientation orientation_, const Color& backgroundColor, const Point& location, int width) :
            base("System.Windows.Splitter", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            backgroundColor, "splitter", location, SplitSize(orientation_, width), SplitDock(orientation_), Anchors.none), orientation(orientation_),
            horizontalSplitterCursor(Application.GetResourceManager().GetCursor("horizontal.splitter.system.windows.cursor")),
            verticalSplitterCursor(Application.GetResourceManager().GetCursor("vertical.splitter.system.windows.cursor")), flags(), container(null)
        {
        }
        public Splitter(Orientation orientation, const Point& location) : this(orientation, GetSystemColor(SystemColor.COLOR_MENU), location, defaultSplitterWidth)
        {
        }
        public nothrow void SetContainer(SplitContainer* container_)
        {
            container = container_;
        }
        public override void PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                log->WriteLine(string(' ', level) + "Splitter." + Text() + ".handle=" + ToHexString(cast<ulong>(Handle())) + " " + ParentText() + "[" + Rect(Point(), GetSize()).ToString() + "]");
            }
        }
        protected override void OnPaint(PaintEventArgs& args)
        {
            try
            {
                if (Debug.Paint())
                {
                    Rect r(Point(), GetSize());
                    LogView* log = Application.GetLogView();
                    if (log != null)
                    {
                        log->WriteLine("Splitter.OnPaint: " + r.ToString());
                    }
                }
                base->OnPaint(args);
                args.graphics.Clear(BackgroundColor());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        protected override void SetCursor()
        {
            switch (orientation)
            {
                case Orientation.horizontal: SetCursor(horizontalSplitterCursor); break;
                case Orientation.vertical: SetCursor(verticalSplitterCursor); break;
            }
        }
        protected override void OnMouseDown(MouseEventArgs& args)
        {
            try
            {
                base->OnMouseDown(args);
                if (args.buttons == MouseButtons.lbutton)
                {
                    SetFlag(Flags.moveSplitter);
                    switch (orientation)
                    {
                        case Orientation.horizontal:
                        {
                            x = args.location.x;
                            break;
                        }
                        case Orientation.vertical:
                        {
                            y = args.location.y;
                            break;
                        }
                    }
                    WinSetCapture(Handle());
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        protected override void OnMouseMove(MouseEventArgs& args)
        {
            try
            {
                if (GetFlag(Flags.moveSplitter))
                {
                    switch (orientation)
                    {
                        case Orientation.horizontal:
                        {
                            int dx = args.location.x - x;
                            container->SetSplitterDistance(container->SplitterDistance() + dx);
                            break;
                        }
                        case Orientation.vertical:
                        {
                            int dy = args.location.y - y;
                            container->SetSplitterDistance(container->SplitterDistance() + dy);
                            break;
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        protected override void OnMouseUp(MouseEventArgs& args)
        {
            try
            {
                base->OnMouseUp(args);
                if (GetFlag(Flags.moveSplitter))
                {
                    ResetFlag(Flags.moveSplitter);
                    WinReleaseCapture();
                    switch (orientation)
                    {
                        case Orientation.horizontal:
                        {
                            int dx = args.location.x - x;
                            container->SetSplitterDistance(container->SplitterDistance() + dx);
                            break;
                        }
                        case Orientation.vertical:
                        {
                            int dy = args.location.y - y;
                            container->SetSplitterDistance(container->SplitterDistance() + dy);
                            break;
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        private nothrow inline void SetFlag(Flags flag)
        {
            flags = cast<Flags>(flags | flag);
        }
        private nothrow inline void ResetFlag(Flags flag)
        {
            flags = cast<Flags>(flags & ~flag);
        }
        private nothrow inline bool GetFlag(Flags flag) const
        {
            return (flags & flag) != 0;
        }
        private Orientation orientation;
        private Cursor& horizontalSplitterCursor;
        private Cursor& verticalSplitterCursor;
        private Flags flags;
        private int x;
        private int y;
        private SplitContainer* container;
    }

    public class SplitContainer : ContainerControl
    {
        public SplitContainer(Orientation orientation_, Control* pane1_, Splitter* splitter_, Control* pane2_, int splitterWidth, int splitterDistance_,
            const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("System.Windows.SplitContainer", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
                GetSystemColor(SystemColor.COLOR_MENU), "splitContainer", location, size, dock, anchors),
                orientation(orientation_), pane1(pane1_), splitter(splitter_), pane2(pane2_), splitterDistance(splitterDistance_)
        {
            pane1->SetSize(SplitSize(orientation, splitterDistance));
            pane1->SetDock(SplitDock(orientation));
            AddChild(pane1);
            splitter->SetContainer(this);
            AddChild(splitter);
            pane2->SetLocation(location);
            pane2->SetDock(Dock.fill);
            AddChild(pane2);
        }
        public SplitContainer(Orientation orientation, int splitterDistance, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(orientation,
                new Panel(location, SplitSize(orientation, splitterDistance), SplitDock(orientation), Anchors.none),
                new Splitter(orientation, location),
                new Panel(location, SplitSize(orientation, splitterDistance), SplitDock(orientation), Anchors.none),
                defaultSplitterWidth, splitterDistance, location, size, dock, anchors)
        {
        }
        public override void PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                log->WriteLine(string(' ', level) + "SplitContainer." + Text() + ".handle=" + ToHexString(cast<ulong>(Handle())) + " " + ParentText() + "[" + Rect(Point(), GetSize()).ToString() + "]");
            }
            Component* child = Children().FirstChild();
            while (child != null)
            {
                if (child is Control*)
                {
                    Control* childControl = cast<Control*>(child);
                    childControl->PrintWindowTree(level + 1);
                }
                child = child->NextSibling();
            }
        }
        public nothrow inline Orientation GetOrientation() const
        {
            return orientation;
        }
        public nothrow inline ContainerControl* Pane1Container() const
        {
            return pane1->GetContainerControl();
        }
        public nothrow inline Splitter* GetSplitter() const
        {
            return splitter;
        }
        public nothrow inline ContainerControl* Pane2Container() const
        {
            return pane2->GetContainerControl();
        }
        public nothrow inline int SplitterDistance() const
        {
            return splitterDistance;
        }
        public void SetSplitterDistance(int splitterDistance_)
        {
            splitterDistance = splitterDistance_;
            switch (orientation)
            {
                case Orientation.horizontal: pane1->SetSize(Size(splitterDistance, pane1->GetSize().h)); break;
                case Orientation.vertical: pane1->SetSize(Size(pane1->GetSize().w, splitterDistance)); break;
            }
            DockChildren();
            Invalidate();
        }
        private Orientation orientation;
        private int splitterDistance;
        private Control* pane1;
        private Splitter* splitter;
        private Control* pane2;
    }
}
