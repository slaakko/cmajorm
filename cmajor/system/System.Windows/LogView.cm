// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows.API;

namespace System.Windows
{
    public nothrow ControlCreateParams& LogViewControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.LogView").SetWindowClassStyle(DoubleClickWindowClassStyle()).
            SetWindowStyle(cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP)).
            SetWindowClassBackgroundColor(SystemColor.COLOR_WINDOW).SetBackgroundColor(Color.White());
    }

    public nothrow TextViewCreateParams& LogViewTextViewCreateParams(TextViewCreateParams& textViewCreateParams)
    {
        return textViewCreateParams.SetFontSize(9.0f);
    }

    public class LogViewCreateParams
    {
        public nothrow LogViewCreateParams(TextViewCreateParams& textViewCreateParams_) : textViewCreateParams(textViewCreateParams_)
        {
        }
        public nothrow LogViewCreateParams& Defaults()
        {
            return *this;
        }
        public TextViewCreateParams& textViewCreateParams;
    }

    public class LogView : TextView
    {
        public LogView(const FontFamily& fontFamily, float fontSize, const Color& backgroundColor, const Color& textColor, const Point& location,
            const Size& size, Dock dock, Anchors anchors) :
            base(fontFamily, fontSize, backgroundColor, textColor, location, size, dock, anchors)
        {
            SetReadOnly();
        }
        public LogView(const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(FontFamily("Consolas"), 9.0f, Color.White(), Color.Black(), location, size, dock, anchors)
        {
        }
        public LogView() : this(Point(0, 0), Size(0, 0), Dock.bottom, Anchors.none)
        {
        }
        public LogView(LogViewCreateParams& createParams) : base(createParams.textViewCreateParams)
        {
            SetReadOnly();
        }
        public virtual void WriteLine(const string& text)
        {
            int startLineNumber = cast<int>(Lines().Count() - 1);
            List<ustring> lines = SplitTextIntoLines(ToUtf32(text));
            for (const ustring& line : lines)
            {
                AddLine(line);
            }
            SetCaretLineCol(cast<int>(Lines().Count()), 1);
            SetTextExtent();
            ScrollToCaret();
            SetChanged();
            InvalidateLines(startLineNumber, cast<int>(startLineNumber + lines.Count()));
        }
        protected override void OnPaint(PaintEventArgs& args)
        {
            base->OnPaint(args);
        }
        protected override void OnMouseDown(MouseEventArgs& args)
        {
            base->OnMouseDown(args);
        }
        protected override void OnKeyDown(KeyEventArgs& args)
        {
            base->OnKeyDown(args);
            if (CaretLine() == Lines().Count())
            {
                Invalidate();
            }
        }
    }
}
