// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows.API;

namespace System.Windows
{
    public enum StandardBitmapId : int
    {
        OBM_BTNCORNERS = 32758,
        OBM_BTSIZE = 32761,
        OBM_CHECK = 32760,
        OBM_CHECKBOXES = 32759,
        OBM_CLOSE = 32754,
        OBM_COMBO = 32738,
        OBM_DNARROW = 32752,
        OBM_DNARROWD = 32742,
        OBM_DNARROWI = 32736,
        OBM_LFARROW = 32750,
        OBM_LFARROWD = 32740,
        OBM_LFARROWI = 32734,
        OBM_MNARROW = 32739,
        OBM_REDUCE = 32749,
        OBM_REDUCED = 32746,
        OBM_RESTORE = 32747,
        OBM_RESTORED = 32744,
        OBM_RGARROW = 32751,
        OBM_RGARROWD = 32741,
        OBM_RGARROWI = 32735,
        OBM_SIZE = 32766,
        OBM_UPARROW = 32753,
        OBM_UPARROWD = 32743,
        OBM_UPARROWI = 32737,
        OBM_ZOOM = 32748,
        OBM_ZOOMD = 32745
    }

    public class WinBitmap : Resource
    {
        public nothrow WinBitmap() : bitmapHandle(null), standard(false)
        {
        }
        public nothrow WinBitmap(void* bitmapHandle_) : bitmapHandle(bitmapHandle_), standard(false)
        {
        }
        public nothrow WinBitmap(void* bitmapHandle_, bool standard_) : bitmapHandle(bitmapHandle_), standard(standard_)
        {
        }
        public nothrow WinBitmap(WinBitmap&& that) : bitmapHandle(that.bitmapHandle), standard(that.standard)
        {
            that.bitmapHandle = null;
            that.standard = false;
        }
        public ~WinBitmap()
        {
            if (bitmapHandle != null && !standard)
            {
                WinDestroyBitmap(bitmapHandle);
            }
        }
        public default nothrow void operator=(WinBitmap&&);
        suppress WinBitmap(const WinBitmap&);
        suppress void operator=(const WinBitmap&);
        public nothrow void* Handle() const
        {
            return bitmapHandle;
        }
        public nothrow bool IsStandard() const
        {
            return standard;
        }
        public nothrow void SetStandard()
        {
            standard = true;
        }
        private void* bitmapHandle;
        private bool standard;
    }

    public WinBitmap LoadStandardBitmap(StandardBitmapId bitmapId)
    {
        void* bitmapHandle = WinLoadStandardBitmap(cast<int>(bitmapId));
        if (bitmapHandle == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return WinBitmap(bitmapHandle, true);
    }

    public WinBitmap LoadBitmap(const string& bitmapName)
    {
        return WinBitmap(LoadBitmap(bitmapName.Chars()));
    }
}
