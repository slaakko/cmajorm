// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Windows
{
    public class delegate void WindowClosingEventHandler(bool& cancelClose);
    
    public class delegate void WindowClosedEventHandler();

    public delegate int GetDialogResultFunction(void* dialogWindowPtr);

    public delegate void DialogWindowKeyPreviewFunction(void* windowPtr, uint keyCode, bool keyDown, bool& handled);

    public delegate void ModelessWindowKeyPreviewFunction(uint keyCode, bool keyDown, bool& handled);

    public class delegate void KeyPreviewMethod(Keys key, bool keyDown, bool& handled);
    
    public nothrow Color DefaultWindowBackgroundColor()
    {
        return GetSystemColor(SystemColor.COLOR_WINDOW);
    }

    public string DefaultWindowFontFamilyName()
    {
        return "Microsoft Sans Serif";
    }

    public nothrow float DefaultWindowFontSize()
    {
        return 8.25f;
    }

    internal class DialogGuard
    {
        public nothrow DialogGuard(Window* window_) : window(window_)
        {
            window->SetShowingDialog();
        }
        public ~DialogGuard()
        {
            window->ResetShowingDialog();
        }
        private Window* window;
    }

    public class Window : ContainerControl
    {
        private enum Flags : sbyte
        {
            none = 0, mainWindow = 1 << 0, showingDialog = 1 << 1
        }
        public Window(const char* windowClassName, WindowClassStyle classStyle, WindowStyle style, ExtendedWindowStyle exStyle, 
            const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors,
            const string& fontFamilyName_, float fontSize_, FontStyle fontStyle_) : 
            base(windowClassName, classStyle, style, exStyle, backgroundColor, text, location, size, dock, anchors), flags(Flags.none), state(WindowState.normal),
            menuBar(null), contextMenu(null), defaultButton(null), cancelButton(null), focusedControl(null), dialogResult(DialogResult.none), keyPreviewMethod(), currentKeyPreviewModifierKeys(Keys.none),
            fontFamilyName(fontFamilyName_), fontSize(fontSize_), fontStyle(fontStyle_)
        {
            SetKeyPreviewMethod(DefaultKeyPreview);
            if (Handle() != null)
            {
                OnCreated(); 
            }
            if (!fontFamilyName.IsEmpty())
            {
                SetFont(Font(FontFamily(fontFamilyName), fontSize, fontStyle, Unit.point));
            }
        }
        public Window(const char* windowClassName, WindowClassStyle classStyle, WindowStyle style, ExtendedWindowStyle exStyle, 
            const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) : 
            this(windowClassName, classStyle, style, exStyle, backgroundColor, text, location, size, dock, anchors, DefaultWindowFontFamilyName(), DefaultWindowFontSize(), FontStyle.regular)
        {
        }
        public Window(const char* windowClassName, WindowStyle style, ExtendedWindowStyle exStyle, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors,
            const string& fontFamilyName_, float fontSize_, FontStyle fontStyle_) : 
            this(windowClassName, cast<WindowClassStyle>(WindowClassStyle.CS_VREDRAW | WindowClassStyle.CS_HREDRAW), style, exStyle, DefaultWindowBackgroundColor(),
            text, location, size, dock, anchors, fontFamilyName_, fontSize_, fontStyle_)
        {
        }
        public Window(const char* windowClassName, WindowStyle style, ExtendedWindowStyle exStyle, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) : 
            this(windowClassName, style, exStyle, text, location, size, dock, anchors, DefaultWindowFontFamilyName(), DefaultWindowFontSize(), FontStyle.regular)
        {
        }
        public Window(const string& caption, const string& fontFamilyName_, float fontSize_, FontStyle fontStyle_) :
            this("System.Windows.Window", WindowStyle.WS_OVERLAPPEDWINDOW, DefaultExtendedWindowStyle(),
            caption, Point.Default(), Size.Default(), Dock.none, Anchors.none, fontFamilyName_, fontSize_, fontStyle_)
        {
        }
        public Window(const string& caption) :
            this(caption, DefaultWindowFontFamilyName(), DefaultWindowFontSize(), FontStyle.regular)
        {
        }
        public DialogResult ShowDialog(Window& parentWindow)
        {
            DialogGuard guard(this);
            Point parentLoc = parentWindow.Location();
            Size parentSize = parentWindow.GetSize();
            Size size = GetSize();
            SetLocation(Point(Max(cast<int>(0), parentLoc.x + (parentSize.w - size.w) / 2), Max(cast<int>(0), parentLoc.y + (parentSize.h - size.h) / 2)));
            SetDialogResult(DialogResult.none);
            GetDialogResultFunction dialogResultFunction = System.Windows.GetDialogResult;
            DialogWindowKeyPreviewFunction keyPreviewFunction = System.Windows.DialogWindowKeyPreview;
            int result = WinMessageLoop(Handle(), parentWindow.Handle(), cast<void*>(dialogResultFunction), cast<void*>(keyPreviewFunction), this);
            return cast<DialogResult>(result);
        }
        protected override void OnCreated() 
        {
            if (!BaseOnCreatedCalled())
            {
                SetBaseOnCreatedCalled();
                base->OnCreated();
            }
            if (!ScreenMetrics.Calculated())
            {
                Graphics graphics = Graphics.FromWindowHandle(Handle());
                ScreenMetrics.Calculate(graphics);
            }
        }
        public override void PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                log->WriteLine(string(' ', level) + "Window." + Text() + ".handle=" + ToHexString(cast<ulong>(Handle())) + " " + ParentText() + "[" + Rect(Point(), GetSize()).ToString() + "]");
            }
            Component* child = Children().FirstChild();
            while (child != null)
            {
                if (child is Control*)
                {
                    Control* childControl = cast<Control*>(child);
                    childControl->PrintWindowTree(level + 1);
                }
                child = child->NextSibling();
            }
        }
        protected override bool ProcessMessage(Message& message)
        {
            switch (message.msg)
            {
                case WM_CLOSE:
                {
                    bool cancelClose = false;
                    OnWindowClosing(cancelClose);
                    if (cancelClose)
                    {
                        message.result = 0;
                        return true;
                    }
                    break;
                }
                case WM_DESTROY:
                {
                    bool processed = false;
                    OnWindowClosed(processed);
                    if (processed)
                    {
                        message.result = 0;
                        return true;
                    }
                    break;
                }
                case WM_COMMAND: case WM_MOVE: case WM_SIZE: case WM_PAINT: case WM_MOUSEMOVE: case WM_MOUSELEAVE: case WM_LBUTTONDOWN: case WM_LBUTTONUP: case WM_LBUTTONDBLCLK: case WM_RBUTTONDOWN: case WM_RBUTTONUP:
                case WM_CHAR: case WM_KEYDOWN: case WM_KEYUP: case WM_SYSCOMMAND: case WM_HSCROLL: case WM_VSCROLL: case WM_MOUSEWHEEL: case WM_TIMER: case WM_SETFOCUS: case WM_KILLFOCUS:
                case WM_SHOWWINDOW: case WM_CLIPBOARDUPDATE:
                {
                    return base->ProcessMessage(message);
                }
            }
            return false;
        }
        public void Close()
        {
            PostMessage(Handle(), WM_CLOSE, 0u, 0);
        }
        protected virtual void OnWindowClosing(bool& cancelClose)
        {
            windowClosingEvent.Fire(cancelClose);
        }
        protected virtual void OnWindowClosed(bool& processed)
        {
            if (windowClosedEvent.Handlers().IsEmpty())
            {
                if (IsMainWindow())
                {
                    Application.Exit();
                    processed = true;
                }
            }            
            else
            {
                windowClosedEvent.Fire();
                processed = true;
            }
        }
        protected override void OnControlAdded(ControlEventArgs& args)
        {
            base->OnControlAdded(args);
            Control* control = args.control;
            if (control is MenuBar*)
            {
                menuBar = cast<MenuBar*>(control);
            }
            else if (control is Button*)
            {
                Button* button = cast<Button*>(control);
                if (button->IsDefault())
                {
                    SetDefaultButton(button);
                }
            }
        }
        protected override void OnControlRemoved(ControlEventArgs& args)
        {
            base->OnControlRemoved(args);
            Control* control = args.control;
            if (control == menuBar)
            {
                menuBar = null;
            }
            else if (control == defaultButton)
            {
                defaultButton = null;
            }
            else if (control == cancelButton)
            {
                cancelButton = null;
            }
        }
        public void DefaultKeyPreview(Keys key, bool keyDown, bool& handled)
        {
            switch (key)
            {
                case Keys.controlKey:
                {
                    if (keyDown)
                    {
                        currentKeyPreviewModifierKeys = cast<Keys>(currentKeyPreviewModifierKeys | Keys.controlModifier);
                    }
                    else
                    {
                        currentKeyPreviewModifierKeys = cast<Keys>(currentKeyPreviewModifierKeys & ~Keys.controlModifier);
                    }
                    break;
                }
                case Keys.shiftKey:
                {
                    if (keyDown)
                    {
                        currentKeyPreviewModifierKeys = cast<Keys>(currentKeyPreviewModifierKeys | Keys.shiftModifier);
                    }
                    else
                    {
                        currentKeyPreviewModifierKeys = cast<Keys>(currentKeyPreviewModifierKeys & ~Keys.shiftModifier);
                    }
                    break;
                }
            }
            if (keyDown)
            {
                key = cast<Keys>(key | currentKeyPreviewModifierKeys);
                switch (key)
                {
                    case Keys.enter:
                    {
                        if (ShowingDialog())
                        {
                            if (focusedControl != null)
                            {
                                if (focusedControl is TextBox*)
                                {
                                    TextBox* textBox = cast<TextBox*>(focusedControl);
                                    if (textBox->IsMultiline())
                                    {
                                        break;
                                    }
                                }
                            }
                            if (focusedControl != null)
                            {
                                if (focusedControl is Button*)
                                {
                                    Button* button = cast<Button*>(focusedControl);
                                    button->OnClickInternal();
                                    handled = true;
                                }
                            }
                            if (!handled)
                            {
                                if (defaultButton != null && defaultButton->IsEnabled())
                                {
                                    defaultButton->OnClickInternal();
                                    handled = true;
                                }
                            }
                        }
                        break;
                    }
                    case Keys.escape:
                    {
                        if (ShowingDialog())
                        {
                            if (cancelButton != null)
                            {
                                cancelButton->OnClickInternal();
                                handled = true;
                            }
                        }
                        break;
                    }
                    case Keys.tab:
                    {
                        FocusNext();
                        handled = true;
                        break;
                    }
                    case cast<Keys>(Keys.shiftModifier | Keys.tab):
                    {
                        FocusPrev();
                        handled = true;
                        break;
                    }
                }
            }
        }
        protected override void OnKeyDown(KeyEventArgs& args)
        {
            base->OnKeyDown(args);
            if (!args.handled)
            {
                switch (args.keyData)
                {
                    case Keys.enter:
                    {
                        if (ShowingDialog())
                        {
                            if (focusedControl != null)
                            {
                                if (focusedControl is Button*)
                                {
                                    Button* button = cast<Button*>(focusedControl);
                                    button->OnClickInternal();
                                    args.handled = true;
                                }
                            }
                            if (!args.handled)
                            {
                                if (defaultButton != null && defaultButton->IsEnabled())
                                {
                                    defaultButton->OnClickInternal();
                                    args.handled = true;
                                }
                            }
                        }
                        break;
                    }
                    case Keys.escape:
                    {
                        if (ShowingDialog())
                        {
                            if (cancelButton != null)
                            {
                                cancelButton->OnClickInternal();
                                args.handled = true;
                            }
                        }
                        break;
                    }
                    case Keys.tab:
                    {
                        FocusNext();
                        args.handled = true;
                        break;
                    }
                    case cast<Keys>(Keys.shiftModifier | Keys.tab):
                    {
                        FocusPrev();
                        args.handled = true;
                        break;
                    }
                }
            }
        }
        protected override void OnMouseMove(MouseEventArgs& args)
        {
            base->OnMouseMove(args);
            if (menuBar != null)
            {
                menuBar->MouseMoveInternal(args);
            }
        }
        protected override void OnMouseDown(MouseEventArgs& args)
        {
            base->OnMouseDown(args);
            if (menuBar != null)
            {
                menuBar->MouseDownInternal(args);
            }
        }
        protected override void OnMouseUp(MouseEventArgs& args)
        {
            base->OnMouseUp(args);
            if (menuBar != null)
            {
                menuBar->MouseUpInternal(args);
            }
        }
        protected override void OnPaint(PaintEventArgs& args)
        {
            try
            {
                if (Debug.Paint())
                {
                    Rect r(Point(), GetSize());
                    LogView* log = Application.GetLogView();
                    if (log != null)
                    {
                        log->WriteLine("Window.OnPaint: " + r.ToString());
                    }
                }
                args.graphics.Clear(BackgroundColor());
                base->OnPaint(args);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        protected override void OnGotFocus()
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                log->WriteLine("Window.OnGotFocus: " + Text());
            }
            base->OnGotFocus();
            Application.SetActiveWindow(this);
            FocusNext();
        }
        protected override void OnLostFocus()
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                log->WriteLine("Window.OnLostFocus: " + Text());
            }
            base->OnLostFocus();
            Application.SetActiveWindow(null);
        }
        public WindowState GetWindowState() const
        {
            return state;
        }
        public void SetWindowState(WindowState newState)
        {
            if (state != newState)
            {
                switch (state)
                {
                    case WindowState.normal:
                    {
                        switch (newState)
                        {
                            case WindowState.minimized:
                            {
                                ShowWindow(ShowCommand.SW_MINIMIZE);
                                break;
                            }
                            case WindowState.maximized:
                            {
                                ShowWindow(ShowCommand.SW_MAXIMIZE);
                                break;
                            }
                        }
                        break;
                    }
                    case WindowState.minimized: case WindowState.maximized: 
                    {
                        switch (newState)
                        {
                            case WindowState.normal:
                            {
                                ShowWindow(ShowCommand.SW_RESTORE);
                                break;
                            }
                            case WindowState.minimized:
                            {
                                ShowWindow(ShowCommand.SW_MINIMIZE);
                                break;
                            }
                            case WindowState.maximized:
                            {
                                ShowWindow(ShowCommand.SW_MAXIMIZE);
                                break;
                            }
                        }
                        break;
                    }
                }
                state = newState;
            }
        }
        public nothrow MenuBar* GetMenuBar() const
        {
            return menuBar;
        }
        public nothrow ContextMenu* GetContextMenu() const
        {
            return contextMenu;
        }
        public nothrow void SetContextMenu(ContextMenu* contextMenu_)
        {
            RemoveContextMenu();
            contextMenu = contextMenu_;
            AddChild(contextMenu);
        }
        public nothrow void RemoveContextMenu()
        {
            if (contextMenu != null)
            {
                HideContextMenu();
                RemoveChild(contextMenu);
                contextMenu = null;
            }
        }
        public nothrow void ShowContextMenu(ContextMenu* contextMenu_, const Point& ptInScreenCoords)
        {
            SetContextMenu(contextMenu_);
            Point loc = ScreenToClient(ptInScreenCoords);
            contextMenu->SetLocation(loc);
            contextMenu->CalculateSize();
            contextMenu->BringToFront();
            contextMenu->Show();
            contextMenu->Invalidate();
            contextMenu->Update();
        }
        public nothrow void HideContextMenu()
        {
            if (contextMenu != null)
            {
                contextMenu->Hide();
                Invalidate();
                Update();
            }
        }
        public nothrow Event<WindowClosingEventHandler, bool>& WindowClosingEvent()
        {
            return windowClosingEvent;
        }
        public nothrow Event<WindowClosedEventHandler>& WindowClosedEvent()
        {
            return windowClosedEvent;
        }
        public void SetIcon(const Icon& icon)
        {
            SetClassLong(Handle(), ClassLongIndex.GCL_HICON, cast<long>(cast<ulong>(icon.Handle())));
        }
        public void SetSmallIcon(const Icon& icon)
        {
            SetClassLong(Handle(), ClassLongIndex.GCL_HICONSM, cast<long>(cast<ulong>(icon.Handle())));
        }
        internal nothrow inline int GetDialogResult() const
        {
            return cast<int>(dialogResult);
        }
        public nothrow inline void SetDialogResult(DialogResult dialogResult_)
        {
            dialogResult = dialogResult_;
        }
        public void FocusNext()
        {
            LogView* logView = Application.GetLogView();
            if (focusedControl == null)
            {
                Component* child = Children().FirstChild();
                while (child != null)
                {
                    if (child is Control*)
                    {
                        Control* control = cast<Control*>(child);
                        Control* tabStopChild = control->GetFirstEnabledTabStopControl();
                        if (tabStopChild != null)
                        {
                            tabStopChild->SetFocus();
                            focusedControl = tabStopChild;
                            if (logView != null)
                            {
                                logView->WriteLine("focused: " + string(typename(*focusedControl)) + ": " + focusedControl->Text());
                            }
                            return;
                        }
                    }
                    child = child->NextSibling();
                }
            }
            else
            {
                Component* parent = null;
                Component* child = focusedControl;
                Container* container = child->GetContainer();
                if (container != null)
                {
                    parent = container->Parent();
                }
                while (child != null)
                {
                    child = child->NextSibling();
                    while (child != null)
                    {
                        if (child is Control*)
                        {
                            Control* control = cast<Control*>(child);
                            Control* tabStopChild = control->GetFirstEnabledTabStopControl();
                            if (tabStopChild != null)
                            {
                                tabStopChild->SetFocus();
                                focusedControl = tabStopChild;
                                return;
                            }
                        }
                        child = child->NextSibling();
                    }
                    child = parent;
                    if (parent != null)
                    {
                        container = parent->GetContainer();
                        if (container != null)
                        {
                            parent = container->Parent();
                        }
                        else
                        {
                            parent = null;
                        }
                    }
                }
                focusedControl = null;
                FocusNext();
            }
        }
        public void FocusPrev()
        {
            LogView* logView = Application.GetLogView();
            if (focusedControl == null)
            {
                Component* child = Children().LastChild();
                while (child != null)
                {
                    if (child is Control*)
                    {
                        Control* control = cast<Control*>(child);
                        Control* tabStopChild = control->GetLastEnabledTabStopControl();
                        if (tabStopChild != null)
                        {
                            tabStopChild->SetFocus();
                            focusedControl = tabStopChild;
                            if (logView != null)
                            {
                                logView->WriteLine("focused: " + string(typename(*focusedControl)) + ": " + focusedControl->Text());
                            }
                            return;
                        }
                    }
                    child = child->PrevSibling();
                }
            }
            else
            {
                Component* parent = null;
                Component* child = focusedControl;
                Container* container = child->GetContainer();
                if (container != null)
                {
                    parent = container->Parent();
                }
                while (child != null)
                {
                    child = child->PrevSibling();
                    while (child != null)
                    {
                        if (child is Control*)
                        {
                            Control* control = cast<Control*>(child);
                            Control* tabStopChild = control->GetLastEnabledTabStopControl();
                            if (tabStopChild != null)
                            {
                                tabStopChild->SetFocus();
                                focusedControl = tabStopChild;
                                return;
                            }
                        }
                        child = child->PrevSibling();
                    }
                    child = parent;
                    if (parent != null)
                    {
                        container = parent->GetContainer();
                        if (container != null)
                        {
                            parent = container->Parent();
                        }
                        else
                        {
                            parent = null;
                        }
                    }
                }
                focusedControl = null;
                FocusPrev();
            }
        }
        public nothrow inline Control* GetFocusedControl() const
        {
            return focusedControl;
        }
        internal nothrow inline void SetFocusedControl(Control* focusedControl_)
        {
            focusedControl = focusedControl_;
        }
        public nothrow inline const KeyPreviewMethod& GetKeyPreviewMethod() const
        {
            return keyPreviewMethod;
        }
        public nothrow void SetKeyPreviewMethod(const KeyPreviewMethod& keyPreviewMethod_)
        {
            keyPreviewMethod = keyPreviewMethod_;
        }
        public nothrow inline bool IsMainWindow() const
        {
            return (flags & Flags.mainWindow) != Flags.none;
        }
        public nothrow inline void SetAsMainWindow()
        {
            flags = cast<Flags>(flags | Flags.mainWindow);
        }
        public nothrow inline Button* DefaultButton() const
        {
            return defaultButton;
        }
        public nothrow void SetDefaultButton(Button* defaultButton_)
        {
            if (defaultButton != defaultButton_)
            {
                if (defaultButton != null)
                {
                    defaultButton->ResetDefault();
                }
                defaultButton = defaultButton_;
                if (defaultButton != null)
                {
                    defaultButton->SetDefault();
                }
            }
        }
        public nothrow inline Button* CancelButton() const
        {
            return cancelButton;
        }
        public nothrow void SetCancelButton(Button* cancelButton_)
        {
            cancelButton = cancelButton_;
        }
        private nothrow inline bool ShowingDialog() const
        {
            return (flags & Flags.showingDialog) != Flags.none;
        }
        internal nothrow inline void SetShowingDialog()
        {
            flags = cast<Flags>(flags | Flags.showingDialog);
        }
        internal nothrow inline void ResetShowingDialog()
        {
            flags = cast<Flags>(flags & ~Flags.showingDialog);
        }
        private Flags flags;
        private WindowState state;
        private MenuBar* menuBar;
        private ContextMenu* contextMenu;
        private Button* defaultButton;
        private Button* cancelButton;
        private Control* focusedControl;
        private string fontFamilyName;
        private float fontSize;
        private FontStyle fontStyle;
        private Event<WindowClosingEventHandler, bool> windowClosingEvent;
        private Event<WindowClosedEventHandler> windowClosedEvent;
        private DialogResult dialogResult;
        private KeyPreviewMethod keyPreviewMethod;
        private Keys currentKeyPreviewModifierKeys;
    }

    internal int GetDialogResult(void* dialogWindowPtr)
    {
        Window* dialogWindow = cast<Window*>(dialogWindowPtr);
        return dialogWindow->GetDialogResult();
    }

    internal void DialogWindowKeyPreview(void* dialogWindowPtr, uint keyCode, bool keyDown, bool& handled)
    {
        Window* dialogWindow = cast<Window*>(dialogWindowPtr);
        Keys key = cast<Keys>(cast<int>(keyCode));
        KeyPreviewMethod keyPreview = dialogWindow->GetKeyPreviewMethod();
        if (keyPreview != KeyPreviewMethod())
        {
            keyPreview(key, keyDown, handled);
        }
    }

    internal void ModelessWindowKeyPreview(uint keyCode, bool keyDown, bool& handled)
    {
        Window* activeWindow = Application.GetActiveWindow();
        if (activeWindow != null)
        {
            Keys key = cast<Keys>(cast<int>(keyCode));
            KeyPreviewMethod keyPreview = activeWindow->GetKeyPreviewMethod();
            if (keyPreview != KeyPreviewMethod())
            {
                keyPreview(key, keyDown, handled);
            }
        }
    }
}
