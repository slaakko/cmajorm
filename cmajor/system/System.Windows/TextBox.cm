// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Windows
{
    public enum TextBoxStyle : long
    {
        ES_AUTOHSCROLL = 0x0080,
        ES_AUTOVSCROLL = 0x0040,
        ES_CENTER = 0x0001,
        ES_LEFT = 0x0000,
        ES_LOWERCASE = 0x0010,
        ES_MULTILINE = 0x0004,
        ES_NOHIDESEL = 0x0100,
        ES_NUMBER = 0x2000,
        ES_OEMCONVERT = 0x0400,
        ES_PASSWORD = 0x0020,
        ES_READONLY = 0x0800,
        ES_RIGHT = 0x0002,
        ES_UPPERCASE = 0x0008,
        ES_WANTRETURN = 0x1000
    }

    public class TextBox : Control
    {
        private enum Flags : sbyte
        {
            none = 0, selectAll = 1 << 0, multiline = 1 << 1
        }

        public TextBox(TextBoxStyle textBoxStyle, const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("EDIT", DefaultWindowClassStyle(), cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | textBoxStyle), DefaultExtendedWindowStyle(), backgroundColor,
            text, location, size, dock, anchors)
        {
            if ((textBoxStyle & TextBoxStyle.ES_MULTILINE) != 0)
            {
                SetMultiline();
            }
        }
        public TextBox(const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(cast<TextBoxStyle>(TextBoxStyle.ES_LEFT | TextBoxStyle.ES_AUTOHSCROLL), Color.White(), text, location, size, dock, anchors)
        {
        }
        public TextBox(const string& text) : this(text, Point(), Size(), Dock.none, Anchors.none)
        {
        }
        public nothrow inline bool IsMultiline() const
        {
            return (flags & Flags.multiline) != Flags.none;
        }
        private nothrow inline void SetMultiline()
        {
            flags = cast<Flags>(flags | Flags.multiline);
        }
        private nothrow inline void ResetMultiline()
        {
            flags = cast<Flags>(flags & ~Flags.multiline);
        }
        public void SelectAll()
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), EM_SETSEL, 0u, -1);
            }
            else
            {
                SetSelectAllFlag();
            }
        }
        public void Clear()
        {
            SetText(string());
        }
        protected override void OnCreated()
        {
            base->OnCreated();
            Graphics graphics = Graphics.FromWindowHandle(Handle());
            const FontHandle& fontHandle = GetFontHandle(graphics);
            if (!fontHandle.IsNull())
            {
                SendSetFontMessage(fontHandle);
            }
            if (SelectAllFlagSet())
            {
                ResetSelectAllFlag();
                SelectAll();
            }
        }
        protected override void OnGotFocus()
        {
            base->OnGotFocus();
            SelectAll();
        }
        private nothrow inline bool SelectAllFlagSet() const
        {
            return (flags & Flags.selectAll) != Flags.none;
        }
        private nothrow inline void SetSelectAllFlag()
        {
            flags = cast<Flags>(flags | Flags.selectAll);
        }
        private nothrow inline void ResetSelectAllFlag()
        {
            flags = cast<Flags>(flags & ~Flags.selectAll);
        }
        private Flags flags;
    }
}
