// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public class ToolBar : Control
    {
        private enum Flags : sbyte
        {
            none = 0, toolTipWindowAdded = 1 << 0
        }
        public enum Style
        {
            regular = 0, radioButtonGroup = 1
        }
        public ToolBar(const Color& backgroundColor, const Color& toolButtonTransparentColor_, const Point& location, const Size& size, Dock dock, Anchors anchors,
            int toolButtonHeight_, Style style_, const Padding& padding_, const Padding& buttonPadding_) :
            base("System.Windows.ToolBar", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            backgroundColor, "toolBar", location, size, dock, anchors), flags(Flags.none), toolButtonTransparentColor(toolButtonTransparentColor_),
            toolButtonHeight(toolButtonHeight_), darkColor(Color(100u, 100u, 100u)), lightColor(Color.White()), mediumLightColor(227u, 227u, 227u),
            mediumDarkColor(160u, 160u, 160u), disabledColor(Color(204u, 204u, 207u)),
            toolButtonSeparatorColor1(204u, 206u, 219u), toolButtonSeparatorColor2(245u, 245u, 245u), mouseInToolButton(null), mouseDownToolButton(null),
            pressedStateToolButton(null), style(style_), toolTipWindow(new ToolTip()), padding(padding_), buttonPadding(buttonPadding_), toolButtons(this),
            centerFormat(StringAlignment.center, StringAlignment.center)
        {
        }
        public ToolBar(int toolButtonHeight, const Color& toolButtonTransparentColor, Style style, const Padding& padding, const Padding& buttonPadding) :
            this(DefaultControlBackgroundColor(), toolButtonTransparentColor, Point(padding.left, padding.top),
                Size(0, toolButtonHeight + padding.Vertical() + buttonPadding.Vertical()), Dock.top, Anchors.none, toolButtonHeight, style, padding, buttonPadding)
        {
        }
        public ToolBar(Style style) : this(38, Color.DefaultBitmapTransparent(), style, DefaultPadding(), DefaultButtonPadding())
        {
        }
        public ToolBar() : this(Style.regular)
        {
        }
        public void SetTextToolButtonFont(const Font& textToolButtonFont_)
        {
            textToolButtonFont = textToolButtonFont_;
        }
        public nothrow inline const Font& GetTextToolButtonFont() const
        {
            return textToolButtonFont;
        }
        public nothrow inline const StringFormat& CenterFormat() const
        {
            return centerFormat;
        }
        public nothrow inline const int ToolButtonHeight() const
        {
            return toolButtonHeight;
        }
        public nothrow Padding DefaultPadding() const
        {
            return Padding(0, 0, 0, 0);
        }
        public nothrow Padding DefaultButtonPadding()
        {
            return Padding(0, 0, 0, 0);
        }
        public nothrow const Padding& GetPadding() const
        {
            return padding;
        }
        public nothrow const Padding& GetButtonPadding()
        {
            return buttonPadding;
        }
        public nothrow void SetButtonPadding(const Padding& buttonPadding_)
        {
            buttonPadding = buttonPadding_;
        }
        public ~ToolBar()
        {
            if (toolTipWindow != null && ToolTipWindowAdded())
            {
                ResetToolTipWindowAdded();
                Window* window = GetWindow();
                if (window != null)
                {
                    window->RemoveChild(toolTipWindow);
                    toolTipWindow = null;
                }
            }
        }
        public nothrow inline Style GetStyle() const
        {
            return style;
        }
        public nothrow inline const Color& DarkColor() const
        {
            return darkColor;
        }
        public nothrow void SetDarkColor(const Color& darkColor_)
        {
            darkColor = darkColor_;
        }
        public nothrow inline const Color& LightColor() const
        {
            return lightColor;
        }
        public nothrow void SetLightColor(const Color& lightColor_)
        {
            lightColor = lightColor_;
        }
        public nothrow inline const Color& MediumLightColor() const
        {
            return mediumLightColor;
        }
        public nothrow void SetMediumLightColor(const Color& mediumLightColor_)
        {
            mediumLightColor = mediumLightColor_;
        }
        public nothrow inline const Color& MediumDarkColor() const
        {
            return mediumDarkColor;
        }
        public nothrow void SetMediumDarkColor(const Color& mediumDarkColor_)
        {
            mediumDarkColor = mediumDarkColor_;
        }
        public nothrow inline const Color& DisabledColor() const
        {
            return disabledColor;
        }
        public nothrow void SetDisabledColor(const Color& disabledColor_)
        {
            disabledColor = disabledColor_;
        }
        public nothrow inline const Color& ToolButtonSeparatorColor1() const
        {
           return toolButtonSeparatorColor1;
        }
        public nothrow void SetToolButtonSeparatorColor1(const Color& toolButtonSeparatorColor1_)
        {
            toolButtonSeparatorColor1 = toolButtonSeparatorColor1_;
        }
        public nothrow inline const Color& ToolButtonSeparatorColor2() const
        {
           return toolButtonSeparatorColor2;
        }
        public nothrow void SetToolButtonSeparatorColor2(const Color& toolButtonSeparatorColor2_)
        {
            toolButtonSeparatorColor2 = toolButtonSeparatorColor2_;
        }
        public void AddToolButton(ToolButtonBase* toolButton)
        {
            toolButton->SetToolBar(this);
            toolButtons.AddChild(toolButton);
            if (toolButton is ToolButton*)
            {
                ToolButton* tb = cast<ToolButton*>(toolButton);
                tb->SetTransparentColor(toolButtonTransparentColor);
                SetToolButtonBitmaps(tb);
                if (style == Style.radioButtonGroup)
                {
                    if (pressedStateToolButton == null)
                    {
                        SetPressedStateToolButton(tb);
                    }
                }
            }
        }
        public nothrow ToolButton* GetToolButton(int toolButtonIndex) const
        {
            Component* component = toolButtons.FirstChild();
            int index = 0;
            while (component != null)
            {
                if (component is ToolButton*)
                {
                    if (index == toolButtonIndex) return cast<ToolButton*>(component);
                    ++index;
                }
                component = component->NextSibling();
            }
            return null;
        }
        public nothrow inline ToolButton* PressedStateToolButton() const
        {
            if (style == Style.radioButtonGroup)
            {
                return pressedStateToolButton;
            }
            else
            {
                return null;
            }
        }
        public void SetPressedStateToolButton(ToolButton* newPressedStateToolButton)
        {
            if (style == Style.radioButtonGroup)
            {
                if (pressedStateToolButton != newPressedStateToolButton)
                {
                    if (pressedStateToolButton != null)
                    {
                        pressedStateToolButton->SetState(ToolButton.State.normal);
                    }
                    pressedStateToolButton = newPressedStateToolButton;
                    if (pressedStateToolButton != null)
                    {
                        pressedStateToolButton->SetState(ToolButton.State.pressed);
                    }
                }
            }
        }
        public nothrow void ResetPressedStateToolButton()
        {
            if (style == Style.radioButtonGroup)
            {
                pressedStateToolButton = null;
            }
        }
        protected override void OnPaint(PaintEventArgs& args)
        {
            if (!ToolTipWindowAdded())
            {
                SetToolTipWindowAdded();
                Window* window = GetWindow();
                if (window != null)
                {
                    window->AddChild(toolTipWindow);
                }
            }
            args.graphics.Clear(BackgroundColor());
            Point origin(padding.left, padding.top);
            Component* component = toolButtons.FirstChild();
            while (component != null)
            {
                if (component is ToolButtonBase*)
                {
                    ToolButtonBase* toolButton = cast<ToolButtonBase*>(component);
                    Size toolButtonSize = toolButton->GetSize();
                    Point toolButtonLocation = origin;
                    toolButtonLocation.Offset(buttonPadding.left, buttonPadding.top + (toolButtonHeight - toolButtonSize.h) / 2);
                    toolButton->SetLocation(toolButtonLocation);
                    toolButton->Draw(args.graphics, origin);
                    origin.x = origin.x + toolButtonSize.w + buttonPadding.Horizontal();
                }
                component = component->NextSibling();
            }
            base->OnPaint(args);
        }
        protected override void OnMouseEnter()
        {
            base->OnMouseEnter();
            mouseInToolButton = null;
            mouseDownToolButton = null;
        }
        protected override void OnMouseLeave()
        {
            base->OnMouseLeave();
            if (mouseInToolButton != null)
            {
                mouseInToolButton->MouseLeaveInternal();
            }
            mouseInToolButton = null;
            mouseDownToolButton = null;
        }
        protected override void OnMouseMove(MouseEventArgs& args)
        {
            base->OnMouseMove(args);
            ToolButton* toolButton = GetToolButtonAt(args.location);
            if (toolButton != null)
            {
                if (mouseInToolButton != toolButton)
                {
                    if (mouseInToolButton != null)
                    {
                        mouseInToolButton->MouseLeaveInternal();
                        mouseInToolButton = null;
                    }
                    mouseInToolButton = toolButton;
                    mouseInToolButton->MouseEnterInternal();
                }
                toolButton->MouseMoveInternal(args);
            }
        }
        protected override void OnMouseDown(MouseEventArgs& args)
        {
            base->OnMouseDown(args);
            if (style == Style.regular)
            {
                ToolButton* toolButton = GetToolButtonAt(args.location);
                if (toolButton != null)
                {
                    if (toolButton->GetState() == ToolButton.State.normal)
                    {
                        if (args.buttons == MouseButtons.lbutton)
                        {
                            mouseDownToolButton = toolButton;
                        }
                        toolButton->MouseDownInternal(args);
                        if (args.buttons == MouseButtons.lbutton)
                        {
                            toolButton->SetState(ToolButton.State.pressed);
                        }
                    }
                    else
                    {
                        return;
                    }
                }
                WinSetCapture(Handle());
            }
            else if (style == Style.radioButtonGroup)
            {
                ToolButton* toolButton = GetToolButtonAt(args.location);
                if (toolButton != null)
                {
                    if (args.buttons == MouseButtons.lbutton)
                    {
                        SetPressedStateToolButton(toolButton);
                        toolButton->DoClick();
                    }
                }
            }
        }
        protected override void OnMouseUp(MouseEventArgs& args)
        {
            base->OnMouseUp(args);
            if (style == Style.regular)
            {
                ToolButton* toolButton = GetToolButtonAt(args.location);
                if (toolButton != null)
                {
                    if (toolButton->GetState() == ToolButton.State.pressed)
                    {
                        toolButton->MouseUpInternal(args);
                        if (args.buttons == MouseButtons.lbutton)
                        {
                            if (toolButton == mouseDownToolButton)
                            {
                                toolButton->DoClick();
                            }
                        }
                    }
                }
                if (mouseDownToolButton != null && mouseDownToolButton->GetStyle() == ToolButton.Style.automatic)
                {
                    mouseDownToolButton->SetState(ToolButton.State.normal);
                }
                mouseDownToolButton = null;
                WinReleaseCapture();
            }
        }
        internal void ShowToolTipWindow(ToolButton* toolButton)
        {
            toolTipWindow->Hide();
            Point loc = toolButton->Location();
            Size size = toolButton->GetSize();
            toolTipWindow->SetText(toolButton->GetToolTip());
            toolTipWindow->MeasureExtent();
            Point pt(loc.x + size.w + toolButton->GetPadding().left, loc.y + (size.h - toolTipWindow->GetSize().h) / 2);
            pt = ClientToScreen(pt);
            Window* window = GetWindow();
            if (window != null)
            {
                pt = window->ScreenToClient(pt);
                Size sz = toolTipWindow->GetSize();
                Point wloc = window->Location();
                Size wsz = window->GetSize();
                if (pt.y + sz.h > wloc.y + wsz.h)
                {
                    pt.y = wloc.y + wsz.h - sz.h;
                }
                if (pt.x + sz.w > wloc.x + wsz.w)
                {
                    pt.x = wloc.x + wsz.w - sz.w;
                }
                toolTipWindow->SetLocation(pt);
                toolTipWindow->BringToFront();
                toolTipWindow->Show();
                toolTipWindow->Invalidate();
                toolTipWindow->Update();
            }
        }
        internal void HideToolTipWindow()
        {
            toolTipWindow->Hide();
        }
        internal SolidBrush* GetOrInsertSolidBrush(const Color& color)
        {
            HashMap<Color, SolidBrush*>.ConstIterator it = textBrushMap.CFind(color);
            if (it != textBrushMap.CEnd())
            {
                return it->second;
            }
            else
            {
                UniquePtr<SolidBrush> brushPtr(new SolidBrush(color));
                SolidBrush* brush = brushPtr.Get();
                textBrushMap[color] = brushPtr.Get();
                textBrushes.Add(Rvalue(brushPtr));
                return brush;
            }
        }
        private void SetToolButtonBitmaps(ToolButton* toolButton)
        {
            Pair<Bitmap*, Bitmap*> toolBitmapPair = GetOrCreateBitmaps(toolButton->ToolBitmapName());
            toolButton->SetToolBitmaps(toolBitmapPair.first, toolBitmapPair.second);
        }
        private Pair<Bitmap*, Bitmap*> GetOrCreateBitmaps(const string& bitmapName)
        {
            Pair<Bitmap*, Bitmap*> bitmapPair;
            if (bitmapName.IsEmpty()) return bitmapPair;
            try
            {
                HashMap<string, Pair<Bitmap*, Bitmap*>>.ConstIterator it = bitmapMap.CFind(bitmapName);
                if (it != bitmapMap.CEnd())
                {
                    return it->second;
                }
                UniquePtr<Bitmap> bitmapPtr(new Bitmap(Bitmap.FromResource(bitmapName)));
                Bitmap* bitmap = bitmapPtr.Get();
                UniquePtr<Bitmap> disabledBitmapPtr(new Bitmap(bitmap->ToGrayBitmap()));
                Bitmap* disabledBitmap = disabledBitmapPtr.Get();
                bitmapPair = MakePair(bitmap, disabledBitmap);
                bitmapMap[bitmapName] = bitmapPair;
                bitmaps.Add(Rvalue(bitmapPtr));
                bitmaps.Add(Rvalue(disabledBitmapPtr));
                return bitmapPair;
            }        
            catch (const Exception& ex)
            {
                throw Exception("could not load bitmap '" + bitmapName + "': " + ex.Message());
            }
            return bitmapPair;
        }
        private nothrow ToolButton* GetToolButtonAt(const Point& location) const
        {
            Size size = GetSize();
            if (location.y >= 0 && location.y < size.h && location.x >= 0 && location.x < size.w)
            {
                Component* component = toolButtons.FirstChild();
                while (component != null)
                {
                    if (component is ToolButton*)
                    {
                        ToolButton* toolButton = cast<ToolButton*>(component);
                        if (location.x >= toolButton->Location().x && location.x <= toolButton->Location().x + toolButton->GetSize().w)
                        {
                            return toolButton;
                        }
                    }
                    component = component->NextSibling();
                }
            }
            return null;
        }
        private nothrow inline bool ToolTipWindowAdded() const
        {
            return (flags & Flags.toolTipWindowAdded) != Flags.none;
        }
        private nothrow inline void SetToolTipWindowAdded()
        {
            flags = cast<Flags>(flags | Flags.toolTipWindowAdded);
        }
        private nothrow inline void ResetToolTipWindowAdded()
        {
            flags = cast<Flags>(flags & ~Flags.toolTipWindowAdded);
        }
        private Flags flags;
        private Container toolButtons;
        private Color toolButtonTransparentColor;
        private int toolButtonHeight;
        private List<UniquePtr<Bitmap>> bitmaps;
        private HashMap<string, Pair<Bitmap*, Bitmap*>> bitmapMap;
        private Color darkColor;
        private Color lightColor;
        private Color mediumLightColor;
        private Color mediumDarkColor;
        private Color disabledColor;
        private Color toolButtonSeparatorColor1;
        private Color toolButtonSeparatorColor2;
        private ToolButton* mouseInToolButton;
        private ToolButton* mouseDownToolButton;
        private ToolButton* pressedStateToolButton;
        private Style style;
        private ToolTip* toolTipWindow;
        private Padding padding;
        private Padding buttonPadding;
        private Font textToolButtonFont;
        private StringFormat centerFormat;
        private HashMap<Color, SolidBrush*> textBrushMap;
        private List<UniquePtr<SolidBrush>> textBrushes;
    }

    public abstract class ToolButtonBase : Component
    {
        public nothrow ToolButtonBase() : location(), size()
        {
        }
        public virtual nothrow void SetToolBar(ToolBar* toolBar_)
        {
            toolBar = toolBar_;
        }
        public nothrow inline ToolBar* GetToolBar() const
        {
            return toolBar;
        }
        public abstract void Draw(Graphics& graphics, const Point& origin)
        {
        }
        public nothrow inline const Point& Location() const
        {
            return location;
        }
        public nothrow inline void SetLocation(const Point& location_)
        {
            location = location_;
        }
        public nothrow inline const Size& GetSize() const
        {
            return size;
        }
        public nothrow inline void SetSize(const Size& size_)
        {
            size = size_;
        }
        private ToolBar* toolBar;
        private Point location;
        private Size size;
    }

    public class ToolButtonSeparator : ToolButtonBase
    {
        public nothrow ToolButtonSeparator() : base()
        {
        }
        public override nothrow void SetToolBar(ToolBar* toolBar)
        {
            base->SetToolBar(toolBar);
            SetSize(Size(2, toolBar->ToolButtonHeight() - 4));
        }
        public override void Draw(Graphics& graphics, const Point& origin)
        {
            ToolBar* toolBar = GetToolBar();
            Point location = Location();
            Size size = GetSize();
            Point firstLineStart(origin.x, origin.y);
            Point firstLineEnd(firstLineStart.x, firstLineStart.y + size.h);
            Pen firstLinePen(toolBar->ToolButtonSeparatorColor1());
            graphics.DrawLineChecked(firstLinePen, firstLineStart, firstLineEnd);
            Point secondLineStart(origin.x + 1, origin.y + location.y);
            Point secondLineEnd(secondLineStart.x, secondLineStart.y + size.h);
            Pen secondLinePen(toolBar->ToolButtonSeparatorColor2());
            graphics.DrawLineChecked(secondLinePen, secondLineStart, secondLineEnd);
        }
    }

    public class ClickGuard
    {
        public nothrow ClickGuard(ToolButton* toolButton_) : toolButton(toolButton_)
        {
        }
        public ~ClickGuard()
        {
            if (toolButton->GetStyle() == ToolButton.Style.automatic)
            {
                toolButton->SetState(ToolButton.State.normal);
            }
        }
        private ToolButton* toolButton;
    }

    public class ToolButton : ToolButtonBase
    {
        public enum State : sbyte
        {
            normal = 0, pressed = 1, disabled = 2
        }
        public enum Style : sbyte
        {
            automatic, manual
        }
        public nothrow ToolButton(const string& toolBitmapName_, Style style_) :
            base(), state(State.normal), toolBitmapName(toolBitmapName_), toolBitmap(null), transparentColor(Color.DefaultBitmapTransparent()), padding(DefaultPadding()),
            style(style_)
        {
        }
        public nothrow ToolButton(const string& toolBitmapName) : this(toolBitmapName, Style.automatic)
        {
        }
        public default virtual ~ToolButton();
        public nothrow inline Style GetStyle() const
        {
            return style;
        }
        public nothrow void Enable()
        {
            if (state == State.disabled)
            {
                SetState(State.normal);
            }
        }
        public nothrow void Disable()
        {
            if (state == State.normal)
            {
                SetState(State.disabled);
            }
        }
        public nothrow Padding GetPadding() const
        {
            return padding;
        }
        public void SetPadding(const Padding& padding_)
        {
            padding = padding_;
        }
        protected nothrow Padding DefaultPadding()
        {
            return Padding(3, 3, 3, 3);
        }
        public nothrow inline State GetState() const
        {
            return state;
        }
        public void SetState(State state_)
        {
            ToolBar* toolBar = GetToolBar();
            if (state != state_)
            {
                if (state_ == State.pressed)
                {
                    if (toolBar->GetStyle() == ToolBar.Style.radioButtonGroup)
                    {
                        if (toolBar->PressedStateToolButton() != this)
                        {
                            toolBar->SetPressedStateToolButton(this);
                        }
                    }
                }
                else if (state_ == State.normal)
                {
                    if (toolBar->GetStyle() == ToolBar.Style.radioButtonGroup)
                    {
                        if (toolBar->PressedStateToolButton() == this)
                        {
                            toolBar->ResetPressedStateToolButton();
                        }
                    }
                }
                state = state_;
                Invalidate();
            }
        }
        public nothrow void SetToolTip(const string& toolTip_)
        {
            if (toolTip != toolTip_)
            {
                toolTip = toolTip_;
                Invalidate();
            }
        }
        public nothrow inline const string& GetToolTip() const
        {
            return toolTip;
        }
        public nothrow void SetTransparentColor(const Color& transparentColor_)
        {
            transparentColor = transparentColor_;
        }
        internal void MouseEnterInternal()
        {
            OnMouseEnter();
            ToolBar* toolBar = GetToolBar();
            if (!toolTip.IsEmpty() && toolBar != null)
            {
                toolBar->ShowToolTipWindow(this);
            }
        }
        protected virtual void OnMouseEnter()
        {
            mouseEnterEvent.Fire();
        }
        public nothrow Event<MouseEnterEventHandler>& MouseEnterEvent() const
        {
            return mouseEnterEvent;
        }
        internal void MouseLeaveInternal()
        {
            OnMouseLeave();
            ToolBar* toolBar = GetToolBar();
            if (!toolTip.IsEmpty() && toolBar != null)
            {
                toolBar->HideToolTipWindow();
            }
        }
        protected virtual void OnMouseLeave()
        {
            mouseLeaveEvent.Fire();
        }
        public nothrow Event<MouseLeaveEventHandler>& MouseLeaveEvent() const
        {
            return mouseLeaveEvent;
        }
        internal void MouseMoveInternal(MouseEventArgs& args)
        {
            OnMouseMove(args);
        }
        protected virtual void OnMouseMove(MouseEventArgs& args)
        {
            mouseMoveEvent.Fire(args);
        }
        public nothrow Event<MouseEventHandler, MouseEventArgs>& MouseMoveEvent() const
        {
            return mouseMoveEvent;
        }
        internal void MouseDownInternal(MouseEventArgs& args)
        {
            OnMouseDown(args);
        }
        protected virtual void OnMouseDown(MouseEventArgs& args)
        {
            mouseDownEvent.Fire(args);
        }
        public nothrow Event<MouseEventHandler, MouseEventArgs>& MouseDownEvent() const
        {
            return mouseDownEvent;
        }
        internal void MouseUpInternal(MouseEventArgs& args)
        {
            OnMouseUp(args);
        }
        protected virtual void OnMouseUp(MouseEventArgs& args)
        {
            mouseUpEvent.Fire(args);
        }
        public nothrow Event<MouseEventHandler, MouseEventArgs>& MouseUpEvent() const
        {
            return mouseUpEvent;
        }
        internal void DoClick()
        {
            OnClick();
        }
        protected virtual void OnClick()
        {
            ClickGuard guard(this);
            clickEvent.Fire();
        }
        public nothrow Event<ClickEventHandler>& ClickEvent() const
        {
            return clickEvent;
        }
        public override void Draw(Graphics& graphics, const Point& location)
        {
            switch (state)
            {
                case State.normal:
                case State.disabled:
                {
                    DrawNormalOrDisabled(graphics, location);
                    break;
                }
                case State.pressed:
                {
                    DrawPressed(graphics, location);
                    break;
                }
            }
        }
        private void DrawNormalOrDisabled(Graphics& graphics, const Point& location)
        {
            ToolBar* toolBar = GetToolBar();
            Pen darkPen(toolBar->DarkColor(), 1.0f);
            Size size = GetSize();
            Rect rect(location, size);
            rect.size.w = rect.size.w - 1;
            rect.size.h = rect.size.h - 1;
            graphics.DrawRectangleChecked(darkPen, rect);
            Point startRightInnerDarkLoc = location;
            startRightInnerDarkLoc.x = startRightInnerDarkLoc.x + size.w - 2;
            Point endRightInnerDarkLoc = location;
            endRightInnerDarkLoc.x = endRightInnerDarkLoc.x + size.w - 2;
            endRightInnerDarkLoc.y = endRightInnerDarkLoc.y + size.h - 1;
            graphics.DrawLineChecked(darkPen, startRightInnerDarkLoc, endRightInnerDarkLoc);
            Point startBottomInnerDarkLoc = location;
            startBottomInnerDarkLoc.x = startBottomInnerDarkLoc.x + 1;
            startBottomInnerDarkLoc.y = startBottomInnerDarkLoc.y + size.h - 2;
            Point endBottomInnerDarkLoc = location;
            endBottomInnerDarkLoc.x = endBottomInnerDarkLoc.x + size.w - 2;
            endBottomInnerDarkLoc.y = endBottomInnerDarkLoc.y + size.h - 2;
            graphics.DrawLineChecked(darkPen, startBottomInnerDarkLoc, endBottomInnerDarkLoc);
            Pen lightPen(toolBar->LightColor(), 1.0f);
            Point startTopOuterLightLoc = location;
            startTopOuterLightLoc.x = startTopOuterLightLoc.x + 1;
            startTopOuterLightLoc.y = startTopOuterLightLoc.y + 1;
            Point endTopOuterLightLoc = location;
            endTopOuterLightLoc.x = endTopOuterLightLoc.x + size.w - 3;
            endTopOuterLightLoc.y = endTopOuterLightLoc.y + 1;
            graphics.DrawLineChecked(lightPen, startTopOuterLightLoc, endTopOuterLightLoc);
            Point startLeftOuterLightLoc = location;
            startLeftOuterLightLoc.x = startLeftOuterLightLoc.x + 1;
            startLeftOuterLightLoc.y = startLeftOuterLightLoc.y + 1;
            Point endLeftOuterLightLoc = location;
            endLeftOuterLightLoc.x = endLeftOuterLightLoc.x + 1;
            endLeftOuterLightLoc.y = endLeftOuterLightLoc.y + size.h - 3;
            graphics.DrawLineChecked(lightPen, startLeftOuterLightLoc, endLeftOuterLightLoc);
            Pen mediumLightPen(toolBar->MediumLightColor(), 1.0f);
            Point startTopInnerLightLoc = location;
            startTopInnerLightLoc.x = startTopInnerLightLoc.x + 2;
            startTopInnerLightLoc.y = startTopInnerLightLoc.y + 2;
            Point endTopInnerLightLoc = location;
            endTopInnerLightLoc.x = endTopInnerLightLoc.x + size.w - 4;
            endTopInnerLightLoc.y = endTopInnerLightLoc.y + 2;
            graphics.DrawLineChecked(mediumLightPen, startTopInnerLightLoc, endTopInnerLightLoc);
            Point startLeftInnerLightLoc = location;
            startLeftInnerLightLoc.x = startLeftInnerLightLoc.x + 2;
            startLeftInnerLightLoc.y = startLeftInnerLightLoc.y + 2;
            Point endLeftInnerLightLoc = location;
            endLeftInnerLightLoc.x = endLeftInnerLightLoc.x + 2;
            endLeftInnerLightLoc.y = endLeftInnerLightLoc.y + size.h - 4;
            graphics.DrawLineChecked(mediumLightPen, startLeftInnerLightLoc, endLeftInnerLightLoc);
            Pen mediumDarkPen(toolBar->MediumDarkColor(), 1.0f);
            Point startRightInnerMediumDarkLoc = location;
            startRightInnerMediumDarkLoc.x = startRightInnerMediumDarkLoc.x + size.w - 3;
            startRightInnerMediumDarkLoc.y = startRightInnerMediumDarkLoc.y + 2;
            Point endRightInnerMediumDarkLoc = location;
            endRightInnerMediumDarkLoc.x = endRightInnerMediumDarkLoc.x + size.w - 3;
            endRightInnerMediumDarkLoc.y = endRightInnerMediumDarkLoc.y + size.h - 3;;
            graphics.DrawLineChecked(mediumDarkPen, startRightInnerMediumDarkLoc, endRightInnerMediumDarkLoc);
            Point startBottomInnerMediumDarkLoc = location;
            startBottomInnerMediumDarkLoc.x = startBottomInnerMediumDarkLoc.x + 2;
            startBottomInnerMediumDarkLoc.y = startBottomInnerMediumDarkLoc.y + size.h - 3;
            Point endBottomInnerMediumDarkLoc = location;
            endBottomInnerMediumDarkLoc.x = endBottomInnerMediumDarkLoc.x + size.w - 3;
            endBottomInnerMediumDarkLoc.y = endBottomInnerMediumDarkLoc.y + size.h - 3;
            graphics.DrawLineChecked(mediumDarkPen, startBottomInnerMediumDarkLoc, endBottomInnerMediumDarkLoc);
            DrawContent(graphics, location);
        }
        private void DrawPressed(Graphics& graphics, const Point& location)
        {
            ToolBar* toolBar = GetToolBar();
            Pen darkPen(toolBar->DarkColor(), 1.0f);
            Size size = GetSize();
            Rect rect(location, size);
            rect.size.w = rect.size.w - 1;
            rect.size.h = rect.size.h - 1;
            graphics.DrawRectangleChecked(darkPen, rect);

            Point startTopInnerDarkLoc = location;
            startTopInnerDarkLoc.x = startTopInnerDarkLoc.x + 1;
            startTopInnerDarkLoc.y = startTopInnerDarkLoc.y + 1;
            Point endTopInnerDarkLoc = location;
            endTopInnerDarkLoc.x = endTopInnerDarkLoc.x + size.w - 2;
            endTopInnerDarkLoc.y = endTopInnerDarkLoc.y + 1;
            graphics.DrawLineChecked(darkPen, startTopInnerDarkLoc, endTopInnerDarkLoc);

            Point startLeftInnerDarkLoc = location;
            startLeftInnerDarkLoc.x = startLeftInnerDarkLoc.x + 1;
            startLeftInnerDarkLoc.y = startLeftInnerDarkLoc.y + 2;
            Point endLeftInnerDarkLoc = location;
            endLeftInnerDarkLoc.x = endLeftInnerDarkLoc.x + 1;
            endLeftInnerDarkLoc.y = endLeftInnerDarkLoc.y + size.h - 2;
            graphics.DrawLineChecked(darkPen, startLeftInnerDarkLoc, endLeftInnerDarkLoc);

            Pen mediumDarkPen(toolBar->MediumDarkColor(), 1.0f);
            Point startTopInnerMediumDarkLoc = location;
            startTopInnerMediumDarkLoc.x = startTopInnerMediumDarkLoc.x + 2;
            startTopInnerMediumDarkLoc.y = startTopInnerMediumDarkLoc.y + 2;
            Point endTopInnerMediumDarkLoc = location;
            endTopInnerMediumDarkLoc.x = endTopInnerMediumDarkLoc.x + size.w - 2;
            endTopInnerMediumDarkLoc.y = endTopInnerMediumDarkLoc.y + 2;
            graphics.DrawLineChecked(mediumDarkPen, startTopInnerMediumDarkLoc, endTopInnerMediumDarkLoc);

            Point startLeftInnerMediumDarkLoc = location;
            startLeftInnerMediumDarkLoc.x = startLeftInnerMediumDarkLoc.x + 2;
            startLeftInnerMediumDarkLoc.y = startLeftInnerMediumDarkLoc.y + 2;
            Point endLeftInnerMediumDarkLoc = location;
            endLeftInnerMediumDarkLoc.x = endLeftInnerMediumDarkLoc.x + 2;
            endLeftInnerMediumDarkLoc.y = endLeftInnerMediumDarkLoc.y + size.h - 2;
            graphics.DrawLineChecked(mediumDarkPen, startLeftInnerMediumDarkLoc, endLeftInnerMediumDarkLoc);

            DrawContent(graphics, Point(location.x + 1, location.y + 1));
        }
        protected virtual void DrawContent(Graphics& graphics, const Point& location)
        {
            DrawToolBitmap(graphics, location);
        }
        private void DrawToolBitmap(Graphics& graphics, const Point& location)
        {
            if (toolBitmap == null) return;
            Point bitmapLocation(location);
            bitmapLocation.x = bitmapLocation.x + padding.left;
            bitmapLocation.y = bitmapLocation.y + padding.top;
            Rect r(bitmapLocation, toolBitmapSize);
            ImageAttributes attributes;
            attributes.SetColorKey(transparentColor, transparentColor, ColorAdjustType.default_);
            if (state == State.normal || state == State.pressed)
            {
                graphics.DrawImageChecked(*toolBitmap, r, 0, 0, toolBitmapSize.w, toolBitmapSize.h, Unit.pixel, attributes);
            }
            else if (state == State.disabled)
            {
                graphics.DrawImageChecked(*disabledToolBitmap, r, 0, 0, toolBitmapSize.w, toolBitmapSize.h, Unit.pixel, attributes);
            }
        }
        public nothrow inline const string& ToolBitmapName() const
        {
            return toolBitmapName;
        }
        internal nothrow void SetToolBitmaps(Bitmap* toolBitmap_, Bitmap* disabledToolBitmap_)
        {
            toolBitmap = toolBitmap_;
            disabledToolBitmap = disabledToolBitmap_;
            if (toolBitmap != null && disabledToolBitmap != null)
            {
                toolBitmapSize = Size(cast<int>(toolBitmap->GetWidth()), cast<int>(toolBitmap->GetHeight()));
                SetSize(Size(padding.Horizontal() + toolBitmapSize.w, padding.Vertical() + toolBitmapSize.h));
            }
        }
        private nothrow void Invalidate()
        {
            ToolBar* toolBar = GetToolBar();
            if (toolBar != null)
            {
                toolBar->Invalidate();
            }
        }
        private State state;
        private Style style;
        private string toolBitmapName;
        private Bitmap* toolBitmap;
        private Bitmap* disabledToolBitmap;
        private Color transparentColor;
        private Size toolBitmapSize;
        private string toolTip;
        private Padding padding;
        private Event<MouseEnterEventHandler> mouseEnterEvent;
        private Event<MouseLeaveEventHandler> mouseLeaveEvent;
        private Event<MouseEventHandler, MouseEventArgs> mouseMoveEvent;
        private Event<MouseEventHandler, MouseEventArgs> mouseDownEvent;
        private Event<MouseEventHandler, MouseEventArgs> mouseUpEvent;
        private Event<ClickEventHandler> clickEvent;
    }

    public class TextToolButton : ToolButton
    {
        public nothrow TextToolButton(const string& text_, const Size& size, const Color& textColor_, ToolButton.Style style)  :
            base("", style), text(text_), textColor(textColor_)
        {
            SetSize(size);
        }
        public nothrow TextToolButton(const string& text) : this(text, Size(12, 12), Color.Black(), ToolButton.Style.automatic)
        {
        }
        protected override nothrow void SetToolBar(ToolBar* toolBar)
        {
            base->SetToolBar(toolBar);
            Padding padding = GetPadding();
            Size size = GetSize();
            SetSize(Size(padding.Horizontal() + size.w, padding.Vertical() + size.h));
            normalBrush = toolBar->GetOrInsertSolidBrush(textColor);
            disabledBrush = toolBar->GetOrInsertSolidBrush(textColor.ToGray());
        }
        protected override void DrawContent(Graphics& graphics, const Point& location)
        {
            DrawText(graphics, location);
        }
        private void DrawText(Graphics& graphics, const Point& location)
        {
            ToolBar* toolBar = GetToolBar();
            Brush* brush = normalBrush;
            if (GetState() == State.disabled)
            {
                brush = disabledBrush;
            }
            Size size = GetSize();
            RectF r(PointF(location.x, location.y), SizeF(size.w, size.h));
            graphics.DrawStringChecked(text, toolBar->GetTextToolButtonFont(), r, toolBar->CenterFormat(), *brush);
        }
        private string text;
        private Color textColor;
        private SolidBrush* normalBrush;
        private SolidBrush* disabledBrush;
    }
}
