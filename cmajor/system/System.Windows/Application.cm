// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows.API;

namespace System.Windows
{
    public delegate bool MessageProcessorFunction(void* windowHandle, uint msg, uint wparam, long lparam, long& result, void*& originalWndProc);

    public static class Application
    {
        static Application() : logView(null), activeWindow(null)
        {            
            MessageProcessorFunction messageProcessorFunction = ProcessMessage;
            ModelessWindowKeyPreviewFunction keyPreviewFunction = ModelessWindowKeyPreview;
            void* messageProcessorFunctionAddress = cast<void*>(messageProcessorFunction);
            void* keyPreviewFunctionAddress = cast<void*>(keyPreviewFunction);
            int result = WinInit(messageProcessorFunctionAddress, keyPreviewFunctionAddress);
            CheckGraphicsStatus(cast<GraphicsStatus>(result));
        }
        public static void Init()
        {
        }
        public static int Run(Window& mainWindow)
        {
            mainWindow.SetAsMainWindow();
            SetMainWindow(&mainWindow);
            switch (mainWindow.GetWindowState())
            {
                case WindowState.normal:
                {
                    mainWindow.ShowWindow(ShowCommand.SW_SHOWNORMAL);
                    break;
                }
                case WindowState.minimized:
                {
                    mainWindow.ShowWindow(ShowCommand.SW_MINIMIZE);
                    break;
                }
                case WindowState.maximized:
                {
                    mainWindow.ShowWindow(ShowCommand.SW_MAXIMIZE);
                    break;
                }
            }
            mainWindow.Show();
            mainWindow.Update();
            int exitCode = WinRun();
            return exitCode;
        }
        public static void Exit(int exitCode)
        {
            WinPostQuitMessage(exitCode);
        }
        public static void Exit()
        {
            Exit(0);
        }
        private static bool ProcessMessage(void* windowHandle, uint msg, uint wparam, long lparam, long& result, void*& originalWndProc)
        {
            Control* window = windowManager.GetWindow(windowHandle);
            if (window != null)
            {
                Message message(windowHandle, msg, wparam, lparam, result);
                bool handled = window->ProcessMessageInternal(message);
                if (message.originalWndProc != null)
                {
                    originalWndProc = message.originalWndProc;
                }
                if (handled)
                {
                    result = message.result;
                }                
                return handled;
            }
            return false;
        }
        private static void Debug(int level, const char* message)
        {
            MessageBox.Show(message);
        }
        public static nothrow WindowManager& GetWindowManager()
        {
            return windowManager;
        }
        public static nothrow ResourceManager& GetResourceManager()
        {
            return resourceManager;
        }
        public static nothrow LogView* GetLogView()
        {
            return logView;
        }
        public static nothrow void SetLogView(LogView* logView_)
        {
            logView = logView_;
        }
        public static Control* GetFocusedControl() const
        {
            void* focusedWindowHandle = WinGetFocus();
            if (focusedWindowHandle == null)
            {
                return null;
            }
            Control* focusedControl = windowManager.GetWindow(focusedWindowHandle);
            return focusedControl;
        }
        public static nothrow Window* GetActiveWindow() 
        {
            return activeWindow;
        }
        public static nothrow void SetActiveWindow(Window* activeWindow_)
        {
            activeWindow = activeWindow_;
        }
        public static nothrow Window* MainWindow()
        {
            return mainWindow;
        }
        public static nothrow void SetMainWindow(Window* w)
        {
            mainWindow = w;
        }
        private static WindowManager windowManager;
        private static ResourceManager resourceManager;
        private static LogView* logView;
        private static Window* activeWindow;
        private static Window* mainWindow;
    }
}
