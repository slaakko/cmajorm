// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Windows
{
    public class delegate void SelectedIndexChangedEventHandler();

    public enum ListBoxStyle : long
    {
        LBS_COMBOBOX = 0x8000,
        LBS_DISABLENOSCROLL = 0x1000,
        LBS_EXTENDEDSEL = 0x0800,
        LBS_HASSTRINGS = 0x0040,
        LBS_MULTICOLUMN = 0x0200,
        LBS_MULTIPLESEL = 0x0008,
        LBS_NODATA = 0x2000,
        LBS_NOINTEGRALHEIGHT = 0x0100,
        LBS_NOREDRAW = 0x0004,
        LBS_NOSEL = 0x4000,
        LBS_NOTIFY = 0x0001,
        LBS_OWNERDRAWFIXED = 0x0010,
        LBS_OWNERDRAWVARIABLE = 0x0020,
        LBS_SORT = 0x0002,
        LBS_STANDARD = LBS_NOTIFY | LBS_SORT | WindowStyle.WS_VSCROLL | WindowStyle.WS_BORDER,
        LBS_USETABSTOPS = 0x0080,
        LBS_WANTKEYBOARDINPUT = 0x0400
    }

    public class ListBox : Control
    {
        public ListBox(ListBoxStyle listBoxStyle, const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("LISTBOX", DefaultWindowClassStyle(), cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | listBoxStyle), DefaultExtendedWindowStyle(),
            backgroundColor, text, location, size, dock, anchors)
        {
        }
        public ListBox(const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(cast<ListBoxStyle>(ListBoxStyle.LBS_NOTIFY | ListBoxStyle.LBS_HASSTRINGS | WindowStyle.WS_VSCROLL), Color.White(), string(), location, size, dock, anchors)
        {
        }
        public void AddItem(const string& item)
        {
            if (Handle() != null)
            {
                wstring wstr(ToUtf16(item));
                WinSendMessage(Handle(), LB_ADDSTRING, 0u, cast<long>(cast<ulong>(cast<void*>(wstr.Chars()))));
            }
        }
        public void DeleteItem(int itemIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_DELETESTRING, cast<uint>(itemIndex), 0);
            }
        }
        public void InsertItem(int index, const string& item)
        {
            if (Handle() != null)
            {
                wstring wstr(ToUtf16(item));
                WinSendMessage(Handle(), LB_INSERTSTRING, cast<uint>(index), cast<long>(cast<ulong>(cast<void*>(wstr.Chars()))));
            }
        }
        public string GetItem(int index) 
        {
            if (Handle() != null)
            {
                int size = cast<int>(WinSendMessage(Handle(), LB_GETTEXTLEN, cast<uint>(index), 0));
                UniquePtr<wchar> buf(cast<wchar*>(MemAlloc(size * sizeof(wchar))));
                WinSendMessage(Handle(), LB_GETTEXT, cast<uint>(index), cast<long>(cast<ulong>(cast<void*>(buf.Get()))));
                return ToUtf8(buf.Get());
            }
            return string();
        }
        public void SetItem(int index, const string& item)
        {
            DeleteItem(index);
            InsertItem(index, item);
        }
        public int GetItemCount() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETCOUNT, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public int GetTopIndex() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETTOPINDEX, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public void SetTopIndex(int topIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_SETTOPINDEX, cast<uint>(topIndex), 0);
            }
        }
        public int GetSelectedIndex() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETCURSEL, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public void SetSelectedIndex(int selectedIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_SETCURSEL, cast<uint>(selectedIndex), 0);
            }
        }
        protected override void OnCreated()
        {
            base->OnCreated();
            Graphics graphics = Graphics.FromWindowHandle(Handle());
            const FontHandle& fontHandle = GetFontHandle(graphics);
            if (!fontHandle.IsNull())
            {
                SendSetFontMessage(fontHandle);
            }
        }
        internal void SelectedIndexChangedInternal()
        {
            OnSelectedIndexChanged();
        }
        protected virtual void OnSelectedIndexChanged()
        {
            selectedIndexChangedEvent.Fire();
        }
        public nothrow Event<SelectedIndexChangedEventHandler>& SelectedIndexChangedEvent() const
        {
            return selectedIndexChangedEvent;
        }
        private Event<SelectedIndexChangedEventHandler> selectedIndexChangedEvent;
    }
}
