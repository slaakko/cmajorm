// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Windows
{
    public enum BorderStyle : sbyte
    {
        single, style3D
    }

    public nothrow inline int DefaultSingleBorderWidth()
    {
        return 1;
    }

    public nothrow inline int Default3DBorderWidth()
    {
        return 2;
    }

    public nothrow int GetBorderWidth(BorderStyle borderStyle)
    {
        switch (borderStyle)
        {
            case BorderStyle.single: return DefaultSingleBorderWidth();
            case BorderStyle.style3D: return Default3DBorderWidth();
        }
        return 0;
    }

    public nothrow Color DefaultBorderedControlNormalBorderdColor()
    {
        return Color.Black();
    }

    public nothrow Color DefaultBorderedControlFocusedBorderColor()
    {
        return Color.Blue();
    }

    public nothrow ControlCreateParams& BorderedControlControlCreateParams(ControlCreateParams& controlCreateParams, Control* child)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.BorderedControl").SetBackgroundColor(child->BackgroundColor());
    }

    public class BorderedControlCreateParams
    {
        public nothrow BorderedControlCreateParams(ControlCreateParams& controlCreateParams_, Control* child_) :
            controlCreateParams(controlCreateParams_),
            child(child_),
            borderStyle(BorderStyle.single),
            borderWidth(GetBorderWidth(borderStyle)),
            normalBorderColor(DefaultBorderedControlNormalBorderdColor()),
            focusedBorderColor(DefaultBorderedControlFocusedBorderColor())
        {
        }
        public nothrow BorderedControlCreateParams& Defaults()
        {
            return *this;
        }
        public nothrow BorderedControlCreateParams& SetBordedStyle(BorderStyle borderStyle_)
        {
            borderStyle = borderStyle_;
            return *this;
        }
        public nothrow BorderedControlCreateParams& SetBorderWidth(int borderWidth_)
        {
            borderWidth = borderWidth_;
            return *this;
        }
        public nothrow BorderedControlCreateParams& SetNormalBorderColor(const Color& normalBorderColor_)
        {
            normalBorderColor = normalBorderColor_;
            return *this;
        }
        public nothrow  BorderedControlCreateParams& SetFocusedBorderColor(const Color& focusedBorderColor_)
        {
            focusedBorderColor = focusedBorderColor_;
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
        public Control* child;
        public BorderStyle borderStyle;
        public int borderWidth;
        public Color normalBorderColor;
        public Color focusedBorderColor;
    }

    public class BorderedControl : Control
    {
        private enum Flags : sbyte
        {
            none = 0, childFocused = 1 << 0
        }
        public BorderedControl(Control* child_, BorderStyle borderStyle_, const Color& normalBorderColor_, const Color& focusedBorderColor_,
            const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("System.Windows.BorderedControl", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            child_->BackgroundColor(), "borderedControl", location, size, dock, anchors),
            container(this), borderStyle(borderStyle_), normalBorderColor(normalBorderColor_), focusedBorderColor(focusedBorderColor_),
            borderWidth(GetBorderWidth(borderStyle)), child(child_)
        {
            container.AddChild(child);
            SetChildPos();
        }
        public BorderedControl(Control* child, BorderStyle borderStyle, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(child, borderStyle, Color.Black(), Color.Blue(), location, size, dock, anchors)
        {
        }
        public BorderedControl(Control* child, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(child, BorderStyle.single, location, size, dock, anchors)
        {
        }
        public BorderedControl(Control* child) : this(child, Point(), Size(), Dock.none, Anchors.none)
        {
        }
        public BorderedControl(BorderedControlCreateParams& createParams) :
            base(createParams.controlCreateParams),
            container(this),
            borderStyle(createParams.borderStyle),
            borderWidth(createParams.borderWidth),
            normalBorderColor(createParams.normalBorderColor),
            focusedBorderColor(createParams.focusedBorderColor),
            child(createParams.child),
            flags(Flags.none)
        {
            container.AddChild(child);
            SetChildPos();
        }
        public nothrow void SetNormalBorderColor(const Color& normalBorderColor_)
        {
            if (normalBorderColor != normalBorderColor_)
            {
                normalBorderColor = normalBorderColor_;
                Invalidate();
            }
        }
        public nothrow void SetFocusedBorderColor(const Color& focusedBorderColor_)
        {
            if (focusedBorderColor != focusedBorderColor_)
            {
                focusedBorderColor = focusedBorderColor_;
                Invalidate();
            }
        }
        public nothrow void SetBorderWidth(int borderWidth_)
        {
            borderWidth = borderWidth_;
            Invalidate();
        }
        protected nothrow override bool IsDecoratorControl() const
        {
            return true;
        }
        public nothrow override ContainerControl* GetContainerControl() const
        {
            if (child is ContainerControl*)
            {
                return cast<ContainerControl*>(child);
            }
            return base->GetContainerControl();
        }
        internal nothrow override Control* GetFirstEnabledTabStopControl() const
        {
            return child->GetFirstEnabledTabStopControl();
        }
        internal nothrow override Control* GetLastEnabledTabStopControl() const
        {
            return child->GetLastEnabledTabStopControl();
        }
        protected override void OnChildContentLocationChanged(ControlEventArgs& args)
        {
            base->OnChildContentLocationChanged(args);
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->OnChildContentLocationChanged(args);
            }
        }
        protected override void OnChildContentChanged(ControlEventArgs& args)
        {
            base->OnChildContentChanged(args);
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->OnChildContentChanged(args);
            }
        }
        protected override void OnChildContentSizeChanged(ControlEventArgs& args)
        {
            base->OnChildContentSizeChanged(args);
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->OnChildContentSizeChanged(args);
            }
        }
        protected override void OnChildGotFocus(ControlEventArgs& args)
        {
            base->OnChildGotFocus(args);
            SetChildFocused();
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->OnChildGotFocus(args);
            }
            Invalidate();
        }
        protected override void OnChildLostFocus(ControlEventArgs& args)
        {
            base->OnChildLostFocus(args);
            ResetChildFocused();
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->OnChildLostFocus(args);
            }
            Invalidate();
        }
        public override void PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                log->WriteLine(string(' ', level) + "BorderedControl." + Text() + ".handle=" + ToHexString(cast<ulong>(Handle())) + " " + ParentText() + "[" + Rect(Location(), GetSize()).ToString() + "]");
            }
            Component* child = container.FirstChild();
            while (child != null)
            {
                if (child is Control*)
                {
                    Control* childControl = cast<Control*>(child);
                    childControl->PrintWindowTree(level + 1);
                }
                child = child->NextSibling();
            }
        }
        protected override void OnLocationChanged()
        {
            base->OnLocationChanged();
            SetChildPos();
        }
        protected override void OnSizeChanged(uint windowState)
        {
            base->OnSizeChanged(windowState);
            SetChildPos();
        }
        protected override void OnChildSizeChanged(ControlEventArgs& args)
        {
            base->OnChildSizeChanged(args);
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->FireChildSizeChanged(args);
            }
        }
        protected override void OnPaint(PaintEventArgs& args)
        {
            if (Debug.Paint())
            {
                Rect r(Point(), GetSize());
                LogView* log = Application.GetLogView();
                if (log != null)
                {
                    log->WriteLine("BorderedControl.OnPaint: " + r.ToString());
                }
            }
            DrawBorder(args.graphics);
            base->OnPaint(args);
        }
        private void SetChildPos()
        {
            Point loc;
            Size size = GetSize();
            Rect childRect(loc, size);
            childRect.Inflate(-borderWidth, -borderWidth);
            child->SetLocation(childRect.location);
            child->SetSize(childRect.size);
        }
        private void DrawBorder(Graphics& graphics)
        {
            switch (borderStyle)
            {
                case BorderStyle.single: DrawSingleBorder(graphics); break;
                case BorderStyle.style3D: Draw3DBorder(graphics); break;
            }
        }
        private void DrawSingleBorder(Graphics& graphics)
        {
            Rect r(Point(), GetSize());
            r.size.w = r.size.w - 1;
            r.size.h = r.size.h - 1;
            if (ChildFocused())
            {
                Pen pen(focusedBorderColor, 1);
                graphics.DrawRectangleChecked(pen, r);
            }
            else
            {
                Pen pen(normalBorderColor, 1);
                graphics.DrawRectangleChecked(pen, r);
            }
        }
        private void Draw3DBorder(Graphics& graphics)
        {
            Rect r(Point(), GetSize());
            r.size.w = r.size.w - 1;
            r.size.h = r.size.h - 1;
            Pen outerLeftTopEdgePen(Color(160u, 160u, 160u), 1);
            graphics.DrawLineChecked(outerLeftTopEdgePen, r.location, Point(r.location.x + r.size.w - 1, r.location.y));
            graphics.DrawLineChecked(outerLeftTopEdgePen, r.location, Point(r.location.x, r.location.y + r.size.h - 1));
            Pen outerRightBottomEdgePen(Color.White(), 1);
            graphics.DrawLineChecked(outerRightBottomEdgePen, Point(r.location.x + r.size.w, r.location.y), Point(r.location.x + r.size.w, r.location.y + r.size.h));
            graphics.DrawLineChecked(outerRightBottomEdgePen, Point(r.location.x, r.location.y + r.size.h), Point(r.location.x + r.size.w, r.location.y + r.size.h));
            r.Inflate(-1, -1);
            Pen innerLeftTopEdgePen(Color(105u, 105u, 105u), 1);
            graphics.DrawLineChecked(innerLeftTopEdgePen, r.location, Point(r.location.x + r.size.w - 1, r.location.y));
            graphics.DrawLineChecked(innerLeftTopEdgePen, r.location, Point(r.location.x, r.location.y + r.size.h - 1));
            Pen innerRightBottomEdgePen(Color(227u, 227u, 227u), 1);
            graphics.DrawLineChecked(innerRightBottomEdgePen, Point(r.location.x + r.size.w, r.location.y), Point(r.location.x + r.size.w, r.location.y + r.size.h));
            graphics.DrawLineChecked(innerRightBottomEdgePen, Point(r.location.x, r.location.y + r.size.h), Point(r.location.x + r.size.w, r.location.y + r.size.h));
        }
        private nothrow inline bool ChildFocused() const
        {
            return (flags & Flags.childFocused) != Flags.none;
        }
        private nothrow inline void SetChildFocused()
        {
            flags = cast<Flags>(flags | Flags.childFocused);
        }
        private nothrow inline void ResetChildFocused()
        {
            flags = cast<Flags>(flags & ~Flags.childFocused);
        }
        private Container container;
        private BorderStyle borderStyle;
        private int borderWidth;
        private Color normalBorderColor;
        private Color focusedBorderColor;
        private Control* child;
        private Flags flags;
    }
}
