// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Windows
{
    public const int CW_USEDEFAULT = cast<int>(0x80000000);

    public enum ShowCommand : int
    {
        SW_HIDE = 0,
        SW_SHOWNORMAL = 1,
        SW_SHOWMINIMIZED = 2,
        SW_MAXIMIZE = 3,
        SW_SHOWNOACTIVATE = 4,
        SW_SHOW = 5,
        SW_MINIMIZE = 6,
        SW_SHOWMINNOACTIVE = 7,
        SW_SHOWNA = 8,
        SW_RESTORE = 9,
        SW_SHOWDEFAULT = 10,
        SW_FORCEMINIMIZE = 11
    }
    
    public enum WindowColor : int
    {
        COLOR_ACTIVEBORDER = 10,
        COLOR_ACTIVECAPTION = 2,
        COLOR_APPWORKSPACE = 12,
        COLOR_BACKGROUND = 1,
        COLOR_BTNFACE = 15,
        COLOR_BTNSHADOW = 16,
        COLOR_BTNTEXT = 18,
        COLOR_CAPTIONTEXT = 9,
        COLOR_GRAYTEXT = 17,
        COLOR_HIGHLIGHT = 13,
        COLOR_HIGHLIGHTTEXT = 14,
        COLOR_INACTIVEBORDER = 11,
        COLOR_INACTIVECAPTION = 3,
        COLOR_MENU = 4,
        COLOR_MENUTEXT = 7,
        COLOR_SCROLLBAR = 0,
        COLOR_WINDOW = 5,
        COLOR_WINDOWFRAME = 6,
        COLOR_WINDOWTEXT = 8
    }
    
    public enum WindowClassStyle : uint
    {
        CS_DEFAULT = 0u,
        CS_VREDRAW = 1u,
        CS_HREDRAW = 2u,
        CS_DBLCLKS = 8u,
        CS_OWNDC = 0x20u,
        CS_CLASSDC = 0x40u,
        CS_PARENTDC = 0x80u,
        CS_NOCLOSE = 0x200u,
        CS_SAVEBITS = 0x800u,
        CS_BYTEALIGNCLIENT = 0x1000u,
        CS_BYTEALIGNWINDOW = 0x2000u,
        CS_GLOBALCLASS = 0x4000u,
        CS_DROPSHADOW = 0x20000u
    }

    public enum WindowStyle : long
    {
        WS_BORDER = 0x00800000,
        WS_CAPTION = 0x00C00000,
        WS_CHILD = 0x40000000,
        WS_CHILDWINDOW = 0x40000000,
        WS_CLIPCHILDREN = 0x02000000,
        WS_CLIPSIBLINGS = 0x04000000,
        WS_DISABLED = 0x08000000,
        WS_DLGFRAME = 0x00400000,
        WS_GROUP = 0x00020000,
        WS_HSCROLL = 0x00100000,
        WS_ICONIC = 0x20000000,
        WS_MAXIMIZE = 0x01000000,
        WS_MAXIMIZEBOX = 0x00010000,
        WS_MINIMIZE = 0x20000000,
        WS_MINIMIZEBOX = 0x00020000,
        WS_OVERLAPPED = 0x00000000,
        WS_POPUP = 0x80000000,
        WS_SIZEBOX = 0x00040000,
        WS_SYSMENU = 0x00080000,
        WS_TABSTOP = 0x00010000,
        WS_THICKFRAME = 0x00040000,
        WS_TILED = 0x00000000,
        WS_VISIBLE = 0x10000000,
        WS_VSCROLL = 0x00200000,
        WS_POPUPWINDOW = (WS_POPUP | WS_BORDER | WS_SYSMENU),
        WS_OVERLAPPEDWINDOW = (WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX),
        WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW
    }

    public enum ExtendedWindowStyle : long
    {
        WS_EX_DEFAULT = 0x00000000,
        WS_EX_ACCEPTFILES = 0x00000010,
        WS_EX_APPWINDOW = 0x00040000,
        WS_EX_CLIENTEDGE = 0x00000200,
        WS_EX_COMPOSITED = 0x02000000,
        WS_EX_CONTEXTHELP = 0x00000400,
        WS_EX_CONTROLPARENT = 0x00010000,
        WS_EX_DLGMODALFRAME = 0x00000001,
        WS_EX_LAYERED = 0x00080000,
        WS_EX_LAYOUTRTL = 0x00400000,
        WS_EX_LEFT = 0x00000000,
        WS_EX_LEFTSCROLLBAR = 0x00004000,
        WS_EX_LTRREADING = 0x00000000,
        WS_EX_MDICHILD = 0x00000040,
        WS_EX_NOACTIVATE = 0x08000000,
        WS_EX_NOINHERITLAYOUT = 0x00100000,
        WS_EX_NOPARENTNOTIFY = 0x00000004,
        WS_EX_NOREDIRECTIONBITMAP = 0x00200000,
        WS_EX_RIGHT = 0x00001000,
        WS_EX_RIGHTSCROLLBAR = 0x00000000,
        WS_EX_RTLREADING = 0x00002000,
        WS_EX_STATICEDGE = 0x00020000,
        WS_EX_TOOLWINDOW = 0x00000080,
        WS_EX_TOPMOST = 0x00000008,
        WS_EX_TRANSPARENT = 0x00000020,
        WS_EX_WINDOWEDGE = 0x00000100,
        WS_EX_PALETTEWINDOW = (WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST),
        WS_EX_OVERLAPPEDWINDOW = (WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE)
    }
    
    public class Point
    {
        public nothrow Point() : x(0), y(0)
        {
        }
        public nothrow Point(int x_, int y_) : x(x_), y(y_)
        {
        }
        public default nothrow Point(const Point&);
        public default nothrow void operator=(const Point&);
        public static nothrow Point Default()
        {
            return Point(CW_USEDEFAULT, CW_USEDEFAULT);
        }
        public int x; 
        public int y;
    }
    
    public nothrow inline bool operator==(const Point& left, const Point& right)
    {
        return left.x == right.x && left.y == right.y;
    }
    
    public class Size
    {
        public nothrow Size() : h(0), w(0)
        {
        }
        public nothrow Size(int w_, int h_) : w(w_), h(h_)
        {
        }
        public default nothrow Size(const Size&);
        public default nothrow void operator=(const Size&);
        public static nothrow Size Default()
        {
            return Size(CW_USEDEFAULT, CW_USEDEFAULT);
        }
        public int w;
        public int h;
    }
    
    public nothrow inline bool operator==(const Size& left, const Size& right)
    {
        return left.w == right.w && left.h == right.h;
    }
    
    public class Rect
    {
        public nothrow Rect() : left(0), top(0), right(0), bottom(0)
        {
        }
        public nothrow Rect(int left_, int top_, int right_, int bottom_) : left(left_), top(top_), right(right_), bottom(bottom_)
        {
        }
        public int left;
        public int top;
        public int right;
        public int bottom;
    }
    
    public enum WindowState : sbyte
    {
        normal, minimized, maximized
    }
    
    public enum Anchors : sbyte
    {
        none = 0, top = 1 << 0, bottom = 1 << 1, left = 1 << 2, right = 1 << 3
    }
    
    public enum Dock : sbyte
    {
        none = 0, top = 1, bottom = 2, left = 3, right = 4, fill = 5
    }
}
