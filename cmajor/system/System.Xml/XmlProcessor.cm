// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace System.Xml
{
    public class XmlProcessingException : Exception
    {
        public nothrow XmlProcessingException(const string& message_) : base(message_)
        {
        }
    }
    
    public class Entity
    {
        public default virtual ~Entity();
    }
    
    public class InternalEntity : Entity
    {
        public nothrow InternalEntity(const ustring& value_) : value(value_)
        {
        }
        public inline nothrow const ustring& Value() const
        {
            return value;
        }
        private ustring value;
    }
    
    public class XmlProcessor
    {
        public XmlProcessor(const uchar* contentStart_, const uchar* contentEnd_, XmlContentHandler* contentHandler_) : 
            contentStart(contentStart_), contentEnd(contentEnd_), contentHandler(contentHandler_), attValue(null)
        {
            Entity* quot = new InternalEntity(u"\"");
            entityMap[u"quot"] = quot;
            entities.Add(UniquePtr<Entity>(quot));
            Entity* amp = new InternalEntity(u"&");
            entityMap[u"amp"] = amp;
            entities.Add(UniquePtr<Entity>(amp));
            Entity* apos = new InternalEntity(u"'");
            entityMap[u"apos"] = apos;
            entities.Add(UniquePtr<Entity>(apos));
            Entity* lt = new InternalEntity(u"<");
            entityMap[u"lt"] = lt;
            entities.Add(UniquePtr<Entity>(lt));
            Entity* gt = new InternalEntity(u">");
            entityMap[u"gt"] = gt;
            entities.Add(UniquePtr<Entity>(gt));
        }
        public void StartDocument()
        {
            contentHandler->StartDocument();
        }
        public void EndDocument()
        {
            contentHandler->EndDocument();
        }
        public void Text(const ustring& text)
        {
            contentHandler->Text(text);
        }
        public void Comment(const ustring& comment)
        {
            contentHandler->Comment(comment);
        }
        public void PI(const ustring& target, const ustring& data)
        {
            contentHandler->PI(target, data);
        }
        public void CDataSection(const ustring& cdata)
        {
            contentHandler->CDataSection(cdata);
        }
        public void Version(const ustring& version)
        {
            contentHandler->Version(version);
        }
        public void Standalone(bool standalone)
        {
            contentHandler->Standalone(standalone);
        }
        public void Encoding(const ustring& encoding)
        {
            contentHandler->Encoding(encoding);
        }
        public void BeginStartTag(const ustring& tagName)
        {
            tagStack.Push(Rvalue(currentTagName));
            currentTagName = tagName;
            namespaceUriStack.Push(currentNamespaceUri);
            namespacePrefixStack.Push(currentNamespacePrefix);
            attributes.Clear();
        }
        public void EndStartTag(const Span& span, const string& systemId)
        {
            ustring localName;
            ustring prefix;
            ParseQualifiedName(currentTagName, localName, prefix, span, systemId);
            if (prefix == u"xmlns")
            {
                throw XmlProcessingException(GetErrorLocationStr(systemId, span) + ": 'xmlns' prefix cannot be declared for an element");
            }
            contentHandler->StartElement(GetNamespaceUri(prefix, span, systemId), localName, currentTagName, attributes);
        }
        public void EndTag(const ustring& tagName, const Span& span, const string& systemId)
        {
            if (tagStack.IsEmpty())
            {
                throw XmlProcessingException(GetErrorLocationStr(systemId, span) + ": end tag '" + ToUtf8(tagName) + "' has no corresponding start tag");
            }
            if (tagName != currentTagName)
            {
                throw XmlProcessingException(GetErrorLocationStr(systemId, span) + ": end tag '" + ToUtf8(tagName) + "' does not match start tag '" + ToUtf8(currentTagName) + "'");
            }
            ustring localName;
            ustring prefix;
            ParseQualifiedName(currentTagName, localName, prefix, span, systemId);
            if (prefix == u"xmlns")
            {
                throw XmlProcessingException(GetErrorLocationStr(systemId, span) + ": 'xmlns' prefix cannot be declared for an element");
            }
            contentHandler->EndElement(GetNamespaceUri(prefix, span, systemId), localName, currentTagName);
            if (namespaceUriStack.IsEmpty())
            {
                throw XmlProcessingException("namespace URI stack is empty");
            }
            currentNamespaceUri = namespaceUriStack.Pop();
            namespacePrefixMap.Remove(currentNamespacePrefix);
            if (namespacePrefixStack.IsEmpty())
            {
                throw XmlProcessingException("namespace prefix stack is empty");
            }
            currentNamespacePrefix = namespacePrefixStack.Pop();
            namespacePrefixMap[currentNamespacePrefix] = currentNamespaceUri;
            currentTagName = tagStack.Pop();
        }
        public void AddAttribute(const ustring& attName, const ustring& attValue, const Span& span, const string& systemId)
        {
            ustring localName;
            ustring prefix;
            ParseQualifiedName(attName, localName, prefix, span, systemId);
            if (prefix == u"xmlns")
            {
                currentNamespacePrefix = localName;
                currentNamespaceUri = attValue;
                namespacePrefixMap[currentNamespacePrefix] = currentNamespaceUri;
            }
            else if (localName == u"xmlns")
            {
                currentNamespacePrefix.Clear();
                currentNamespaceUri = attValue;
            }
            else
            {
                attributes.Add(Attribute(GetNamespaceUri(prefix, span, systemId), localName, attName, attValue));
            }
        }
        public void EntityRef(const ustring& entityName, const Span& span, const string& systemId)
        {
            HashMap<ustring, Entity*>.ConstIterator it = entityMap.CFind(entityName);
            if (it != entityMap.CEnd())
            {
                Entity* entity = it->second;
                if (entity is InternalEntity*)
                {
                    InternalEntity* internalEntity = cast<InternalEntity*>(entity);
                    const ustring& entityValue = internalEntity->Value();
                    if (attValue != null)
                    {
                        attValue->Append(entityValue);
                    }
                    else
                    {
                        Text(entityValue);
                    }
                }
                else
                {
                    contentHandler->SkippedEntity(entityName);
                }
            }
            else
            {
                contentHandler->SkippedEntity(entityName);
            }
        }
        public void BeginAttributeValue(const ustring* attValue_)
        {
            attValueStack.Push(attValue);
            attValue = attValue_;
        }
        public void EndAttributeValue()
        {
            if (attValueStack.IsEmpty())
            {
                throw XmlProcessingException("attribute value stack is empty");
            }
            attValue = attValueStack.Pop();
        }
        private uchar* contentStart;
        private uchar* contentEnd;
        private XmlContentHandler* contentHandler;
        private Stack<ustring> tagStack;
        private ustring currentTagName;
        private Stack<ustring*> attValueStack;
        private ustring* attValue;
        private Stack<ustring> namespaceUriStack;
        private ustring currentNamespaceUri;
        private Stack<ustring> namespacePrefixStack;
        private ustring currentNamespacePrefix;
        private HashMap<ustring, ustring> namespacePrefixMap;
        private Attributes attributes;
        private HashMap<ustring, Entity*> entityMap;
        private List<UniquePtr<Entity>> entities;
        private nothrow int GetErrorColumn(int index) const
        {
            int errorColumn = 0;
            while (index > 0 && contentStart[index] != '\n' && contentStart[index] != '\r')
            {
                ++errorColumn;
                --index;
            }
            if (errorColumn == 0)
            {
                errorColumn = 1;
            }
            return errorColumn;
        }
        private string GetErrorLocationStr(const string& systemId, const Span& span) const
        {
            int errorColumn = GetErrorColumn(span.start);
            return "error in '" + systemId + "' at line " + ToString(span.lineNumber) + " column " + ToString(errorColumn) + " (index " + ToString(span.start) + ")";
        }
        private void ParseQualifiedName(const ustring& qualifiedName, ustring& localName, ustring& prefix, const Span& span, const string& systemId)
        {            
            List<ustring> parts = qualifiedName.Split(':');
            if (parts.Count() > 2)
            {
                throw XmlProcessingException(GetErrorLocationStr(systemId, span) + ": qualified name '" + ToUtf8(qualifiedName) + "' has more than one ':' character");
            }
            else if (parts.Count() == 2)
            {
                prefix = parts[0];
                localName = parts[1];
            }
            else
            {
                prefix.Clear();
                localName = qualifiedName;
            }
        }
        private ustring GetNamespaceUri(const ustring& namespacePrefix, const Span& span, const string& systemId)
        {
            if (namespacePrefix.IsEmpty())
            {
                return currentNamespaceUri;
            }
            HashMap<ustring, ustring>.ConstIterator it = namespacePrefixMap.CFind(namespacePrefix);
            if (it != namespacePrefixMap.CEnd())
            {
                return it->second;
            }
            else
            {
                throw XmlProcessingException(GetErrorLocationStr(systemId, span) + ": namespace prefix '" + ToUtf8(namespacePrefix) + "' not bound to any namespace URI");
            }
        }
    }
}
