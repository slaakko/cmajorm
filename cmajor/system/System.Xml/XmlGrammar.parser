// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Xml
{
    grammar XmlGrammar
    {
        using stdlib.uint;
        using stdlib.hexdword;
        
        Document(XmlProcessor* processor)
            ::= empty{ processor->StartDocument(); } (Prolog(processor) Element(processor) Misc(processor)*){ processor->EndDocument(); }
            ;

        Char
            ::= [\x9\xA\xD] | range(x20, xD7FF) | range(xE000, xFFFD) | range(x10000, x10FFFF)
            ;

        S
            ::= [\x20\x9\xD\xA]+
            ;

        NameStartChar
            ::= ':' | [A-Z_a-z] | range(xC0, xD6) | range(xD8, xF6) | range(xF8, x2FF) | range(x370, x37D) | range(x37F, x1FFF) | range(x200C, x200D) | range(x2070, x218F) |
                range(x2C00, x2FEF) | range(x3001, xD7FF) | range(xF900, xFDCF) | range(xFDF0, xFFFD) | range(x10000, xEFFFF)
            ;

        NameChar
            ::= NameStartChar | [-.0-9] | range(xB7, xB7) | range(x0300, x036F) | range(x203F, x2040)
            ;

        Name : ustring
            ::= (NameStartChar NameChar*){ value = ustring(matchBegin, matchEnd); }
            ;

        Names
            ::= Name:f ('\x20' Name:n)*
            ;

        Nmtoken
            ::= NameChar+
            ;

        Nmtokens
            ::= Nmtoken ('\x20' Nmtoken)*
            ;

        EntityValue(XmlProcessor* processor) : ustring
            ::= '"'
                (   [^%&"]{ value.Append(*matchBegin); } 
                |   PEReference(processor):pr1{ value.Append(ustring(matchBegin, matchEnd)); } 
                |   Reference(processor):ref1{ value.Append(ustring(matchBegin, matchEnd)); }
                )* '"'
            |   '\''
                (   [^%&']{ value.Append(*matchBegin); } 
                |   PEReference(processor):pr2{ value.Append(ustring(matchBegin, matchEnd)); } 
                |   Reference(processor):ref2{ value.Append(ustring(matchBegin, matchEnd)); }
                )* '\''
            ;

        AttValue(XmlProcessor* processor) : ustring
            ::= '"'{ processor->BeginAttributeValue(&value); } 
                (   [^<&"]{ value.Append(*matchBegin); } 
                |   Reference(processor):ref1
                )* '"'{ processor->EndAttributeValue(); }
            |   '\''{ processor->BeginAttributeValue(&value); } 
                (   [^<&']{ value.Append(*matchBegin); } 
                |   Reference(processor):ref2
                )* '\''{ processor->EndAttributeValue(); }
            ;

        SystemLiteral : ustring
            ::= ('"' ([^"]*){ value = ustring(matchBegin, matchEnd); } '"') | ('\'' ([^']*){ value = ustring(matchBegin, matchEnd); } '\'')
            ;

        PubidLiteral : ustring
            ::= '"' (PubidChar*){ value = ustring(matchBegin, matchEnd); } '"' | '\'' ((PubidChar - '\'')*){ value = ustring(matchBegin, matchEnd); } '\''
            ;

        PubidChar
            ::= [\x20\xD\xA] | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]
            ;

        CharData(XmlProcessor* processor)
            ::= ([^<&]* - ([^<&]* "]]>" [^<&]*)){ processor->Text(ustring(matchBegin, matchEnd)); }
            ;

        Comment(XmlProcessor* processor)
            ::= "<!--" (((Char - '-') | ('-' (Char - '-')))*){ processor->Comment(ustring(matchBegin, matchEnd)); } "-->"
            ;

        PI(XmlProcessor* processor, var ustring data)
            ::= "<?" (PITarget:target (S ((Char - "?>")*){ data = ustring(matchBegin, matchEnd); })?){ processor->PI(target, data); } "?>"
            ;

        PITarget : ustring
            ::= (Name - (('X' | 'x') ('M' | 'm') ('L' | 'l'))){ value = Name; }
            ;

        CDSect(XmlProcessor* processor)
            ::= CDStart CData{ processor->CDataSection(CData); } CDEnd
            ;

        CDStart
            ::= "<![CDATA["
            ;

        CData : ustring
            ::= ((Char - "]]>")*){ value = ustring(matchBegin, matchEnd); }
            ;
            
        CDEnd
            ::= "]]>"
            ;

        Prolog(XmlProcessor* processor)
            ::= XMLDecl(processor)? Misc(processor):m1* (DocTypeDecl(processor) Misc(processor):m2*)?
            ;

        XMLDecl(XmlProcessor* processor)
            ::= "<?xml" VersionInfo(processor) EncodingDecl(processor)? SDDecl(processor)? S? "?>"
            ;

        VersionInfo(XmlProcessor* processor)
            ::= S "version" Eq ('\'' VersionNum{ processor->Version(ustring(matchBegin, matchEnd)); } '\'' | '"' VersionNum{ processor->Version(ustring(matchBegin, matchEnd)); } '"')
            ;

        Eq
            ::= S? '=' S?
            ;

        VersionNum
            ::= "1." [0-9]+
            ;

        Misc(XmlProcessor* processor)
            ::= Comment(processor) | PI(processor) | S
            ;

        DocTypeDecl(XmlProcessor* processor)
            ::= "<!DOCTYPE" S Name:rootElementName (S ExternalID)? S? ('[' IntSubset(processor) ']' S?)? '>'
            ;

        DeclSep(XmlProcessor* processor)
            ::= PEReference(processor) | S
            ;

        IntSubset(XmlProcessor* processor)
            ::= (MarkupDecl(processor) | DeclSep(processor))*
            ;

        MarkupDecl(XmlProcessor* processor)
            ::= ElementDecl(processor) | AttlistDecl(processor) | EntityDecl(processor) | NotationDecl(processor) | PI(processor) | Comment(processor)
            ;

        ExtSubset(XmlProcessor* processor)
            ::= TextDecl(processor)? ExtSubsetDecl(processor)
            ;

        ExtSubsetDecl(XmlProcessor* processor)
            ::= (MarkupDecl(processor) | ConditionalSect(processor) | DeclSep(processor))*
            ;

        SDDecl(XmlProcessor* processor, var bool standalone)
            ::= (S "standalone" Eq (('\'' ("yes"{ standalone = true; } | "no"{ standalone = false; }) '\'') | ('"' ("yes"{ standalone = true; } | "no"{ standalone = false; }) '"')))
            {
                processor->Standalone(standalone); 
            }
            ;

        Element(XmlProcessor* processor, var ustring tagName)
            ::= '<' Name{ tagName = Name; processor->BeginStartTag(tagName); }  (S Attribute(processor))* S? 
                (   "/>"{ processor->EndStartTag(span, fileName); processor->EndTag(tagName, span, fileName); } 
                |   '>'{ processor->EndStartTag(span, fileName); } Content(processor) ETag(processor)
                )
            ;

        Attribute(XmlProcessor* processor)
            ::= Name:attName Eq AttValue(processor):attValue{ processor->AddAttribute(attName, attValue, span, fileName); }
            ;

        ETag(XmlProcessor* processor)
            ::= "</" Name{ processor->EndTag(Name, span, fileName); } S? '>'
            ;

        Content(XmlProcessor* processor)
            ::= CharData(processor):cd1? ((Element(processor) | Reference(processor) | CDSect(processor) | PI(processor) | Comment(processor)) CharData(processor):cd2?)*
            ;

        ElementDecl(XmlProcessor* processor)
            ::= "<!ELEMENT" S Name:elementName S ContentSpec S? '>'
            ;

        ContentSpec
            ::= "EMPTY" | "ANY" | Mixed | Children
            ;

        Children
            ::= (Choice | Seq) ('?' | '*' | '+')?
            ;

        CP
            ::= (Name | Choice | Seq) ('?' | '*' | '+')?
            ;

        Choice
            ::= '(' S? CP (S? '|' S? CP)+ S? ')'
            ;

        Seq
            ::= '(' S? CP (S? ',' S? CP)* S? ')'
            ;

        Mixed
            ::= '(' S? "#PCDATA" (S? '|' S? Name)* S? ")*"
            |   '(' S? "#PCDATA" S? ')'
            ;

        AttlistDecl(XmlProcessor* processor)
            ::= "<!ATTLIST" S Name AttDef(processor)* S? '>'
            ;

        AttDef(XmlProcessor* processor)
            ::= S Name S AttType S DefaultDecl(processor)
            ;

        AttType
            ::= StringType | TokenizedType | EnumeratedType
            ;

        StringType
            ::= "CDATA"
            ;

        TokenizedType
            ::= "ID"
            |   "IDREF"
            |   "IDREFS"
            |   "ENTITY"
            |   "ENTITIES"
            |   "NMTOKEN"
            |   "NMTOKENS"
            ;

        EnumeratedType
            ::= NotationType | Enumeration
            ;

        NotationType
            ::= "NOTATION" S '(' S? Name:f (S? '|' S? Name:n)* S? ')'
            ;

        Enumeration
            ::= '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')'
            ;

        DefaultDecl(XmlProcessor* processor)
            ::= "#REQUIRED" | "#IMPLIED" | (("#FIXED" S)? AttValue(processor))
            ;

        ConditionalSect(XmlProcessor* processor)
            ::= IncludeSect(processor) | IgnoreSect
            ;

        IncludeSect(XmlProcessor* processor)
            ::= "<!" S? "INCLUDE" S? '[' ExtSubsetDecl(processor) "]]>"
            ;

        IgnoreSect
            ::= "<!" S? "IGNORE" S? '[' IgnoreSectContents* "]]>"
            ;

        IgnoreSectContents
            ::= Ignore ("<![" IgnoreSectContents "]]>" Ignore)*
            ;

        Ignore
            ::= Char* - (Char* ("<![" | "]]>") Char*)
            ;

        CharRef : uchar
            ::= "&#" uint:dcr{ value = cast<uchar>(dcr); } ';'
            |   "&#x" hexdword:hcr{ value = cast<uchar>(hcr); } ';'
            ;

        Reference(XmlProcessor* processor)
            ::=  EntityRef(processor) | CharRef{ processor->Text(ustring(CharRef, 1)); }
            ;

        EntityRef(XmlProcessor* processor)
            ::= '&' Name{ processor->EntityRef(Name, span, fileName); } ';'
            ;

        PEReference(XmlProcessor* processor)
            ::= '%' Name ';'
            ;

        EntityDecl(XmlProcessor* processor)
            ::= GEDecl(processor) | PEDecl(processor)
            ;

        GEDecl(XmlProcessor* processor)
            ::= ("<!ENTITY" S Name:entityName S EntityDef(processor):entityValue S? '>')
            ;

        PEDecl(XmlProcessor* processor)
            ::= ("<!ENTITY" S '%' S Name:peName S PEDef(processor):peValue S? '>')
            ;

        EntityDef(XmlProcessor* processor)
            ::= EntityValue(processor) | (ExternalID NDataDecl:notation?)
            ;
        
        PEDef(XmlProcessor* processor)
            ::= EntityValue(processor) | ExternalID
            ;

        ExternalID
            ::= ("SYSTEM" S SystemLiteral:s1)
            |   ("PUBLIC" S PubidLiteral:p2 S SystemLiteral:s2)
            ;

        NDataDecl : ustring
            ::= S "NDATA" S Name{ value = Name; }
            ;

        TextDecl(XmlProcessor* processor)
            ::= "<?xml" VersionInfo(processor)? EncodingDecl(processor) S? "?>"
            ;

        ExtParsedEnt(XmlProcessor* processor)
            ::= TextDecl(processor)? Content(processor)
            ;

        EncodingDecl(XmlProcessor* processor)
            ::= S "encoding" Eq ('"' EncName:en1{ processor->Encoding(en1); } '"' | '\'' EncName:en2{ processor->Encoding(en2); } '\'')
            ;

        EncName : ustring
            ::= ([A-Za-z] [A-Za-z0-9._-]*){ value = ustring(matchBegin, matchEnd); }
            ;

        NotationDecl(XmlProcessor* processor)
            ::= "<!NOTATION" S Name S (ExternalID | PublicID) S? '>'
            ;

        PublicID
            ::= "PUBLIC" S PubidLiteral
            ;
    }
}
