using System;
using System.Collections;
using System.Text.Parsing;

// this source file has been automatically generated from 'XmlGrammar.parser' using cmparsergen version 2.0.0.

namespace System.Xml
{
    public class XmlGrammar : System.Text.Parsing.Grammar
    {
        public XmlGrammar() : this(new ParsingDomain())
        {
        }
        public XmlGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("XmlGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("System.Xml")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public void Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, XmlProcessor* processor)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(processor)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
        }

        public class DocumentRule : System.Text.Parsing.RuleParser
        {
            public DocumentRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* prologNonterminalParser = GetNonterminal(ToUtf32("Prolog"));
                prologNonterminalParser->SetPre(PreProlog);
                NonterminalParser* elementNonterminalParser = GetNonterminal(ToUtf32("Element"));
                elementNonterminalParser->SetPre(PreElement);
                NonterminalParser* miscNonterminalParser = GetNonterminal(ToUtf32("Misc"));
                miscNonterminalParser->SetPre(PreMisc);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->StartDocument();
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->EndDocument();
            }
            public void PreProlog(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreElement(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreMisc(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class NameRule : System.Text.Parsing.RuleParser
        {
            public NameRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ustring value;
            }
        }

        public class EntityValueRule : System.Text.Parsing.RuleParser
        {
            public EntityValueRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                NonterminalParser* pr1NonterminalParser = GetNonterminal(ToUtf32("pr1"));
                pr1NonterminalParser->SetPre(Prepr1);
                NonterminalParser* ref1NonterminalParser = GetNonterminal(ToUtf32("ref1"));
                ref1NonterminalParser->SetPre(Preref1);
                NonterminalParser* pr2NonterminalParser = GetNonterminal(ToUtf32("pr2"));
                pr2NonterminalParser->SetPre(Prepr2);
                NonterminalParser* ref2NonterminalParser = GetNonterminal(ToUtf32("ref2"));
                ref2NonterminalParser->SetPre(Preref2);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(*matchBegin);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(ustring(matchBegin, matchEnd));
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(ustring(matchBegin, matchEnd));
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(*matchBegin);
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(ustring(matchBegin, matchEnd));
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(ustring(matchBegin, matchEnd));
            }
            public void Prepr1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void Preref1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void Prepr2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void Preref2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), value()
                {
                }
                public XmlProcessor* processor;
                public ustring value;
            }
        }

        public class AttValueRule : System.Text.Parsing.RuleParser
        {
            public AttValueRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                NonterminalParser* ref1NonterminalParser = GetNonterminal(ToUtf32("ref1"));
                ref1NonterminalParser->SetPre(Preref1);
                NonterminalParser* ref2NonterminalParser = GetNonterminal(ToUtf32("ref2"));
                ref2NonterminalParser->SetPre(Preref2);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->BeginAttributeValue(&context->value);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(*matchBegin);
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->EndAttributeValue();
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->BeginAttributeValue(&context->value);
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(*matchBegin);
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->EndAttributeValue();
            }
            public void Preref1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void Preref2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), value()
                {
                }
                public XmlProcessor* processor;
                public ustring value;
            }
        }

        public class SystemLiteralRule : System.Text.Parsing.RuleParser
        {
            public SystemLiteralRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ustring value;
            }
        }

        public class PubidLiteralRule : System.Text.Parsing.RuleParser
        {
            public PubidLiteralRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ustring value;
            }
        }

        public class CharDataRule : System.Text.Parsing.RuleParser
        {
            public CharDataRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Text(ustring(matchBegin, matchEnd));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class CommentRule : System.Text.Parsing.RuleParser
        {
            public CommentRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Comment(ustring(matchBegin, matchEnd));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class PIRule : System.Text.Parsing.RuleParser
        {
            public PIRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
                AddLocalVariable(AttrOrVar(ToUtf32("ustring"), ToUtf32("data")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* targetNonterminalParser = GetNonterminal(ToUtf32("target"));
                targetNonterminalParser->SetPost(Posttarget);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->PI(context->fromtarget, context->data);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->data = ustring(matchBegin, matchEnd);
            }
            public void Posttarget(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromtarget_value = stack.Pop();
                    context->fromtarget = *cast<ValueObject<ustring>*>(fromtarget_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), data(), fromtarget()
                {
                }
                public XmlProcessor* processor;
                public ustring data;
                public ustring fromtarget;
            }
        }

        public class PITargetRule : System.Text.Parsing.RuleParser
        {
            public PITargetRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromName;
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromName()
                {
                }
                public ustring value;
                public ustring fromName;
            }
        }

        public class CDSectRule : System.Text.Parsing.RuleParser
        {
            public CDSectRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* cDataNonterminalParser = GetNonterminal(ToUtf32("CData"));
                cDataNonterminalParser->SetPost(PostCData);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->CDataSection(context->fromCData);
            }
            public void PostCData(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCData_value = stack.Pop();
                    context->fromCData = *cast<ValueObject<ustring>*>(fromCData_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromCData()
                {
                }
                public XmlProcessor* processor;
                public ustring fromCData;
            }
        }

        public class CDataRule : System.Text.Parsing.RuleParser
        {
            public CDataRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ustring value;
            }
        }

        public class PrologRule : System.Text.Parsing.RuleParser
        {
            public PrologRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* xMLDeclNonterminalParser = GetNonterminal(ToUtf32("XMLDecl"));
                xMLDeclNonterminalParser->SetPre(PreXMLDecl);
                NonterminalParser* m1NonterminalParser = GetNonterminal(ToUtf32("m1"));
                m1NonterminalParser->SetPre(Prem1);
                NonterminalParser* docTypeDeclNonterminalParser = GetNonterminal(ToUtf32("DocTypeDecl"));
                docTypeDeclNonterminalParser->SetPre(PreDocTypeDecl);
                NonterminalParser* m2NonterminalParser = GetNonterminal(ToUtf32("m2"));
                m2NonterminalParser->SetPre(Prem2);
            }
            public void PreXMLDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void Prem1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreDocTypeDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void Prem2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class XMLDeclRule : System.Text.Parsing.RuleParser
        {
            public XMLDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* versionInfoNonterminalParser = GetNonterminal(ToUtf32("VersionInfo"));
                versionInfoNonterminalParser->SetPre(PreVersionInfo);
                NonterminalParser* encodingDeclNonterminalParser = GetNonterminal(ToUtf32("EncodingDecl"));
                encodingDeclNonterminalParser->SetPre(PreEncodingDecl);
                NonterminalParser* sDDeclNonterminalParser = GetNonterminal(ToUtf32("SDDecl"));
                sDDeclNonterminalParser->SetPre(PreSDDecl);
            }
            public void PreVersionInfo(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreEncodingDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreSDDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class VersionInfoRule : System.Text.Parsing.RuleParser
        {
            public VersionInfoRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Version(ustring(matchBegin, matchEnd));
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Version(ustring(matchBegin, matchEnd));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class MiscRule : System.Text.Parsing.RuleParser
        {
            public MiscRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* commentNonterminalParser = GetNonterminal(ToUtf32("Comment"));
                commentNonterminalParser->SetPre(PreComment);
                NonterminalParser* pINonterminalParser = GetNonterminal(ToUtf32("PI"));
                pINonterminalParser->SetPre(PrePI);
            }
            public void PreComment(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PrePI(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class DocTypeDeclRule : System.Text.Parsing.RuleParser
        {
            public DocTypeDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* rootElementNameNonterminalParser = GetNonterminal(ToUtf32("rootElementName"));
                rootElementNameNonterminalParser->SetPost(PostrootElementName);
                NonterminalParser* intSubsetNonterminalParser = GetNonterminal(ToUtf32("IntSubset"));
                intSubsetNonterminalParser->SetPre(PreIntSubset);
            }
            public void PostrootElementName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromrootElementName_value = stack.Pop();
                    context->fromrootElementName = *cast<ValueObject<ustring>*>(fromrootElementName_value.Get());
                }
            }
            public void PreIntSubset(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromrootElementName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromrootElementName;
            }
        }

        public class DeclSepRule : System.Text.Parsing.RuleParser
        {
            public DeclSepRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* pEReferenceNonterminalParser = GetNonterminal(ToUtf32("PEReference"));
                pEReferenceNonterminalParser->SetPre(PrePEReference);
            }
            public void PrePEReference(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class IntSubsetRule : System.Text.Parsing.RuleParser
        {
            public IntSubsetRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* markupDeclNonterminalParser = GetNonterminal(ToUtf32("MarkupDecl"));
                markupDeclNonterminalParser->SetPre(PreMarkupDecl);
                NonterminalParser* declSepNonterminalParser = GetNonterminal(ToUtf32("DeclSep"));
                declSepNonterminalParser->SetPre(PreDeclSep);
            }
            public void PreMarkupDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreDeclSep(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class MarkupDeclRule : System.Text.Parsing.RuleParser
        {
            public MarkupDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* elementDeclNonterminalParser = GetNonterminal(ToUtf32("ElementDecl"));
                elementDeclNonterminalParser->SetPre(PreElementDecl);
                NonterminalParser* attlistDeclNonterminalParser = GetNonterminal(ToUtf32("AttlistDecl"));
                attlistDeclNonterminalParser->SetPre(PreAttlistDecl);
                NonterminalParser* entityDeclNonterminalParser = GetNonterminal(ToUtf32("EntityDecl"));
                entityDeclNonterminalParser->SetPre(PreEntityDecl);
                NonterminalParser* notationDeclNonterminalParser = GetNonterminal(ToUtf32("NotationDecl"));
                notationDeclNonterminalParser->SetPre(PreNotationDecl);
                NonterminalParser* pINonterminalParser = GetNonterminal(ToUtf32("PI"));
                pINonterminalParser->SetPre(PrePI);
                NonterminalParser* commentNonterminalParser = GetNonterminal(ToUtf32("Comment"));
                commentNonterminalParser->SetPre(PreComment);
            }
            public void PreElementDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreAttlistDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreEntityDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreNotationDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PrePI(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreComment(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class ExtSubsetRule : System.Text.Parsing.RuleParser
        {
            public ExtSubsetRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* textDeclNonterminalParser = GetNonterminal(ToUtf32("TextDecl"));
                textDeclNonterminalParser->SetPre(PreTextDecl);
                NonterminalParser* extSubsetDeclNonterminalParser = GetNonterminal(ToUtf32("ExtSubsetDecl"));
                extSubsetDeclNonterminalParser->SetPre(PreExtSubsetDecl);
            }
            public void PreTextDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreExtSubsetDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class ExtSubsetDeclRule : System.Text.Parsing.RuleParser
        {
            public ExtSubsetDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* markupDeclNonterminalParser = GetNonterminal(ToUtf32("MarkupDecl"));
                markupDeclNonterminalParser->SetPre(PreMarkupDecl);
                NonterminalParser* conditionalSectNonterminalParser = GetNonterminal(ToUtf32("ConditionalSect"));
                conditionalSectNonterminalParser->SetPre(PreConditionalSect);
                NonterminalParser* declSepNonterminalParser = GetNonterminal(ToUtf32("DeclSep"));
                declSepNonterminalParser->SetPre(PreDeclSep);
            }
            public void PreMarkupDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreConditionalSect(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreDeclSep(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class SDDeclRule : System.Text.Parsing.RuleParser
        {
            public SDDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
                AddLocalVariable(AttrOrVar(ToUtf32("bool"), ToUtf32("standalone")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Standalone(context->standalone);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->standalone = true;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->standalone = false;
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->standalone = true;
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->standalone = false;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), standalone()
                {
                }
                public XmlProcessor* processor;
                public bool standalone;
            }
        }

        public class ElementRule : System.Text.Parsing.RuleParser
        {
            public ElementRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
                AddLocalVariable(AttrOrVar(ToUtf32("ustring"), ToUtf32("tagName")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
                NonterminalParser* attributeNonterminalParser = GetNonterminal(ToUtf32("Attribute"));
                attributeNonterminalParser->SetPre(PreAttribute);
                NonterminalParser* contentNonterminalParser = GetNonterminal(ToUtf32("Content"));
                contentNonterminalParser->SetPre(PreContent);
                NonterminalParser* eTagNonterminalParser = GetNonterminal(ToUtf32("ETag"));
                eTagNonterminalParser->SetPre(PreETag);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->tagName = context->fromName;
                context->processor->BeginStartTag(context->tagName);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->EndStartTag(span, fileName);
                context->processor->EndTag(context->tagName, span, fileName);
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->EndStartTag(span, fileName);
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public void PreAttribute(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreContent(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreETag(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), tagName(), fromName()
                {
                }
                public XmlProcessor* processor;
                public ustring tagName;
                public ustring fromName;
            }
        }

        public class AttributeRule : System.Text.Parsing.RuleParser
        {
            public AttributeRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* attNameNonterminalParser = GetNonterminal(ToUtf32("attName"));
                attNameNonterminalParser->SetPost(PostattName);
                NonterminalParser* attValueNonterminalParser = GetNonterminal(ToUtf32("attValue"));
                attValueNonterminalParser->SetPre(PreattValue);
                attValueNonterminalParser->SetPost(PostattValue);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->AddAttribute(context->fromattName, context->fromattValue, span, fileName);
            }
            public void PostattName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromattName_value = stack.Pop();
                    context->fromattName = *cast<ValueObject<ustring>*>(fromattName_value.Get());
                }
            }
            public void PreattValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PostattValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromattValue_value = stack.Pop();
                    context->fromattValue = *cast<ValueObject<ustring>*>(fromattValue_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromattName(), fromattValue()
                {
                }
                public XmlProcessor* processor;
                public ustring fromattName;
                public ustring fromattValue;
            }
        }

        public class ETagRule : System.Text.Parsing.RuleParser
        {
            public ETagRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->EndTag(context->fromName, span, fileName);
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromName;
            }
        }

        public class ContentRule : System.Text.Parsing.RuleParser
        {
            public ContentRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* cd1NonterminalParser = GetNonterminal(ToUtf32("cd1"));
                cd1NonterminalParser->SetPre(Precd1);
                NonterminalParser* elementNonterminalParser = GetNonterminal(ToUtf32("Element"));
                elementNonterminalParser->SetPre(PreElement);
                NonterminalParser* referenceNonterminalParser = GetNonterminal(ToUtf32("Reference"));
                referenceNonterminalParser->SetPre(PreReference);
                NonterminalParser* cDSectNonterminalParser = GetNonterminal(ToUtf32("CDSect"));
                cDSectNonterminalParser->SetPre(PreCDSect);
                NonterminalParser* pINonterminalParser = GetNonterminal(ToUtf32("PI"));
                pINonterminalParser->SetPre(PrePI);
                NonterminalParser* commentNonterminalParser = GetNonterminal(ToUtf32("Comment"));
                commentNonterminalParser->SetPre(PreComment);
                NonterminalParser* cd2NonterminalParser = GetNonterminal(ToUtf32("cd2"));
                cd2NonterminalParser->SetPre(Precd2);
            }
            public void Precd1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreElement(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreReference(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreCDSect(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PrePI(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreComment(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void Precd2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class ElementDeclRule : System.Text.Parsing.RuleParser
        {
            public ElementDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* elementNameNonterminalParser = GetNonterminal(ToUtf32("elementName"));
                elementNameNonterminalParser->SetPost(PostelementName);
            }
            public void PostelementName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromelementName_value = stack.Pop();
                    context->fromelementName = *cast<ValueObject<ustring>*>(fromelementName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromelementName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromelementName;
            }
        }

        public class AttlistDeclRule : System.Text.Parsing.RuleParser
        {
            public AttlistDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
                NonterminalParser* attDefNonterminalParser = GetNonterminal(ToUtf32("AttDef"));
                attDefNonterminalParser->SetPre(PreAttDef);
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public void PreAttDef(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromName;
            }
        }

        public class AttDefRule : System.Text.Parsing.RuleParser
        {
            public AttDefRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
                NonterminalParser* defaultDeclNonterminalParser = GetNonterminal(ToUtf32("DefaultDecl"));
                defaultDeclNonterminalParser->SetPre(PreDefaultDecl);
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public void PreDefaultDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromName;
            }
        }

        public class DefaultDeclRule : System.Text.Parsing.RuleParser
        {
            public DefaultDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* attValueNonterminalParser = GetNonterminal(ToUtf32("AttValue"));
                attValueNonterminalParser->SetPre(PreAttValue);
                attValueNonterminalParser->SetPost(PostAttValue);
            }
            public void PreAttValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PostAttValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromAttValue_value = stack.Pop();
                    context->fromAttValue = *cast<ValueObject<ustring>*>(fromAttValue_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromAttValue()
                {
                }
                public XmlProcessor* processor;
                public ustring fromAttValue;
            }
        }

        public class ConditionalSectRule : System.Text.Parsing.RuleParser
        {
            public ConditionalSectRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* includeSectNonterminalParser = GetNonterminal(ToUtf32("IncludeSect"));
                includeSectNonterminalParser->SetPre(PreIncludeSect);
            }
            public void PreIncludeSect(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class IncludeSectRule : System.Text.Parsing.RuleParser
        {
            public IncludeSectRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* extSubsetDeclNonterminalParser = GetNonterminal(ToUtf32("ExtSubsetDecl"));
                extSubsetDeclNonterminalParser->SetPre(PreExtSubsetDecl);
            }
            public void PreExtSubsetDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class CharRefRule : System.Text.Parsing.RuleParser
        {
            public CharRefRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("uchar"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<uchar>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* dcrNonterminalParser = GetNonterminal(ToUtf32("dcr"));
                dcrNonterminalParser->SetPost(Postdcr);
                NonterminalParser* hcrNonterminalParser = GetNonterminal(ToUtf32("hcr"));
                hcrNonterminalParser->SetPost(Posthcr);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = cast<uchar>(context->fromdcr);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = cast<uchar>(context->fromhcr);
            }
            public void Postdcr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromdcr_value = stack.Pop();
                    context->fromdcr = *cast<ValueObject<uint>*>(fromdcr_value.Get());
                }
            }
            public void Posthcr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromhcr_value = stack.Pop();
                    context->fromhcr = *cast<ValueObject<uint>*>(fromhcr_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromdcr(), fromhcr()
                {
                }
                public uchar value;
                public uint fromdcr;
                public uint fromhcr;
            }
        }

        public class ReferenceRule : System.Text.Parsing.RuleParser
        {
            public ReferenceRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* entityRefNonterminalParser = GetNonterminal(ToUtf32("EntityRef"));
                entityRefNonterminalParser->SetPre(PreEntityRef);
                NonterminalParser* charRefNonterminalParser = GetNonterminal(ToUtf32("CharRef"));
                charRefNonterminalParser->SetPost(PostCharRef);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Text(ustring(context->fromCharRef, 1));
            }
            public void PreEntityRef(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PostCharRef(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCharRef_value = stack.Pop();
                    context->fromCharRef = *cast<ValueObject<uchar>*>(fromCharRef_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromCharRef()
                {
                }
                public XmlProcessor* processor;
                public uchar fromCharRef;
            }
        }

        public class EntityRefRule : System.Text.Parsing.RuleParser
        {
            public EntityRefRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->EntityRef(context->fromName, span, fileName);
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromName;
            }
        }

        public class PEReferenceRule : System.Text.Parsing.RuleParser
        {
            public PEReferenceRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromName;
            }
        }

        public class EntityDeclRule : System.Text.Parsing.RuleParser
        {
            public EntityDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* gEDeclNonterminalParser = GetNonterminal(ToUtf32("GEDecl"));
                gEDeclNonterminalParser->SetPre(PreGEDecl);
                NonterminalParser* pEDeclNonterminalParser = GetNonterminal(ToUtf32("PEDecl"));
                pEDeclNonterminalParser->SetPre(PrePEDecl);
            }
            public void PreGEDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PrePEDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class GEDeclRule : System.Text.Parsing.RuleParser
        {
            public GEDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* entityNameNonterminalParser = GetNonterminal(ToUtf32("entityName"));
                entityNameNonterminalParser->SetPost(PostentityName);
                NonterminalParser* entityValueNonterminalParser = GetNonterminal(ToUtf32("entityValue"));
                entityValueNonterminalParser->SetPre(PreentityValue);
            }
            public void PostentityName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromentityName_value = stack.Pop();
                    context->fromentityName = *cast<ValueObject<ustring>*>(fromentityName_value.Get());
                }
            }
            public void PreentityValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromentityName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromentityName;
            }
        }

        public class PEDeclRule : System.Text.Parsing.RuleParser
        {
            public PEDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* peNameNonterminalParser = GetNonterminal(ToUtf32("peName"));
                peNameNonterminalParser->SetPost(PostpeName);
                NonterminalParser* peValueNonterminalParser = GetNonterminal(ToUtf32("peValue"));
                peValueNonterminalParser->SetPre(PrepeValue);
            }
            public void PostpeName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> frompeName_value = stack.Pop();
                    context->frompeName = *cast<ValueObject<ustring>*>(frompeName_value.Get());
                }
            }
            public void PrepeValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), frompeName()
                {
                }
                public XmlProcessor* processor;
                public ustring frompeName;
            }
        }

        public class EntityDefRule : System.Text.Parsing.RuleParser
        {
            public EntityDefRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* entityValueNonterminalParser = GetNonterminal(ToUtf32("EntityValue"));
                entityValueNonterminalParser->SetPre(PreEntityValue);
                entityValueNonterminalParser->SetPost(PostEntityValue);
                NonterminalParser* notationNonterminalParser = GetNonterminal(ToUtf32("notation"));
                notationNonterminalParser->SetPost(Postnotation);
            }
            public void PreEntityValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PostEntityValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromEntityValue_value = stack.Pop();
                    context->fromEntityValue = *cast<ValueObject<ustring>*>(fromEntityValue_value.Get());
                }
            }
            public void Postnotation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromnotation_value = stack.Pop();
                    context->fromnotation = *cast<ValueObject<ustring>*>(fromnotation_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromEntityValue(), fromnotation()
                {
                }
                public XmlProcessor* processor;
                public ustring fromEntityValue;
                public ustring fromnotation;
            }
        }

        public class PEDefRule : System.Text.Parsing.RuleParser
        {
            public PEDefRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* entityValueNonterminalParser = GetNonterminal(ToUtf32("EntityValue"));
                entityValueNonterminalParser->SetPre(PreEntityValue);
                entityValueNonterminalParser->SetPost(PostEntityValue);
            }
            public void PreEntityValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PostEntityValue(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromEntityValue_value = stack.Pop();
                    context->fromEntityValue = *cast<ValueObject<ustring>*>(fromEntityValue_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromEntityValue()
                {
                }
                public XmlProcessor* processor;
                public ustring fromEntityValue;
            }
        }

        public class NDataDeclRule : System.Text.Parsing.RuleParser
        {
            public NDataDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromName;
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromName()
                {
                }
                public ustring value;
                public ustring fromName;
            }
        }

        public class TextDeclRule : System.Text.Parsing.RuleParser
        {
            public TextDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* versionInfoNonterminalParser = GetNonterminal(ToUtf32("VersionInfo"));
                versionInfoNonterminalParser->SetPre(PreVersionInfo);
                NonterminalParser* encodingDeclNonterminalParser = GetNonterminal(ToUtf32("EncodingDecl"));
                encodingDeclNonterminalParser->SetPre(PreEncodingDecl);
            }
            public void PreVersionInfo(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreEncodingDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class ExtParsedEntRule : System.Text.Parsing.RuleParser
        {
            public ExtParsedEntRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* textDeclNonterminalParser = GetNonterminal(ToUtf32("TextDecl"));
                textDeclNonterminalParser->SetPre(PreTextDecl);
                NonterminalParser* contentNonterminalParser = GetNonterminal(ToUtf32("Content"));
                contentNonterminalParser->SetPre(PreContent);
            }
            public void PreTextDecl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public void PreContent(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<XmlProcessor*>(context->processor)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor()
                {
                }
                public XmlProcessor* processor;
            }
        }

        public class EncodingDeclRule : System.Text.Parsing.RuleParser
        {
            public EncodingDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* en1NonterminalParser = GetNonterminal(ToUtf32("en1"));
                en1NonterminalParser->SetPost(Posten1);
                NonterminalParser* en2NonterminalParser = GetNonterminal(ToUtf32("en2"));
                en2NonterminalParser->SetPost(Posten2);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Encoding(context->fromen1);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->processor->Encoding(context->fromen2);
            }
            public void Posten1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromen1_value = stack.Pop();
                    context->fromen1 = *cast<ValueObject<ustring>*>(fromen1_value.Get());
                }
            }
            public void Posten2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromen2_value = stack.Pop();
                    context->fromen2 = *cast<ValueObject<ustring>*>(fromen2_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromen1(), fromen2()
                {
                }
                public XmlProcessor* processor;
                public ustring fromen1;
                public ustring fromen2;
            }
        }

        public class EncNameRule : System.Text.Parsing.RuleParser
        {
            public EncNameRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ustring value;
            }
        }

        public class NotationDeclRule : System.Text.Parsing.RuleParser
        {
            public NotationDeclRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("XmlProcessor*"), ToUtf32("processor")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> processor_value = stack.Pop();
                context->processor = *cast<ValueObject<XmlProcessor*>*>(processor_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* nameNonterminalParser = GetNonterminal(ToUtf32("Name"));
                nameNonterminalParser->SetPost(PostName);
            }
            public void PostName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromName_value = stack.Pop();
                    context->fromName = *cast<ValueObject<ustring>*>(fromName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : processor(), fromName()
                {
                }
                public XmlProcessor* processor;
                public ustring fromName;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("uint"), this, ToUtf32("System.Text.Parsing.stdlib.uint")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("hexdword"), this, ToUtf32("System.Text.Parsing.stdlib.hexdword")));
            AddRule(new DocumentRule(ToUtf32("Document"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.EmptyParser()),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Prolog"), ToUtf32("Prolog"), 1),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Element"), ToUtf32("Element"), 1)),
                                new System.Text.Parsing.KleeneStarParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Misc"), ToUtf32("Misc"), 1))))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Char"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.CharSetParser(ToUtf32("\t\n\r")),
                            new System.Text.Parsing.RangeParser(32u, 55295u)),
                        new System.Text.Parsing.RangeParser(57344u, 65533u)),
                    new System.Text.Parsing.RangeParser(65536u, 1114111u))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("S"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.PositiveParser(
                    new System.Text.Parsing.CharSetParser(ToUtf32(" \t\r\n")))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("NameStartChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.AlternativeParser(
                                                            new System.Text.Parsing.AlternativeParser(
                                                                new System.Text.Parsing.AlternativeParser(
                                                                    new System.Text.Parsing.CharParser(':'),
                                                                    new System.Text.Parsing.CharSetParser(ToUtf32("A-Z_a-z"))),
                                                                new System.Text.Parsing.RangeParser(192u, 214u)),
                                                            new System.Text.Parsing.RangeParser(216u, 246u)),
                                                        new System.Text.Parsing.RangeParser(248u, 767u)),
                                                    new System.Text.Parsing.RangeParser(880u, 893u)),
                                                new System.Text.Parsing.RangeParser(895u, 8191u)),
                                            new System.Text.Parsing.RangeParser(8204u, 8205u)),
                                        new System.Text.Parsing.RangeParser(8304u, 8591u)),
                                    new System.Text.Parsing.RangeParser(11264u, 12271u)),
                                new System.Text.Parsing.RangeParser(12289u, 55295u)),
                            new System.Text.Parsing.RangeParser(63744u, 64975u)),
                        new System.Text.Parsing.RangeParser(65008u, 65533u)),
                    new System.Text.Parsing.RangeParser(65536u, 983039u))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("NameChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("NameStartChar"), ToUtf32("NameStartChar"), 0),
                                new System.Text.Parsing.CharSetParser(ToUtf32("-.0-9"))),
                            new System.Text.Parsing.RangeParser(183u, 183u)),
                        new System.Text.Parsing.RangeParser(768u, 879u)),
                    new System.Text.Parsing.RangeParser(8255u, 8256u))));
            AddRule(new NameRule(ToUtf32("Name"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("NameStartChar"), ToUtf32("NameStartChar"), 0),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("NameChar"), ToUtf32("NameChar"), 0)))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Names"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("f"), ToUtf32("Name"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser(' '),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("n"), ToUtf32("Name"), 0)))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Nmtoken"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.PositiveParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("NameChar"), ToUtf32("NameChar"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Nmtokens"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Nmtoken"), ToUtf32("Nmtoken"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser(' '),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Nmtoken"), ToUtf32("Nmtoken"), 0)))))));
            AddRule(new EntityValueRule(ToUtf32("EntityValue"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('\"'),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                                new System.Text.Parsing.CharSetParser(ToUtf32("%&\""), true)),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("pr1"), ToUtf32("PEReference"), 1))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("ref1"), ToUtf32("Reference"), 1)))))),
                        new System.Text.Parsing.CharParser('\"')),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('\''),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                new System.Text.Parsing.CharSetParser(ToUtf32("%&'"), true)),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("pr2"), ToUtf32("PEReference"), 1))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("ref2"), ToUtf32("Reference"), 1)))))),
                        new System.Text.Parsing.CharParser('\'')))));
            AddRule(new AttValueRule(ToUtf32("AttValue"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.CharParser('\"')),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                            new System.Text.Parsing.CharSetParser(ToUtf32("<&\""), true)),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("ref1"), ToUtf32("Reference"), 1))))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                            new System.Text.Parsing.CharParser('\"'))),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                new System.Text.Parsing.CharParser('\'')),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                            new System.Text.Parsing.CharSetParser(ToUtf32("<&'"), true)),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("ref2"), ToUtf32("Reference"), 1))))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                            new System.Text.Parsing.CharParser('\''))))));
            AddRule(new SystemLiteralRule(ToUtf32("SystemLiteral"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('\"'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.KleeneStarParser(
                                            new System.Text.Parsing.CharSetParser(ToUtf32("\""), true))))),
                            new System.Text.Parsing.CharParser('\"'))),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('\''),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.KleeneStarParser(
                                            new System.Text.Parsing.CharSetParser(ToUtf32("'"), true))))),
                            new System.Text.Parsing.CharParser('\''))))));
            AddRule(new PubidLiteralRule(ToUtf32("PubidLiteral"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('\"'),
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.KleeneStarParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("PubidChar"), ToUtf32("PubidChar"), 0))))),
                        new System.Text.Parsing.CharParser('\"')),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('\''),
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.KleeneStarParser(
                                        new System.Text.Parsing.GroupingParser(
                                            new System.Text.Parsing.DifferenceParser(
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("PubidChar"), ToUtf32("PubidChar"), 0),
                                                new System.Text.Parsing.CharParser('\''))))))),
                        new System.Text.Parsing.CharParser('\'')))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("PubidChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.CharSetParser(ToUtf32(" \r\n")),
                        new System.Text.Parsing.CharSetParser(ToUtf32("a-zA-Z0-9"))),
                    new System.Text.Parsing.CharSetParser(ToUtf32("-'()+,./:=?;!*#@$_%")))));
            AddRule(new CharDataRule(ToUtf32("CharData"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.DifferenceParser(
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.CharSetParser(ToUtf32("<&"), true)),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.KleeneStarParser(
                                            new System.Text.Parsing.CharSetParser(ToUtf32("<&"), true)),
                                        new System.Text.Parsing.StringParser(ToUtf32("]]>"))),
                                    new System.Text.Parsing.KleeneStarParser(
                                        new System.Text.Parsing.CharSetParser(ToUtf32("<&"), true)))))))));
            AddRule(new CommentRule(ToUtf32("Comment"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.StringParser(ToUtf32("<!--")),
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.KleeneStarParser(
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.GroupingParser(
                                                new System.Text.Parsing.DifferenceParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0),
                                                    new System.Text.Parsing.CharParser('-'))),
                                            new System.Text.Parsing.GroupingParser(
                                                new System.Text.Parsing.SequenceParser(
                                                    new System.Text.Parsing.CharParser('-'),
                                                    new System.Text.Parsing.GroupingParser(
                                                        new System.Text.Parsing.DifferenceParser(
                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0),
                                                            new System.Text.Parsing.CharParser('-'))))))))))),
                    new System.Text.Parsing.StringParser(ToUtf32("-->")))));
            AddRule(new PIRule(ToUtf32("PI"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.StringParser(ToUtf32("<?")),
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("target"), ToUtf32("PITarget"), 0),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.GroupingParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                    new System.Text.Parsing.GroupingParser(
                                                        new System.Text.Parsing.KleeneStarParser(
                                                            new System.Text.Parsing.GroupingParser(
                                                                new System.Text.Parsing.DifferenceParser(
                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0),
                                                                    new System.Text.Parsing.StringParser(ToUtf32("?>")))))))))))))),
                    new System.Text.Parsing.StringParser(ToUtf32("?>")))));
            AddRule(new PITargetRule(ToUtf32("PITarget"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.DifferenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.GroupingParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.CharParser('X'),
                                                new System.Text.Parsing.CharParser('x'))),
                                        new System.Text.Parsing.GroupingParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.CharParser('M'),
                                                new System.Text.Parsing.CharParser('m')))),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.CharParser('L'),
                                            new System.Text.Parsing.CharParser('l'))))))))));
            AddRule(new CDSectRule(ToUtf32("CDSect"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("CDStart"), ToUtf32("CDStart"), 0),
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("CData"), ToUtf32("CData"), 0))),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("CDEnd"), ToUtf32("CDEnd"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("CDStart"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.StringParser(ToUtf32("<![CDATA["))));
            AddRule(new CDataRule(ToUtf32("CData"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.KleeneStarParser(
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.DifferenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0),
                                    new System.Text.Parsing.StringParser(ToUtf32("]]>")))))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("CDEnd"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.StringParser(ToUtf32("]]>"))));
            AddRule(new PrologRule(ToUtf32("Prolog"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("XMLDecl"), ToUtf32("XMLDecl"), 1)),
                        new System.Text.Parsing.KleeneStarParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("m1"), ToUtf32("Misc"), 1))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("DocTypeDecl"), ToUtf32("DocTypeDecl"), 1),
                                new System.Text.Parsing.KleeneStarParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("m2"), ToUtf32("Misc"), 1))))))));
            AddRule(new XMLDeclRule(ToUtf32("XMLDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.StringParser(ToUtf32("<?xml")),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("VersionInfo"), ToUtf32("VersionInfo"), 1)),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("EncodingDecl"), ToUtf32("EncodingDecl"), 1))),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("SDDecl"), ToUtf32("SDDecl"), 1))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.StringParser(ToUtf32("?>")))));
            AddRule(new VersionInfoRule(ToUtf32("VersionInfo"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                            new System.Text.Parsing.StringParser(ToUtf32("version"))),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Eq"), ToUtf32("Eq"), 0)),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('\''),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("VersionNum"), ToUtf32("VersionNum"), 0))),
                                new System.Text.Parsing.CharParser('\'')),
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('\"'),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("VersionNum"), ToUtf32("VersionNum"), 0))),
                                new System.Text.Parsing.CharParser('\"')))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Eq"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                        new System.Text.Parsing.CharParser('=')),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("VersionNum"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.StringParser(ToUtf32("1.")),
                    new System.Text.Parsing.PositiveParser(
                        new System.Text.Parsing.CharSetParser(ToUtf32("0-9"))))));
            AddRule(new MiscRule(ToUtf32("Misc"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Comment"), ToUtf32("Comment"), 1),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("PI"), ToUtf32("PI"), 1)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))));
            AddRule(new DocTypeDeclRule(ToUtf32("DocTypeDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("<!DOCTYPE")),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("rootElementName"), ToUtf32("Name"), 0)),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("ExternalID"), ToUtf32("ExternalID"), 0))))),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.CharParser('['),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("IntSubset"), ToUtf32("IntSubset"), 1)),
                                        new System.Text.Parsing.CharParser(']')),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)))))),
                    new System.Text.Parsing.CharParser('>'))));
            AddRule(new DeclSepRule(ToUtf32("DeclSep"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("PEReference"), ToUtf32("PEReference"), 1),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))));
            AddRule(new IntSubsetRule(ToUtf32("IntSubset"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("MarkupDecl"), ToUtf32("MarkupDecl"), 1),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("DeclSep"), ToUtf32("DeclSep"), 1))))));
            AddRule(new MarkupDeclRule(ToUtf32("MarkupDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("ElementDecl"), ToUtf32("ElementDecl"), 1),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("AttlistDecl"), ToUtf32("AttlistDecl"), 1)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("EntityDecl"), ToUtf32("EntityDecl"), 1)),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("NotationDecl"), ToUtf32("NotationDecl"), 1)),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("PI"), ToUtf32("PI"), 1)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Comment"), ToUtf32("Comment"), 1))));
            AddRule(new ExtSubsetRule(ToUtf32("ExtSubset"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("TextDecl"), ToUtf32("TextDecl"), 1)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("ExtSubsetDecl"), ToUtf32("ExtSubsetDecl"), 1))));
            AddRule(new ExtSubsetDeclRule(ToUtf32("ExtSubsetDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("MarkupDecl"), ToUtf32("MarkupDecl"), 1),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("ConditionalSect"), ToUtf32("ConditionalSect"), 1)),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("DeclSep"), ToUtf32("DeclSep"), 1))))));
            AddRule(new SDDeclRule(ToUtf32("SDDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                                    new System.Text.Parsing.StringParser(ToUtf32("standalone"))),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Eq"), ToUtf32("Eq"), 0)),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.CharParser('\''),
                                                new System.Text.Parsing.GroupingParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                            new System.Text.Parsing.StringParser(ToUtf32("yes"))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                            new System.Text.Parsing.StringParser(ToUtf32("no")))))),
                                            new System.Text.Parsing.CharParser('\''))),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.CharParser('\"'),
                                                new System.Text.Parsing.GroupingParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                            new System.Text.Parsing.StringParser(ToUtf32("yes"))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                            new System.Text.Parsing.StringParser(ToUtf32("no")))))),
                                            new System.Text.Parsing.CharParser('\"'))))))))));
            AddRule(new ElementRule(ToUtf32("Element"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('<'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0))),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Attribute"), ToUtf32("Attribute"), 1))))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.StringParser(ToUtf32("/>"))),
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                        new System.Text.Parsing.CharParser('>')),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Content"), ToUtf32("Content"), 1)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("ETag"), ToUtf32("ETag"), 1)))))));
            AddRule(new AttributeRule(ToUtf32("Attribute"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("attName"), ToUtf32("Name"), 0),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Eq"), ToUtf32("Eq"), 0)),
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("attValue"), ToUtf32("AttValue"), 1)))));
            AddRule(new ETagRule(ToUtf32("ETag"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.StringParser(ToUtf32("</")),
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser('>'))));
            AddRule(new ContentRule(ToUtf32("Content"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("cd1"), ToUtf32("CharData"), 1)),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Element"), ToUtf32("Element"), 1),
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Reference"), ToUtf32("Reference"), 1)),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("CDSect"), ToUtf32("CDSect"), 1)),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("PI"), ToUtf32("PI"), 1)),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Comment"), ToUtf32("Comment"), 1))),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("cd2"), ToUtf32("CharData"), 1))))))));
            AddRule(new ElementDeclRule(ToUtf32("ElementDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("<!ELEMENT")),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("elementName"), ToUtf32("Name"), 0)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("ContentSpec"), ToUtf32("ContentSpec"), 0)),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser('>'))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("ContentSpec"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.StringParser(ToUtf32("EMPTY")),
                            new System.Text.Parsing.StringParser(ToUtf32("ANY"))),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Mixed"), ToUtf32("Mixed"), 0)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Children"), ToUtf32("Children"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Children"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Choice"), ToUtf32("Choice"), 0),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Seq"), ToUtf32("Seq"), 0))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.CharParser('?'),
                                    new System.Text.Parsing.CharParser('*')),
                                new System.Text.Parsing.CharParser('+')))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("CP"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Choice"), ToUtf32("Choice"), 0)),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Seq"), ToUtf32("Seq"), 0))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.CharParser('?'),
                                    new System.Text.Parsing.CharParser('*')),
                                new System.Text.Parsing.CharParser('+')))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Choice"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('('),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("CP"), ToUtf32("CP"), 0)),
                            new System.Text.Parsing.PositiveParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.OptionalParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                                new System.Text.Parsing.CharParser('|')),
                                            new System.Text.Parsing.OptionalParser(
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("CP"), ToUtf32("CP"), 0))))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser(')'))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Seq"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('('),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("CP"), ToUtf32("CP"), 0)),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.OptionalParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                                new System.Text.Parsing.CharParser(',')),
                                            new System.Text.Parsing.OptionalParser(
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("CP"), ToUtf32("CP"), 0))))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser(')'))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Mixed"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.CharParser('('),
                                        new System.Text.Parsing.OptionalParser(
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                    new System.Text.Parsing.StringParser(ToUtf32("#PCDATA"))),
                                new System.Text.Parsing.KleeneStarParser(
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.SequenceParser(
                                                    new System.Text.Parsing.OptionalParser(
                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                                    new System.Text.Parsing.CharParser('|')),
                                                new System.Text.Parsing.OptionalParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0))))),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                        new System.Text.Parsing.StringParser(ToUtf32(")*"))),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('('),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                new System.Text.Parsing.StringParser(ToUtf32("#PCDATA"))),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                        new System.Text.Parsing.CharParser(')')))));
            AddRule(new AttlistDeclRule(ToUtf32("AttlistDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.StringParser(ToUtf32("<!ATTLIST")),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0)),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("AttDef"), ToUtf32("AttDef"), 1))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser('>'))));
            AddRule(new AttDefRule(ToUtf32("AttDef"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("AttType"), ToUtf32("AttType"), 0)),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("DefaultDecl"), ToUtf32("DefaultDecl"), 1))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("AttType"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("StringType"), ToUtf32("StringType"), 0),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("TokenizedType"), ToUtf32("TokenizedType"), 0)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("EnumeratedType"), ToUtf32("EnumeratedType"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("StringType"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.StringParser(ToUtf32("CDATA"))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("TokenizedType"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("ID")),
                                        new System.Text.Parsing.StringParser(ToUtf32("IDREF"))),
                                    new System.Text.Parsing.StringParser(ToUtf32("IDREFS"))),
                                new System.Text.Parsing.StringParser(ToUtf32("ENTITY"))),
                            new System.Text.Parsing.StringParser(ToUtf32("ENTITIES"))),
                        new System.Text.Parsing.StringParser(ToUtf32("NMTOKEN"))),
                    new System.Text.Parsing.StringParser(ToUtf32("NMTOKENS")))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("EnumeratedType"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("NotationType"), ToUtf32("NotationType"), 0),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Enumeration"), ToUtf32("Enumeration"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("NotationType"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.StringParser(ToUtf32("NOTATION")),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                        new System.Text.Parsing.CharParser('(')),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("f"), ToUtf32("Name"), 0)),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.OptionalParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                                new System.Text.Parsing.CharParser('|')),
                                            new System.Text.Parsing.OptionalParser(
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("n"), ToUtf32("Name"), 0))))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser(')'))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Enumeration"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('('),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Nmtoken"), ToUtf32("Nmtoken"), 0)),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.OptionalParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                                new System.Text.Parsing.CharParser('|')),
                                            new System.Text.Parsing.OptionalParser(
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Nmtoken"), ToUtf32("Nmtoken"), 0))))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser(')'))));
            AddRule(new DefaultDeclRule(ToUtf32("DefaultDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.StringParser(ToUtf32("#REQUIRED")),
                        new System.Text.Parsing.StringParser(ToUtf32("#IMPLIED"))),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("#FIXED")),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)))),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("AttValue"), ToUtf32("AttValue"), 1))))));
            AddRule(new ConditionalSectRule(ToUtf32("ConditionalSect"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("IncludeSect"), ToUtf32("IncludeSect"), 1),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("IgnoreSect"), ToUtf32("IgnoreSect"), 0))));
            AddRule(new IncludeSectRule(ToUtf32("IncludeSect"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("<!")),
                                        new System.Text.Parsing.OptionalParser(
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                    new System.Text.Parsing.StringParser(ToUtf32("INCLUDE"))),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                            new System.Text.Parsing.CharParser('[')),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("ExtSubsetDecl"), ToUtf32("ExtSubsetDecl"), 1)),
                    new System.Text.Parsing.StringParser(ToUtf32("]]>")))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("IgnoreSect"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("<!")),
                                        new System.Text.Parsing.OptionalParser(
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                                    new System.Text.Parsing.StringParser(ToUtf32("IGNORE"))),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                            new System.Text.Parsing.CharParser('[')),
                        new System.Text.Parsing.KleeneStarParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("IgnoreSectContents"), ToUtf32("IgnoreSectContents"), 0))),
                    new System.Text.Parsing.StringParser(ToUtf32("]]>")))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("IgnoreSectContents"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Ignore"), ToUtf32("Ignore"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("<![")),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("IgnoreSectContents"), ToUtf32("IgnoreSectContents"), 0)),
                                    new System.Text.Parsing.StringParser(ToUtf32("]]>"))),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Ignore"), ToUtf32("Ignore"), 0)))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Ignore"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.DifferenceParser(
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0)),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.KleeneStarParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0)),
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("<![")),
                                        new System.Text.Parsing.StringParser(ToUtf32("]]>"))))),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0)))))));
            AddRule(new CharRefRule(ToUtf32("CharRef"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.StringParser(ToUtf32("&#")),
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("dcr"), ToUtf32("uint"), 0))),
                        new System.Text.Parsing.CharParser(';')),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.StringParser(ToUtf32("&#x")),
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("hcr"), ToUtf32("hexdword"), 0))),
                        new System.Text.Parsing.CharParser(';')))));
            AddRule(new ReferenceRule(ToUtf32("Reference"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("EntityRef"), ToUtf32("EntityRef"), 1),
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("CharRef"), ToUtf32("CharRef"), 0)))));
            AddRule(new EntityRefRule(ToUtf32("EntityRef"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.CharParser('&'),
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0))),
                    new System.Text.Parsing.CharParser(';'))));
            AddRule(new PEReferenceRule(ToUtf32("PEReference"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.CharParser('%'),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0)),
                    new System.Text.Parsing.CharParser(';'))));
            AddRule(new EntityDeclRule(ToUtf32("EntityDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("GEDecl"), ToUtf32("GEDecl"), 1),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("PEDecl"), ToUtf32("PEDecl"), 1))));
            AddRule(new GEDeclRule(ToUtf32("GEDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.GroupingParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.StringParser(ToUtf32("<!ENTITY")),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("entityName"), ToUtf32("Name"), 0)),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("entityValue"), ToUtf32("EntityDef"), 1)),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                        new System.Text.Parsing.CharParser('>')))));
            AddRule(new PEDeclRule(ToUtf32("PEDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.GroupingParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.SequenceParser(
                                                    new System.Text.Parsing.StringParser(ToUtf32("<!ENTITY")),
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                                new System.Text.Parsing.CharParser('%')),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("peName"), ToUtf32("Name"), 0)),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("peValue"), ToUtf32("PEDef"), 1)),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                        new System.Text.Parsing.CharParser('>')))));
            AddRule(new EntityDefRule(ToUtf32("EntityDef"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("EntityValue"), ToUtf32("EntityValue"), 1),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("ExternalID"), ToUtf32("ExternalID"), 0),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("notation"), ToUtf32("NDataDecl"), 0)))))));
            AddRule(new PEDefRule(ToUtf32("PEDef"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("EntityValue"), ToUtf32("EntityValue"), 1),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("ExternalID"), ToUtf32("ExternalID"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("ExternalID"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.StringParser(ToUtf32("SYSTEM")),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("s1"), ToUtf32("SystemLiteral"), 0))),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("PUBLIC")),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("p2"), ToUtf32("PubidLiteral"), 0)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("s2"), ToUtf32("SystemLiteral"), 0))))));
            AddRule(new NDataDeclRule(ToUtf32("NDataDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                            new System.Text.Parsing.StringParser(ToUtf32("NDATA"))),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0)))));
            AddRule(new TextDeclRule(ToUtf32("TextDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.StringParser(ToUtf32("<?xml")),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("VersionInfo"), ToUtf32("VersionInfo"), 1))),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("EncodingDecl"), ToUtf32("EncodingDecl"), 1)),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.StringParser(ToUtf32("?>")))));
            AddRule(new ExtParsedEntRule(ToUtf32("ExtParsedEnt"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.NonterminalParser(ToUtf32("TextDecl"), ToUtf32("TextDecl"), 1)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Content"), ToUtf32("Content"), 1))));
            AddRule(new EncodingDeclRule(ToUtf32("EncodingDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0),
                            new System.Text.Parsing.StringParser(ToUtf32("encoding"))),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Eq"), ToUtf32("Eq"), 0)),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('\"'),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("en1"), ToUtf32("EncName"), 0))),
                                new System.Text.Parsing.CharParser('\"')),
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('\''),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("en2"), ToUtf32("EncName"), 0))),
                                new System.Text.Parsing.CharParser('\'')))))));
            AddRule(new EncNameRule(ToUtf32("EncName"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharSetParser(ToUtf32("A-Za-z")),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.CharSetParser(ToUtf32("A-Za-z0-9._-"))))))));
            AddRule(new NotationDeclRule(ToUtf32("NotationDecl"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.StringParser(ToUtf32("<!NOTATION")),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Name"), ToUtf32("Name"), 0)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("ExternalID"), ToUtf32("ExternalID"), 0),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("PublicID"), ToUtf32("PublicID"), 0)))),
                        new System.Text.Parsing.OptionalParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0))),
                    new System.Text.Parsing.CharParser('>'))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("PublicID"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.StringParser(ToUtf32("PUBLIC")),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("S"), ToUtf32("S"), 0)),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("PubidLiteral"), ToUtf32("PubidLiteral"), 0))));
        }
    }
} // System.Xml
