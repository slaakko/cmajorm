[hpp]#include <cmajor/xml/XmlGrammar.hpp>
[hpp]#include <cmajor/xpath/XPathExpr.hpp>

namespace cmajor.xpath
{
    grammar XPath
    {
        using cmajor.xml.Xml.NameStartChar;
        using cmajor.xml.Xml.NameChar;
        using stdlib.identifier;
        using stdlib.spaces;
        skip spaces;

        Expr : XPathExpr*
            ::= OrExpr{ value = OrExpr; }
            ;

        OrExpr : XPathExpr*
            ::= AndExpr:left{ value = left; } (keyword("or") AndExpr:right{ value = new XPathOrExpr(value, right); })*
            ;

        AndExpr : XPathExpr*
            ::= EqualityExpr:left{ value = left; } (keyword("and") EqualityExpr:right{ value = new XPathAndExpr(value, right); })*
            ;

        EqualityExpr(var Operator op) : XPathExpr*
            ::= RelationalExpr:left{ value = left; } (('='{ op = Operator::equal; } | "!="{ op = Operator::notEqual; }) RelationalExpr:right
                { 
                    switch (op)
                    {
                        case Operator::equal: value = new XPathEqualExpr(value, right); break;
                        case Operator::notEqual: value = new XPathNotEqualExpr(value, right); break;
                    }
                }
                )*
            ;

        RelationalExpr(var Operator op) : XPathExpr*
            ::= AdditiveExpr:left{ value = left; } (("<="{ op = Operator::lessOrEqual; } | ">="{ op = Operator::greaterOrEqual; } | '<'{ op = Operator::less; } | '>'{ op = Operator::greater; }) AdditiveExpr:right
                {
                    switch (op)
                    {
                        case Operator::less: value = new XPathLessExpr(value, right); break;
                        case Operator::greater: value = new XPathGreaterExpr(value, right); break;
                        case Operator::lessOrEqual: value = new XPathLessOrEqualExpr(value, right); break;
                        case Operator::greaterOrEqual: value = new XPathGreaterOrEqualExpr(value, right); break;
                    }
                }
                )*
            ;

        AdditiveExpr(var Operator op) : XPathExpr*
            ::= MultiplicativeExpr:left{ value = left; } (('+'{ op = Operator::plus; } | '-'{ op = Operator::minus; }) MultiplicativeExpr:right
                {
                    switch (op)
                    {
                        case Operator::plus: value = new XPathAddExpr(value, right); break;
                        case Operator::minus: value = new XPathSubExpr(value, right); break;
                    }
                }
                )*
            ;

        MultiplicativeExpr(var Operator op) : XPathExpr*
            ::= UnaryExpr:left{ value = left; } (('*'{ op = Operator::mul; } | "div"{ op = Operator::div; } | "mod"{ op = Operator::mod; }) UnaryExpr:right
                {
                    switch (op)
                    {
                        case Operator::mul: value = new XPathMulExpr(value, right); break;
                        case Operator::div: value = new XPathDivExpr(value, right); break;
                        case Operator::mod: value = new XPathModExpr(value, right); break;
                    }
                }
                )*
            ;

        UnaryExpr : XPathExpr*
            ::= '-' UnaryExpr:subject{ value = new XPathUnaryMinusExpr(subject); } | UnionExpr:unionExpr{ value = unionExpr; }
            ;

        UnionExpr : XPathExpr*
            ::= PathExpr:left{ value = left; } ('|' PathExpr:right{ value = new XPathUnionExpr(value, right); })*
            ;

        PathExpr(var Operator op, var std::unique_ptr<XPathExpr> fnc) : XPathExpr*
            ::= (LocationPath - FunctionCall{ fnc.reset(FunctionCall); }){ value = LocationPath; }
            |   FilterExpr{ value = FilterExpr; } (("//"{ op = Operator::slashSlash; } | '/'{ op = Operator::slash; }) RelativeLocationPath:right
                {
                    switch (op)
                    {
                        case Operator::slash: value = new XPathCombineStepExpr(value, right); break;
                        case Operator::slashSlash: value = new XPathCombineStepExpr(value, new XPathCombineStepExpr(new XPathLocationStepExpr(Axis::descendantOrSelf, new XPathAnyNodeTest()), right)); break;
                    }
                }
                )?
            ;

        FilterExpr : XPathExpr*
            ::= PrimaryExpr:primary{ value = primary; } (Predicate:predicate{ value = new XPathFilterExpr(value, predicate); })*
            ;

        LocationPath : XPathExpr*
            ::= AbsoluteLocationPath{ value = AbsoluteLocationPath; }
            |   RelativeLocationPath{ value = RelativeLocationPath; }
            ;

        AbsoluteLocationPath : XPathExpr*
            ::= AbbreviatedAbsoluteLocationPath{ value = AbbreviatedAbsoluteLocationPath; }
            |   '/'{ value = new XPathRootNodeExpr(); } (RelativeLocationPath:right{ value = new XPathCombineStepExpr(value, right); })?
            ;

        RelativeLocationPath(var Operator op) : XPathExpr*
            ::= Step:left{ value = left; } (("//"{ op = Operator::slashSlash; } | '/'{ op = Operator::slash; }) Step:right
                {
                    switch (op)
                    {
                        case Operator::slash: value = new XPathCombineStepExpr(value, right); break;
                        case Operator::slashSlash: value = new XPathCombineStepExpr(value, new XPathCombineStepExpr(new XPathLocationStepExpr(Axis::descendantOrSelf, new XPathAnyNodeTest()), right)); break;
                    }
                }
                )*
            ;

        AbbreviatedAbsoluteLocationPath : XPathExpr*
            ::= "//" RelativeLocationPath:right{ value = new XPathCombineStepExpr(new XPathRootNodeExpr(), new XPathCombineStepExpr(new XPathLocationStepExpr(Axis::descendantOrSelf, new XPathAnyNodeTest()), right)); }
            ;

        Step : XPathLocationStepExpr*
            ::= AxisSpecifier:axis NodeTest:nodeTest{ value = new XPathLocationStepExpr(axis, nodeTest); } (Predicate:predicate{ value->AddPredicate(predicate); })*
            |   AbbreviatedStep{ value = AbbreviatedStep; }
            ;

        AbbreviatedStep : XPathLocationStepExpr*
            ::= ".."{ value = new XPathLocationStepExpr(Axis::parent, new XPathAnyNodeTest()); } | '.'{ value = new XPathLocationStepExpr(Axis::self, new XPathAnyNodeTest()); }
            ;

        AxisSpecifier : Axis
            ::= (AxisName "::"){ value = AxisName; }
            |   AbbreviatedAxisSpecifier{ value = AbbreviatedAxisSpecifier; }
            ;

        AxisName : Axis
            ::= keyword_list(identifier, 
                ["ancestor", "ancestor-or-self", "attribute", "child", "descendant", "descendant-or-self",
                "following", "following-sibling", "namespace", "parent", "preceding", "preceding-sibling", "self"])
                {
                    value = GetAxis(std::u32string(matchBegin, matchEnd));
                }
            ;

        AbbreviatedAxisSpecifier : Axis
            ::= '@'{ value = Axis::attribute; } | empty{ value = Axis::child; }
            ;

        Predicate : XPathExpr*
            ::= '[' PredicateExpr{ value = PredicateExpr; } ']'
            ;

        PredicateExpr : XPathExpr*
            ::= Expr{ value = Expr; }
            ;

        NodeTest : XPathNodeTestExpr*
            ::= (keyword("processing-instruction") '(' Literal ')'){ value = new XPathPILiteralTest(Literal); }
            |   (NodeType '(' ')'){ value = NodeType; }
            |   NameTest{ value = NameTest; }
            ;

        NameTest : XPathNodeTestExpr*
            ::= '*'{ value = new XPathPrincipalNodeTest(); }
            |   (NCName ':' '*'){ value = new XPathPrefixTest(NCName); }
            |   QName{ value = new XPathNameTest(QName); }
            ;

        NodeType : XPathNodeTestExpr*
            ::= keyword("comment"){ value = new XPathCommentNodeTest(); }
            |   keyword("text"){ value = new XPathTextNodeTest(); }
            |   keyword("processing-instruction"){ value = new XPathPINodeTest(); }
            |   keyword("node"){ value = new XPathAnyNodeTest(); }
            ;

        PrimaryExpr : XPathExpr*
            ::= FunctionCall{ value = FunctionCall; }
            |   VariableReference{ value = VariableReference; }
            |   '(' Expr ')'{ value = Expr; }
            |   Literal{ value = Literal; }
            |   Number{ value = Number; }
            ;

        VariableReference : XPathExpr*
            ::= token('$' QName){ value = new XPathVariableReference(QName); }
            ;

        Literal : XPathExpr*
            ::= token('"' ([^"]*){ value = new XPathLiteral(std::u32string(matchBegin, matchEnd)); } '"')
            |   token('\'' ([^']*){ value = new XPathLiteral(std::u32string(matchBegin, matchEnd)); } '\'')
            ;

        Number : XPathExpr*
            ::= token(Digits ('.' Digits?)?){ value = new XPathNumberExpr(std::u32string(matchBegin, matchEnd)); }
            |   token('.' Digits){ value = new XPathNumberExpr(std::u32string(matchBegin, matchEnd)); }
            ;

        Digits
            ::= token([0-9]+)
            ;

        FunctionCall : XPathFunctionCall*
            ::= token(FunctionName{ value = new XPathFunctionCall(FunctionName); } '(') (Argument:first{ value->AddArgument(first); } (',' Argument:next{ value->AddArgument(next); })*)? ')'
            ;

        Argument : XPathExpr*
            ::= Expr{ value = Expr; }
            ;

        FunctionName(var std::unique_ptr<XPathExpr> nodeType) : std::u32string
            ::= (QName - NodeType{ nodeType.reset(NodeType); }){ value = QName; }
            ;

        QName : std::u32string
            ::= PrefixedName{ value = PrefixedName; }
            |   UnprefixedName{ value = UnprefixedName; }
            ;

        PrefixedName : std::u32string
            ::= token(Prefix ':' LocalPart){ value = std::u32string(matchBegin, matchEnd); }
            ;

        UnprefixedName : std::u32string
            ::= LocalPart{ value = LocalPart; }
            ;

        Prefix : std::u32string
            ::= NCName{ value = NCName; }
            ;

        LocalPart : std::u32string
            ::= NCName{ value = NCName; }
            ;

        NCName : std::u32string
            ::= token((NameStartChar - ':') (NameChar - ':')*){ value = std::u32string(matchBegin, matchEnd); }
            ;
    }
}
