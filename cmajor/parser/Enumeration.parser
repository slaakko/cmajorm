// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/Enumeration.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/Specifier.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>
[cpp]#include <cmajor/parser/TypeExpr.hpp>
[cpp]#include <cmajor/parser/Expression.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar Enumeration
    {
        using Specifier.Specifiers;
        using Identifier.Identifier;
        using TypeExpr.TypeExpr;
        using Expression.Expression;

        EnumType(ParsingContext* ctx, var Span beginBraceSpan, var Span endBraceSpan) : EnumTypeNode*
            ::= (Specifiers keyword("enum") Identifier:enumTypeId!){ value = new EnumTypeNode(span, Specifiers, enumTypeId); }
                (UnderlyingType(ctx){ value->SetUnderlyingType(UnderlyingType); })?
                '{'!{ beginBraceSpan = span; } EnumConstants(ctx, value) '}'!
                { 
                    endBraceSpan = span; 
                    value->GetSpan().SetEnd(span.End()); 
                    value->SetBeginBraceSpan(beginBraceSpan); 
                    value->SetEndBraceSpan(endBraceSpan);
                }
            ;

        UnderlyingType(ParsingContext* ctx) : Node*
            ::= ':' TypeExpr(ctx){ value = TypeExpr; }
            ;

        EnumConstants(ParsingContext* ctx, EnumTypeNode* enumType)
            ::= EnumConstant(ctx, enumType)!{ enumType->AddConstant(EnumConstant); } % ','
            ;

        EnumConstant(ParsingContext* ctx, EnumTypeNode* enumType, var Span s) : EnumConstantNode*
            ::= Identifier:constantId!{ s = span; } 
            (   '=' Expression(ctx):constantValue
                    { 
                        s.SetEnd(span.End()); 
                        value = new EnumConstantNode(s, constantId, constantValue); 
                        value->SetHasValue(); 
                        value->SetStrValue(std::u32string(matchBegin, matchEnd));
                    }
            |   empty{ s.SetEnd(span.End()); value = new EnumConstantNode(s, constantId, MakeNextEnumConstantValue(s, enumType)); }
            )
            ;
    }
}
