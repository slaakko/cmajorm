// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/TypeExpr.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/BasicType.hpp>
[cpp]#include <cmajor/parser/Expression.hpp>
[cpp]#include <cmajor/parser/Template.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar TypeExpr
    {
        using Template.TemplateId;
        using Identifier.Identifier;
        using BasicType.BasicType;
        using Expression.Expression;
        using stdlib.spaces;
        skip spaces;
        
        TypeExpr(ParsingContext* ctx) : Node*
            ::= PrefixTypeExpr(ctx){ value = PrefixTypeExpr; }
            ;

        PrefixTypeExpr(ParsingContext* ctx) : Node*
            ::= (keyword("const") PostfixTypeExpr(ctx):constTypeExpr){ value = new ConstNode(span, constTypeExpr); }
            |   PostfixTypeExpr(ctx):pf{ value = pf; }
            ;

        PostfixTypeExpr(ParsingContext* ctx, var std::unique_ptr<Node> typeExpr, var Span s) : Node*
            ::= 
            (   PrimaryTypeExpr(ctx){ typeExpr.reset(PrimaryTypeExpr); s = span; }
                (   '.' Identifier!{ s.SetEnd(span.End()); typeExpr.reset(new DotNode(s, typeExpr.release(), Identifier)); }
                |   '*'{ s.SetEnd(span.End()); typeExpr.reset(new PointerNode(s, typeExpr.release())); }
                |   "&&"{ s.SetEnd(span.End()); typeExpr.reset(new RValueRefNode(s, typeExpr.release())); }
                |   '&'{ s.SetEnd(span.End()); typeExpr.reset(new LValueRefNode(s, typeExpr.release())); }
                |   ('[' Expression(ctx):size? ']'!){ s.SetEnd(span.End()); typeExpr.reset(new ArrayNode(s, typeExpr.release(), size)); }
                )*
            )
            {
                value = typeExpr.release();
            }
            ;

        PrimaryTypeExpr(ParsingContext* ctx) : Node*
            ::= BasicType{ value = BasicType; }
            |   TemplateId(ctx){ value = TemplateId; }
            |   Identifier{ value = Identifier; }
            ;
    }
}
