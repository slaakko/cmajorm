// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/GlobalVariable.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/Specifier.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>
[cpp]#include <cmajor/parser/TypeExpr.hpp>
[cpp]#include <cmajor/parser/Expression.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar GlobalVariable
    {
        using Specifier.Specifiers;
        using TypeExpr.TypeExpr;
        using Identifier.Identifier;
        using Expression.Expression;

        GlobalVariable(ParsingContext* ctx, CompileUnitNode* cu) : GlobalVariableNode*
            ::= (Specifiers TypeExpr(ctx) Identifier ('=' Expression(ctx):initializer)? ';')
                { 
                    value = new GlobalVariableNode(span, Specifiers, TypeExpr, Identifier, cu); 
                    if (initializer)
                    {
                        std::unique_ptr<Node> init(initializer);
                        value->SetInitializer(std::move(init));
                    }
                }
            ;
    }
}
