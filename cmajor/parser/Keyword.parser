// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

namespace cmajor.parser
{
    grammar Keyword
    {
        using stdlib.identifier;
        
        Keyword 
            ::= keyword_list(identifier, 
                ["bool", "true", "false", 
                "sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong", 
                "float", "double", "char", "wchar", "uchar", "void", "enum", "cast", "interface",
                "namespace", "using", "static", "extern", "as", "is", "explicit", "delegate", "inline", "cdecl", "nothrow",
                "public", "protected", "private", "internal", "virtual", "abstract", "override", "suppress",
                "operator", "class", "return", "if", "else",
                "switch", "case", "default", "while", "do", "for", 
                "break", "continue", "goto", "typedef", "typename", "const", "constexpr", "null", "this", "base",
                "construct", "destroy", "new", "delete", "sizeof", "try", "catch", "throw",
                "concept", "where", "axiom", "and", "or", "not", "unit_test"])
            ;

        PPKeyword
            ::= S? '#' S? keyword_list(identifier, ["assert", "if", "elif", "else", "endif"])
            ;

        S
            ::= [ \t]+
            ;
    }
}
