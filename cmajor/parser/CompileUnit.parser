// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/CompileUnit.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/Typedef.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>
[cpp]#include <cmajor/parser/Concept.hpp>
[cpp]#include <cmajor/parser/Function.hpp>
[cpp]#include <cmajor/parser/Class.hpp>
[cpp]#include <cmajor/parser/Interface.hpp>
[cpp]#include <cmajor/parser/Enumeration.hpp>
[cpp]#include <cmajor/parser/Constant.hpp>
[cpp]#include <cmajor/parser/Delegate.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar CompileUnit
    {
        using Identifier.Identifier;
        using Identifier.QualifiedId;
        using Concept.Concept;
        using Function.Function;
        using Class.Class;
        using Interface.Interface;
        using Typedef.Typedef;
        using Enumeration.EnumType;
        using Constant.Constant;
        using Delegate.Delegate;
        using Delegate.ClassDelegate;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;
        
        CompileUnit(ParsingContext* ctx) : CompileUnitNode*
            ::= empty{ value = new CompileUnitNode(span, fileName); }
                NamespaceContent(ctx, value->GlobalNs())
            ;

        NamespaceContent(ParsingContext* ctx, NamespaceNode* ns)
            ::= UsingDirectives(ctx, ns)
                Definitions(ctx, ns)
            ;

        UsingDirectives(ParsingContext* ctx, NamespaceNode* ns)
            ::= UsingDirective(ctx, ns)*
            ;

        UsingDirective(ParsingContext* ctx, NamespaceNode* ns)
            ::= UsingAliasDirective{ ns->AddMember(UsingAliasDirective); }
            |   UsingNamespaceDirective{ ns->AddMember(UsingNamespaceDirective); }
            ;

        UsingAliasDirective(var std::unique_ptr<IdentifierNode> id) : Node*
            ::= (keyword("using") Identifier{ id.reset(Identifier); } '=' QualifiedId! ';'!){ value = new AliasNode(span, id.release(), QualifiedId); }
            ;

        UsingNamespaceDirective : Node*
            ::= (keyword("using") QualifiedId! ';'!){ value = new NamespaceImportNode(span, QualifiedId); }
            ;

        Definitions(ParsingContext* ctx, NamespaceNode* ns)
            ::= (Definition(ctx, ns){ ns->AddMember(Definition); })*
            ;

        Definition(ParsingContext* ctx, NamespaceNode* ns) : Node*
            ::= NamespaceDefinition(ctx, ns){ value = NamespaceDefinition; }
            |   TypedefDeclaration(ctx){ value = TypedefDeclaration; }
            |   ConceptDefinition(ctx){ value = ConceptDefinition; }
            |   FunctionDefinition(ctx){ value = FunctionDefinition; }
            |   ClassDefinition(ctx){ value = ClassDefinition; }
            |   InterfaceDefinition(ctx){ value = InterfaceDefinition; }
            |   EnumTypeDefinition(ctx){ value = EnumTypeDefinition; }
            |   ConstantDefinition(ctx){ value = ConstantDefinition; }
            |   DelegateDefinition(ctx){ value = DelegateDefinition; }
            |   ClassDelegateDefinition(ctx){ value = ClassDelegateDefinition; }
            ;

        NamespaceDefinition(ParsingContext* ctx, NamespaceNode* ns) : NamespaceNode*
            ::= (keyword("namespace") QualifiedId!){ value = new NamespaceNode(span, QualifiedId); } '{'! NamespaceContent(ctx, value)! '}'!
            ;

        TypedefDeclaration(ParsingContext* ctx) : TypedefNode*
            ::= Typedef(ctx){ value = Typedef; }
            ;

        ConceptDefinition(ParsingContext* ctx) : ConceptNode*
            ::= Concept(ctx){ value = Concept; }
            ;

        FunctionDefinition(ParsingContext* ctx) : FunctionNode*
            ::= Function(ctx){ value = Function; }
            ;

        ClassDefinition(ParsingContext* ctx) : ClassNode*
            ::= Class(ctx){ value = Class; }
            ;

        InterfaceDefinition(ParsingContext* ctx) : InterfaceNode*
            ::= Interface(ctx){ value = Interface; }
            ;

        EnumTypeDefinition(ParsingContext* ctx) : EnumTypeNode*
            ::= EnumType(ctx){ value = EnumType; }
            ;

        ConstantDefinition(ParsingContext* ctx) : ConstantNode*
            ::= Constant(ctx){ value = Constant; }
            ;

        DelegateDefinition(ParsingContext* ctx) : DelegateNode*
            ::= Delegate(ctx){ value = Delegate; }
            ;

        ClassDelegateDefinition(ParsingContext* ctx) : ClassDelegateNode*
            ::= ClassDelegate(ctx){ value = ClassDelegate; }
            ;
    }
}
