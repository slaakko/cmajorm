// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/Constant.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/Specifier.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>
[cpp]#include <cmajor/parser/TypeExpr.hpp>
[cpp]#include <cmajor/parser/Expression.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar Constant
    {
        using Specifier.Specifiers;
        using TypeExpr.TypeExpr;
        using Identifier.Identifier;
        using Expression.Expression;

        Constant(ParsingContext* ctx, var std::u32string strValue) : ConstantNode*
            ::= (Specifiers keyword("const") TypeExpr(ctx)! Identifier! '=' Expression(ctx){ strValue = std::u32string(matchBegin, matchEnd); } ';')
                { 
                    value = new ConstantNode(span, Specifiers, TypeExpr, Identifier, Expression); 
                    value->SetStrValue(strValue);
                }
            ;
    }
}
