// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

namespace cmajor.parser
{
    grammar CommandLine
    {
        CommandLine : std::vector<std::string>
            ::= Spaces? Argument:first{ value.push_back(first); } (Spaces Argument:next{ value.push_back(next); })* Spaces?
            ;

        Spaces
            ::= [\t ]+
            ;

        Argument : std::string
            ::= (ArgElement{ value.append(ArgElement); })+
            ;

        ArgElement : std::string
            ::= OddBackslashesAndLiteralQuotationMark{ value = OddBackslashesAndLiteralQuotationMark; }
            |   EvenBackslashesAndQuotationMark:s{ value.append(s); } (StringChar{ value.append(StringChar); })* EvenBackslashesAndQuotationMark:e{ value.append(e); }
            |   [^\t ]{ value.append(ToUtf8(std::u32string(matchBegin, matchEnd))); }
            ;

        OddBackslashesAndLiteralQuotationMark : std::string
            ::= ("\\"+ '"'){ std::u32string bs = std::u32string(matchBegin, matchEnd); int n = bs.length() - 1; pass = n % 2 == 1; if (pass) { value = std::string(n / 2, '\\'); value.append(1, '"'); } }
            ;

        EvenBackslashesAndQuotationMark : std::string
            ::= ("\\"* '"'){ std::u32string bs = std::u32string(matchBegin, matchEnd); int n = bs.length() - 1; pass = n % 2 == 0; if (pass) value = std::string(n / 2, '\\'); }
            ;

        StringChar : std::string
            ::= OddBackslashesAndLiteralQuotationMark{ value = OddBackslashesAndLiteralQuotationMark; }
            |   (anychar - EvenBackslashesAndQuotationMark){ value = ToUtf8(std::u32string(matchBegin, matchEnd)); }
            ;
    }
}
