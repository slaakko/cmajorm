using System;

public class Empty
{
	public void Write()
	{
		Console.WriteLine("empty");
	}
}

public class Data
{
	public void Write()
	{
		Console.WriteLine("data");
		Console.WriteLine(x);
		Console.WriteLine(y);
	}
	public int x;
	public int y;
}

public class Base
{
	public default virtual ~Base();
	public virtual void Write()
	{
		Console.WriteLine("base");
		Console.WriteLine(x);
		Console.WriteLine(y);
	}
	public int x;
	public int y;
}

public class DerivedClass : Base
{
	public override void Write()
	{
		Console.WriteLine("derived");
		Console.WriteLine(x);
		Console.WriteLine(y);
	}
	public int z;
}

void main()
{
	Empty* empty = new Empty();
	Console.Out() << "sizeof empty is " << sizeof(Empty) << endl();
	empty->Write();
	Data* data = new Data();
	Console.Out() << "sizeof data is " << sizeof(Data) << endl();
	data->x = 1;
	data->y = 2;
	data->Write();
	Base* bse = new Base();
	Console.Out() << "sizeof base is " << sizeof(Base) << endl();
	bse->x = 10;
	bse->y = 20;
	bse->Write();
	DerivedClass* derived = new DerivedClass();
	Console.Out() << "sizeof derived is " << sizeof(DerivedClass) << endl();
	derived->x = 100;
	derived->y = 200;
	derived->z = 300;
	derived->Write();
}
