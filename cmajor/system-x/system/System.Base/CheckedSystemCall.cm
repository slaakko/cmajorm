// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Collections;
using System.IO;

namespace System.Os
{
    public nothrow void Exit(byte exitCode)
    {
        exit(exitCode);
    }
    
    public int Fork()
    {
        int result = fork();
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public int Wait(byte* exitCode)
    {
        int result = wait(exitCode);
        if (result == -1)
        {
            SystemError systemError = GetSystemError();
            if (systemError.errorCode == ENOCHILD)
            {
                return -1;
            }
            else
            {
                throw systemError;
            }
        }
        return result;
    }
    
    public int GetPid()
    {
        int result = getpid();
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }

    public int Create(const char* path, int mode)
    {
        int result = create(path, mode);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public int Open(const char* path, OpenFlags flags, int mode)
    {
        int result = open(path, flags, mode);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public void Close(int fd)
    {
        int result = close(fd);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public long Read(int fd, void* buffer, long count)
    {
        long result = read(fd, buffer, count);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public long Write(int fd, void* buffer, long count)
    {
        long result = write(fd, buffer, count);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public int IOCtl(int fd, IOControlItem item)
    {
        int result = ioctl(fd, item);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public long Seek(int fd, long pos, Origin origin)
    {
        long result = seek(fd, pos, origin);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public long Tell(int fd)
    {
        long result = tell(fd);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public void Unlink(const char* path)
    {
        int result = unlink(path);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public void GetCWD(char* pathBuf, long bufSize)
    {
        int result = getcwd(pathBuf, bufSize);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public void ChDir(const char* path)
    {
        int result = chdir(path);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public void MkDir(const char* path, int mode)
    {
        int result = mkdir(path, mode);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public void UTime(const char* path, byte* timeBuf, long timeBufSize)
    {
        int result = utime(path, timeBuf, timeBufSize);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }

    public int OpenDir(const char* dirPath)
    {
        int result = opendir(dirPath);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public void CloseDir(int dfd)
    {
        int result = closedir(dfd);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public int ReadDir(int dfd, byte* dirEntryBuf, long dirEntryBufSize)
    {
        int result = readdir(dfd, dirEntryBuf, dirEntryBufSize);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
}
