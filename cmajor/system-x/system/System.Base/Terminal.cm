// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.IO;
using System.Os;

namespace System
{
    public static class Terminal
    {
        static nothrow Terminal() :
            tty(Open("/dev/tty", cast<OpenFlags>(OpenFlags.read | OpenFlags.write), 0)),
            in(SharedPtr<Stream>(new FileStream(tty))),
            out(SharedPtr<Stream>(new FileStream(tty))),
            err(SharedPtr<Stream>(new FileStream(tty)))
        {
        }
        public static void Write(const char* s)
        {
            out.Write(s);
        }
        public static void Write(const wchar* s)
        {
            out.Write(s);
        }
        public static void Write(const uchar* s)
        {
            out.Write(s);
        }
        public static void Write(const string& s)
        {
            out.Write(s);
        }
        public static void Write(const wstring& s)
        {
            out.Write(s);
        }
        public static void Write(const ustring& s)
        {
            out.Write(s);
        }
        public static void Write(bool b)
        {
            out.Write(b);
        }
        public static void Write(char c)
        {
            out.Write(c);
        }
        public static void Write(wchar w)
        {
            out.Write(w);
        }
        public static void Write(uchar u)
        {
            out.Write(u);
        }
        public static void Write(sbyte s)
        {
            out.Write(s);
        }
        public static void Write(byte b)
        {
            out.Write(b);
        }
        public static void Write(short s)
        {
            out.Write(s);
        }
        public static void Write(ushort u)
        {
            out.Write(u);
        }
        public static void Write(int i)
        {
            out.Write(i);
        }
        public static void Write(uint u)
        {
            out.Write(u);
        }
        public static void Write(long l)
        {
            out.Write(l);
        }
        public static void Write(ulong u)
        {
            out.Write(u);
        }
        public static void Write(float f)
        {
            out.Write(f);
        }
        public static void Write(double d)
        {
            out.Write(d);
        }
        public static void Write(const Date& date)
        {
            out.Write(date);
        }
        public static void Write(const DateTime& dateTime)
        {
            out.Write(dateTime);
        }
        public static void WriteLine()
        {
            out.WriteLine();
        }
        public static void WriteLine(const char* s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(const wchar* s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(const uchar* s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(const string& s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(const wstring& s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(const ustring& s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(bool b)
        {
            out.WriteLine(b);
        }
        public static void WriteLine(char x)
        {
            out.WriteLine(x);
        }
        public static void WriteLine(wchar x)
        {
            out.WriteLine(x);
        }
        public static void WriteLine(uchar x)
        {
            out.WriteLine(x);
        }
        public static void WriteLine(sbyte s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(byte b)
        {
            out.WriteLine(b);
        }
        public static void WriteLine(short s)
        {
            out.WriteLine(s);
        }
        public static void WriteLine(ushort u)
        {
            out.WriteLine(u);
        }
        public static void WriteLine(int i)
        {
            out.WriteLine(i);
        }
        public static void WriteLine(uint u)
        {
            out.WriteLine(u);
        }
        public static void WriteLine(long l)
        {
            out.WriteLine(l);
        }
        public static void WriteLine(ulong u)
        {
            out.WriteLine(u);
        }
        public static void WriteLine(float f)
        {
            out.WriteLine(f);
        }
        public static void WriteLine(double d)
        {
            out.WriteLine(d);
        }
        public static void WriteLine(const Date& date)
        {
            out.WriteLine(date);
        }
        public static void WriteLine(const DateTime& dateTime)
        {
            out.WriteLine(dateTime);
        }
        public static int Read()
        {
            return in.Read();
        }
        public static string ReadLine()
        {
            return in.ReadLine();
        }
        public static string ReadToEnd()
        {
            return in.ReadToEnd();
        }
        public static nothrow StreamReader& In() 
        {
            return in;
        }
        public static nothrow StreamWriter& Out()
        {
            return out;
        }
        public static nothrow StreamWriter& Error()
        {
            return err;
        }
		public static nothrow int Descriptor() 
		{
			return tty;
		}
        private static int tty;
        private static StreamReader in;
        private static StreamWriter out;
        private static StreamWriter err;
    }
	
	public nothrow bool IsConsole(int fd)
	{
		return IOCtl(fd, IOControlItem.isConsole, null, 0) == 1;
	}
	
    public void SetEcho(int fd, bool value)
    {
        byte arg = cast<byte>(value);
        IOCtl(fd, IOControlItem.set_echo, &arg, 1);
    }
	
	public void SetRaw(int fd)
	{
		IOCtl(fd, IOControlItem.set_raw, null, 0);
	}

	public void SetCooked(int fd)
	{
		IOCtl(fd, IOControlItem.set_cooked, null, 0);
	}
	
	public nothrow int TermimalWindowWidth()
	{
		return IOCtl(Terminal.Descriptor(), IOControlItem.columns, null, 0);
	}

	public nothrow int TermimalWindowHeight()
	{
		return IOCtl(Terminal.Descriptor(), IOControlItem.rows, null, 0);
	}
	
	public nothrow int CursorX() 
	{
		return IOCtl(Terminal.Descriptor(), IOControlItem.cursor_x, null, 0);
	}

	public nothrow int CursorY() 
	{
		return IOCtl(Terminal.Descriptor(), IOControlItem.cursor_y, null, 0);
	}

	public nothrow void SetCursorPos(int x, int y)
	{
		byte[8] args;
		MemoryWriter writer(&args[0], 8);
		writer.Write(x);
		writer.Write(y);
		IOCtl(Terminal.Descriptor(), IOControlItem.set_cursor_pos, &args[0], 8);
	}

	public void ClearScreen(int screenWidth, int screenHeight)
	{
		int cursorX = CursorX();
		int cursorY = CursorY();
		ustring line(' ', screenWidth);
		for (int i = 0; i < screenHeight; ++i)
		{
			SetCursorPos(0, i);
			Terminal.Out() << line;
		}
		SetCursorPos(cursorX, cursorY);
	}
	
	public void PushLines()
	{
		IOCtl(Terminal.Descriptor(), IOControlItem.push_lines, null, 0);
	}
	
	public void PopLines()
	{
		IOCtl(Terminal.Descriptor(), IOControlItem.pop_lines, null, 0);
	}
}
