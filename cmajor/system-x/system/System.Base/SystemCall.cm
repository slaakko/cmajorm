// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

public const byte trap_exit = 0u;
public const byte trap_memory_page_size = 1u;
public const byte trap_heap_start = 2u;
public const byte trap_heap_length = 3u;
public const byte trap_allocate_memory_pages = 4u;
public const byte trap_dump_heap = 5u;
public const byte trap_random_seed = 6u;
public const byte trap_current_time_point = 7u;
public const byte trap_sleep = 8u;
public const byte trap_current_date = 9u;
public const byte trap_current_date_time = 10u;
public const byte trap_times = 11u;
public const byte trap_pow = 12u;
public const byte trap_throw = 13u;
public const byte trap_catch = 14u;
public const byte trap_resume = 15u;
public const byte trap_stack_trace = 16u;
public const byte trap_get_system_error = 17u;
public const byte trap_fork = 18u;
public const byte trap_exec = 19u;
public const byte trap_wait = 20u;
public const byte trap_getpid = 21u;
public const byte trap_create = 22u;
public const byte trap_open = 23u;
public const byte trap_close = 24u;
public const byte trap_read = 25u;
public const byte trap_write = 26u;
public const byte trap_ioctl = 27u;
public const byte trap_unlink = 28u;
public const byte trap_seek = 29u;
public const byte trap_tell = 30u;
public const byte trap_stat = 31u;
public const byte trap_getcwd = 32u;
public const byte trap_chdir = 33u;
public const byte trap_mkdir = 34u;
public const byte trap_opendir = 35u;
public const byte trap_closedir = 36u;
public const byte trap_readdir = 37u;
public const byte trap_utime = 38u;
public const byte trap_mcpy = 39u;
public const byte trap_open_resource = 40u;
public const byte trap_close_resource = 41u;
public const byte trap_get_resource_size = 42u;
public const byte trap_read_resource = 43u;
public const byte trap_decompress = 44u;
public const byte trap_get_decompressed_data_size = 45u;
public const byte trap_get_decompressed_data = 46u;
public const byte trap_close_decompression = 47u;
public const byte trap_get_host_name = 48u;
public const byte trap_get_user_name = 49u;
public const byte trap_pipe = 50u;
public const byte trap_dup = 51u;
public const byte trap_setuid = 52u;
public const byte trap_setgid = 53u;
public const byte trap_getuid = 54u;
public const byte trap_getgid = 55u;
public const byte trap_seteuid = 56u;
public const byte trap_setegid = 57u;
public const byte trap_geteuid = 58u;
public const byte trap_getegid = 59u;
public const byte trap_umask = 60u;
public const byte trap_chmod = 61u;
public const byte trap_chown = 62u;
public const byte trap_rename = 63u;
public const byte trap_add_dir_change_notification = 64u;
public const byte trap_remove_dir_change_notifications = 65u;
public const byte trap_directories_changed = 66u;
public const byte trap_clear_directories_changed = 67u;
public const byte trap_child_times = 68u;
public const byte trap_sendkey = 69u;
public const byte trap_msgq = 70u;
public const byte trap_close_msgq = 71u;
public const byte trap_put_msg = 72u;
public const byte trap_get_msgq_length = 73u;
public const byte trap_get_msg_size = 74u;
public const byte trap_get_msg = 75u;

public cdecl nothrow void exit(byte exitCode)
{
    run_at_exits();
    trap(0u, trap_exit, 0u, exitCode);
}

public cdecl nothrow long memory_page_size()
{
    return cast<long>(trap(0u, trap_memory_page_size, 0u));
}

public cdecl nothrow long heap_start()
{
    return cast<long>(trap(0u, trap_heap_start, 0u));
}

public cdecl nothrow long heap_length()
{
    return cast<long>(trap(0u, trap_heap_length, 0u));
}

public cdecl nothrow long allocate_memory_pages(int numPages)
{
    return cast<long>(trap(0u, trap_allocate_memory_pages, 0u, numPages));
}

public cdecl nothrow void dump_heap(ulong free, int tag, ulong ptr, ulong size)
{
    trap(0u, trap_dump_heap, 0u, free, tag, ptr, size);
}

public cdecl nothrow uint random_seed()
{
    return cast<uint>(trap(0u, trap_random_seed, 0u));
}

public cdecl nothrow long current_time_point()
{
    return cast<long>(trap(0u, trap_current_time_point, 0u));
}

public cdecl nothrow int sleep(long duration)
{
    return cast<int>(trap(0u, trap_sleep, 0u, duration));
}

public cdecl nothrow int current_date(short* y, sbyte* m, sbyte* d)
{
    return cast<int>(trap(0u, trap_current_date, 0u, y, m, d));
}

public cdecl nothrow int current_date_time(short* y, sbyte* m, sbyte* d, int* secs)
{
    return cast<int>(trap(0u, trap_current_date_time, 0u, y, m, d, secs));
}

public cdecl nothrow int times(long* userTime, long* sleepTime, long* systemTime)
{
    return cast<int>(trap(0u, trap_times, 0u, userTime, sleepTime, systemTime));
}

public cdecl nothrow double pow(double x, double y)
{
    long lx = *cast<long*>(cast<void*>(&x));
    long ly = *cast<long*>(cast<void*>(&y));
    long result = trap(0u, trap_pow, 0u, lx, ly);
    return *cast<double*>(cast<void*>(&result));
}

public cdecl nothrow int do_throw(void* exception, ulong exceptionClassId)
{
    return cast<int>(trap(0u, trap_throw, 0u, exception, exceptionClassId));
}

public cdecl nothrow void* do_catch()
{
    return cast<void*>(cast<ulong>(trap(0u, trap_catch, 0u)));
}

public cdecl nothrow int resume()
{
    return cast<int>(trap(0u, trap_resume, 0u));
}

public cdecl nothrow int stack_trace(void* buffer, long bufferSize)
{
    return cast<int>(trap(0u, trap_stack_trace, 0u, buffer, bufferSize));
}

public cdecl nothrow int get_system_error(int* errorCode, void* buffer, long bufferSize)
{
    return cast<int>(trap(0u, trap_get_system_error, 0u, errorCode, buffer, bufferSize));
}

public cdecl nothrow int fork()
{
    return cast<int>(trap(0u, trap_fork, 0u));
}

public cdecl nothrow int exec(const char* file, const char** argv, const char** envp)
{
    return cast<int>(trap(0u, trap_exec, 0u, file, argv, envp));
}

public cdecl nothrow int wait(byte* exitCode)
{
    return cast<int>(trap(0u, trap_wait, 0u, exitCode));
}

public cdecl nothrow int getpid()
{
    return cast<int>(trap(0u, trap_getpid, 0u));
}

public cdecl nothrow int create(const char* path, int mode)
{
    return cast<int>(trap(0u, trap_create, 0u, path, mode));
}

public enum OpenFlags : int
{
    none = 0,
    read = 1 << 0,
    write = 1 << 1,
    create = 1 << 2,
    append = 1 << 3,
    truncate = 1 << 4,
    text = 1 << 5,
    random_access = 1 << 6
}

public cdecl nothrow int open(const char* path, OpenFlags flags, int mode)
{
    return cast<int>(trap(0u, trap_open, 0u, path, cast<int>(flags), mode));
}

public cdecl nothrow int close(int fd)
{
    return cast<int>(trap(0u, trap_close, 0u, fd));
}

public cdecl nothrow long read(int fd, void* buffer, long count)
{
    return cast<long>(trap(0u, trap_read, 0u, fd, buffer, count));
}

public cdecl nothrow long write(int fd, void* buffer, long count)
{
    return cast<long>(trap(0u, trap_write, 0u, fd, buffer, count));
}

public enum IOControlItem : int
{
    isConsole = 0,
    isHostTextFile = 1,
    hasColors = 2,
    columns = 3,
    rows = 4,
    cursor_x = 5,
    cursor_y = 6,
    set_cursor_pos = 7,
    set_cooked = 8,
    set_raw = 9,
    set_echo = 10,
    push_lines = 11,
    pop_lines = 12
}

public cdecl nothrow int ioctl(int fd, IOControlItem item, byte* arg, long argSize)
{
    return cast<int>(trap(0u, trap_ioctl, 0u, fd, item, arg, argSize));
}

public cdecl nothrow int unlink(const char* path)
{
    return cast<int>(trap(0u, trap_unlink, 0u, path));
}

public enum Origin : int
{
    seekSet = 0, seekCur = 1, seekEnd = 2
}
    
public cdecl nothrow long seek(int fd, long offset, Origin whence)
{
    return cast<long>(trap(0u, trap_seek, 0u, fd, offset, cast<int>(whence)));
}

public cdecl nothrow long tell(int fd)
{
    return cast<long>(trap(0u, trap_tell, 0u, fd));
}

public cdecl nothrow int stat(const char* path, byte* statBuf, int statBufSize)
{
    return cast<int>(trap(0u, trap_stat, 0u, path, statBuf, statBufSize));
}

public cdecl nothrow int getcwd(char* pathBuf, long bufSize)
{
    return cast<int>(trap(0u, trap_getcwd, 0u, pathBuf, bufSize));
}

public cdecl nothrow int chdir(const char* path)
{
    return cast<int>(trap(0u, trap_chdir, 0u, path));
}

public cdecl nothrow int mkdir(const char* path, int mode)
{
    return cast<int>(trap(0u, trap_mkdir, 0u, path, mode));
}

public cdecl nothrow int utime(const char* path, byte* timeBuf, long timeBufSize)
{
    return cast<int>(trap(0u, trap_utime, 0u, path, timeBuf, timeBufSize));
}

public cdecl nothrow int mcpy(byte* sourceBuffer, byte* destBuffer, long count)
{
    return cast<int>(trap(0u, trap_mcpy, 0u, sourceBuffer, destBuffer, count));
}

public cdecl nothrow int opendir(const char* path)
{
    return cast<int>(trap(0u, trap_opendir, 0u, path));
}

public cdecl nothrow int closedir(int dd)
{
    return cast<int>(trap(0u, trap_closedir, 0u, dd));
}

public cdecl nothrow int readdir(int dd, byte* dirEntryBuf, long dirEntryBufSize)
{
    return cast<int>(trap(0u, trap_readdir, 0u, dd, dirEntryBuf, dirEntryBufSize));
}

public cdecl nothrow int open_resource(const char* resource_name)
{
    return cast<int>(trap(0u, trap_open_resource, 0u, resource_name));
}

public cdecl nothrow int close_resource(int rd)
{
    return cast<int>(trap(0u, trap_close_resource, 0u, rd));
}

public cdecl nothrow long get_resource_size(int rd)
{
    return cast<long>(trap(0u, trap_get_resource_size, 0u, rd));
}

public cdecl nothrow int read_resource(int rd, long offset, long length, byte* buffer)
{
    return cast<int>(trap(0u, trap_read_resource, 0u, rd, offset, length, buffer));
}

public cdecl nothrow int decompress(byte* buffer, long count)
{
    return cast<int>(trap(0u, trap_decompress, 0u, buffer, count));
}

public cdecl nothrow long get_decompressed_data_size(int dd)
{
    return cast<long>(trap(0u, trap_get_decompressed_data_size, 0u, dd));
}

public cdecl nothrow int get_decompressed_data(int dd, byte* buffer, long count)
{
    return cast<int>(trap(0u, trap_get_decompressed_data, 0u, dd, buffer, count));
}

public cdecl nothrow int close_decompression(int dd)
{
    return cast<int>(trap(0u, trap_close_decompression, 0u, dd));
}

public cdecl nothrow int get_host_name(char* buffer, long bufSize)
{
    return cast<int>(trap(0u, trap_get_host_name, 0u, buffer, bufSize));
}

public cdecl nothrow int get_user_name(char* buffer, long bufSize)
{
    return cast<int>(trap(0u, trap_get_user_name, 0u, buffer, bufSize));
}

public cdecl nothrow int pipe(int* readerFd, int* writerFd)
{
    return cast<int>(trap(0u, trap_pipe, 0u, readerFd, writerFd));
}

public cdecl nothrow int dup(int fd)
{
    return cast<int>(trap(0u, trap_dup, 0u, fd));
}

public cdecl nothrow int setuid(int uid)
{
    return cast<int>(trap(0u, trap_setuid, 0u, uid));
}

public cdecl nothrow int setgid(int gid)
{
    return cast<int>(trap(0u, trap_setgid, 0u, gid));
}

public cdecl nothrow int getuid()
{
    return cast<int>(trap(0u, trap_getuid, 0u));
}

public cdecl nothrow int getgid()
{
    return cast<int>(trap(0u, trap_getgid, 0u));
}

public cdecl nothrow int seteuid(int euid)
{
    return cast<int>(trap(0u, trap_seteuid, 0u, euid));
}

public cdecl nothrow int setegid(int egid)
{
    return cast<int>(trap(0u, trap_setegid, 0u, egid));
}

public cdecl nothrow int geteuid()
{
    return cast<int>(trap(0u, trap_geteuid, 0u));
}

public cdecl nothrow int getegid()
{
    return cast<int>(trap(0u, trap_getegid, 0u));
}

public cdecl nothrow int umask(int mask)
{
    return cast<int>(trap(0u, trap_umask, 0u, mask));
}

public cdecl nothrow int chmod(const char* path, int mode)
{
    return cast<int>(trap(0u, trap_chmod, 0u, path, mode));
}

public cdecl nothrow int chown(const char* path, int uid, int gid)
{
    return cast<int>(trap(0u, trap_chown, 0u, path, uid, gid));
}

public cdecl nothrow int rename(const char* sourcePath, const char* targetPath)
{
    return cast<int>(trap(0u, trap_rename, 0u, sourcePath, targetPath));
}

public cdecl nothrow int add_dir_change_notification(const char* directories)
{
    return cast<int>(trap(0u, trap_add_dir_change_notification, 0u, directories));
}

public cdecl nothrow int remove_dir_change_notifications()
{
    return cast<int>(trap(0u, trap_remove_dir_change_notifications, 0u));
}

public cdecl nothrow int directories_changed()
{
    return cast<int>(trap(0u, trap_directories_changed, 0u));
}

public cdecl nothrow int clear_directories_changed()
{
    return cast<int>(trap(0u, trap_clear_directories_changed, 0u));
}

public cdecl nothrow int child_times(long* childUserTime, long* childSleepTime, long* childSystemTime)
{
    return cast<int>(trap(0u, trap_child_times, 0u, childUserTime, childSleepTime, childSystemTime));
}

public cdecl nothrow int sendkey(uchar key)
{
	return cast<int>(trap(0u, trap_sendkey, 0u, key));
}

public cdecl nothrow int msgq(const char* name)
{
	return cast<int>(trap(0u, trap_msgq, 0u, name));
}

public cdecl nothrow int close_msgq(int md)
{
	return cast<int>(trap(0u, trap_close_msgq, 0u, md));
}

public cdecl nothrow int put_msg(int md, byte* msgData, int msgSize)
{
	return cast<int>(trap(0u, trap_put_msg, 0u, md, msgData, msgSize));
}

public cdecl nothrow int get_msgq_length(int md)
{
	return cast<int>(trap(0u, trap_get_msgq_length, 0u, md));
}

public cdecl nothrow int get_msg_size(int md)
{
	return cast<int>(trap(0u, trap_get_msg_size, 0u, md));
}

public cdecl nothrow int get_msg(int md, byte* buffer)
{
	return cast<int>(trap(0u, trap_get_msg, 0u, md, buffer));
}
