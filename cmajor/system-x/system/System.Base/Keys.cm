// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Os;
using System.Unicode;

namespace System
{
	public const uchar keyBackspace = '\b';
	public const uchar keyTab = '\t';
	public const uchar keyNewline = '\n';
	public const uchar keyControlA = cast<uchar>(0x001);
	public const uchar keyControlB = cast<uchar>(0x002);
	public const uchar keyControlC = cast<uchar>(0x003);
	public const uchar keyControlD = cast<uchar>(0x004);
	public const uchar keyControlE = cast<uchar>(0x005);
	public const uchar keyControlF = cast<uchar>(0x006);
	public const uchar keyControlG = cast<uchar>(0x007);
	public const uchar keyControlH = cast<uchar>(0x008);
	public const uchar keyControlI = cast<uchar>(0x009);
	public const uchar keyControlJ = cast<uchar>(0x00A);
	public const uchar keyControlK = cast<uchar>(0x00B);
	public const uchar keyControlL = cast<uchar>(0x00C);
	public const uchar keyControlM = cast<uchar>(0x00D);
	public const uchar keyControlN = cast<uchar>(0x00E);
	public const uchar keyControlO = cast<uchar>(0x00F);
	public const uchar keyControlP = cast<uchar>(0x010);
	public const uchar keyControlQ = cast<uchar>(0x011);
	public const uchar keyControlR = cast<uchar>(0x012);
	public const uchar keyControlS = cast<uchar>(0x013);
	public const uchar keyControlT = cast<uchar>(0x014);
	public const uchar keyControlU = cast<uchar>(0x015);
	public const uchar keyControlV = cast<uchar>(0x016);
	public const uchar keyControlW = cast<uchar>(0x017);
	public const uchar keyControlX = cast<uchar>(0x018);
	public const uchar keyControlY = cast<uchar>(0x019);
	public const uchar keyControlZ = cast<uchar>(0x01A);
	public const uchar keyEscape = cast<uchar>(0x01B);
	public const uchar keyFS = cast<uchar>(0x01C);
	public const uchar keyGS = cast<uchar>(0x01D);
	public const uchar keyRS = cast<uchar>(0x01E);
	public const uchar keyUS = cast<uchar>(0x01F);
	
// 	special keys are mapped to Unicode Private Use Area

	public const uchar specialKeyStart = cast<uchar>(0xE000);

	public const uchar keyDown = cast<uchar>(0xE000);
	public const uchar keyUp = cast<uchar>(0xE001);
	public const uchar keyLeft = cast<uchar>(0xE002);
	public const uchar keyRight = cast<uchar>(0xE003);
	public const uchar keyHome = cast<uchar>(0xE004);
	public const uchar keyMsg = cast<uchar>(0xE005);
	public const uchar keyF1 = cast<uchar>(0xE006);
	public const uchar keyF2 = cast<uchar>(0xE007);
	public const uchar keyF3 = cast<uchar>(0xE008);
	public const uchar keyF4 = cast<uchar>(0xE009);
	public const uchar keyF5 = cast<uchar>(0xE00A);
	public const uchar keyF6 = cast<uchar>(0xE00B);
	public const uchar keyF7 = cast<uchar>(0xE00C);
	public const uchar keyF8 = cast<uchar>(0xE00D);
	public const uchar keyF9 = cast<uchar>(0xE00E);
	public const uchar keyF10 = cast<uchar>(0xE00F);
	public const uchar keyF11 = cast<uchar>(0xE010);
	public const uchar keyF12 = cast<uchar>(0xE011);
	public const uchar keyDel = cast<uchar>(0xE012);
	public const uchar keyIns = cast<uchar>(0xE013);
	public const uchar keyPgDown = cast<uchar>(0xE014);
	public const uchar keyPgUp = cast<uchar>(0xE015);
	public const uchar keyPrint = cast<uchar>(0xE016);
	public const uchar keyEnd = cast<uchar>(0xE017);
	public const uchar keyShiftDel = cast<uchar>(0xE018);
	public const uchar keyShiftEnd = cast<uchar>(0xE019);
	public const uchar keyShiftHome = cast<uchar>(0xE01A);
	public const uchar keyShiftLeft = cast<uchar>(0xE01B);
	public const uchar keyShiftRight = cast<uchar>(0xE01C);
	public const uchar keyResize = cast<uchar>(0xE01D);
	public const uchar keyShiftUp = cast<uchar>(0xE01E);
	public const uchar keyShiftDown = cast<uchar>(0xE01F);
	public const uchar keyControlUp = cast<uchar>(0xE020);
	public const uchar keyControlDown = cast<uchar>(0xE021);
	public const uchar keyControlLeft = cast<uchar>(0xE022);
	public const uchar keyControlRight = cast<uchar>(0xE023);
	public const uchar keyControlPgUp = cast<uchar>(0xE024);
	public const uchar keyControlPgDown = cast<uchar>(0xE025);
	public const uchar keyControlHome = cast<uchar>(0xE026);
	public const uchar keyControlEnd = cast<uchar>(0xE027);
	
	public const uchar keyControlDel = cast<uchar>(0xE028);
	public const uchar keyControlF1 = cast<uchar>(0xE029);
	public const uchar keyControlF2 = cast<uchar>(0xE02A);
	public const uchar keyControlF3 = cast<uchar>(0xE02B);
	public const uchar keyControlF4 = cast<uchar>(0xE02C);
	public const uchar keyControlF5 = cast<uchar>(0xE02D);
	public const uchar keyControlF6 = cast<uchar>(0xE02E);
	public const uchar keyControlF7 = cast<uchar>(0xE02F);
	public const uchar keyControlF8 = cast<uchar>(0xE030);
	public const uchar keyControlF9 = cast<uchar>(0xE031);
	public const uchar keyControlF10 = cast<uchar>(0xE032);
	public const uchar keyControlF11 = cast<uchar>(0xE033);
	public const uchar keyControlF12 = cast<uchar>(0xE034);
	public const uchar keyShiftPgUp = cast<uchar>(0xE035);
	public const uchar keyShiftPgDown = cast<uchar>(0xE036);
	public const uchar keyShiftF1 = cast<uchar>(0xE037);
	public const uchar keyShiftF2 = cast<uchar>(0xE038);
	public const uchar keyShiftF3 = cast<uchar>(0xE039);
	public const uchar keyShiftF4 = cast<uchar>(0xE03A);
	public const uchar keyShiftF5 = cast<uchar>(0xE03B);
	public const uchar keyShiftF6 = cast<uchar>(0xE03C);
	public const uchar keyShiftF7 = cast<uchar>(0xE03D);
	public const uchar keyShiftF8 = cast<uchar>(0xE03E);
	public const uchar keyShiftF9 = cast<uchar>(0xE03F);
	public const uchar keyShiftF10 = cast<uchar>(0xE040);
	public const uchar keyShiftF11 = cast<uchar>(0xE041);
	public const uchar keyShiftF12 = cast<uchar>(0xE042);

	public const uchar keyAltA = cast<uchar>(0xE043);
	public const uchar keyAltB = cast<uchar>(0xE044);
	public const uchar keyAltC = cast<uchar>(0xE045);
	public const uchar keyAltD = cast<uchar>(0xE046);
	public const uchar keyAltE = cast<uchar>(0xE047);
	public const uchar keyAltF = cast<uchar>(0xE048);
	public const uchar keyAltG = cast<uchar>(0xE049);
	public const uchar keyAltH = cast<uchar>(0xE04A);
	public const uchar keyAltI = cast<uchar>(0xE04B);
	public const uchar keyAltJ = cast<uchar>(0xE04C);
	public const uchar keyAltK = cast<uchar>(0xE04D);
	public const uchar keyAltL = cast<uchar>(0xE04E);
	public const uchar keyAltM = cast<uchar>(0xE04F);
	public const uchar keyAltN = cast<uchar>(0xE050);
	public const uchar keyAltO = cast<uchar>(0xE051);
	public const uchar keyAltP = cast<uchar>(0xE052);
	public const uchar keyAltQ = cast<uchar>(0xE053);
	public const uchar keyAltR = cast<uchar>(0xE054);
	public const uchar keyAltS = cast<uchar>(0xE055);
	public const uchar keyAltT = cast<uchar>(0xE056);
	public const uchar keyAltU = cast<uchar>(0xE057);
	public const uchar keyAltV = cast<uchar>(0xE058);
	public const uchar keyAltW = cast<uchar>(0xE059);
	public const uchar keyAltX = cast<uchar>(0xE05A);
	public const uchar keyAltY = cast<uchar>(0xE05B);
	public const uchar keyAltZ = cast<uchar>(0xE05C);

	public const uchar keyAltF1 = cast<uchar>(0xE05D);
	public const uchar keyAltF2 = cast<uchar>(0xE05E);
	public const uchar keyAltF3 = cast<uchar>(0xE05F);
	public const uchar keyAltF4 = cast<uchar>(0xE060);
	public const uchar keyAltF5 = cast<uchar>(0xE061);
	public const uchar keyAltF6 = cast<uchar>(0xE062);
	public const uchar keyAltF7 = cast<uchar>(0xE063);
	public const uchar keyAltF8 = cast<uchar>(0xE064);
	public const uchar keyAltF9 = cast<uchar>(0xE065);
	public const uchar keyAltF10 = cast<uchar>(0xE066);
	public const uchar keyAltF11 = cast<uchar>(0xE067);
	public const uchar keyAltF12 = cast<uchar>(0xE068);
	
	public const uchar keyControlShiftLeft = cast<uchar>(0xE069);
	public const uchar keyControlShiftRight = cast<uchar>(0xE06A);
	public const uchar keyControlShiftHome = cast<uchar>(0xE06B);
	public const uchar keyControlShiftEnd = cast<uchar>(0xE06C);
	public const uchar keyControlTab = cast<uchar>(0xE06D);
	public const uchar keyShiftTab = cast<uchar>(0xE06E);
	
	public const uchar specialKeyEnd = cast<uchar>(0xE06E);
	
	public class KeyBuffer
	{
		static KeyBuffer() : instance(new KeyBuffer())
		{
		}
		public static nothrow KeyBuffer& Instance() 
		{
			return *instance;
		}
		public nothrow void Put(byte ch)
		{
			engine.Put(ch);
		}
		public nothrow bool KeyReady() const
		{
			return engine.ResultReady();
		}
		public nothrow uchar GetKey() const
		{
			return engine.Get();
		}
		private static UniquePtr<KeyBuffer> instance;
		private UnicodeEngine engine;
	}
	
	public uchar ReadKey(int fd)
	{
		KeyBuffer& keyBuffer = KeyBuffer.Instance();
		byte ch = 0u;
		long count = Read(fd, &ch, 1);
		while (count > 0)
		{
			keyBuffer.Put(ch);
			if (keyBuffer.KeyReady())
			{
				return keyBuffer.GetKey();
			}
			count = Read(fd, &ch, 1);
		}
		return cast<uchar>(0);
	}
	
	public string KeyName(uchar c)
	{
		switch (c)
		{
			case keyBackspace:
			{
				return "Backspace";
			}
			case keyTab:
			{
				return "Tab";
			}
			case keyNewline:
			{
				return "Newline";
			}
			case keyControlA:
			{
				return "Ctrl+A";
			}
			case keyControlB:
			{
				return "Ctrl+B";
			}
			case keyControlC:
			{
				return "Ctrl+C";
			}
			case keyControlD:
			{
				return "Ctrl+D";
			}
			case keyControlE:
			{
				return "Ctrl+E";
			}
			case keyControlF:
			{
				return "Ctrl+F";
			}
			case keyControlG:
			{
				return "Ctrl+G";
			}
			case keyControlK:
			{
				return "Ctrl+K";
			}
			case keyControlL:
			{
				return "Ctrl+L";
			}
			case keyControlM:
			{
				return "Ctrl+M";
			}
			case keyControlN:
			{
				return "Ctrl+N";
			}
			case keyControlO:
			{
				return "Ctrl+O";
			}
			case keyControlP:
			{
				return "Ctrl+P";
			}
			case keyControlQ:
			{
				return "Ctrl+Q";
			}
			case keyControlR:
			{
				return "Ctrl+R";
			}
			case keyControlS:
			{
				return "Ctrl+S";
			}
			case keyControlT:
			{
				return "Ctrl+T";
			}
			case keyControlU:
			{
				return "Ctrl+U";
			}
			case keyControlV:
			{
				return "Ctrl+V";
			}
			case keyControlW:
			{
				return "Ctrl+W";
			}
			case keyControlX:
			{
				return "Ctrl+X";
			}
			case keyControlY:
			{
				return "Ctrl+Y";
			}
			case keyControlZ:
			{
				return "Ctrl+Z";
			}
			case keyEscape:
			{
				return "Escape";
			}
			case keyFS:
			{
				return "FS";
			}
			case keyGS:
			{
				return "GS";
			}
			case keyRS:
			{
				return "RS";
			}
			case keyUS:
			{
				return "US";
			}
			case keyDown:
			{
				return "Down Arrow";
			}
			case keyUp:
			{
				return "Up Arrow";
			}
			case keyLeft:
			{
				return "Left Arrow";
			}
			case keyRight:
			{
				return "Right Arrow";
			}
			case keyHome:
			{
				return "Home";
			}
			case keyMsg:
			{
				return "MSG";
			}
			case keyF1:
			{
				return "F1";
			}
			case keyF2:
			{
				return "F2";
			}
			case keyF3:
			{
				return "F3";
			}
			case keyF4:
			{
				return "F4";
			}
			case keyF5:
			{
				return "F5";
			}
			case keyF6:
			{
				return "F6";
			}
			case keyF7:
			{
				return "F7";
			}
			case keyF8:
			{
				return "F8";
			}
			case keyF9:
			{
				return "F9";
			}
			case keyF10:
			{
				return "F10";
			}
			case keyF11:
			{
				return "F11";
			}
			case keyF12:
			{
				return "F12";
			}
			case keyDel:
			{
				return "Delete";
			}
			case keyIns:
			{
				return "Insert";
			}
			case keyPgDown:
			{
				return "Page Down";
			}
			case keyPgUp:
			{
				return "Page Up";
			}
			case keyPrint:
			{
				return "Print Screen";
			}
			case keyEnd:
			{
				return "End";
			}
			case keyShiftDel:
			{
				return "Shift+Delete";
			}
			case keyShiftEnd:
			{
				return "Shift+End";
			}
			case keyShiftHome:
			{
				return "Shift+Home";
			}
			case keyShiftLeft:
			{
				return "Shift+Left Arrow";
			}
			case keyShiftRight:
			{
				return "Shift+Right Arrow";
			}
			case keyResize:
			{
				return "Resize";
			}
			case keyShiftUp:
			{
				return "Shift+Up Arrow";
			}
			case keyShiftDown:
			{
				return "Shift+Down Arrow";
			}
			case keyControlUp:
			{
				return "Ctrl+Up Arrow";
			}
			case keyControlDown:
			{
				return "Ctrl+Down Arrow";
			}
			case keyControlLeft:
			{
				return "Ctrl+Left Arrow";
			}
			case keyControlRight:
			{
				return "Ctrl+Right Arrow";
			}
			case keyControlPgUp:
			{
				return "Ctrl+Page Up";
			}
			case keyControlPgDown:
			{
				return "Ctrl+Page Down";
			}
			case keyControlHome:
			{
				return "Ctrl+Home";
			}
			case keyControlEnd:
			{
				return "Ctrl+End";
			}
			case keyControlDel:
			{
				return "Ctrl+Delete";
			}
			case keyControlF1:
			{
				return "Ctrl+F1";
			}
			case keyControlF2:
			{
				return "Ctrl+F2";
			}
			case keyControlF3:
			{
				return "Ctrl+F3";
			}
			case keyControlF4:
			{
				return "Ctrl+F4";
			}
			case keyControlF5:
			{
				return "Ctrl+F5";
			}
			case keyControlF6:
			{
				return "Ctrl+F6";
			}
			case keyControlF7:
			{
				return "Ctrl+F7";
			}
			case keyControlF8:
			{
				return "Ctrl+F8";
			}
			case keyControlF9:
			{
				return "Ctrl+F9";
			}
			case keyControlF10:
			{
				return "Ctrl+F10";
			}
			case keyControlF11:
			{
				return "Ctrl+F11";
			}
			case keyControlF12:
			{
				return "Ctrl+F12";
			}
			case keyShiftPgUp:
			{
				return "Shift+Page Up";
			}
			case keyShiftPgDown:
			{
				return "Shift+Page Down";
			}
			case keyShiftF1:
			{
				return "Shift+F1";
			}
			case keyShiftF2:
			{
				return "Shift+F2";
			}
			case keyShiftF3:
			{
				return "Shift+F3";
			}
			case keyShiftF4:
			{
				return "Shift+F4";
			}
			case keyShiftF5:
			{
				return "Shift+F5";
			}
			case keyShiftF6:
			{
				return "Shift+F6";
			}
			case keyShiftF7:
			{
				return "Shift+F7";
			}
			case keyShiftF8:
			{
				return "Shift+F8";
			}
			case keyShiftF9:
			{
				return "Shift+F9";
			}
			case keyShiftF10:
			{
				return "Shift+F10";
			}
			case keyShiftF11:
			{
				return "Shift+F11";
			}
			case keyShiftF12:
			{
				return "Shift+F12";
			}
			case keyAltA:
			{
				return "Alt+A";
			}
			case keyAltB:
			{
				return "Alt+B";
			}
			case keyAltC:
			{
				return "Alt+C";
			}
			case keyAltD:
			{
				return "Alt+D";
			}
			case keyAltE:
			{
				return "Alt+E";
			}
			case keyAltF:
			{
				return "Alt+F";
			}
			case keyAltG:
			{
				return "Alt+G";
			}
			case keyAltH:
			{
				return "Alt+H";
			}
			case keyAltI:
			{
				return "Alt+I";
			}
			case keyAltJ:
			{
				return "Alt+J";
			}
			case keyAltK:
			{
				return "Alt+K";
			}
			case keyAltL:
			{
				return "Alt+L";
			}
			case keyAltM:
			{
				return "Alt+M";
			}
			case keyAltN:
			{
				return "Alt+N";
			}
			case keyAltO:
			{
				return "Alt+O";
			}
			case keyAltP:
			{
				return "Alt+P";
			}
			case keyAltQ:
			{
				return "Alt+Q";
			}
			case keyAltR:
			{
				return "Alt+R";
			}
			case keyAltS:
			{
				return "Alt+S";
			}
			case keyAltT:
			{
				return "Alt+T";
			}
			case keyAltU:
			{
				return "Alt+U";
			}
			case keyAltV:
			{
				return "Alt+V";
			}
			case keyAltW:
			{
				return "Alt+W";
			}
			case keyAltX:
			{
				return "Alt+X";
			}
			case keyAltY:
			{
				return "Alt+Y";
			}
			case keyAltZ:
			{
				return "Alt+Z";
			}
			case keyAltF1:
			{
				return "Alt+F1";
			}
			case keyAltF2:
			{
				return "Alt+F2";
			}
			case keyAltF3:
			{
				return "Alt+F3";
			}
			case keyAltF4:
			{
				return "Alt+F4";
			}
			case keyAltF5:
			{
				return "Alt+F5";
			}
			case keyAltF6:
			{
				return "Alt+F6";
			}
			case keyAltF7:
			{
				return "Alt+F7";
			}
			case keyAltF8:
			{
				return "Alt+F8";
			}
			case keyAltF9:
			{
				return "Alt+F9";
			}
			case keyAltF10:
			{
				return "Alt+F10";
			}
			case keyAltF11:
			{
				return "Alt+F11";
			}
			case keyAltF12:
			{
				return "Alt+F12";
			}
			default:
			{
				if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')
				{
					ustring k(c);
					return ToUtf8(ToUpper(k));
				}
				break;
			}
		}
		return "<unknown key>";
	}
}
