// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Screen
{
    public class MenuControlCreateParams 
    {
        public nothrow MenuControlCreateParams () : 
            controlCreateParams(), 
            highlightColor(ConsoleColor.defaultColor),
            disabledColor(ConsoleColor.defaultColor),
            focusedItemForeColor(ConsoleColor.defaultColor),
            focusedItemBackColor(ConsoleColor.defaultColor),
            gap(-1)
        {
        }
        public nothrow MenuControlCreateParams& Defaults()
        {
            return *this;
        }
        public nothrow MenuControlCreateParams& HighlightColor(ConsoleColor highlightColor_)
        {
            highlightColor = highlightColor_;
            return *this;
        }
        public nothrow MenuControlCreateParams& DisabledColor(ConsoleColor disabledColor_)
        {
            disabledColor = disabledColor_;
            return *this;
        }
        public nothrow MenuControlCreateParams& FocusedItemForeColor(ConsoleColor focusedItemForeColor_)
        {
            focusedItemForeColor = focusedItemForeColor_;
            return *this;
        }
        public nothrow MenuControlCreateParams& FocusedItemBackColor(ConsoleColor focusedItemBackColor_)
        {
            focusedItemBackColor = focusedItemBackColor_;
            return *this;
        }
        public ControlCreateParams controlCreateParams;
        public ConsoleColor highlightColor;
        public ConsoleColor disabledColor;
        public ConsoleColor focusedItemForeColor;
        public ConsoleColor focusedItemBackColor;
        public int gap;
    }

    public enum MenuControlFlags
    {
        none = 0, changed = 1 << 0, menuOpen = 1 << 1
    }

    public class MenuControl : Control
    {
        public nothrow MenuControl(MenuControlCreateParams& createParams) : base(createParams.controlCreateParams), flags(MenuControlFlags.none)
        {
            if (createParams.highlightColor == ConsoleColor.defaultColor)
            {
                highlightColor = ConsoleColor.red;
            }
            else
            {
                highlightColor = createParams.highlightColor;
            }
            if (createParams.disabledColor == ConsoleColor.defaultColor)
            {
                disabledColor = ConsoleColor.darkGray;
            }
            else
            {
                disabledColor = createParams.disabledColor;
            }
            if (createParams.focusedItemForeColor == ConsoleColor.defaultColor)
            {
                focusedItemForeColor = cast<ConsoleColor>(defaultFocusedControlForeColor);
            }
            else
            {
                focusedItemForeColor = createParams.focusedItemForeColor;
            }
            if (createParams.focusedItemBackColor == ConsoleColor.defaultColor)
            {
                focusedItemBackColor = cast<ConsoleColor>(defaultFocusedControlBackColor);
            }
            else
            {
                focusedItemBackColor = createParams.focusedItemBackColor;
            }
            if (createParams.gap == -1)
            {
                gap = 8;
            }
            else
            {
                gap = createParams.gap;
            }
        }
        public nothrow void SetChanged()
        {
            flags = cast<MenuControlFlags>(flags | MenuControlFlags.changed);
        }
        public nothrow bool IsChanged() const
        {
            return (flags & MenuControlFlags.changed) != MenuControlFlags.none;
        }
        public nothrow void ResetChanged()
        {
            flags = cast<MenuControlFlags>(flags & ~MenuControlFlags.changed);
        }
        public nothrow void SetOpen()
        {
            if (!IsOpen())
            {
                flags = cast<MenuControlFlags>(flags | MenuControlFlags.menuOpen);
                Invalidate();
            }
        }
        public virtual nothrow void ResetOpen()
        {
            if (IsOpen())
            {
                focusedMenuItem = null;
                flags = cast<MenuControlFlags>(flags & ~MenuControlFlags.menuOpen);
                Application.Instance().MainWindow()->Invalidate();
            }
        }
        public nothrow bool IsOpen() const
        {
            return (flags & MenuControlFlags.menuOpen) != MenuControlFlags.none;
        }
        public nothrow ConsoleColor HighlightColor() const
        {
            return highlightColor;
        }
        public nothrow ConsoleColor DisabledColor() const
        {
            return disabledColor;
        }
        public nothrow ConsoleColor FocusedItemForeColor() const
        {
            return focusedItemForeColor;
        }
        public nothrow ConsoleColor FocusedItemBackColor() const
        {
            return focusedItemBackColor;
        }
        public nothrow int Gap() const
        {
            return gap;
        }
        public nothrow MenuItem* FocusedMenuItem() const
        {
            return focusedMenuItem;
        }
        public nothrow void SetFocusedMenuItem(MenuItem* focusedMenuItem_)
        {
            focusedMenuItem = focusedMenuItem_;
        }
        public override void OnGotFocus()
        {
            focusedMenuItem = null;
        }
        public override void OnLostFocus()
        {
            focusedMenuItem = null;
        }
        private MenuControlFlags flags;
        private ConsoleColor highlightColor;
        private ConsoleColor disabledColor;
        private ConsoleColor focusedItemForeColor;
        private ConsoleColor focusedItemBackColor;
        private int gap;
        private MenuItem* focusedMenuItem;
    }

    public class MenuBar : MenuControl
    {
        public nothrow MenuBar(MenuControlCreateParams& createParams) : base(createParams), menuItems(this)
        {
            InvalidateGuard guard(this, false);
            if (Location().IsDefault())
            {
                SetLocation(Point(0, 0));
            }
            if (GetSize().IsDefault())
            {
                SetSize(Size(TerminalWindowWidth(), 1));
            }
            if (ForeColor() == ConsoleColor.defaultColor)
            {
                SetForeColor(ConsoleColor.black);
            }
            if (BackColor() == ConsoleColor.defaultColor)
            {
                SetBackColor(ConsoleColor.gray);
            }
            SetChanged();
        }
        public void AddMenuItem(MenuItem* menuItem)
        {
            menuItems.AddChild(menuItem);
            menuItem->SetAccessKey();
        }
        public override nothrow void ResetOpen()
        {
            base->ResetOpen();
            Component* child = menuItems.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    menuItem->SetState(MenuItemState.closed);
                }
                child = child->NextSibling();
            }
        }
        public override void OnKeyPressed(KeyEventArgs& args)
        {
            if (args.Handled()) return;
            if (IsOpen() && args.Key() == keyEscape)
            {
                ResetOpen();
                SetFocusedMenuItem(null);
                args.SetHandled();
                return;
            }
            MenuItem* focusedMenuItem = FocusedMenuItem();
            if (focusedMenuItem != null)
            {
                focusedMenuItem->OnKeyPressed(args);
                if (args.Handled())
                {
                    return;
                }
            }
            uchar key = args.Key();
            if (key >= 'a' && key <= 'z')
            {
                key = ToUpper(key);
            }
            Component* child = menuItems.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    if (menuItem->IsEnabled())
                    {
                        if (menuItem->AccessKey() == key)
                        {
                            args.SetHandled();
                            ResetOpen();
                            SetOpen();
                            menuItem->SetState(MenuItemState.open);
                            SetFocusedMenuItem(menuItem->FirstChildItem());
                            Invalidate();
                            return;
                        }
                        else
                        {
                            if (menuItem->DispatchKey(key))
                            {
                                args.SetHandled();
                                return;
                            }
                        }
                    }
                }
                child = child->NextSibling();
            }
        }
        public override void OnWriteScreen(WriteScreenEventArgs& args)
        {
            base->OnWriteScreen(args);
            Rect rect = args.GetRect();
            if (rect.IsDefault())
            {
                rect = GetRect();
            }
            Clear(rect, ForeColor(), BackColor());
            if (IsChanged())
            {
                Measure();
            }
            WriteMenuItems();
            MenuItem* focusedMenuItem = FocusedMenuItem();
            if (focusedMenuItem != null)
            {
                Point location = focusedMenuItem->Location();
                SetCursorPos(location.x + 1, location.y);
            }
        }
        private void Measure()
        {
            Point loc = Location();
            loc.x = loc.x + 1;
            Component* child = menuItems.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    menuItem->Measure(loc);
                }
                child = child->NextSibling();
            }
        }
        private void WriteMenuItems()
        {
            Component* child = menuItems.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    menuItem->WriteScreen();
                }
                child = child->NextSibling();
            }
        }
        private Container menuItems;
    }
    
    public enum MenuItemState
    {
        closed = 0, open = 1
    }

    public enum MenuItemFlags 
    {
        none = 0, disabled = 1 << 0
    }
    
    public class MenuItem : Component
    {
        public nothrow MenuItem(const string& text_, uchar shortcut_) : state(MenuItemState.closed), flags(MenuItemFlags.none), text(ToUtf32(text_)), items(this), accessKey(), shortcut(shortcut_)
        {
        }
        public nothrow MenuItem(const string& text_) : this(text_, uchar())
        {
        }
        public nothrow void SetText(const string& text_)
        {
            text = ToUtf32(text_);
            SetAccessKey();
        }
        public nothrow void SetDisabled()
        {
            flags = cast<MenuItemFlags>(flags | MenuItemFlags.disabled);
        }
        public nothrow void SetEnabled()
        {
            flags = cast<MenuItemFlags>(flags & ~MenuItemFlags.disabled);
        }
        public nothrow bool IsDisabled() const
        {
            return (flags & MenuItemFlags.disabled) != MenuItemFlags.none;
        }
        public nothrow bool IsEnabled() const
        {
            return (flags & MenuItemFlags.disabled) == MenuItemFlags.none;
        }
        public nothrow void SetState(MenuItemState state_)
        {
            if (state != state_)
            {
                state = state_;
            }
        }
        public nothrow bool IsTopLevel() const
        {
            return ParentMenuItem() == null;
        }
        public nothrow bool IsFocused() const
        {
            MenuControl* menuControl = GetMenuControl();
            if (menuControl != null)
            {
                return menuControl->FocusedMenuItem() == this;
            }
            else
            {
                return false;
            }
        }
        public nothrow MenuItem* FirstChildItem() const
        {
            Component* child = items.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    return cast<MenuItem*>(child);
                }
                child = child->NextSibling();
            }
            return null;
        }
        public nothrow MenuItem* LastChildItem() const
        {
            Component* child = items.LastChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    return cast<MenuItem*>(child);
                }
                child = child->PrevSibling();
            }
            return null;
        }
        public nothrow MenuItem* NextMenuItem() const
        {
            Component* nextSibling = NextSibling();
            while (nextSibling != null)
            {
                if (nextSibling is MenuItem*)
                {
                    return cast<MenuItem*>(nextSibling);
                }
                nextSibling = nextSibling->NextSibling();
            }
            return null;
        }
        public nothrow MenuItem* PrevMenuItem() const
        {
            Component* prevSibling = PrevSibling();
            while (prevSibling != null)
            {
                if (prevSibling is MenuItem*)
                {
                    return cast<MenuItem*>(prevSibling);
                }
                prevSibling = prevSibling->PrevSibling();
            }
            return null;
        }
        public nothrow bool HasChildItems() const
        {
            return !items.IsEmpty();
        }
        public void AddMenuItem(MenuItem* menuItem)
        {
            items.AddChild(menuItem);
            menuItem->SetAccessKey();
        }
        public nothrow MenuItem* ParentMenuItem()
        {
            Container* container = GetContainer();
            if (container != null)
            {
                Component* parent = container->Parent();
                if (parent != null)
                {
                    if (parent is MenuItem*)
                    {
                        return cast<MenuItem*>(parent);
                    }
                }
            }
            return null;
        }
        public MenuControl* GetMenuControl()
        {
            Container* container = GetContainer();
            if (container != null)
            {
                Component* parent = container->Parent();
                if (parent is MenuControl*)
                {
                    return cast<MenuControl*>(parent);
                }
                else if (parent is MenuItem*)
                {
                    MenuItem* parentMenuItem = cast<MenuItem*>(parent);
                    return parentMenuItem->GetMenuControl();
                }
            }
            else
            {
                throw Exception("menu control not found");
            }
        }
        public nothrow const Rect& MenuBoxRect() const
        {
            return menuBoxRect;
        }
        public nothrow const Point& Location() const 
        {
            return location;
        }
        public void OnKeyPressed(KeyEventArgs& args)
        {
            MenuControl* menuControl = GetMenuControl();
            if (IsFocused())
            {
                switch (args.Key())
                {
                    case keyNewline:
                    {
                        args.SetHandled();
                        Select();
                        menuControl->SetFocusedMenuItem(null);
                        MenuItem* parentItem = ParentMenuItem();
                        if (parentItem != null)
                        {
                            Application.Instance().MainWindow()->Invalidate(parentItem->MenuBoxRect());
                        }
                        break;
                    }
                    case keyUp:
                    {
                        MenuItem* prevMenuItem = PrevMenuItem();
                        if (prevMenuItem != null)
                        {
                            menuControl->SetFocusedMenuItem(prevMenuItem);
                            args.SetHandled();
                            menuControl->Invalidate();
                        }
                        break;
                    }
                    case keyDown:
                    {
                        MenuItem* nextMenuItem = NextMenuItem();
                        if (nextMenuItem != null)
                        {
                            menuControl->SetFocusedMenuItem(nextMenuItem);
                            args.SetHandled();
                            menuControl->Invalidate();
                        }
                        break;
                    }
                }
            }
        }
        public bool DispatchKey(uchar key)
        {
            Component* child = items.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    if (menuItem->IsEnabled())
                    {
                        if (state == MenuItemState.open)
                        {
                            if (menuItem->AccessKey() == ToUpper(key))
                            {
                                if (menuItem->HasChildItems())
                                {
                                    menuItem->SetState(MenuItemState.open);
                                    MenuControl* menuControl = GetMenuControl();
                                    menuControl->Invalidate();
                                    return true;
                                }
                                else
                                {
                                    menuItem->Select();
                                    Application.Instance().MainWindow()->Invalidate(menuBoxRect);
                                    return true;
                                }
                            }
                            else if (menuItem->Shortcut() == key)
                            {
                                menuItem->Select();
                                Application.Instance().MainWindow()->Invalidate(menuBoxRect);
                                return true;
                            }
                        }
                        else if (menuItem->Shortcut() == key)
                        {
                            menuItem->Select();
                            Application.Instance().MainWindow()->Invalidate(menuBoxRect);
                            return true;
                        }
                        else
                        {
                            bool handled = menuItem->DispatchKey(key);
                            if (handled)
                            {
                                return true;
                            }
                        }
                    }
                }
                child = child->NextSibling();
            }
            return false;
        }
        public nothrow Event<SelectEventHandler>& SelectEvent() 
        { 
            return selectEvent; 
        }
        public void Select()
        {
            MenuControl* menuControl = GetMenuControl();
            menuControl->ResetOpen();
            MenuItem* parent = ParentMenuItem();
            if (parent != null)
            {
                parent->SetState(MenuItemState.closed);
            }
            selectEvent.Fire();
        }
        public nothrow void Measure(Point& loc)
        {
            if (IsTopLevel())
            {
                MeasureTopLevel(loc);
            }
            else
            {
                MeasureChild(loc);
            }
        }
        public nothrow int TextLength() const
        {
            int ampPos = cast<int>(text.Find('&'));
            if (ampPos != -1)
            {
                int n = cast<int>(text.Length() - 1);
                return n;
            }
            else
            {
                return cast<int>(text.Length());
            }
        }
        public nothrow ustring ShortcutText() const
        {
            if (shortcut != '\0')
            {
                ustring shortcutText = ToUtf32(KeyName(shortcut));
                return shortcutText;
            }
            else
            {
                return ustring();
            }
        }
        public nothrow uchar AccessKey() const
        {
            return accessKey;
        }
        public nothrow void SetAccessKey()
        {
            int ampPos = cast<int>(text.Find('&'));
            if (ampPos != -1 && ampPos < text.Length() - 1)
            {
                if (IsTopLevel())
                {
                    accessKey = cast<uchar>(cast<int>(keyAltA) + (cast<int>(ToUpper(text[ampPos + 1])) - cast<int>('A')));
                }
                else
                {
                    accessKey = ToUpper(text[ampPos + 1]);
                }
            }
            else
            {
                accessKey = '\0';
            }
        }
        public nothrow uchar Shortcut() const
        {
            return shortcut;
        }
        public void WriteScreen()
        {
            if (IsTopLevel())
            {
                WriteTopLevel();
            }
            else
            {
                WriteChild();
            }
        }
        public nothrow Rect ItemRect() const
        {
            MenuItem* parent = ParentMenuItem();
            Rect parentMenuBox = parent->MenuBoxRect();
            Size sz(parentMenuBox.size.w - 2, 1);
            return Rect(location, sz);
        }
        private void MeasureTopLevel(Point& loc)
        {
            location = loc;
            menuBoxRect.location.x = location.x - 1;
            menuBoxRect.location.y = location.y + 1;
            MeasureSize();
            loc.x = loc.x + TextLength() + 2;
            MeasureChildren();
        }
        private void MeasureChildren()
        {
            Point loc(location.x, location.y + 2);
            Component* child = items.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    menuItem->MeasureChild(loc);
                }
                child = child->NextSibling();
            }
        }
        private void MeasureSize()
        {
            MenuControl* menuControl = GetMenuControl();
            int numChildren = 0;
            int maxTextLength = 0;
            int maxShortcutLength = 0;
            Component* child = items.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    int textLength = menuItem->TextLength();
                    if (textLength > maxTextLength)
                    {
                        maxTextLength = textLength;
                    }
                    int shortcutTextLength = cast<int>(menuItem->ShortcutText().Length());
                    if (shortcutTextLength > maxShortcutLength)
                    {
                        maxShortcutLength = shortcutTextLength;
                    }
                    ++numChildren;
                }
                child = child->NextSibling();
            }
            menuBoxRect.size = Size(maxTextLength + menuControl->Gap() + maxShortcutLength + 2, numChildren + 2);
        }
        private void MeasureChild(Point& loc)
        {
            location = loc;
            loc.y = loc.y + 1;
        }
        private void WriteTopLevel()
        {
            WriteText();
            if (state == MenuItemState.open)
            {
                WriteMenuBox();
            }
        }
        private void WriteChild()
        {
            if (IsFocused())
            {
                WriteFocused();
            }
            else
            {
                WriteText();
                MenuItem* parent = ParentMenuItem();
                Rect parentMenuBox = parent->MenuBoxRect();
                ustring shortcutText = ShortcutText();
                int x = cast<int>(parentMenuBox.Right() - 1 - shortcutText.Length());
                int y = location.y;
                SetCursorPos(x, y);
                Terminal.Out() << shortcutText;
                if (state == MenuItemState.open)
                {
                    WriteMenuBox();
                }
            }
        }
        private void WriteFocused()
        {
            MenuControl* menuControl = GetMenuControl();
            Clear(ItemRect(), menuControl->FocusedItemForeColor(), menuControl->FocusedItemBackColor());
            Terminal.Out() << SetColors(menuControl->FocusedItemForeColor(), menuControl->FocusedItemBackColor());
            WriteText();
            MenuItem* parent = ParentMenuItem();
            Rect parentMenuBox = parent->MenuBoxRect();
            ustring shortcutText = ShortcutText();
            int x = cast<int>(parentMenuBox.Right() - 1 - shortcutText.Length());
            int y = location.y;
            SetCursorPos(x, y);
            ConsoleColor textColor = menuControl->ForeColor();
            if (IsDisabled())
            {
                textColor = menuControl->DisabledColor();
            }
            Terminal.Out() << SetColors(menuControl->FocusedItemForeColor(), menuControl->FocusedItemBackColor());
            Terminal.Out() << shortcutText;
        }
        private void WriteText()
        {
            MenuControl* menuControl = GetMenuControl();
            ConsoleColor textColor = menuControl->ForeColor();
            if (IsDisabled())
            {
                textColor = menuControl->DisabledColor();
            }
            SetCursorPos(location.x + 1, location.y);
            int ampPos = cast<int>(text.Find('&'));
            bool isFocused = IsFocused();
            if (ampPos != -1)
            {
                ustring prefix = text.Substring(0, ampPos);
                if (!isFocused)
                {    
                    Terminal.Out() << SetColors(textColor, menuControl->BackColor());
                }
                else
                {
                    Terminal.Out() << SetColors(menuControl->FocusedItemForeColor(), menuControl->FocusedItemBackColor());
                }
                Terminal.Out() << prefix;
                ustring highlightStr = text.Substring(ampPos + 1, 1);
                if (!isFocused)
                {
                    Terminal.Out() << SetColors(menuControl->HighlightColor(), menuControl->BackColor());
                }
                Terminal.Out() << highlightStr;
                if (!isFocused)
                {
                    Terminal.Out() << SetColors(textColor, menuControl->BackColor());
                }
                ustring suffix = text.Substring(ampPos + 2);
                Terminal.Out() << suffix;
            }
            else
            {
                Terminal.Out() << text;
            }
        }
        private void WriteMenuBox()
        {
            MenuControl* menuControl = GetMenuControl();
            WriteBox(menuBoxRect, menuControl->ForeColor(), menuControl->BackColor());
            Component* child = items.FirstChild();
            while (child != null)
            {
                if (child is MenuItem*)
                {
                    MenuItem* menuItem = cast<MenuItem*>(child);
                    menuItem->WriteScreen();
                }
                child = child->NextSibling();
            }
        }
        private MenuItemState state;
        private MenuItemFlags flags;
        private Point location;
        private Rect menuBoxRect;
        private ustring text;
        private Container items;
        private uchar accessKey;
        private uchar shortcut;
        private Event<SelectEventHandler> selectEvent;
    }
    
    public abstract class SelectAction 
    {
        public SelectAction(MenuItem* menuItem)
        {
            menuItem->SelectEvent().AddHandler(Select);
        }
        public default virtual ~SelectAction();
        public abstract void Execute();
        private void Select()
        {
            Execute();
        }
    }
}
