// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Screen
{
	public class ControlCreateParams
	{
		public nothrow ControlCreateParams() : location(Point.Default()), size(Size.Default()), foreColor(ConsoleColor.defaultColor), backColor(ConsoleColor.defaultColor)
		{
		}
		public nothrow ControlCreateParams& Defaults() 
		{
			return *this;
		}
		public nothrow ControlCreateParams& SetLocation(const Point& location_)
		{
			location = location_;
			return *this;
		}
		public nothrow ControlCreateParams& SetSize(const Size& size_)
		{
			size = size_;
			return *this;
		}
		public nothrow ControlCreateParams& SetForeColor(ConsoleColor foreColor_)
		{
			foreColor = foreColor_;
			return *this;
		}
		public nothrow ControlCreateParams& SetBackColor(ConsoleColor backColor_)
		{
			backColor = backColor_;
			return *this;
		}
		public Point location;
		public Size size;
		public ConsoleColor foreColor;
		public ConsoleColor backColor;
	}

    public class Control : Component
    {
		public nothrow Control(ControlCreateParams& createParams) : 
			handle(-1), 
			location(createParams.location), 
			size(createParams.size), 
			foreColor(createParams.foreColor), 
			backColor(createParams.backColor)
		{
			Application.Instance().GetWindowManager().AddWindow(this);
		}
		public ~Control()
		{
			Application.Instance().GetWindowManager().RemoveWindow(this);
		}
		public nothrow int Handle() const
		{
			return handle;
		}
		public nothrow void SetHandle(int handle_)
		{
			handle = handle_;
		}
		public nothrow const Point& Location() const
		{
			return location;
		}
		public nothrow void SetLocation(const Point& location_)
		{
			if (location != location_)
			{
				location = location_;
				OnLocationChanged();
			}
		}
		public nothrow const Size& GetSize() const
		{
			return size;
		}
		public nothrow void SetSize(const Size& size_)
		{
			if (size != size_)
			{
				size = size_;
				OnSizeChanged();
			}
		}
		public nothrow ConsoleColor ForeColor() const
		{
			return foreColor;
		}
		public nothrow void SetForeColor(ConsoleColor foreColor_)
		{
			if (foreColor != foreColor_)
			{
				foreColor = foreColor_;
				OnForeColorChanged();
			}
		}
		public nothrow ConsoleColor BackColor() const
		{
			return backColor;
		}
		public nothrow void SetBackColor(ConsoleColor backColor_)
		{
			if (backColor != backColor_)
			{
				backColor = backColor_;
				OnBackColorChanged();
			}
		}
		public void Invalidate()
		{
			Invalidate(Rect.Default());
		}
		public void Invalidate(const Rect& rect)
		{
			WriteScreenMessage message(rect);
			message.SetTargetWindowHandle(handle);
			Application.Instance().PostMessage(message);
		}
		public virtual bool HandleMessage(Message* message)
		{
			return message->Dispatch(this);
		}
		public virtual bool HandleKeyPressed(KeyPressedMessage* message)
		{
			KeyEventArgs args(message->Key());
			OnKeyPressed(args);
			return args.Handled();
		}
		public virtual bool HandleWriteScreen(WriteScreenMessage* message)
		{
			WriteScreenEventArgs args(message->GetRect());
			OnWriteScreen(args);
			return true;
		}
		public virtual void OnLocationChanged()
		{
			// todo
		}
		public virtual void OnSizeChanged()
		{
			// todo
		}
		public virtual void OnForeColorChanged()
		{
			// todo
		}
		public virtual void OnBackColorChanged()
		{
			// todo
		}
		public virtual void OnWriteScreen(WriteScreenEventArgs& args)
		{
			// todo
		}
		public virtual void OnKeyPressed(KeyEventArgs& args)
		{
			// todo
		}
		public virtual void OnClose(CloseEventArgs& args)
		{
			// todo
		}
		private int handle;
        private Point location;
		private Size size;
		private ConsoleColor foreColor;
		private ConsoleColor backColor;
    }
}
