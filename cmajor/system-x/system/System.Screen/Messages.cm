// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Screen
{
    const int quitMessageId = 0;
    const int keyPressedMessageId = 1;
    const int writeScreenMessageId = 2;
	const int timerMessageId = 3;

    public class QuitMessage : Message
    {
		public override nothrow int Id() const
		{
			return quitMessageId;
		}
		public override nothrow string Name() const
		{
			return "quit"; 
		}
        static nothrow QuitMessage() : Message()
        {
            RegisterMessage<QuitMessage>(quitMessageId);
        }
    }

    public class KeyPressedMessage : Message
    {
		public override nothrow int Id() const
		{
			return keyPressedMessageId;
		}
		public override nothrow int Size() const
		{
			return cast<int>(base->Size() + sizeof(uchar));
		}
		public override nothrow string Name() const
		{
			return "keyPressed"; 
		}
        static nothrow KeyPressedMessage() : Message()
        {
            RegisterMessage<KeyPressedMessage>(keyPressedMessageId);
        }
        public nothrow KeyPressedMessage(uchar key_) : key(key_)
        {
        }
        public override void Write(MemoryWriter& writer)
        {
            base->Write(writer);
            writer.Write(cast<int>(key));
        }
        public override void Read(MemoryReader& reader)
        {
            base->Read(reader);
            key = cast<uchar>(reader.ReadInt());
        }
        public override bool Dispatch(Control* control)
        {
            return control->HandleKeyPressed(this);
        }
        public nothrow uchar Key() const
        {
            return key;
        }
        private uchar key;
    }
    
    public class WriteScreenMessage : Message
    {
		public override nothrow int Id() const
		{
			return writeScreenMessageId;
		}
		public override nothrow int Size() const
		{
			return cast<int>(base->Size() + sizeof(Rect));
		}
		public override nothrow string Name() const
		{
			return "writeScreen"; 
		}
        static nothrow WriteScreenMessage() : Message()
        {
            RegisterMessage<WriteScreenMessage>(writeScreenMessageId);
        }
        public nothrow WriteScreenMessage(const Rect& rect_) : rect(rect_)
        {
        }
        public override void Write(MemoryWriter& writer)
        {
            base->Write(writer);
            writer.Write(rect.location.x);
            writer.Write(rect.location.y);
            writer.Write(rect.size.w);
            writer.Write(rect.size.h);
        }
        public override void Read(MemoryReader& reader)
        {
            base->Read(reader);
            rect.location.x = reader.ReadInt();
            rect.location.y = reader.ReadInt();
            rect.size.w = reader.ReadInt();
            rect.size.h = reader.ReadInt();
        }
        public override bool Dispatch(Control* control)
        {
            return control->HandleWriteScreen(this);
        }
        public nothrow const Rect& GetRect() const
        {
            return rect;
        }
        private Rect rect;
    }
	
	public class TimerMessage : Message
	{
		public override nothrow int Id() const
		{
			return timerMessageId;
		}
		public override nothrow int Size() const
		{
			return cast<int>(base->Size() + sizeof(int));
		}
		public override nothrow string Name() const
		{
			return "timer"; 
		}
		static nothrow TimerMessage() : Message()
		{
			RegisterMessage<TimerMessage>(timerMessageId);
		}
		public nothrow TimerMessage(int timerId_) : timerId(timerId_)
		{
		}
		public override void Write(MemoryWriter& writer)
		{
			base->Write(writer);
			writer.Write(timerId);
		}
		public override void Read(MemoryReader& reader)
		{
			base->Read(reader);
			timerId = reader.ReadInt();
		}
		public override bool Dispatch(Control* control)
		{
			return control->HandleTimerMessage(this);
		}
		public nothrow int TimerId() const
		{
			return timerId;
		}
		private int timerId;
	}
    
    new class ConcreteMessageFactoryFunction<QuitMessage>;
    new class ConcreteMessageFactoryFunction<KeyPressedMessage>;
    new class ConcreteMessageFactoryFunction<WriteScreenMessage>;
	new class ConcreteMessageFactoryFunction<TimerMessage>;
}
