// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.RegularExpressions;
using shtokens;

private int debugMode = 0;

void SetParamDebugMode()
{
	debugMode = GetDebugMode();
}

class Params
{
    public void Add(const string& param)
    {
        positionalParams.Add(param);
    }
    public List<ShellToken> GetParameterValue(ShellEnvironment& environment, const string& paramName, TokenFlags& globalFlags, Context& context) 
    {
        string replacementStr;
        int index = 0;
        if (ParseInt(paramName, index))
        {
            if (index >= 0 && index < positionalParams.Count())
            {
                replacementStr = positionalParams[index];
            }
        }
        else if (HasEnv(paramName))
        {
            replacementStr = GetEnv(paramName);
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("> sh.parse.param.value=" + replacementStr);
			}
        }
        if (!replacementStr.IsEmpty())
        {
            List<ShellToken> tokens = TokenizeLine(ToUtf32(replacementStr), globalFlags);
            Expand(tokens, environment, *this, context, globalFlags);
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.param.value.true");
			}
            return tokens;
        }
        else
        {
            List<ShellToken> emptyTokens;
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.param.value.false");
			}
            return emptyTokens;
        }
    }
    private List<string> positionalParams;
}

bool ExpandParam(const ustring& paramName, ShellEnvironment& environment, Params& params, TokenFlags& globalFlags, Context& context, List<ShellToken>& expandedTokens)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.param.expand.param=" + ToUtf8(paramName));
	}
    List<ShellToken> replacementTokens = params.GetParameterValue(environment, ToUtf8(paramName), globalFlags, context);
    if (!replacementTokens.IsEmpty())
    {
        for (const ShellToken& token : replacementTokens)
        {
            expandedTokens.Add(token);
        }
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.param.expand.param.true");
		}
        return true;
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.param.expand.param.false");
	}
    return false;
}

bool ParseParameterExpression(TokenLexer& lexer, ShellEnvironment& environment, Params& params, TokenFlags& globalFlags, Context& context, List<ShellToken>& expandedTokens)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("=====================");
		WriteDebugMessage("> sh.parse.param.expr");
	}
    bool dollarMatched = false;
    bool digitMatched = false;
    bool digitPossible = true;
	bool startName = false;
    ustring paramName;
    int save = lexer.GetPos();
    ustring prefix;
    ustring suffix;
    List<ShellToken> resultTokens;
    if (*lexer == TOKEN)
    {
        uchar* begin = lexer.CurrentToken().Begin();
        uchar* end = lexer.CurrentToken().End();
        uchar* i = begin;
        while (i != end)
        {
            if (*i == '$')
            {
                prefix = ustring(begin, i);
                begin = i + 1;
                dollarMatched = true;
				startName = true;
            }
			else if (*i == ':')
			{
				if (!prefix.IsEmpty())
				{
					ShellToken prefixToken(TOKEN, prefix);
					SetTokenFlags(prefixToken, globalFlags);
					resultTokens.Add(prefixToken);
					prefix.Clear();
				}
				if (!paramName.IsEmpty())
				{
					ExpandParam(paramName, environment, params, globalFlags, context, resultTokens);
					paramName.Clear();
				}
				ShellToken colonToken(TOKEN, ustring(':'));
				resultTokens.Add(colonToken);
				begin = i + 1;
			}
            else if (dollarMatched)
            {
                if (!digitMatched && digitPossible)
                {
                    if (*i >= '0' && *i <= '9')
                    {
                        digitMatched = true;
                        if (!prefix.IsEmpty())
                        {
							ShellToken prefixToken(TOKEN, prefix);
							SetTokenFlags(prefixToken, globalFlags);
                            resultTokens.Add(prefixToken);
                            prefix.Clear();
                        }
                        ExpandParam(ustring(*i), environment, params, globalFlags, context, resultTokens);
                        begin = i + 1;
                    }
					else if (startName && IsStartNameChar(*i) || IsNameChar(*i))
					{
						startName = false;
                        digitPossible = false;
                        paramName.Append(*i);
					}
					else 
					{
						if (!paramName.IsEmpty())
						{
							if (!prefix.IsEmpty())
							{
								ShellToken prefixToken(TOKEN, prefix);
								SetTokenFlags(prefixToken, globalFlags);
								resultTokens.Add(prefixToken);
								prefix.Clear();
							}
							ExpandParam(paramName, environment, params, globalFlags, context, resultTokens);
							paramName.Clear();
							begin = i;
						}
					}
                }
                else
                {
                    if (digitMatched)
                    {
                        suffix.Append(*i);
                    }
                    else if (startName && IsStartNameChar(*i) || IsNameChar(*i))
                    {
						startName = false;
                        paramName.Append(*i);
                    }
					else
					{
						if (!paramName.IsEmpty())
						{
							if (!prefix.IsEmpty())
							{
								ShellToken prefixToken(TOKEN, prefix);
								SetTokenFlags(prefixToken, globalFlags);
								resultTokens.Add(prefixToken);
								prefix.Clear();
							}
							ExpandParam(paramName, environment, params, globalFlags, context, resultTokens);
							paramName.Clear();
							begin = i;
						}
					}
                }
            }
            ++i;
        }
		suffix = ustring(begin, i);
        if (dollarMatched)
        {
            ++lexer;
        }
        if (digitMatched)
        {
            if (!suffix.IsEmpty())
            {
				List<ShellToken> suffixTokens = TokenizeLine(suffix, globalFlags);
				Expand(suffixTokens, environment, params, context, globalFlags);
				AddTokens(expandedTokens, suffixTokens);
            }
        }
    }
    if (dollarMatched)
    {
        if (digitMatched)
        {
            AddTokens(expandedTokens, resultTokens);
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.param.expr.digit.true");
			}
            return true;
        }
        else if (!paramName.IsEmpty())
        {
            if (!prefix.IsEmpty())
            {
				ShellToken prefixToken(TOKEN, prefix);
				SetTokenFlags(prefixToken, globalFlags);
                resultTokens.Add(prefixToken);
                prefix.Clear();
            }
            if (ExpandParam(paramName, environment, params, globalFlags, context, resultTokens))
            {
                AddTokens(expandedTokens, resultTokens);
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.param.expr.param.true");
				}
				if (!suffix.IsEmpty())
				{
					List<ShellToken> suffixTokens = TokenizeLine(suffix, globalFlags);
					Expand(suffixTokens, environment, params, context, globalFlags);
					AddTokens(expandedTokens, suffixTokens);
				}
                return true;
            }
        }
        else
        {
            if (*lexer == LBRACE)
            {
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("> sh.parse.param.expr.lbrace");
				}
                ++lexer;
                if (*lexer == TOKEN)
                {
                    paramName = lexer.CurrentToken().match;
                    if (!paramName.IsEmpty())
                    {
                        if (ExpandParam(paramName, environment, params, globalFlags, context, resultTokens))
                        {
                            ++lexer;
                            if (*lexer == RBRACE)
                            {
                                ++lexer;
                                AddTokens(expandedTokens, resultTokens);
								if ((debugMode & debugShell) != 0)
								{
									WriteDebugMessage("< sh.parse.param.expr.rbrace.true");
								}
                                return true;
                            }
                        }
                    }
                }
            }
			else
			{
                AddTokens(expandedTokens, resultTokens);
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.param.expr.expanded.true");
				}
				if (!suffix.IsEmpty())
				{
					List<ShellToken> suffixTokens = TokenizeLine(suffix, globalFlags);
					Expand(suffixTokens, environment, params, context, globalFlags);
					AddTokens(expandedTokens, suffixTokens);
				}
                return true;
			}
        }
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.param.expr.false");
	}
    lexer.SetPos(save);
    return false;
}

List<ShellToken> ParameterExpand(const List<ShellToken>& tokens, ShellEnvironment& environment, Params& params, TokenFlags& globalFlags, Context& context)
{
	SetParamDebugMode();
    TokenLexer lexer(tokens);
    List<ShellToken> expandedTokens;
    while (*lexer != END)
    {
        if (!ParseParameterExpression(lexer, environment, params, globalFlags, context, expandedTokens))
        {
            expandedTokens.Add(lexer.CurrentToken());
            ++lexer;
        }
    }
    return expandedTokens;
}
