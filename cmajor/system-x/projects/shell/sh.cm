// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;
using System.Lex;
using shtokens;

string CWD(ShellEnvironment& environment)
{
    string cwd = GetCurrentWorkingDirectory();
    if (cwd.StartsWith(environment.Home()))
    {
        cwd = Path.Combine("~", cwd.Substring(environment.Home().Length()));
    }
    return SetColors(ConsoleColor.blue, DefaultConsoleBackColor()).Append(cwd).Append(ResetColors());
}

void PrintPrompt(ShellEnvironment& environment)
{
    string prompt = "$ ";
    if (environment.UID() == 0)
    {
        prompt = "# ";
    }
    Console.Out() << SetColors(ConsoleColor.green, DefaultConsoleBackColor()).Append(environment.UserName()).Append("@").Append(environment.HostName()).Append(ResetColors()).
        Append(":").Append(CWD(environment)).Append(prompt);
}

string GetLine(ShellEnvironment& environment)
{
    PrintPrompt(environment);
    string line = Console.ReadLine();
    return line;
}

void ProcessLine(const string& line, ShellEnvironment& environment, Map<string, string>& executableMap)
{
    if (line.IsEmpty()) return;
    ustring uline = ToUtf32(line);
    List<ShellToken> tokens = TokenizeLine(uline);
    if (environment.Debug())
    {
        PrintTokens(tokens);
    }
    Environment programEnvironment;
    Environment.Instance().CopyTo(programEnvironment);
    Command command = MakeCommand(tokens, executableMap);
    if (!command.IsEmpty())
    {
        if (environment.Debug())
        {
            Console.Out() << "executing command: " << command.ToString() << endl();
        }
        command.Execute(programEnvironment);
    }
    if (DirectoriesChanged())
    {
        ClearDirectoriesChanged();
        string path = GetEnv("PATH");
        ReadPathDirectories(path, executableMap);
    }
}

void Run(ShellEnvironment& environment)
{
    Map<string, string> executableMap;
    string path = GetEnv("PATH");
    AddDirChangeNotification(path.Chars());
    ReadPathDirectories(path, executableMap);
    string line = GetLine(environment);
    while (line != "exit")
    {
        ProcessLine(line, environment, executableMap);
        line = GetLine(environment);
    }
    RemoveDirChangeNotifications();
}
