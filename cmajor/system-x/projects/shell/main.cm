// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;
using System.RegularExpressions;

const int completionInitMessageId = 10;
const int completionExitMessageId = 11;
const int completionRequestMessageId = 12;
const int completionReplyMessageId = 13;
const int completionErrorReplyMessageId = 14;

void CloseMessageQueue(int msgQ)
{
	if (msgQ == -1) 
	{
		return;
	}
	try
	{
		CloseMsgQ(msgQ);
	}
	catch (const Exception& ex)
	{
		Console.Error() << ex.ToString() << endl();
	}
}

void HandleTabCompletionInitReply(int replyMessageId, MemoryReader& reader, int putTabMsgQ, int getTabMsgQ)
{
	if ((GetDebugMode() & debugApp) != 0)
	{
		WriteDebugMessage("> sh.handle.tab.reply." + ToString(replyMessageId));
	}
	if (replyMessageId == completionReplyMessageId)
	{
		int success = reader.ReadInt();
		CloseMessageQueue(putTabMsgQ);
		CloseMessageQueue(getTabMsgQ);
		if (success == 0)
		{
			throw SystemError(EFAIL, "sh: got tab completion init error from /bin/tab: success=false");
		}
	}
	else if (replyMessageId == completionErrorReplyMessageId)
	{
		int success = reader.ReadInt();
		string error = reader.ReadString();
		CloseMessageQueue(putTabMsgQ);
		CloseMessageQueue(getTabMsgQ);
		throw SystemError(EFAIL, "sh: got tab completion init error from /bin/tab: success=" + ToString(success) + ", error=" + error);
	}
	else
	{
		throw SystemError(EFAIL, "sh: tab completion init failed, invalid reply message id " + ToString(replyMessageId) + " received from /bin/tab");
	}
	if ((GetDebugMode() & debugApp) != 0)
	{
		WriteDebugMessage("< sh.handle.tab.reply.");
	}
}

void InitTabCompletion(ShellEnvironment& environment)
{
	if ((GetDebugMode() & debugApp) != 0)
	{
		WriteDebugMessage("> sh.init.tab");
	}
	int putTabMsgQ = environment.PutTabMsgQ();
	int getTabMsgQ = environment.GetTabMsgQ();
	if (putTabMsgQ == -1 || getTabMsgQ == -1)
	{
		return;
	}
	List<byte> initCompletionMsg;
	int initCompletionMsgSize = 4;
	initCompletionMsg.Resize(initCompletionMsgSize);
	MemoryWriter writer(initCompletionMsg.Begin().Ptr(), initCompletionMsgSize);
	writer.Write(completionInitMessageId);
	PutMsg(putTabMsgQ, initCompletionMsg.Begin().Ptr(), initCompletionMsgSize);
	WaitMsg(getTabMsgQ);
	if (GetMsgQLength(getTabMsgQ) > 0)
	{
		int replyMessageSize = GetMsgSize(getTabMsgQ);
		if ((GetDebugMode() & debugApp) != 0)
		{
			WriteDebugMessage("> sh.init.tab.reply.size=" + ToString(replyMessageSize));
		}
		if (replyMessageSize > 0)
		{
			UniquePtr<byte> replyMsg(cast<byte*>(MemAlloc(replyMessageSize)));
			GetMsg(getTabMsgQ, replyMsg.Get());
			MemoryReader reader(replyMsg.Get(), replyMessageSize);
			if ((GetDebugMode() & debugApp) != 0)
			{
				WriteDebugMessage("> sh.init.tab.read.reply.id");
			}
			int replyMessageId = reader.ReadInt();
			if ((GetDebugMode() & debugApp) != 0)
			{
				WriteDebugMessage("< sh.init.tab.read.reply.id");
			}
			HandleTabCompletionInitReply(replyMessageId, reader, putTabMsgQ, getTabMsgQ);
		}
	}
	if ((GetDebugMode() & debugApp) != 0)
	{
		WriteDebugMessage("< sh.init.tab");
	}
}

void StartTabCompletion(ShellEnvironment& environment)
{
	try
	{
		if ((GetDebugMode() & debugApp) != 0)
		{
			WriteDebugMessage("> sh.start.tab");
		}
		if (environment.PutTabMsgQName().IsEmpty() || environment.GetTabMsgQName().IsEmpty()) 
		{
			return;
		}
		int pid = Fork();
		if (pid == 0)
		{
			List<string> args;
			args.Add(environment.PutTabMsgQName());
			args.Add(environment.GetTabMsgQName());
			Exec("/bin/tab", args);
		}
		else
		{
			InitTabCompletion(environment);
		}
		if ((GetDebugMode() & debugApp) != 0)
		{
			WriteDebugMessage("< sh.start.tab");
		}
	}
	catch (const Exception& ex)
	{
		Console.Error() << ex.ToString() << endl();
	}
}

void StopTabCompletion(ShellEnvironment& environment)
{
	try
	{
		int putTabMsgQ = MsgQ(environment.PutTabMsgQName().Chars());
		List<byte> completionExitMsgData;
		int completionExitMsgSize = 4;
		completionExitMsgData.Resize(completionExitMsgSize);
		MemoryWriter writer(completionExitMsgData.Begin().Ptr(), completionExitMsgSize);
		writer.Write(completionExitMessageId);
		PutMsg(putTabMsgQ, completionExitMsgData.Begin().Ptr(), completionExitMsgSize);
		CloseMessageQueue(putTabMsgQ);
	}
	catch (const Exception& ex)
	{
		Console.Error() << ex.ToString() << endl();
	}
}

int main(int argc, const char** argv)
{
	ShellEnvironment environment;
    try
    {
        Params params;
        if (argc > 0)
        {
            params.Add(argv[0]);
        }
        bool debug = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            params.Add(arg);
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--debug")
                {
                    debug = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                for (char o : options)
                {
                    bool unknown = false;
                    string uo;
                    switch (o)
                    {
                        case 'h':
                        {
                            PrintHelp();
                            return 1;
                        }
                        default:
                        {
                            unknown = true;
                            uo.Append(o);
                            break;
                        }
                    }
                    if (unknown)
                    {
                        throw Exception("unknown option '-" + uo + "'");
                    }
                }
            }
        }
        Install();
        ParseEnvironmentFile("/etc/environment");
        environment.SetDebug(debug);
        SetupShellEnvironment(environment);
        SetupCredentials(environment);
        ChDir(environment.Home().Chars());
		StartTabCompletion(environment);
        Context context;
        Run(environment, params, context);
		StopTabCompletion(environment);
    }
    catch (const Exception& ex)
    {
        Terminal.Error() << ex.ToString() << endl();
		StopTabCompletion(environment);
        return 1;
    }
    return 0;
}
