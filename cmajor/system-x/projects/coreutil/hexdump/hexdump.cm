// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;

void PrintHelp()
{
    Console.WriteLine("Usage: hexdump [options] [FILE]...");
    Console.WriteLine("Options:");
    Console.WriteLine("--help | -h");
    Console.WriteLine("  Print help and exit.");
}

const int bytesInLine = 16;

string HexDumpLine(int addr, byte* bytes, int numBytes)
{
    string line(ToHexString(addr));
    line.Append(": ");
    for (int i = 0; i < bytesInLine; ++i)
    {
        if (i == bytesInLine / 2)
        {
            line.Append("- ");
        }
        if (i < numBytes)
        {
            line.Append(ToHexString(bytes[i]));
        }
        else
        {
            line.Append("  ");
        }
        line.Append(' ');
    }
    line.Append('|');
    for (int i = 0; i < bytesInLine; ++i)
    {
        char c = ' ';
        if (i < numBytes)
        {
            char b = cast<char>(bytes[i]);
            if (IsPrintable(b))
            {
                c = b;
            }
        }
        line.Append(c);
    }
    line.Append('|');
    return line;
}

int ReadBytes(byte[bytesInLine]& bytes, BinaryReader& reader)
{
    int n = 0;
    for (int j = 0; j < bytesInLine; ++j)
    {
        int x = reader.ReadByteOrEnd();
        if (x != -1)
        {
            bytes[j] = cast<byte>(x);
            ++n;
        }
        else
        {
            return n;
        }
    }
    return n;
}

void HexDump(const string& fileName)
{
    if (!fileName.IsEmpty())
    {
        Console.WriteLine(GetFullPath(fileName) + ":");
    }
    BinaryReader reader(SharedPtr<Stream>());
    if (!fileName.IsEmpty())
    {
        reader = File.OpenBinary(fileName);
    }
    else if (IsConsole(0))
    {
        reader = BinaryReader(SharedPtr<Stream>(new FileStream(0)));
    }
    else
    {
        reader = BinaryReader(SharedPtr<Stream>(new BufferedStream(SharedPtr<Stream>(new FileStream(0)))));
    }
    byte[bytesInLine] bytes;
    int addr = 0u;
    int n = ReadBytes(bytes, reader);
    while (n != 0)
    {
        Console.WriteLine(HexDumpLine(addr, &bytes[0], n));
        addr = addr + n;
        n = ReadBytes(bytes, reader);
    }
    int size = addr;
    string sizeLine = ToHexString(size);
    sizeLine.Append(';');
    Console.WriteLine(sizeLine);
}

int main(int argc, const char** argv)
{
    try
    {
        List<string> fileNames;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown option '" + arg + "'");
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else
                        {
                            throw Exception("unknown option '-" + string(o) + "'");
                        }
                    }
                }
            }
            else 
            {
                fileNames.Add(arg);
            }
        }
        if (fileNames.IsEmpty())
        {
            fileNames.Add(string());
        }
        for (const string& fileName : fileNames)
        {
            HexDump(fileName);
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
