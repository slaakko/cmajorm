// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Os;
using paths;

int main(int argc, const char** argv)
{
    try
    {
        bool hasColors = IOCtl(1, IOControlItem.hasColors, null, 0) == 1;
        int screenWidth = IOCtl(1, IOControlItem.columns, null, 0);
        Fields additionalFields;
        SortField sortField = SortField.name;
        Flags flags = Flags.none;
        if (hasColors)
        {
            flags = cast<Flags>(flags | Flags.hasColors);
        }
        List<string> files;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg.Find('=') != -1)
                {
                    List<string> components = arg.Split('=');
                    if (components.Count() == 2)
                    {
                        if (components[0] == "--sort")
                        {
                            if (components[1] == "inode")
                            {
                                sortField = SortField.inode;
                            }
                            else if (components[1] == "nlinks")
                            {
                                sortField = SortField.nlinks;
                            }
                            else if (components[1] == "user")
                            {
                                sortField = SortField.user;
                            }
                            else if (components[1] == "size")
                            {
                                sortField = SortField.size;
                            }
                            else if (components[1] == "time")
                            {
                                sortField = SortField.time;
                            }
                            else
                            {
                                throw Exception("unknown argument '" + arg + "'");
                            }
                        }
                        else
                        {
                            throw Exception("unknown argument '" + arg + "'");
                        }
                    }
                    else
                    {
                        throw Exception("unknown argument '" + arg + "'");
                    }
                }
                else if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--all")
                {
                    flags = cast<Flags>(flags | Flags.all);
                }
                else if (arg == "--long")
                {
                    flags = cast<Flags>(flags | Flags.longFormat);
                }
                else if (arg == "--human-readable")
                {
                    flags = cast<Flags>(flags | Flags.humanReadableSize);
                }
                else if (arg == "--reverse")
                {
                    flags = cast<Flags>(flags | Flags.reverse);
                }
                else if (arg == "--fs")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.fs);
                }
                else if (arg == "--inode")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.inode);
                }
                else if (arg == "--access")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.access);
                }
                else if (arg == "--nlinks")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.nlinks);
                }
                else if (arg == "--user")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.user);
                }
                else if (arg == "--uid")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.uid);
                }
                else if (arg == "--group")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.group);
                }
                else if (arg == "--gid")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.gid);
                }
                else if (arg == "--size")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.size);
                }
                else if (arg == "--ctime")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.ctime);
                }
                else if (arg == "--mtime")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.mtime);
                }
                else if (arg == "--atime")
                {
                    additionalFields = cast<Fields>(additionalFields | Fields.atime);
                }
                else
                {
                    throw Exception("unknown argument '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown argument '" + arg + "'");
                }
                for (char o : options)
                {
                    bool unknown = false;
                    string uo;
                    switch (o)
                    {
                        case 'h':
                        {
                            PrintHelp();
                            return 1;
                        }
                        case 'a':
                        {
                            flags = cast<Flags>(flags | Flags.all);
                            break;
                        }
                        case 'l':
                        {
                            flags = cast<Flags>(flags | Flags.longFormat);
                            break;
                        }
                        case 'm':
                        {
                            flags = cast<Flags>(flags | Flags.humanReadableSize);
                            break;
                        }
                        case 'r':
                        {
                            flags = cast<Flags>(flags | Flags.reverse);
                            break;
                        }
                        case 'f':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.fs);
                            break;
                        }
                        case 'i':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.inode);
                            break;
                        }
                        case 'n':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.nlinks);
                            break;
                        }
                        case 's':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.size);
                            break;
                        }
                        case 'u':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.user);
                            break;
                        }
                        case 'g':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.group);
                            break;
                        }
                        case 'c':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.ctime);
                            break;
                        }
                        case 't':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.mtime);
                            break;
                        }
                        case 'e':
                        {
                            additionalFields = cast<Fields>(additionalFields | Fields.atime);
                            break;
                        }
                        case 'I':
                        {
                            sortField = SortField.inode;
                            break;
                        }
                        case 'N':
                        {
                            sortField = SortField.nlinks;
                            break;
                        }
                        case 'U':
                        {
                            sortField = SortField.user;
                            break;
                        }
                        case 'S':
                        {
                            sortField = SortField.size;
                            break;
                        }
                        case 'T':
                        {
                            sortField = SortField.time;
                            break;
                        }
                        default:
                        {
                            unknown = true;
                            uo.Append(o);
                            break;
                        }
                    }
                    if (unknown)
                    {
                        throw Exception("unknown argument '-" + uo + "'");
                    }
                }
            }
            else
            {
                files.Add(arg);
            }
        }
        if (files.IsEmpty())
        {
            files.Add(".");
        }
        if (!HasEnv("SHELL"))
        {
            files = Expand(files);
        }
        ListFiles(files, sortField, additionalFields, flags, screenWidth);
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
