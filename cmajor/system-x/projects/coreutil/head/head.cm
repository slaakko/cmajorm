// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;

void PrintHelp()
{
    Console.WriteLine("Usage: head [options] [FILE]...");
    Console.WriteLine("Print first 10 lines of each file to standard output.");
    Console.WriteLine("Options:");
    Console.WriteLine("--help | -h");
    Console.WriteLine("  Print help and exit.");
    Console.WriteLine("--lines=[-]NUM | -n=[-]NUM");
    Console.WriteLine("  Print first NUM lines instead of first 10;");
    Console.WriteLine("  with the leading '-' print all but the last NUM lines.");
}

void PrintHead(const List<string>& files, int lineCount)
{
    for (const string& file : files)
    {
        StreamReader reader(SharedPtr<Stream>());
        if (!file.IsEmpty())
        {
            reader = File.OpenRead(file);
        }
        else
        {
            reader = StreamReader(SharedPtr<Stream>(new FileStream(0)));
        }
        if (lineCount >= 0)
        {
            for (int i = 0; i < lineCount; ++i)
            {
                if (reader.Eof()) break;
                string line = reader.ReadLine();
                Console.WriteLine(line);
            }
        }
        else
        {
            List<string> lines;
            while (!reader.Eof())
            {
                string line = reader.ReadLine();
                lines.Add(line);
            }
            int n = cast<int>(lines.Count()) + lineCount;
            for (int i = 0; i < n; ++i)
            {
                Console.WriteLine(lines[i]);
            }
        }
    }
}

int main(int argc, const char** argv)
{
    try
    {
        int lineCount = 10;
        List<string> files;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg.Find('=') != -1)
                {
                    List<string> components = arg.Split('=');
                    if (components.Count() == 2)
                    {
                        if (components[0] == "--lines")
                        {
                            lineCount = ParseInt(components[1]);
                        }
                        else
                        {
                            throw Exception("unknown option '" + arg + "'");
                        }
                    }
                    else
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                if (arg.Find('=') != -1)
                {
                    List<string> components = arg.Split('=');
                    if (components.Count() == 2)
                    {
                        if (components[0] == "-n")
                        {
                            lineCount = ParseInt(components[1]);
                        }
                        else
                        {
                            throw Exception("unknown option '" + arg + "'");
                        }
                    }
                    else
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                }
                else
                {
                    string options = arg.Substring(1);
                    for (char o : options)
                    {
                        string uo;
                        bool unknown = false;
                        switch (o)
                        {
                            case 'h':
                            {
                                PrintHelp();
                                return 1;
                            }
                            default:
                            {
                                uo.Append(o);
                                unknown = true;
                                break;
                            }
                        }
                        if (unknown)
                        {
                            throw Exception("unknown option '-" + uo + "'");
                        }
                    }
                }
            }
            else
            {
                files.Add(arg);
            }
        }
        if (files.IsEmpty())
        {
            files.Add(string());
        }
        PrintHead(files, lineCount);
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
