// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;
using System.Security;

class EchoSetter
{
    public EchoSetter()
    {
        SetEcho(0, false);
    }
    public ~EchoSetter()
    {
        SetEcho(0, true);
    }
}

void PrintHelp()
{
    Console.Out() << "login [options]" << endl() << endl();
    Console.Out() << "Login to user account." << endl() << endl();
    Console.Out() << "Options:" << endl() << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl() << endl();
    Console.Out() << "--user USER | -u USER" << endl();
    Console.Out() << "  Set login account name to USER." << endl() << endl();
}

bool CheckPassword(int uid, const string& hash)
{
    StreamReader reader = File.OpenRead("/etc/passwd_hash");
    int lineNumber = 0;
    while (!reader.EndOfStream())
    {
        string line = reader.ReadLine();
        if (!line.IsEmpty() && !line.StartsWith("#"))
        {
            List<string> fields = line.Split(':');
            if (fields.Count() != 2)
            {
                throw SecurityException("invalid line " + ToString(lineNumber) + " in /etc/passwd_hash: wrong number of fields (" + ToString(fields.Count()) + "), should be 2.");
            }
            int puid = ParseInt(fields[0]);
            if (puid == uid)
            {
                if (hash == fields[1])
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        ++lineNumber;
    }
    throw SecurityException("no matching user account for UID " + ToString(uid) + " found from /etc/passwd_hash");
}

int main(int argc, const char** argv)
{
    try
    {
        int euid = GetEUID();
        if (euid != 0)
        {
            throw SecurityException("cannot login: login needs effective rights (EUID) of root account");
        }
        string userName;
        bool prevWasUser = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--user")
                {
                    prevWasUser = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown argument '" + arg + "'");
                }
                else
                {
                    bool unknown = false;
                    string uo;
                    for (char o : options)
                    {
                        switch (o)
                        {
                            case 'h':
                            {
                                PrintHelp();
                                return 1;
                            }
                            case 'u':
                            {
                                prevWasUser = true;
                                break;
                            }
                            default:
                            {
                                unknown = true; 
                                uo.Append(o);
                                break;
                            }
                        }
                        if (unknown)
                        {
                            throw Exception("unknown option '-" + uo + "'");
                        }
                    }
                }
            }
            else if (prevWasUser)
            {
                prevWasUser = false;
                userName = arg;
            }
        }
        User* user = null;
        Users users = GetUsers();
        if (userName.IsEmpty())
        {
            int uid = GetUID();
            user = users.GetUser(uid);
        }
        else
        {    
            user = users.GetUser(userName);
        }
        if (user == null)
        {
            throw SecurityException("user '" + userName + "' not found");
        }
        if (!user->HasPassword())
        {
            return 0;
        }
        int secs = 5;
        for (int i = 0; i < 3; ++i)
        {
            Console.Out() << "password for " << user->Name() << ": ";
            EchoSetter echoSetter;
            string password = Console.ReadLine();
            string hash = GetSha1MessageDigest(password);
            if (CheckPassword(user->UID(), hash))
            {
                return 0;
            }
            else
            {
                Sleep(Duration.FromSeconds(secs));
                secs = 2 * secs;
                if (i < 2)
                {
                    Console.Out() << "incorrect password, try again" << endl();
                }
            }
        }
        return 1;
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
