// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;
using System.RegularExpressions;
using System.Message;

int main(int argc, const char** argv)
{
	ShellEnvironment environment;
    try
    {
        Params params;
		Context context;
        if (argc > 0)
        {
            params.Add(argv[0]);
        }
        bool debug = false;
		List<string> files;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            params.Add(arg);
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--debug")
                {
                    debug = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                for (char o : options)
                {
                    bool unknown = false;
                    string uo;
                    switch (o)
                    {
                        case 'h':
                        {
                            PrintHelp();
                            return 1;
                        }
                        default:
                        {
                            unknown = true;
                            uo.Append(o);
                            break;
                        }
                    }
                    if (unknown)
                    {
                        throw Exception("unknown option '-" + uo + "'");
                    }
                }
            }
			else
			{
				files.Add(arg);
			}
        }
		if (files.IsEmpty())
		{
			Install();
			ParseEnvironmentFile("/etc/environment");
			environment.SetDebug(debug);
			SetupShellEnvironment(environment);
			SetupCredentials(environment);
			ChDir(environment.Home().Chars());
			MakeDefaultProfile(environment);
			MakeUserDirs(environment);
			StartTabCompletion(environment);
			RunProfile(environment, params, context);
			Run(environment, params, context);
			StopTabCompletion(environment);
		}
		else
		{
			for (const string& file : files)
			{
				environment.SetDebug(debug);
				SetupShellEnvironment(environment);
				SetupCredentials(environment);
				ChDir(environment.Home().Chars());
				RunFile(environment, params, context, file);
			}
		}
    }
    catch (const Exception& ex)
    {
        Terminal.Error() << ex.ToString() << endl();
		StopTabCompletion(environment);
        return 1;
    }
    return 0;
}
