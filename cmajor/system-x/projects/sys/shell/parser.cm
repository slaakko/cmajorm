// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.RegularExpressions;
using shtokens;

private int debugMode = 0;

void SetDebugParserMode()
{
	debugMode = GetDebugMode();
}

class ParserData
{
	public nothrow ParserData(ShellEnvironment& environment_, Params& params_, Context& context_) : environment(environment_), params(params_), context(context_)
	{
	}
	public ShellEnvironment& environment;
	public Params& params;
	public Context& context;
}

class ParseResult
{
    public nothrow ParseResult() : command()
    {
    }
    public Command* GetCommand() 
    {
        return command.Get();
    }
    public nothrow void ResetCommand(Command* command_)
    {
        command.Reset(command_);
    }
    public nothrow Command* ReleaseCommand() 
    {
        return command.Release();
    }
    private UniquePtr<Command> command;
}

Command* ParseCommand(TokenLexer& lexer, ParserData& parserData)
{
	SetDebugParserMode();
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("==================");
		WriteDebugMessage("> sh.parse.command");
	}
    ParseResult result;
    if (ParseCompleteCommand(lexer, result, parserData))
    {
        if (*lexer != END)
        {
            throw Exception("incomplete input");
        }
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.command.true");
		}
        Command* command = result.ReleaseCommand();
        return command;
    }
    else
    {
        throw Exception("syntax error");
    }
}

bool ParseCompleteCommand(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.complete.command");
	}
    if (ParseList(lexer, result, parserData))
    {
        if (ParseSeparator(lexer, result, parserData))
        {
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.complete.command.separator.true");
			}
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.complete.command.no.separator.true");
			}
            return true;
        }
        return true;
    }
    else
    {
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.complete.command.false");
		}
        return false;
    }
}

bool ParseSeparator(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.separator");
	}
    if (*lexer == AMP)
    {
        ++lexer;
        result.ResetCommand(new AsyncCommand(result.ReleaseCommand()));
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.separator.amp");
		}
        return true;
    }
    else if (*lexer == SEMI)
    {
        ++lexer;
        result.ResetCommand(new SyncCommand(result.ReleaseCommand()));
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.separator.semi");
		}
        return true;
    }
    else
    {
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.separator.false");
		}
        return false;
    }
}

bool ParseList(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.list");
	}
    int save = lexer.GetPos();
    ParseResult leftResult;
    if (ParseAndOr(lexer, leftResult, parserData))
    {
        int save2 = lexer.GetPos();
        while (ParseSeparator(lexer, leftResult, parserData))
        {
            save2 = lexer.GetPos();
            ParseResult rightResult;
            if (ParseAndOr(lexer, rightResult, parserData))
            {
                leftResult.ResetCommand(new SequenceCommand(leftResult.ReleaseCommand(), rightResult.ReleaseCommand()));
                save2 = lexer.GetPos();
            }
            else
            {
                break;
            }
        }
        lexer.SetPos(save2);
        result.ResetCommand(leftResult.ReleaseCommand());
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.list.true");
		}
        return true;
    }
    lexer.SetPos(save);
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.list.false");
	}
    return false;
}

bool ParseAndOr(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.and.or");
	}
    ParseResult leftResult;
    int save = lexer.GetPos();
    if (ParsePipeline(lexer, leftResult, parserData))
    {
        int save2 = lexer.GetPos();
        while (*lexer == AND_IF || *lexer == OR_IF)
        {
            if (*lexer == AND_IF)
            {
                ++lexer;
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.and.or.and-if");
				}
                ParseResult rightResult;
                if (ParsePipeline(lexer, rightResult, parserData))
                {
                    leftResult.ResetCommand(new AndIfCommand(leftResult.ReleaseCommand(), rightResult.ReleaseCommand()));
                    save2 = lexer.GetPos();
                }
                else
                {
                    break;
                }
            }
            else if (*lexer == OR_IF)
            {
                ++lexer;
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.and.or.or-if");
				}
                ParseResult rightResult;
                if (ParsePipeline(lexer, rightResult, parserData))
                {
                    leftResult.ResetCommand(new OrIfCommand(leftResult.ReleaseCommand(), rightResult.ReleaseCommand()));
                    save2 = lexer.GetPos();
                }
                else
                {
                    break;
                }
            }
        }
        lexer.SetPos(save2);
        result.ResetCommand(leftResult.ReleaseCommand());
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.and.or.true");
		}
        return true;
    }
    lexer.SetPos(save);
    return false;
}

bool ParsePipeline(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.pipeline");
	}
    int save = lexer.GetPos();
    bool bang = false;
    if (*lexer == BANG)
    {
        ++lexer;
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("> sh.parse.pipeline.bang");
		}
        bang = true;
    }
    ParseResult leftResult;
    if (ParseCommand(lexer, leftResult, parserData))
    {
        int save2 = lexer.GetPos();
        while (*lexer == PIPE)
        {
            ++lexer;
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("> sh.parse.pipeline.pipe");
			}
            ParseResult rightResult;
            if (ParseCommand(lexer, rightResult, parserData))
            {
                leftResult.ResetCommand(new PipeCommand(leftResult.ReleaseCommand(), rightResult.ReleaseCommand()));
                save2 = lexer.GetPos();
            }
            else
            {
                break;
            }
        }
        if (bang)
        {
            result.ResetCommand(new BangCommand(leftResult.ReleaseCommand()));
        }
        else
        {
            result.ResetCommand(leftResult.ReleaseCommand());
        }
        lexer.SetPos(save2);
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.pipeline.true");
		}
        return true;
    }
    lexer.SetPos(save);
    return false;
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.pipeline.false");
	}
}

bool ParseCommand(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
    if (ParseSimpleCommand(lexer, result, parserData))
    {
        return true;
    }
    else if (ParseCompoundCommand(lexer, result, parserData))
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool ParseSimpleCommand(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.simple.command");
	}
    int save = lexer.GetPos();
    ParseResult prefixResult;
    if (ParseCommandPrefix(lexer, prefixResult, parserData))
    {
        ParseResult simpleCommandResult;
        SimpleCommand* simpleCommand = null;
        if (ParseCommandName(lexer, simpleCommand, simpleCommandResult, parserData))
        {
            ParseResult suffixResult;
            if (ParseCommandSuffix(lexer, simpleCommand, suffixResult, parserData))
            {
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.simple.command.prefix.suffix.true");
				}
                result.ResetCommand(new PrefixSuffixCommand(prefixResult.ReleaseCommand(), simpleCommandResult.ReleaseCommand(), suffixResult.ReleaseCommand()));
                return true;
            }
            else
            {
                result.ResetCommand(new PrefixSuffixCommand(prefixResult.ReleaseCommand(), simpleCommandResult.ReleaseCommand(), null));
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.simple.command.prefix.no.suffix.true");
				}
                return true;
            }
        }
        else
        {
            result.ResetCommand(new PrefixSuffixCommand(prefixResult.ReleaseCommand(), null, null));
            return true;
        }
    }
    else 
    {
        SimpleCommand* simpleCommand = null;
        ParseResult simpleCommandResult;
        if (ParseCommandName(lexer, simpleCommand, simpleCommandResult, parserData))
        {
            ParseResult suffixResult;
            if (ParseCommandSuffix(lexer, simpleCommand, suffixResult, parserData))
            {
                result.ResetCommand(new PrefixSuffixCommand(null, simpleCommandResult.ReleaseCommand(), suffixResult.ReleaseCommand()));
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.simple.command.suffix.true");
				}
                return true;
            }
            else
            {
                result.ResetCommand(new PrefixSuffixCommand(null, simpleCommandResult.ReleaseCommand(), null));
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.simple.command.no.suffix.true");
				}
                return true;
            }
        }
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.simple.command.false");
	}
    lexer.SetPos(save);
    return false;
}

bool ParseCommandPrefix(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.prefix");
	}
    UniquePtr<PrefixCommand> prefixCommand(new PrefixCommand());
    bool prefixParsed = false;
    int save = lexer.GetPos();
    while (*lexer != END)
    {
        bool ioNumberParsed = false;
        bool ioFileParsed = false;
        bool assignmentWordParsed = false;
        int ioNumber = -1;
        ParseResult singleResult;
		string str;
        if (ParseIONumber(lexer, ioNumber, str))
        {
            ioNumberParsed = true;
        }
        if (ParseIOFile(lexer, ioNumber, singleResult))
        {
            ioFileParsed = true;
        }
        if (!ioFileParsed && !ioNumberParsed)
        {
            if (ParseAssignmentWord(lexer, singleResult, parserData))
            {
                assignmentWordParsed = true;
            }
        }
        if (ioNumberParsed && !ioFileParsed)
        {
            break;
        }
        else if (ioFileParsed || assignmentWordParsed)
        {
            prefixParsed = true;
            prefixCommand->Add(singleResult.ReleaseCommand());
            save = lexer.GetPos();
        }
        else
        {
            break;
        }
    }
    lexer.SetPos(save);
    if (prefixParsed)
    {
        result.ResetCommand(prefixCommand.Release());
    }
	if (prefixParsed)
	{
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.prefix.true");
		}
	}
	else
	{
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.prefix.false");
		}
	}
    return prefixParsed;
}

bool ParseIONumber(TokenLexer& lexer, int& ioNumber, string& str)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.io.number");
	}
    if (*lexer == WORD)
    {
		str = ToUtf8(lexer.CurrentToken().match);
        if (ParseInt(str, ioNumber))
        {
            ++lexer;
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.io.number.true.str=" + str);
			}
            return true;
        }
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.io.number.false");
	}
    return false;
}

bool ParseAssignmentWord(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.assignment.word");
	}
    if (*lexer == WORD)
    {
        if ((lexer.CurrentToken().flags & TokenFlags.hasAssignment) != TokenFlags.none)
        {
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("> sh.parse.assignment.word.assignment=true");
			}
            List<ustring> components = lexer.CurrentToken().match.Split('=');
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("> sh.parse.assignment.word.components=" + ToString(components.Count()));
			}
            if (components.Count() == 2)
            {
                ustring name = components[0];
                ustring value = components[1];
				TokenFlags globalFlags = TokenFlags.none;
				List<ShellToken> valueTokens = TokenizeLine(value, globalFlags);
				Expand(valueTokens, parserData.environment, parserData.params, parserData.context, globalFlags);
				value = MakeValue(valueTokens);
                result.ResetCommand(new AssignmentCommand(name, value));
                ++lexer;
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.assignment.word.true");
				}
                return true;
            }
        }
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.assignment.word.false");
	}
    return false;
}

bool ParseIOFile(TokenLexer& lexer, int ioNumber, ParseResult& result)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.io.file");
	}
    int save = lexer.GetPos();
    int ioOp = -1;
    switch (*lexer)
    {
        case LESSAND:
        {
            ioOp = LESSAND;
            ++lexer;
            break;
        }
        case LESS:
        {
            ioOp = LESS;
            ++lexer;
            break;
        }
        case GREATAND:
        {
            ioOp = GREATAND;
            ++lexer;
            break;
        }
        case GREAT:
        {
            ioOp = GREAT;
            ++lexer;
            break;
        }
        case DGREAT:
        {
            ioOp = DGREAT;
            ++lexer;
            break;
        }
        case LESSGREAT:
        {
            ioOp = LESSGREAT;
            ++lexer;
            break;
        }
        case CLOBBER:
        {
            ioOp = CLOBBER;
            ++lexer;
            break;
        }
        default:
        {
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.io.file.false");
			}
            return false;
        }
    }
    if (*lexer == WORD)
    {
        string filename = ToUtf8(lexer.CurrentToken().match);
        result.ResetCommand(new IORedirectCommand(ioOp, ioNumber, filename));
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.io.file.true");
		}
        ++lexer;
        return true;
    }
    lexer.SetPos(save);
    return false;
}

bool ParseCommandSuffix(TokenLexer& lexer, SimpleCommand* simpleCommand, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.suffix");
	}
    UniquePtr<SuffixCommand> suffixCommand(new SuffixCommand());
    int save = lexer.GetPos();
    bool suffixParsed = false;
    while (*lexer != END)
    {
        ParseResult singleResult;
        bool ioNumberParsed = false;
        bool ioFileParsed = false;
        bool wordParsed = false;
        int ioNumber = -1;
		string str;
        if (ParseIONumber(lexer, ioNumber, str))
        {
            ioNumberParsed = true;
        }
        if (ParseIOFile(lexer, ioNumber, singleResult))
        {
            ioFileParsed = true;
        }
        if (!ioFileParsed && !ioNumberParsed)
        {
            if (*lexer == WORD)
            {
                simpleCommand->AddArg(ToUtf8(lexer.CurrentToken().match));
                wordParsed = true;
                ++lexer;
            }
        }
        if (ioNumberParsed && !ioFileParsed)
        {
			simpleCommand->AddArg(str);
			wordParsed = true;
        }
        if (wordParsed || ioFileParsed)
        {
            suffixParsed = true;
            if (ioFileParsed)
            {
                suffixCommand->Add(singleResult.ReleaseCommand());
            }
            save = lexer.GetPos();
        }
        else
        {
            break;
        }
    }
    lexer.SetPos(save);
    if (suffixParsed)
    {
        result.ResetCommand(suffixCommand.Release());
    }
	if (suffixParsed)
	{
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.suffix.true");
		}
	}
	else
	{
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.suffix.false");
		}
	}
    return suffixParsed;
}

bool ParseCommandName(TokenLexer& lexer, SimpleCommand*& simpleCommand, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.command.name");
	}
    simpleCommand = null;
    if (*lexer == WORD)
    {
        simpleCommand = new SimpleCommand(ToUtf8(lexer.CurrentToken().match));
        result.ResetCommand(simpleCommand);
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("< sh.parse.command.name.true");
		}
        ++lexer;
        return true;
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.command.name.false");
	}
    return false;
}

bool ParseCompoundCommand(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
    if (ParseBraceGroup(lexer, result, parserData))
    {
        return true;
    }
    else if (ParseSubshell(lexer, result, parserData))
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool ParseBraceGroup(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.brace.group");
	}
    int save = lexer.GetPos();
    if (*lexer == LBRACE)
    {
        ++lexer;
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("> sh.parse.brace.group.lbrace");
		}
        if (ParseCompleteCommand(lexer, result, parserData))
        {
            if (*lexer == RBRACE)
            {
                ++lexer;
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.brace.group.rbrace.true");
				}
                Command* command = result.ReleaseCommand();
                result.ResetCommand(new BraceGroupCommand(command));
                return true;
            }
            else
            {
                lexer.SetPos(save);
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.brace.group.false");
				}
                return false;
            }
        }
        else
        {
            lexer.SetPos(save);
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.brace.group.false");
			}
            return false;
        }
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.brace.group.false");
	}
    lexer.SetPos(save);
    return false;
}

bool ParseSubshell(TokenLexer& lexer, ParseResult& result, ParserData& parserData)
{
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("> sh.parse.subshell");
	}
    int save = lexer.GetPos();
    if (*lexer == LPAREN)
    {
        ++lexer;
		if ((debugMode & debugShell) != 0)
		{
			WriteDebugMessage("> sh.parse.subshell.lparen");
		}
        if (ParseCompleteCommand(lexer, result, parserData))
        {
            if (*lexer == RPAREN)
            {
                ++lexer;
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.subshell.rparen.true");
				}
                Command* command = result.ReleaseCommand();
                result.ResetCommand(new SubshellCommand(command));
                return true;
            }
            else
            {
                lexer.SetPos(save);
				if ((debugMode & debugShell) != 0)
				{
					WriteDebugMessage("< sh.parse.subshell.false");
				}
                return false;
            }
        }
        else
        {
            lexer.SetPos(save);
			if ((debugMode & debugShell) != 0)
			{
				WriteDebugMessage("< sh.parse.subshell.false");
			}
            return false;
        }
    }
	if ((debugMode & debugShell) != 0)
	{
		WriteDebugMessage("< sh.parse.subshell.false");
	}
    lexer.SetPos(save);
    return false;
}
