// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Os;
using paths;

void PrintHelp()
{
    Console.Out() << "time [options] COMMAND [ARGS...]" << endl() << endl();
    Console.Out() << "Prints command execution times to standard output." << endl() << endl();
    Console.Out() << "Options:" << endl() << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl() << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        List<string> args;
        bool programSeen = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (!programSeen)
            {
                if (arg.StartsWith("--"))
                {
                    if (arg == "--help")
                    {
                        PrintHelp();
                        return 1;
                    }
                    else
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                }
                else if (arg.StartsWith("-"))
                {
                    string options = arg.Substring(1);
                    if (options.IsEmpty())
                    {
                        throw Exception("unknown argument '" + arg + "'");
                    }
                    else
                    {
                        bool unknown = false;
                        string uo;
                        for (char o : options)
                        {
                            switch (o)
                            {
                                case 'h':
                                {
                                    PrintHelp();
                                    return 1;
                                }
                                default:
                                {
                                    unknown = true; 
                                    uo.Append(o);
                                    break;
                                }
                            }
                            if (unknown)
                            {
                                throw Exception("unknown option '-" + uo + "'");
                            }
                        }
                    }
                }
                else
                {
                    programSeen = true;
                    args.Add(arg);
                }
            }
            else
            {
                args.Add(arg);
            }
        }
        if (args.IsEmpty())
        {
            throw Exception("no program to execute");
        }
        int pid = Fork();
        if (pid == 0)
        {
            string program = GetProgramFilePath(args[0]);
            List<string> progArgs;
            for (int i = 1; i < args.Count(); ++i)
            {
                progArgs.Add(args[i]);
            }
            Exec(program, progArgs);
        }
        else
        {
            byte exitCode = 0u;
            if (Wait(&exitCode) != -1)
            {
                Duration userTime;
                Duration sleepTime;
                Duration systemTime;
                ChildTimes(userTime, sleepTime, systemTime);
                string tms = "Process " + ToString(pid) + ":\nuser time:   " + DurationStr(userTime) + "\nsleep time:  " + DurationStr(sleepTime) + "\nsystem time: " + DurationStr(systemTime) + "\n";
                Console.Out() << tms << endl();
            }
            else
            {
                throw Exception("error executing '" + args[0] + "'");
            }
        }        
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
