// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

const int END = 0;
const int PUT = 1;
const int BUILD = 2;
const int ANY = 3;

class CommandTokens
{
    static CommandTokens() : instance(new CommandTokens())
    {
    }
    public static CommandTokens& Instance() 
    {
        return *instance;
    }
    public int GetToken(const ustring& word) const
    {
        Map<ustring, int>.ConstIterator it = tokenMap.CFind(word);
        if (it != tokenMap.CEnd())
        {
            return it->second;
        }
        else
        {
            return ANY;
        }
    }
    private CommandTokens()
    {
        tokenMap[u"put"] = PUT;
        tokenMap[u"build"] = BUILD;
    }
    private static UniquePtr<CommandTokens> instance;
    private Map<ustring, int> tokenMap;
}

class CommandLexer
{
    public nothrow CommandLexer(const List<ustring>& words_) : words(words_), pos(0), farthestPos(0)
    {
    }
    public nothrow int operator*() const
    {
        if (pos >= words.Count()) 
        {
            return END;
        }
        else
        {
            return CommandTokens.Instance().GetToken(words[pos]);
        }
    }
    public nothrow inline const ustring& GetWord() const
    {
        if (pos >= words.Count())
        {
            return empty;
        }
        else
        {
            return words[pos];
        }
    }
    public nothrow void operator++() 
    {
        ++pos;
        if (pos > farthestPos)
        {
            farthestPos = pos;
        }
    }
    public nothrow inline int GetPos() const
    {
        return pos;
    }
    public nothrow inline void SetPos(int pos_)
    {
        pos = pos_;
    }
    public nothrow void PrintErrorLines()
    {
        bool first = true;
        for (const ustring& word : words)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                Console.Out() << " ";
            }
            Console.Out() << word;
        }
        Console.WriteLine();
        ustring s;
        for (int i = 0; i < farthestPos; ++i)
        {
            if (i > 0)
            {
                s.Append(' ');
            }
            s.Append(' ', words[i].Length());
        }
        Console.Out() << s << "^" << endl();
    }
    private const List<ustring>& words;
    private int pos;
    private int farthestPos;
    private ustring empty;
}
