[hpp]#include <sngjson/json/JsonApi.hpp>
[hpp]#include <soulng/util/Json.hpp>
[cpp]#include <sngjson/json/JsonTokens.hpp>
[cpp]#include <sngjson/json/JsonLexer.hpp>
[cpp]#include <sngjson/json/TokenValueParsers.hpp>

using namespace JsonTokens;
using namespace soulng::lexer;

parser api(SNGJSON_JSON_API) JsonParser
{
    uselexer JsonLexer;
    main;
    
    Value : soulng::util::JsonValue*
        ::= STRING{ Token token = lexer.GetToken(pos); return new soulng::util::JsonString(sngjson::json::ParseStringLiteral(lexer.FileName(), token)); }
        |   NUMBER{ Token token = lexer.GetToken(pos); return new soulng::util::JsonNumber(sngjson::json::ParseNumber(lexer.FileName(), token)); }
        |   Object:o{ return o; }
        |   Array:a{ return a; }
        |   TRUE{ return new soulng::util::JsonBool(true); }
        |   FALSE{ return new soulng::util::JsonBool(false); }
        |   NULLTOKEN{ return new soulng::util::JsonNull(); }
        ;
        
    Object(var std::unique_ptr<soulng::util::JsonObject> o) : soulng::util::JsonObject*
        ::= LBRACE{ o.reset(new soulng::util::JsonObject()); } (Field(o.get()):field % COMMA)? RBRACE{ return o.release(); }
        ;
        
    Field(soulng::util::JsonObject* o, var std::u32string n)
        ::= STRING{ Token token = lexer.GetToken(pos); n = sngjson::json::ParseStringLiteral(lexer.FileName(), token); } COLON Value:v{ std::unique_ptr<soulng::util::JsonValue> item = std::unique_ptr<soulng::util::JsonValue>(v); o->AddField(n, std::move(item)); }
        ;
        
    Array(var std::unique_ptr<soulng::util::JsonArray> a) : soulng::util::JsonArray*
        ::= LBRACKET{ a.reset(new soulng::util::JsonArray()); } (Value:v{ std::unique_ptr<soulng::util::JsonValue> item = std::unique_ptr<soulng::util::JsonValue>(v); a->AddItem(std::move(item)); } % COMMA)? RBRACKET{ return a.release(); }
        ;
}
