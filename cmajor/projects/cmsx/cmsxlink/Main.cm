using System;
using System.IO;
using System.Collections;
using cmsx.object;

public nothrow const char* Version()
{
    return "0.2.0";
}

void PrintHelp()
{
    Console.Out() << "Cmajor System X Linker version " << Version() << endl();
    Console.Out() << "Usage: cmsxlink [options] { file.o | file.a }" << endl();
    Console.Out() << "Options:" << endl();
    Console.Out() << "--verbose (-v)" << endl();
    Console.Out() << "  be verbose" << endl();
    Console.Out() << "--help (-h)" << endl();
    Console.Out() << "  print help" << endl();
    Console.Out() << "--out=FILE (-o=FILE)" << endl();
    Console.Out() << "  set output file name to FILE." << endl();
    Console.Out() << "  default is 'a.out'." << endl();
    Console.Out() << "--clsid=FILE (-c=FILE)" << endl();
    Console.Out() << "  read class id's from FILE." << endl();
    Console.Out() << "--stack=STACKSIZE (-s=STACKSIZE)" << endl();
    Console.Out() << "  set stack segment size to STACKSIZE bytes." << endl();
    Console.Out() << "  default is 64K bytes." << endl();
    Console.Out() << "--debug (-d)" << endl();
    Console.Out() << "  debug linking" << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        string cmajorRootDir = RtGetEnvironmentVariable("CMAJOR_ROOT");
        if (cmajorRootDir.IsEmpty())
        {
            throw Exception("please set CMAJOR_ROOT environment variable to /path/to/cmajor directory");
        }
        string mainPath = Path.Combine(cmajorRootDir, "projects/cmsx/cmsxrt/Main.o");
        List<string> fileNames;
        fileNames.Add(GetFullPath(mainPath));
        bool verbose = false;
        bool debug = false;
        ulong stackSize = 64u * cast<ulong>(1024u);
        ulong poolSize = 4u * cast<ulong>(1024u);
        string executableFileName = GetFullPath("a.out");
        string clsIdFileName;
        bool userFilesGiven = false;
        bool removeUnusedCode = true;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("-"))
            {
                if (arg.Find('=') != -1)
                {
                    List<string> components = arg.Split('=');
                    if (components.Count() == 2)
                    {
                        if (components[0] == "-o" || components[0] == "--out")
                        {
                            executableFileName = GetFullPath(components[1]);
                        }
                        else if (components[0] == "-c" || components[0] == "--clsid")
                        {
                            clsIdFileName = GetFullPath(components[1]);
                        }
                        else if (components[0] == "-s" || components[0] == "--stack")
                        {
                            stackSize = ParseULong(components[1]);
                        }
                        else
                        {
                            throw Exception("unknown option '" + arg + "'");
                        }
                    }
                    else
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                }
                else if (arg == "-v" || arg == "--verbose")
                {
                    verbose = true;
                }
                else if (arg == "-h" || arg == "--help")
                {
                    PrintHelp();
                    return 0;
                }
                else if (arg == "-d" || arg == "--debug")
                {
                    debug = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else
            {
                fileNames.Add(GetFullPath(arg));
                userFilesGiven = true;
            }
        }
        if (executableFileName.IsEmpty())
        {
            PrintHelp();
            throw Exception("output executable file name missing");
        }
        if (!userFilesGiven)
        {
            PrintHelp();
            throw Exception("no object or library files given");
        }
        if (verbose)
        {
            Console.Out() << "Cmajor System X Linker version " << Version() << endl();
        }
        ClassIdMap classIdMap;
        if (!clsIdFileName.IsEmpty())
        {
            classIdMap.Read(clsIdFileName);
        }
        List<UniquePtr<BinaryFile>> binaryFiles;
        for (const string& fileName : fileNames)
        {
            if (verbose)
            {
                Console.Out() << "> " << fileName << endl();
            }
            UniquePtr<BinaryFile> binaryFile = ReadBinaryFile(fileName);
            binaryFile->AddSymbolsToAddressMap();
            binaryFiles.Add(Rvalue(binaryFile));
        }
        ExecutableFile executable(executableFileName, true, stackSize, poolSize);
        Link(executable, binaryFiles, classIdMap, removeUnusedCode, debug);
        if (verbose)
        {
            Console.Out() << "==> " << executableFileName << endl();
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
