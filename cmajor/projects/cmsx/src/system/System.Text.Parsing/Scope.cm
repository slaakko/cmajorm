// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public class Scope : ParsingObject
    {
        public nothrow Scope(const ustring& name_, Scope* enclosingScope_) : base(name_, enclosingScope_), ns(null), fullNameMap(), shortNameMap()
        {
        }
        public override void Accept(Visitor& visitor)
        {
            for (const Pair<ustring, ParsingObject*>& p : fullNameMap)
            {
                p.second->Accept(visitor);
            }
        }
        public nothrow inline Namespace* Ns() const
        {
            return ns;
        }
        public nothrow inline void SetNs(Namespace* ns_)
        {
            ns = ns_;
        }
        public void AddNamespace(Namespace* nsToAdd)
        {
            Own(nsToAdd);
            Namespace* parent = GetGlobalScope()->Ns();
            List<ustring> components = nsToAdd->FullName().Split(u'.');
            if (components.IsEmpty())
            {
                throw Exception("Scope.AddNamespace: name components empty");
            }
            long n = components.Count();
            for (long i = 0; i < n - 1; ++i)
            {
                ustring namespaceName = components[i];
                Scope* enclosingScope = parent->GetScope();
                ParsingObject* o = enclosingScope->Get(namespaceName);
                if (o != null)
                {
                    if (o is Namespace*)
                    {
                        parent = cast<Namespace*>(o);
                    }
                    else
                    {
                        throw Exception("object '" + ToUtf8(namespaceName) + "' is not a namespace");
                    }
                }
                else
                {
                    parent = new Namespace(namespaceName, enclosingScope);
                    parent->GetScope()->SetName(namespaceName);
                    parent->GetScope()->SetNs(parent);
                    enclosingScope->Add(parent);
                    Own(parent);
                }
            }
            ustring name = components[n - 1];
            nsToAdd->SetName(name);
            nsToAdd->GetScope()->SetName(name);
            nsToAdd->SetEnclosingScope(parent->GetScope());
            nsToAdd->GetScope()->SetEnclosingScope(parent->GetScope());
            parent->GetScope()->Add(nsToAdd);
        }
        public Namespace* GetNamespace(const ustring& fullNamespaceName) const
        {
            ParsingObject* o = GetQualifiedObject(fullNamespaceName);
            if (o != null)
            {
                if (o is Namespace*)
                {
                    return cast<Namespace*>(o);
                }
                else
                {
                    throw Exception("object '" + ToUtf8(fullNamespaceName) + "' is not a namespace");
                }
            }
            return null;
        }
        public void Add(ParsingObject* o)
        {
            Own(o);
            ustring fullName = o->FullName();
            if (!fullNameMap.Insert(MakePair(fullName, o)).second)
            {
                string msg = "object '" + ToUtf8(fullName) + "' already exists in full name map (detected in scope '" + ToUtf8(FullName()) + "')";
                throw Exception(msg);
            }
            if (!shortNameMap.Insert(MakePair(o->Name(), o)).second)
            {
                string msg = "object '" + ToUtf8(fullName) + "' ('" + ToUtf8(o->Name()) + "') already exists in short name map (detected in scope '" + ToUtf8(FullName()) + "')";
                throw Exception(msg);
            }
        }
        public ParsingObject* Get(const ustring& objectName) const
        {
            if (objectName.Find(u'.') != -1)
            {
                HashMap<ustring, ParsingObject*>.ConstIterator it = fullNameMap.CFind(objectName);
                if (it != fullNameMap.CEnd())
                {
                    return it->second;
                }
                ParsingObject* o = GetQualifiedObject(objectName);
                if (o != null)
                {
                    return o;
                }
            }
            else
            {
                HashMap<ustring, ParsingObject*>.ConstIterator it = shortNameMap.CFind(objectName);
                if (it != shortNameMap.CEnd())
                {
                    return it->second;
                }
            }
            return null;
        }
        public HashMap<ustring, ParsingObject*>& FullNameMap() 
        {
            return fullNameMap;
        }
        public void Dump(CodeFormatter& formatter)
        {
            formatter.WriteLine("Scope '" + ToUtf8(FullName()) + "'");
            formatter.WriteLine("{");
            formatter.IncIndent();
            for (const Pair<ustring, ParsingObject*>& p : fullNameMap)
            {
                formatter.WriteLine(ToUtf8(p.first));
            }
            formatter.WriteLine("---");
            for (const Pair<ustring, ParsingObject*>& p : shortNameMap)
            {
                formatter.WriteLine(ToUtf8(p.first));
            }
            formatter.DecIndent();
            formatter.WriteLine("}");
        }
        private nothrow Scope* GetGlobalScope() const
        {
            Scope* globalScope = this;
            while (globalScope->EnclosingScope() != null)
            {
                globalScope = globalScope->EnclosingScope();
            }
            return globalScope;
        }
        private ParsingObject* GetQualifiedObject(const ustring& qualifiedObjectName) const
        {
            List<ustring> components = qualifiedObjectName.Split(u'.');
            long n = components.Count();
            Scope* scope = this;
            while (scope != null)
            {
                Scope* subScope = scope;
                long i = 0; 
                HashMap<ustring, ParsingObject*>.ConstIterator it = subScope->shortNameMap.CFind(components[i]);
                while (it != subScope->shortNameMap.CEnd())
                {
                    if (i == n - 1)
                    {
                        return it->second;
                    }
                    else
                    {
                        ++i;
                        subScope = it->second->GetScope();
                    }
                    it = subScope->shortNameMap.CFind(components[i]);
                }
                scope = scope->EnclosingScope();
            }
            return null;
        }
        private Namespace* ns;
        private HashMap<ustring, ParsingObject*> fullNameMap;
        private HashMap<ustring, ParsingObject*> shortNameMap;
    }
}
