// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Text.Parsing
{
    public ustring XmlCharStr(uchar c)
    {
        switch (c)
        {
            case u'&': return u"&amp;";
            case u'<': return u"&lt;";
            case u'>': return u"&gt;";
            case u'\a': return u"\\a";
            case u'\b': return u"\\b";
            case u'\f': return u"\\f";
            case u'\n': return u"\\n";
            case u'\r': return u"\\r";
            case u'\t': return u"\\t";
            case u'\v': return u"\\v";
            default:
            {
                uint x = cast<uint>(c);
                if (x >= 32u && x <= 126u)
                {
                    return ustring(c, 1);
                }
                else
                {
                    return u"\\x" + ToUtf32(ToHexString(x));
                }
            }
        }
        return ustring();
    }
    
    public ustring XmlEscape(const ustring& s)
    {
        ustring result;
        for (uchar c : s)
        {
            result.Append(XmlCharStr(c));
        }
        return result;
    }
    
    public class XmlLog
    {
        public nothrow XmlLog(StreamWriter& writer_, int maxLineLength_) : writer(writer_), maxLineLength(maxLineLength_), indent(0)
        {
        }
        public inline nothrow void IncIndent() 
        {
            ++indent;
        }
        public inline nothrow void DecIndent()
        {
            --indent;
        }
        public void WriteBeginRule(const ustring& ruleName)
        {
            Write(u"<" + ruleName + u">");
        }
        public void WriteEndRule(const ustring& ruleName)
        {
            Write(u"</" + ruleName + u">");
        }
        public void WriteTry(const ustring& s)
        {
            WriteElement(u"try", s);
        }
        public void WriteSuccess(const ustring& match)
        {
            WriteElement(u"success", match);
        }
        public void WriteFail() 
        {
            Write(u"<fail/>");
        }
        public void WriteElement(const ustring& elementName, const ustring& elementContent)
        {
            ustring converted = XmlEscape(elementContent);
            int convertedLength = cast<int>(converted.Length());
            int lineLength = indent + 2 * cast<int>(elementName.Length()) + 5 + convertedLength;
            ustring s = converted;
            if (maxLineLength != 0 && lineLength > maxLineLength)
            {
                s = converted.Substring(0, Max(0, convertedLength - (lineLength - maxLineLength))) + u"...";
            }
            Write(u"<" + elementName + u">" + s + u"</" + elementName + u">");
        }
        public void Write(const ustring& s)
        {
            if (indent > 0)
            {
                writer.Write(string(' ', indent));
            }
            writer.WriteLine(s);
        }
        public inline nothrow int MaxLineLength() const
        {
            return maxLineLength;
        }
        private StreamWriter& writer;
        private int maxLineLength;
        private int indent;
    }
}
