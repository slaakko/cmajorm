// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public class Namespace : ParsingObject
    {
        public Namespace(const ustring& qualifiedName_, Scope* enclosingScope_) : base(qualifiedName_, enclosingScope_)
        {
            Scope* containerScope = new Scope(Name(), EnclosingScope());
            Own(containerScope);
            SetContainerScope(containerScope);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            GetScope()->Accept(visitor);
            visitor.EndVisit(*this);
        }
        public void Import(Namespace* that, ParsingDomain* targetDomain, bool importExternals)
        {
            targetDomain->BeginNamespace(that->Name());
            Scope* containerScope = that->ContainerScope();
            for (const Pair<ustring, ParsingObject*>& p : containerScope->FullNameMap())
            {
                ParsingObject* o = p.second;
                if (o is Grammar*)
                {
                    if (!importExternals && o->IsExternal()) continue;
                    Grammar* grammar = cast<Grammar*>(o);
                    grammar->SetEnclosingScope(targetDomain->CurrentScope());
                    targetDomain->AddGrammar(grammar);
                }
                else if (o is Namespace*)
                {
                    Import(cast<Namespace*>(o), targetDomain, importExternals);
                }
            }
            targetDomain->EndNamespace();
        }
    }
}
