// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public class delegate void ParsingAction(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass);
    
    public class delegate void FailureAction(ParsingData* parsingData);
    
    public class ActionParser : UnaryParser
    {
        public ActionParser(const ustring& name_, Parser* child_) : base(name_, child_, child_->Info())
        {
        }
        public ustring MethodName()
        {
            return Name() + u"Action";
        }
        public ustring VariableName()
        {
            ustring name = Name();
            if (name.IsEmpty())
            {
                return u"ActionParser";
            }
            return ToLower(name.Substring(0, 1)) + name.Substring(1) + u"ActionParser";
        }
        public ParsingAction Action() const
        {
            return action;
        }
        public void SetAction(ParsingAction action_) 
        {
            action = action_;
        }
        public FailureAction Failure() const
        {
            return failureAction;
        }
        public void SetFailure(FailureAction failureAction_)
        {
            failureAction = failureAction_;
        }
        public System.Text.Parsing.CodeDom.CompoundStatement* SuccessCode() const
        {
            return successCode.Get();
        }
        public void SetSuccessCode(System.Text.Parsing.CodeDom.CompoundStatement* successCode_)
        {
            successCode.Reset(successCode_);
        }
        public System.Text.Parsing.CodeDom.CompoundStatement* FailureCode() const
        {
            return failureCode.Get();
        }
        public void SetFailureCode(System.Text.Parsing.CodeDom.CompoundStatement* failureCode_)
        {
            failureCode.Reset(failureCode_);
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            Span actionSpan = scanner.GetSpan();
            Match match = Child()->Parse(scanner, stack, parsingData);
            if (match.Hit())
            {
                if (action != ParsingAction())
                {
                    bool pass = true;
                    actionSpan.end = scanner.GetSpan().start;
                    const uchar* matchBegin = scanner.Start() + actionSpan.start;
                    const uchar* matchEnd = scanner.Start() + actionSpan.end;
                    action(matchBegin, matchEnd, actionSpan, scanner.FileName(), parsingData, pass);
                    if (!pass)
                    {
                        return Match.Nothing();
                    }
                }
            }
            else if (failureAction != FailureAction())
            {
                failureAction(parsingData);
            }
            return match;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Child()->Accept(visitor);
            visitor.EndVisit(*this);
        }
        private ParsingAction action;
        private FailureAction failureAction;
        private UniquePtr<System.Text.Parsing.CodeDom.CompoundStatement> successCode;
        private UniquePtr<System.Text.Parsing.CodeDom.CompoundStatement> failureCode;
    }

    public class CodeExpandingVisitor : System.Text.Parsing.CodeDom.Visitor
    {
        public CodeExpandingVisitor(HashMap<ustring, ustring>& expandMap_) : expandMap(expandMap_)
        {
        }
        public override void Visit(System.Text.Parsing.CodeDom.Identifier& id)
        {
            HashMap<ustring, ustring>.ConstIterator it = expandMap.CFind(id.Name());
            if (it != expandMap.CEnd())
            {
                const ustring& expandedName = it->second;
                id.SetName(expandedName);
            }
        }
        private HashMap<ustring, ustring>& expandMap;
    }
}
