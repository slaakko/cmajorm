// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public class LinkerVisitor : Visitor
    {
        public LinkerVisitor() : currentGrammar(null), currentRule(null), actionNumber(0)
        {
        }
        public override void BeginVisit(Grammar& grammar)
        {
            if (!grammar.IsExternal())
            {
                currentGrammar = &grammar;
            }
            else
            {
                currentGrammar = null;
            }
        }
        public override void EndVisit(Grammar& grammar)
        {
            if (currentGrammar != null)
            {
                currentGrammar->ResolveStartRule();
                currentGrammar->ResolveSkipRule();
            }
        }
        public override void Visit(RuleLink& ruleLink)
        {
            if (currentGrammar == null) 
            {
                return;
            }            
            ParsingObject* o = currentGrammar->GetScope()->Get(ruleLink.LinkedRuleName());
            if (o != null)
            {
                if (o is RuleParser*)
                {
                    RuleParser* rule = cast<RuleParser*>(o);
                    ruleLink.SetRule(rule);
                    currentGrammar->AddGrammarReference(rule->GetGrammar());
                    ruleLink.AddToScope();
                }
                else
                {
                    ThrowException("'" + ToUtf8(ruleLink.LinkedRuleName()) + "' is not a rule", ruleLink.GetSpan());
                }
            }        
            else
            {
                ThrowException("rule '" + ToUtf8(ruleLink.LinkedRuleName()) + "' not found", ruleLink.GetSpan());
            }
        }
        public override void BeginVisit(RuleParser& rule)
        {
            if (currentGrammar != null)
            {
                currentRule = &rule;
                actionNumber = 0;
            }
            else
            {
                currentRule = null;
            }        
        }
        public override void EndVisit(RuleParser& rule)
        {
            if (currentGrammar != null)
            {
                rule.Link();
            }
        }
        public override void BeginVisit(ActionParser& parser)
        {
            if (currentGrammar != null)
            {
                if (parser.Name().IsEmpty())
                {
                    parser.SetName(u"A" + ToUtf32(ToString(actionNumber++)));
                }
                currentRule->AddAction(&parser);
            }
        }
        public override void Visit(NonterminalParser& parser)
        {
            if (currentGrammar != null)
            {
                try
                {
                    RuleParser* rule = currentGrammar->GetRule(parser.RuleName());
                    parser.SetRule(rule);
                    if (parser.IsSpecialized())
                    {
                        currentRule->AddNonterminal(&parser);
                    }
                    if (parser.NumberOfArguments() != parser.Rule()->NumberOfParameters())
                    {
                        ThrowException("rule '" + ToUtf8(parser.RuleName()) + "' takes " + ToString(parser.Rule()->NumberOfParameters()) + " parameters (" +
                            ToString(parser.NumberOfArguments()) + " arguments supplied)", parser.GetSpan());
                    }
                }
                catch (const ParsingException& ex)
                {
                    ThrowException(ex.Message(), parser.GetSpan());
                }
                catch (const Exception& ex)
                {
                    ThrowException(ex.Message(), parser.GetSpan());
                }
            }
        }
        public override void Visit(KeywordParser& parser)
        {
            if (currentGrammar != null)
            {
                if (!parser.ContinuationRuleName().IsEmpty())
                {
                    parser.SetContinuationRule(currentGrammar->GetRule(parser.ContinuationRuleName()));
                }
            }
        }
        public override void Visit(KeywordListParser& parser)
        {
            if (currentGrammar != null)
            {
                parser.SetSelectorRule(currentGrammar->GetRule(parser.SelectorRuleName()));
            }
        }
        private Grammar* currentGrammar;
        private RuleParser* currentRule;
        private int actionNumber;
    }
    
    public void Link(ParsingDomain* parsingDomain)
    {
        LinkerVisitor visitor;
        parsingDomain->GlobalNamespace()->Accept(visitor);
    }
    
    public class ExpandCodeVisitor : Visitor
    {
        public override void BeginVisit(Grammar& grammar)
        {
            if (!grammar.IsExternal())
            {
                for (RuleParser* rule : grammar.Rules())
                {
                    rule->ExpandCode();
                }
            }
        }
    }
    
    public void ExpandCode(ParsingDomain* parsingDomain)
    {
        ExpandCodeVisitor visitor;
        parsingDomain->GlobalNamespace()->Accept(visitor);
    }
}
