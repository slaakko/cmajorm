// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public class CharParser : Parser
    {
        public nothrow CharParser(uchar c_) : base(u"char", u"'" + ustring(c_, 1) + u"'"), c(c_)
        {
        }
        public nothrow inline uchar Char() const
        {
            return c;
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (scanner.Char() == c)
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private uchar c;
    }
    
    public class StringParser : Parser
    {
        public nothrow StringParser(const ustring& s_) : base(u"string", u"\"" + s_ + u"\""), s(s_)
        {
        }
        public nothrow inline const ustring& String() const
        {
            return s;
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            Match match = Match.Empty();
            long i = 0;
            long n = s.Length();
            while (i < n && !scanner.AtEnd() && scanner.Char() == s[i])
            {
                ++scanner;
                ++i;
                match.Concatenate(Match.One());
            }
            if (i == n)
            {
                return match;
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private ustring s;
    }
    
    public class CharRange
    {
        public nothrow CharRange(uchar begin_) : begin(begin_), end(begin_)
        {
        }
        public nothrow CharRange(uchar begin_, uchar end_) : begin(begin_), end(end_)
        {
        }
        public nothrow inline uchar Begin() const
        {
            return begin;
        }
        public nothrow inline void SetBegin(uchar begin_)
        {
            begin = begin_;
        }
        public nothrow inline uchar End() const
        {
            return end;
        }
        public nothrow inline void SetEnd(uchar end_)
        {
            end = end_;
        }
        public nothrow inline bool Includes(uchar c) const
        {
            return c >= begin && c <= end;
        }
        private uchar begin;
        private uchar end;
    }
    
    public nothrow ustring InverseStr(bool inverse)
    {
        if (inverse) return u"^";
        return u"";
    }
    
    public class CharSetParser : Parser
    {
        public CharSetParser(const ustring& s_) : base(u"charset", u"[" + s_ + u"]"), s(s_), inverse(false), ranges()
        {
            InitRanges();
        }
        public CharSetParser(const ustring& s_, bool inverse_) : base(u"charset", u"[" + InverseStr(inverse_) + u"]"), s(s_), inverse(inverse_), ranges()
        {
            InitRanges();
        }
        public inline nothrow const ustring& Set() const
        {
            return s;
        }
        public inline nothrow bool Inverse() const
        {
            return inverse;
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                uchar c = scanner.Char();
                bool found = false;
                long n = ranges.Count();
                for (long i = 0; i < n; ++i)
                {
                    const CharRange& range = ranges[i];
                    if (range.Includes(c))
                    {
                        found = true;
                        break;
                    }
                }
                bool matched = found != inverse;
                if (matched)
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private void InitRanges()
        {
            long i = 0;
            long n = s.Length();
            while (i < n)
            {
                uchar first = s[i];
                uchar last = first;
                ++i;
                if (i < n)
                {
                    if (s[i] == u'-')
                    {
                        ++i;
                        if (i < n)
                        {
                            last = s[i];
                            ++i;
                        }
                        else
                        {
                            ranges.Add(CharRange(first));
                            first = u'-';
                            last = first;
                        }
                    }
                }
                ranges.Add(CharRange(first, last));
            }
        }
        private ustring s;
        private bool inverse;
        private List<CharRange> ranges;
    }
    
    public class EmptyParser : Parser
    {
        public nothrow EmptyParser() : base(u"empty", u"<empty>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            return Match.Empty();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class SpaceParser : Parser
    {
        public nothrow SpaceParser() : base(u"space", u"<space>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsWhiteSpace(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class LetterParser : Parser
    {
        public nothrow LetterParser() : base(u"letter", u"<letter>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsLetter(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class UpperLetterParser : Parser
    {
        public nothrow UpperLetterParser() : base(u"upper_letter", u"<upper_letter>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsUpperLetter(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class LowerLetterParser : Parser
    {
        public nothrow LowerLetterParser() : base(u"lower_letter", u"<lower_letter>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsLowerLetter(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class TitleLetterParser : Parser
    {
        public nothrow TitleLetterParser() : base(u"title_letter", u"<title_letter>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsTitleLetter(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class ModifierLetterParser : Parser
    {
        public nothrow ModifierLetterParser() : base(u"modifier_letter", u"<modifier_letter>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsModifierLetter(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OtherLetterParser : Parser
    {
        public nothrow OtherLetterParser() : base(u"other_letter", u"<other_letter>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsOtherLetter(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class CasedLetterParser : Parser
    {
        public nothrow CasedLetterParser() : base(u"cased_letter", u"<cased_letter>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsCasedLetter(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class DigitParser : Parser
    {
        public nothrow DigitParser() : base(u"digit", u"<digit>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsAsciiDigit(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class HexDigitParser : Parser
    {
        public nothrow HexDigitParser() : base(u"hexdigit", u"<hexdigit>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsAsciiHexDigit(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class MarkParser : Parser
    {
        public nothrow MarkParser() : base(u"mark", u"<mark>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsMark(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class NonspacingMarkParser : Parser
    {
        public nothrow NonspacingMarkParser() : base(u"nonspacing_mark", u"<nonspacing_mark>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsNonspacingMark(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class SpacingMarkParser : Parser
    {
        public nothrow SpacingMarkParser() : base(u"spacing_mark", u"<spacing_mark>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsSpacingMark(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class EnclosingMarkParser : Parser
    {
        public nothrow EnclosingMarkParser() : base(u"enclosing_mark", u"<enclosing_mark>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsEnclosingMark(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class NumberParser : Parser
    {
        public nothrow NumberParser() : base(u"number", u"<number>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsNumber(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class DecimalNumberParser : Parser
    {
        public nothrow DecimalNumberParser() : base(u"decimal_number", u"<decimal_number>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsDecimalNumber(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class LetterNumberParser : Parser
    {
        public nothrow LetterNumberParser() : base(u"letter_number", u"<letter_number>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsLetterNumber(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OtherNumberParser : Parser
    {
        public nothrow OtherNumberParser() : base(u"other_number", u"<other_number>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsOtherNumber(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class PunctuationParser : Parser
    {
        public nothrow PunctuationParser() : base(u"punctuation", u"<punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsPunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class ConnectorPunctuationParser : Parser
    {
        public nothrow ConnectorPunctuationParser() : base(u"connector_punctuation", u"<connector_punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsConnectorPunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class DashPunctuationParser : Parser
    {
        public nothrow DashPunctuationParser() : base(u"dash_punctuation", u"<dash_punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsDashPunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OpenPunctuationParser : Parser
    {
        public nothrow OpenPunctuationParser() : base(u"open_punctuation", u"<open_punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsOpenPunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class ClosePunctuationParser : Parser
    {
        public nothrow ClosePunctuationParser() : base(u"close_punctuation", u"<close_punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsClosePunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class InitialPunctuationParser : Parser
    {
        public nothrow InitialPunctuationParser() : base(u"initial_punctuation", u"<initial_punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsInitialPunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class FinalPunctuationParser : Parser
    {
        public nothrow FinalPunctuationParser() : base(u"final_punctuation", u"<final_punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsFinalPunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OtherPunctuationParser : Parser
    {
        public nothrow OtherPunctuationParser() : base(u"other_punctuation", u"<other_punctuation>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsOtherPunctuation(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class SymbolParser : Parser
    {
        public nothrow SymbolParser() : base(u"symbol", u"<symbol>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsSymbol(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class MathSymbolParser : Parser
    {
        public nothrow MathSymbolParser() : base(u"math_symbol", u"<math_symbol>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsMathSymbol(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class CurrencySymbolParser : Parser
    {
        public nothrow CurrencySymbolParser() : base(u"currency_symbol", u"<currency_symbol>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsCurrencySymbol(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class ModifierSymbolParser : Parser
    {
        public nothrow ModifierSymbolParser() : base(u"modifier_symbol", u"<modifier_symbol>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsModifierSymbol(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OtherSymbolParser : Parser
    {
        public nothrow OtherSymbolParser() : base(u"other_symbol", u"<other_symbol>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsOtherSymbol(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class SeparatorParser : Parser
    {
        public nothrow SeparatorParser() : base(u"separator", u"<separator>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsSeparator(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class SpaceSeparatorParser : Parser
    {
        public nothrow SpaceSeparatorParser() : base(u"space_separator", u"<space_separator>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsSpaceSeparator(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class LineSeparatorParser : Parser
    {
        public nothrow LineSeparatorParser() : base(u"line_separator", u"<line_separator>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsLineSeparator(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class ParagraphSeparatorParser : Parser
    {
        public nothrow ParagraphSeparatorParser() : base(u"paragraph_separator", u"<paragraph_separator>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsParagraphSeparator(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OtherParser : Parser
    {
        public nothrow OtherParser() : base(u"other", u"<other>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsOther(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class ControlParser : Parser
    {
        public nothrow ControlParser() : base(u"control", u"<control>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsControl(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class FormatParser : Parser
    {
        public nothrow FormatParser() : base(u"format", u"<format>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsFormat(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class SurrogateParser : Parser
    {
        public nothrow SurrogateParser() : base(u"surrogate", u"<surrogate>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsSurrogate(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class PrivateUseParser : Parser
    {
        public nothrow PrivateUseParser() : base(u"private_use", u"<private_use>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsPrivateUse(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class UnassignedParser : Parser
    {
        public nothrow UnassignedParser() : base(u"unassigned", u"<unassigned>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsUnassigned(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class GraphicParser : Parser
    {
        public nothrow GraphicParser() : base(u"graphic", u"<graphic>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsGraphic(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class BaseCharParser : Parser
    {
        public nothrow BaseCharParser() : base(u"base_char", u"<base_char>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsBaseChar(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class AlphabeticParser : Parser
    {
        public nothrow AlphabeticParser() : base(u"alphabetic", u"<alphabetic>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsAlphabetic(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class IdStartParser : Parser
    {
        public nothrow IdStartParser() : base(u"idstart", u"<idstart>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsIdStart(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class IdContParser : Parser
    {
        public nothrow IdContParser() : base(u"idcont", u"<idcont>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                if (IsIdCont(scanner.Char()))
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class AnyCharParser : Parser
    {
        public nothrow AnyCharParser() : base(u"anychar", u"<anychar>")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                ++scanner;
                return Match.One();
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class RangeParser : Parser
    {
        public nothrow RangeParser(uint rangeStart_, uint rangeEnd_) : base(u"range", u"<range>"), rangeStart(rangeStart_), rangeEnd(rangeEnd_)
        {
        }
        public nothrow inline uint Start() const
        {
            return rangeStart;
        }
        public nothrow inline uint End() const
        {
            return rangeEnd;
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
        {
            if (!scanner.AtEnd())
            {
                uint codePoint = cast<uint>(scanner.Char());
                if (codePoint >= rangeStart && codePoint <= rangeEnd)
                {
                    ++scanner;
                    return Match.One();
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private uint rangeStart;
        private uint rangeEnd;
    }
}
