// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Text.Parsing.CodeDom
{
    public class Const : DomObject
    {
        public nothrow Const(DomObject* subject_) : base(), subject(subject_)
        {
        }
        public nothrow override ustring Name() const
        {
            return u"const " + subject->Name();
        }
        public override void Print(CodeFormatter& formatter)
        {
            if (Parens())
            {
                formatter.Write('(');
            }
            formatter.Write("const ");
            subject->Print(formatter);
            if (Parens())
            {
                formatter.Write(')');
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
            subject->Accept(visitor);
        }
        private UniquePtr<DomObject> subject;
    }
    
    public class LvalueRef : DomObject
    {
        public nothrow LvalueRef(DomObject* subject_) : base(), subject(subject_)
        {
        }
        public nothrow override ustring Name() const
        {
            return subject->Name() + u"&";
        }
        public override void Print(CodeFormatter& formatter)
        {
            if (Parens())
            {
                formatter.Write('(');
            }
            subject->Print(formatter);
            formatter.Write('&');
            if (Parens())
            {
                formatter.Write(')');
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
            subject->Accept(visitor);
        }
        private UniquePtr<DomObject> subject;
    }
    
    public class RvalueRef : DomObject
    {
        public nothrow RvalueRef(DomObject* subject_) : base(), subject(subject_)
        {
        }
        public nothrow override ustring Name() const
        {
            return subject->Name() + u"&&";
        }
        public override void Print(CodeFormatter& formatter)
        {
            if (Parens())
            {
                formatter.Write('(');
            }
            subject->Print(formatter);
            formatter.Write("&&");
            if (Parens())
            {
                formatter.Write(')');
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
            subject->Accept(visitor);
        }
        private UniquePtr<DomObject> subject;
    }
    
    public class Pointer : DomObject
    {
        public nothrow Pointer(DomObject* subject_) : base(), subject(subject_)
        {
        }
        public nothrow override ustring Name() const
        {
            return subject->Name() + u"*";
        }
        public override void Print(CodeFormatter& formatter)
        {
            if (Parens())
            {
                formatter.Write('(');
            }
            subject->Print(formatter);
            formatter.Write("*");
            if (Parens())
            {
                formatter.Write(')');
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
            subject->Accept(visitor);
        }
        private UniquePtr<DomObject> subject;
    }
    
    public class Array : DomObject
    {
        public nothrow Array(DomObject* subject_, DomObject* size_) : subject(subject_), size(size_)
        {
        }
        public nothrow override ustring Name() const
        {
            return subject->Name() + u"[" + size->Name() + u"]";
        }
        public override void Print(CodeFormatter& formatter)
        {
            if (Parens())
            {
                formatter.Write('(');
            }
            subject->Print(formatter);
            formatter.Write('[');
            if (!size.IsNull())
            {
                size->Print(formatter);
            }
            formatter.Write(']');
            if (Parens())
            {
                formatter.Write(')');
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
            subject->Accept(visitor);
            size->Accept(visitor);
        }
        private UniquePtr<DomObject> subject;
        private UniquePtr<DomObject> size;
    }
}
