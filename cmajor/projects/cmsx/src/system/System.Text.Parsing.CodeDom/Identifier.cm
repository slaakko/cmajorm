// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Text.Parsing.CodeDom
{
    public class Identifier : DomObject
    {
        public nothrow Identifier(const ustring& name_) : base(name_)
        {
        }
        public nothrow override int Rank() const
        {
            return 20;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class TemplateId : DomObject
    {
        public nothrow TemplateId(const ustring& name_) : base(name_)
        {
        }
        public nothrow override ustring Name() const
        {
            ustring name = base->Name();
            name.Append(u"<");
            bool first = true;
            for (const UniquePtr<DomObject>& templateArg : templateArgs)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    name.Append(u", ");
                }
                name.Append(templateArg->Name());
            }
            name.Append(u">");
            return name;
        }
        public void AddTemplateArg(DomObject* templateArg)
        {
            templateArgs.Add(UniquePtr<DomObject>(templateArg));
        }
        public override void Print(CodeFormatter& formatter)
        {
            if (Parens())
            {
                formatter.Write('(');
            }
            formatter.Write(ToUtf8(Name()));
            if (Parens())
            {
                formatter.Write(')');
            }
        }
        public override nothrow int Rank() const
        {
            return 20;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
            for (const UniquePtr<DomObject>& templateArg : templateArgs)
            {
                templateArg->Accept(visitor);
            }
        }
        private List<UniquePtr<DomObject>> templateArgs;
    }
}
