// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;
using System.Security;
using cmsh;

namespace cmsh
{
    void SetLoginEnvironment(ShellEnvironment& shellEnvironment)
    {
        if (HasEnv("HOSTNAME"))
        {
            shellEnvironment.hostName = GetEnv("HOSTNAME");
        }
        else
        {
            shellEnvironment.hostName = GetHostName();
            SetEnv("HOSTNAME", shellEnvironment.hostName);
        }
        if (HasEnv("UID"))
        {
            shellEnvironment.uid = ParseInt(GetEnv("UID"));
        }
        else
        {
            shellEnvironment.uid = GetUID();
            SetEnv("UID", ToString(shellEnvironment.uid));
        }
        User* user = shellEnvironment.users.GetUser(shellEnvironment.uid);
        if (HasEnv("USER"))
        {
            shellEnvironment.userName = GetEnv("USER");
        }
        else
        {
            if (user != null)
            {
                shellEnvironment.userName = user->Name();
                SetEnv("USER", shellEnvironment.userName);
            }
        }
        if (HasEnv("HOME"))
        {
            shellEnvironment.home = GetEnv("HOME");
        }
        else
        {
            if (user != null)
            {
                shellEnvironment.home = user->Home();
                SetEnv("HOME", shellEnvironment.home);
            }
        }
        if (HasEnv("SHELL"))
        {
            shellEnvironment.shell = GetEnv("SHELL");
        }
        else
        {
            if (user != null)
            {
                shellEnvironment.shell = user->Shell();
                SetEnv("SHELL", shellEnvironment.shell);
            }
        }
    }

    void ReadEnvironmentFile()
    {
        try
        {
            if (!File.Exists("/etc/environment"))
            {
                throw Exception("warning: /etc/environment does not exist");;
            }
            ustring environmentContent = ToUtf32(File.ReadAllText("/etc/environment"));
            EnvironmentParser parser("/etc/environment", environmentContent);
            parser.Parse();
        }
        catch (const Exception& ex)
        {
            Console.Error() << "cmsh: " << ex.Message() << endl();
        }
    }

    void Setup(ShellEnvironment& shellEnvironment)
    {
        SetLoginEnvironment(shellEnvironment);
        BeginObeyColorStrings(1);
        SetPWD(shellEnvironment);
        ReadEnvironmentFile();
        shellEnvironment.pgrp = SetPGRP();
        TCSetPGRP(0, shellEnvironment.pgrp);
    }

    void PrintPrompt(ShellEnvironment& shellEnvironment)
    {
        BeginObeyColorStrings(1);
        ustring loc;
        loc.Append(BeginColors(ConsoleColor.green, ConsoleColor.black)).Append(ToUtf32(shellEnvironment.userName)).Append('@').Append(
        ToUtf32(shellEnvironment.hostName)).Append(EndColors());
        ustring cwd;
        if (shellEnvironment.pwd.StartsWith(shellEnvironment.home))
        {
            cwd.Append(BeginColors(ConsoleColor.cyan, ConsoleColor.black)).Append('~').Append(
            ToUtf32(shellEnvironment.pwd.Substring(shellEnvironment.home.Length()))).Append(EndColors());
        }
        else
        {
            cwd.Append(BeginColors(ConsoleColor.cyan, ConsoleColor.black)).Append(ToUtf32(shellEnvironment.pwd)).Append(EndColors());
        }
        ustring prompt = u"$ ";
        if (shellEnvironment.uid == 0)
        {
            prompt = u"# ";
        }
        Console.Out() << loc << ":" << cwd << prompt;
        EndObeyColorStrings(1);
    }

    nothrow string ReadLine(ShellEnvironment& shellEnvironment)
    {
        string line = Console.ReadLine();
        if (Console.In().Eof())
        {
            shellEnvironment.exit = true;
        }
        return line;
    }
    
    void ProcessLine(const string& line, ShellEnvironment& shellEnvironment)
    {
        try
        {
            TokenizerFlags flags = TokenizerFlags.none;
            List<Token> tokens = Tokenize(ToUtf32(line), flags);
            Expand(tokens, shellEnvironment, flags);
            ProcessCommandLine(tokens, shellEnvironment);
        }
        catch (const Exception& ex)
        {
            Console.Error() << "cmsh: " << ex.Message() << endl();
        }
        Console.Out() << endl();
    }
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    int retval = 0;
    try
    {
        ShellEnvironment shellEnvironment;
        Setup(shellEnvironment);
        PrintPrompt(shellEnvironment);
        string line = ReadLine(shellEnvironment);
        while (!shellEnvironment.exit)
        {
            ProcessLine(line, shellEnvironment);
            if (shellEnvironment.exit) break;
            PrintPrompt(shellEnvironment);
            line = ReadLine(shellEnvironment);
        }
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        retval = 1;
    }
    return retval;
}
