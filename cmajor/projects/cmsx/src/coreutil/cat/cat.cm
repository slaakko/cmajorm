// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;

void PrintUsage()
{
    Console.Out() << "Usage: cat [options] [<files>]..." << endl() << endl() <<
        "Concatenate files and print on standard output." << endl() <<
        "If no files specified, copy standard input to standard output." << endl() << endl() <<
        "Options:" << endl() << endl() <<
        "--help | -h" << endl() <<
        "   Pring help." << endl() << endl() <<
        "--diagnostics | -d" << endl() <<
        "   Show stack trace in case of error." << endl() << endl() <<
        "-" << endl() <<
        "   Read standard input." << endl() << endl()
        ;
}

void Catenate(const List<string>& filePaths)
{
    for (const string& filePath : filePaths)
    {
        if (filePath.IsEmpty())
        {
            string content = Console.In().ReadToEnd();
            Console.Out() << content;
        }
        else
        {
            string content = File.ReadAllText(filePath);
            Console.Out() << content;
        }
    }
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        List<string> filePaths;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintUsage();
                    return 1;
                }
                else if (arg == "diagnostics")
                {
                    diagnostics = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    filePaths.Add(string());
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintUsage();
                            return 1;
                        }
                        else if (o == 'd')
                        {
                            diagnostics = true;
                        }
                        else
                        {
                            throw Exception("unknown option '-" + string(o) + "'");
                        }
                    }
                }
            }
            else
            {
                filePaths.Add(arg);
            }
        }
        if (filePaths.IsEmpty())
        {
            filePaths.Add(string());
        }
        Catenate(filePaths);
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
