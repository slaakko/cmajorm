// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;

void PrintHelp()
{
    Console.Out() << "Usage: mv [options] <source> <dest>" << endl();
    Console.Out() << "Usage: mv [options] <source>... <directory>" << endl();
    Console.Out() << "Rename <source> to <dest> or move sources to <directory>." << endl() << endl();
    Console.Out() << "Options:" << endl() << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl() << endl();
    Console.Out() << "--diagnostics | -d" << endl();
    Console.Out() << "  Print stack trace in case of error." << endl() << endl();
    Console.Out() << "--verbose | -v" << endl();
    Console.Out() << "  Be verbose." << endl() << endl();
}

void Move(const List<string>& files, const string& target, bool verbose)
{
    byte[statBufSize] statBuf;
    bool targetIsDirectory = false;
    int result = stat(target.Chars(), &statBuf[0]);
    if (result == 0)
    {
        StatInfo statInfo;
        StatBufToStatInfo(&statBuf[0], statInfo);
        targetIsDirectory = statInfo.Type() == FileType.directory;
    }
    if (!targetIsDirectory)
    {
        if (files.Count() == 1)
        {
            Rename(files.Front().Chars(), target.Chars());
            if (verbose)
            {
                Console.Out() << files.Front() << " -> " << target << endl();
            }
        }
        else if (files.Count() > 1)
        {
            throw Exception("'" + target + "': not directory");
        }
    }
    else
    {
        for (const string& file : files)
        {
            string name = Path.GetFileName(file);
            string targetPath = Path.Combine(target, name);
            Rename(file.Chars(), targetPath.Chars());
            if (verbose)
            {
                Console.Out() << file << " -> " << targetPath << endl();
            }
        }
    }
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        bool verbose = false;
        List<string> files;
        string target;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--diagnostics")
                {
                    diagnostics = true;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown option '" + arg + "'");
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else if (o == 'd')
                        {
                            diagnostics = true;
                        }
                        else if (o == 'v')
                        {
                            verbose = true;
                        }
                        else
                        {
                            throw Exception("unknown option '-" + string(o) + "'");
                        }
                    }
                }
            }
            else
            {
                files.Add(arg);
            }
        }
        if (files.IsEmpty())
        {
            PrintHelp();
            throw Exception("no files specified");
        }
        else if (files.Count() == 1)
        {
            PrintHelp();
            throw Exception("target not specified");
        }
        else
        {
            target = files.Back();
            files.RemoveLast();
        }
        Move(files, target, verbose);
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
