// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;

void PrintHelp()
{
    Console.Out() << "Usage: chmod <octal-mode> <file>..." << endl() << endl() <<
        "Set permission mode of each <file> to <octal-mode>." << endl() << endl() <<
        "Options:" << endl() << endl() <<
        "--help | -h" << endl() <<
        "   Print help." << endl() << endl() <<
        "--diagnostics | -d" << endl() <<
        "   Show stack trace in case of error." << endl() << endl() <<
        "--verbose | -v" << endl() <<
        "   Be verbose." << endl() << endl();
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        bool verbose = false;
        bool modeSet = false;
        int mode = 0;
        List<string> files;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--diagnostics")
                {
                    diagnostics = true;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else 
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown option '" + arg + "'");
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else if (o == 'd')
                        {
                            diagnostics = true;
                        }
                        else if (o == 'v')
                        {
                            verbose = true;
                        }
                        else
                        {
                            throw Exception("unknown option '" + arg + "'");
                        }
                    }
                }
            }
            else if (!modeSet)
            {
                modeSet = true;
                mode = cast<int>(ParseOctal(arg));
            }
            else
            {
                files.Add(arg);
            }
        }
        if (!modeSet)
        {
            throw Exception("mode not set");
        }
        if (files.IsEmpty())
        {
            throw Exception("no files given");
        }
        for (const string& file : files)
        {
            Chmod(file.Chars(), mode);
            if (verbose)
            {
                Console.Out() << "mode of file '" << file << "' set to " << ToOctalString(cast<ulong>(mode)) << endl();
            }
        }
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
