// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;

void PrintHelp()
{
    Console.Out() << "Usage: rm [options] <file>..." << endl() << endl();
    Console.Out() << "Remove files and directories." << endl() << endl();
    Console.Out() << "Options:" << endl() << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl() << endl();
    Console.Out() << "--diagnostics | -d" << endl();
    Console.Out() << "  Print stack trace in case of error." << endl() << endl();
    Console.Out() << "--verbose | -v" << endl();
    Console.Out() << "  Be verbose." << endl() << endl();
    Console.Out() << "--recursive | -r" << endl();
    Console.Out() << "  Remove directories recursively." << endl() << endl();
}

void Remove(const List<string>& files, bool verbose, bool recursive)
{
    List<FileType> fileTypes;
    for (const string& file : files)
    {
        StatInfo statInfo;
        Stat(file.Chars(), statInfo);
        fileTypes.Add(statInfo.Type());
        if (statInfo.Type() == FileType.directory)
        {
            if (!recursive)
            {
                throw FileSystemException("'"  + file + "' is directory and not --recursive specified");
            }
        }
        else if (statInfo.Type() != FileType.regular)
        {
            throw FileSystemException("'" + file + "' not directory or regular");
        }
    }
    long n = files.Count();
    for (long i = 0; i < n; ++i)
    {
        FileType fileType = fileTypes[i];
        const string& path = files[i];
        if (fileType == FileType.directory)
        {
            #assert(recursive);
            DirectoryReader reader(path);
            DirectoryEntry dirEntry;
            List<string> filePaths;
            while (reader.Read(dirEntry))
            {
                string entryName(&dirEntry.name[0]);
                if (entryName != "." && entryName != "..")
                {
                    string filePath = Path.Combine(path, entryName);
                    filePaths.Add(filePath);
                }
            }       
            Remove(filePaths, verbose, recursive);
            Directory.Remove(path);
            if (verbose)
            {
                Console.Out() << path << " removed" << endl();
            }
        }
        else if (fileType == FileType.regular)
        {
            File.Remove(path);
            if (verbose)
            {
                Console.Out() << path << " removed" << endl();
            }
        }
        else
        {
            throw FileSystemException("'" + path + "' not directory or regular");
        }
    }
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        bool verbose = false;
        bool recursive = false;
        List<string> files;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if(arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--diagnostics")
                {
                    diagnostics = true;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else if (arg == "--recursive")
                {
                    recursive = true;
                }
                else
                {
                    throw Exception("unknown argument '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown argument '" + arg + "'");
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else if (o == 'd')
                        {
                            diagnostics = true;
                        }
                        else if (o == 'v')
                        {
                            verbose = true;
                        }
                        else if (o == 'r')
                        {
                            recursive = true;
                        }
                        else
                        {
                            throw Exception("unknown argument '-" + string(o) + "'");
                        }
                    }
                }
            }
            else
            {
                files.Add(arg);
            }
        }
        Remove(files, verbose, recursive);
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
