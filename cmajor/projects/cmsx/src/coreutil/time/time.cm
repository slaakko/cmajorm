// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Os;

void PrintHelp()
{
    Console.Out() << "Usage: time [options] COMMAND [ARGS...]" << endl();
    Console.Out() << "Measure execution of COMMAND with ARGS." << endl();
    Console.Out() << "Report elapsed real time, system time and user time." << endl() << endl();
    Console.Out() << "Options:" << endl() << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl() << endl();
    Console.Out() << "--diagnostics | -d" << endl();
    Console.Out() << "  Show stack trace in case of error." << endl() << endl();
    Console.Out() << "--verbose | -v" << endl();
    Console.Out() << "  Be verbose." << endl() << endl();
}

void TimeCommand(const string& command, const List<string>& args, bool verbose)
{
    TimePoint start = Now();
    ushort exitCode = ShellExecute(command, args);
    TimePoint stop = Now();
    Duration realTime = stop - start;
    Duration systemTime;
    Duration userTime;
    Duration childSystemTime;
    Duration childUserTime;
    Times(systemTime, userTime, childSystemTime, childUserTime);
    Console.Out() << "real " << DurationStr(realTime) << endl();
    Console.Out() << "system " << DurationStr(childSystemTime) << endl();
    Console.Out() << "user " << DurationStr(childUserTime) << endl();
    if (verbose)
    {
        if (exitCode != 0u)
        {
            Console.Out() << "command '" << command << "' returned exit code " << exitCode << endl();
        }
    }
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        bool verbose = false;
        bool timeOptions = true;
        List<string> args;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (timeOptions)
            {
                if (arg.StartsWith("--"))
                {
                    if (arg == "--help")
                    {
                        PrintHelp();
                        return 1;
                    }
                    else if (arg == "--diagnostics")
                    {
                        diagnostics = true;
                    }
                    else if (arg == "--verbose")
                    {
                        verbose = true;
                    }
                    else
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                }
                else if (arg.StartsWith("-"))
                {
                    string options = arg.Substring(1);
                    if (options.IsEmpty())
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                    else
                    {
                        for (char o : options)
                        {
                            if (o == 'h')
                            {
                                PrintHelp();
                                return 1;
                            }
                            else if (o == 'd')
                            {
                                diagnostics = true;
                            }
                            else if (o == 'v')
                            {
                                verbose = true;
                            }
                            else
                            {
                                throw Exception("unknown option '-" + string(o) + "'");
                            }
                        }
                    }
                }
                else
                {
                    timeOptions = false;
                    args.Add(arg);
                }
            }
            else
            {
                args.Add(arg);
            }
        }
        if (args.IsEmpty())
        {
            throw Exception("no command specified");
        }
        else
        {
            string command = args.Front();
            args.RemoveFirst();
            TimeCommand(command, args, verbose);
        }
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
