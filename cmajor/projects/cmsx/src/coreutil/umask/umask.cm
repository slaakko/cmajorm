// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

void PrintUsage()
{
    Console.Out() << "umask [options] [<mask>]" << endl() <<
        "Set or print file and directory creation mask where <mask> is three octal digits representing inverted owner, group and others permission mask." << endl() <<
        "Default umask is 000, so that by default files are created with permissions 666 and directories with permissions 777." << endl() << endl() <<
        "Options:" << endl() << endl() <<
        "--help | -h" << endl() <<
        "   Print help." << endl() << endl() <<
        "--verbose | -v" << endl() <<
        "   Be verbose." << endl() << endl() <<
        "--diagnostics | -d" << endl() <<
        "   Show stack trace in case of error." << endl() << endl() << 
        endl();
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        int mask = cast<int>(ParseOctal("777"));
        List<string> args;
        bool verbose = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintUsage();
                    return 1;
                }
                else if (arg == "--diagnostics")
                {
                    diagnostics = true;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown option '-'");
                }
                else 
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintUsage();
                            return 1;
                        }
                        else if (o == 'd')
                        {
                            diagnostics = true;
                        }
                        else if (o == 'v')
                        {
                            verbose = true;
                        }
                        else
                        {
                            throw Exception("unknown option '-" + string(o) + "'");
                        }
                    }
                }
            }
            else 
            {
                args.Add(arg);
            }
        }
        if (args.Count() == 1)
        {
            string m = args[0];
            mask = cast<int>(ParseOctal(m));
        }
        else if (args.Count() > 1)
        {
            PrintUsage();
            return 1;
        }
        int prevMask = umask(mask);
        if (args.IsEmpty())
        {
            umask(prevMask);
            Console.Out() << ToOctalString(cast<ulong>(prevMask), 3) << endl();
        }
        else
        {
            if (verbose)
            {
                Console.Out() << 
                    "umask set to " << ToOctalString(cast<ulong>(mask), 3) << endl() <<
                    "previous umask was " << ToOctalString(cast<ulong>(prevMask), 3) << endl() <<
                    endl();
            }

        }
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
