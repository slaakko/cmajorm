// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;

public enum Counts
{
    none = 0,
    bytes = 1 << 0,
    words = 1 << 1,
    lines = 1 << 2,
    all = bytes | words | lines
}

void PrintHelp()
{
    Console.Out() << "Usage: wc [options] [FILE]..." << endl();
    Console.Out() << "Count and print number of lines, words and characters in FILEs." << endl();
    Console.Out() << "If no files specified, read standard input." << endl() << endl();
    Console.Out() << "Options:" << endl() << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl() << endl();
    Console.Out() << "--diagnostics | -d" << endl();
    Console.Out() << "  Show stack trace in case of error." << endl() << endl();
    Console.Out() << "--bytes | -c" << endl();
    Console.Out() << "  Count number of bytes." << endl() << endl();
    Console.Out() << "--words | -w" << endl();
    Console.Out() << "  Count number of words." << endl() << endl();
    Console.Out() << "--lines | -l" << endl();
    Console.Out() << "  Count number of lines." << endl() << endl();
    Console.Out() << "-" << endl();
    Console.Out() << "  Read standard input." << endl() << endl();
}

void Count(const string& file, Counts counts, int& totalBytes, int& totalWords, int& totalLines)
{
    int bytes = 0;
    int words = 0;
    int lines = 0;
    SharedPtr<Stream> stream;
    if (file.IsEmpty())
    {
        stream.Reset(new FileStream(stdin));
    }
    else
    {
        stream.Reset(new BufferedStream(SharedPtr<Stream>(new FileStream(file, OpenFlags.read))));
    }
    BinaryReader reader(stream);
    int state = 0;
    int x = reader.ReadByteOrEnd();
    while (x != -1)
    {
        ++bytes;
        char c = cast<char>(x);
        switch (state)
        {
            case 0:
            {
                switch (c)
                {
                    case ' ':
                    {
                        break;
                    }
                    case '\t':
                    {
                        break;
                    }
                    case '\n':
                    {
                        ++lines;
                        break;
                    }
                    default:
                    {
                        state = 1;
                        break;
                    }
                }
                break;
            }
            case 1:
            {
                switch (c)
                {
                    case ' ':
                    {
                        ++words;
                        state = 2;
                        break;
                    }
                    case '\t':
                    {
                        ++words;
                        state = 2;
                        break;
                    }
                    case '\n':
                    {
                        ++words;
                        ++lines;
                        state = 2;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                break;
            }
            case 2:
            {
                switch (c)
                {
                    case ' ':
                    {
                        break;
                    }
                    case '\t':
                    {
                        break;
                    }
                    case '\n':
                    {
                        ++lines; 
                        break;
                    }
                    default:
                    {
                        state = 1;
                        break;
                    }
                }
                break;
            }
        }
        x = reader.ReadByteOrEnd();
    }
    if (state == 1)
    {
        ++words;
    }
    string countLine;
    if ((counts & Counts.lines) != Counts.none)
    {
        countLine.Append(ToString(lines));
    }
    if ((counts & Counts.words) != Counts.none)
    {
        if (!countLine.IsEmpty())
        {
            countLine.Append(' ');
        }
        countLine.Append(ToString(words));
    }
    if ((counts & Counts.bytes) != Counts.none)
    {
        if (!countLine.IsEmpty())
        {
            countLine.Append(' ');
        }
        countLine.Append(ToString(bytes));
    }
    if (!file.IsEmpty())
    {
        if (!countLine.IsEmpty())
        {
            countLine.Append(' ');
        }
        countLine.Append(file);
    }
    Console.Out() << countLine << endl();
    totalBytes = totalBytes + bytes;
    totalWords = totalWords + words;
    totalLines = totalLines + lines;
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        List<string> files;
        Counts counts = Counts.none;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--diagnostics")
                {
                    diagnostics = true;
                }
                else if (arg == "--bytes")
                {
                    counts = cast<Counts>(counts | Counts.bytes);
                }
                else if (arg == "--words")
                {
                    counts = cast<Counts>(counts | Counts.words);
                }
                else if (arg == "--lines")
                {
                    counts = cast<Counts>(counts | Counts.lines);
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    files.Add(string());
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else if (o == 'd')
                        {
                            diagnostics = true;
                        }
                        else if (o == 'c')
                        {
                            counts = cast<Counts>(counts | Counts.bytes);
                        }
                        else if (o == 'w')
                        {
                            counts = cast<Counts>(counts | Counts.words);
                        }
                        else if (o == 'l')
                        {
                            counts = cast<Counts>(counts | Counts.lines);
                        }
                        else
                        {
                            throw Exception("unknown option '-" + string(o) + "'");
                        }
                    }
                }
            }
            else
            {
                files.Add(arg);
            }
        }
        if (files.IsEmpty())
        {
            files.Add(string());
        }
        if (counts == Counts.none)
        {
            counts = Counts.all;
        }
        int totalBytes = 0;
        int totalWords = 0;
        int totalLines = 0;
        for (const string& file : files)
        {
            Count(file, counts, totalBytes, totalWords, totalLines);
        }
        if (files.Count() > 1)
        {
            string countLine;
            if ((counts & Counts.lines) != Counts.none)
            {
                countLine.Append(ToString(totalLines));
            }
            if ((counts & Counts.words) != Counts.none)
            {
                if (!countLine.IsEmpty())
                {
                    countLine.Append(' ');
                }
                countLine.Append(ToString(totalWords));
            }
            if ((counts & Counts.bytes) != Counts.none)
            {
                if (!countLine.IsEmpty())
                {
                    countLine.Append(' ');
                }
                countLine.Append(ToString(totalBytes));
            }
            if (!countLine.IsEmpty())
            {
                countLine.Append(' ');
            }
            countLine.Append("total");
            Console.Out() << countLine << endl();
        }
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
