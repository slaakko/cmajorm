// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Text;

public enum Counts
{
    none = 0,
    bytes = 1 << 0,
    words = 1 << 1,
    lines = 1 << 2,
    all = bytes | words | lines
}

public class CountData
{
    public string lines;
    public string words;
    public string bytes;
    public string file;
}

void PrintHelp()
{
    Console.Out() << "Usage: wc [options] [FILE]..." << endl();
    Console.Out() << "Count and print number of lines, words and characters in FILEs." << endl();
    Console.Out() << "If no files specified, read standard input." << endl() << endl();
    Console.Out() << "Options:" << endl() << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl() << endl();
    Console.Out() << "--diagnostics | -d" << endl();
    Console.Out() << "  Show stack trace in case of error." << endl() << endl();
    Console.Out() << "--bytes | -c" << endl();
    Console.Out() << "  Count number of bytes." << endl() << endl();
    Console.Out() << "--words | -w" << endl();
    Console.Out() << "  Count number of words." << endl() << endl();
    Console.Out() << "--lines | -l" << endl();
    Console.Out() << "  Count number of lines." << endl() << endl();
    Console.Out() << "-" << endl();
    Console.Out() << "  Read standard input." << endl() << endl();
}

void CalculateFieldWidths(const List<CountData>& counts, int& linesWidth, int& wordsWidth, int& bytesWidth)
{
    linesWidth = 0;
    wordsWidth = 0;
    bytesWidth = 0;
    for (const CountData& fileCounts : counts)
    {
        long linesLength = fileCounts.lines.Length();
        if (linesLength > linesWidth) linesWidth = cast<int>(linesLength);
        long wordsLength = fileCounts.words.Length();
        if (wordsLength > wordsWidth) wordsWidth = cast<int>(wordsLength);
        long bytesLength = fileCounts.bytes.Length();
        if (bytesLength > bytesWidth) bytesWidth = cast<int>(bytesLength);
    }
}

void Print(Counts counts, const List<CountData>& fileCounts)
{
    int linesWidth = 0;
    int wordsWidth = 0;
    int bytesWidth = 0;
    CalculateFieldWidths(fileCounts, linesWidth, wordsWidth, bytesWidth);
    for (const CountData& fileData : fileCounts)
    {
        string line;
        if ((counts & Counts.lines) != Counts.none)
        {
            line.Append(Format(fileData.lines, linesWidth, FormatJustify.right));
        }
        if ((counts & Counts.words) != Counts.none)
        {
            if (!line.IsEmpty())
            {
                line.Append(' ');
            }
            line.Append(Format(fileData.words, wordsWidth, FormatJustify.right));
        }
        if ((counts & Counts.bytes) != Counts.none)
        {
            if (!line.IsEmpty())
            {
                line.Append(' ');
            }
            line.Append(Format(fileData.bytes, bytesWidth, FormatJustify.right));
        }
        if (!line.IsEmpty())
        {
            line.Append(' ');
        }
        line.Append(fileData.file);
        Console.Out() << line << endl();
    }
}

CountData Count(const string& file, Counts counts, int& totalBytes, int& totalWords, int& totalLines)
{
    CountData fileCounts;
    int bytes = 0;
    int words = 0;
    int lines = 0;
    SharedPtr<Stream> stream;
    if (file.IsEmpty())
    {
        if (System.Os.IsConsole(stdin))
        {
            stream.Reset(new FileStream(stdin));
        }
        else
        {
            stream.Reset(new BufferedStream(SharedPtr<Stream>(new FileStream(stdin))));
        }
    }
    else
    {
        stream.Reset(new BufferedStream(SharedPtr<Stream>(new FileStream(file, OpenFlags.read))));
    }
    BinaryReader reader(stream);
    int state = 0;
    int x = reader.ReadByteOrEnd();
    while (x != -1)
    {
        ++bytes;
        char c = cast<char>(x);
        switch (state)
        {
            case 0:
            {
                switch (c)
                {
                    case ' ':
                    {
                        break;
                    }
                    case '\t':
                    {
                        break;
                    }
                    case '\n':
                    {
                        ++lines;
                        break;
                    }
                    default:
                    {
                        state = 1;
                        break;
                    }
                }
                break;
            }
            case 1:
            {
                switch (c)
                {
                    case ' ':
                    {
                        ++words;
                        state = 2;
                        break;
                    }
                    case '\t':
                    {
                        ++words;
                        state = 2;
                        break;
                    }
                    case '\n':
                    {
                        ++words;
                        ++lines;
                        state = 2;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                break;
            }
            case 2:
            {
                switch (c)
                {
                    case ' ':
                    {
                        break;
                    }
                    case '\t':
                    {
                        break;
                    }
                    case '\n':
                    {
                        ++lines; 
                        break;
                    }
                    default:
                    {
                        state = 1;
                        break;
                    }
                }
                break;
            }
        }
        x = reader.ReadByteOrEnd();
    }
    if (state == 1)
    {
        ++words;
    }
    if ((counts & Counts.lines) != Counts.none)
    {
        fileCounts.lines = ToString(lines);
    }
    if ((counts & Counts.words) != Counts.none)
    {
        fileCounts.words = ToString(words);
    }
    if ((counts & Counts.bytes) != Counts.none)
    {
        fileCounts.bytes = ToString(bytes);
    }
    if (!file.IsEmpty())
    {
        fileCounts.file = file;
    }
    totalBytes = totalBytes + bytes;
    totalWords = totalWords + words;
    totalLines = totalLines + lines;
    return fileCounts;
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        List<string> files;
        Counts counts = Counts.none;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--diagnostics")
                {
                    diagnostics = true;
                }
                else if (arg == "--bytes")
                {
                    counts = cast<Counts>(counts | Counts.bytes);
                }
                else if (arg == "--words")
                {
                    counts = cast<Counts>(counts | Counts.words);
                }
                else if (arg == "--lines")
                {
                    counts = cast<Counts>(counts | Counts.lines);
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    files.Add(string());
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else if (o == 'd')
                        {
                            diagnostics = true;
                        }
                        else if (o == 'c')
                        {
                            counts = cast<Counts>(counts | Counts.bytes);
                        }
                        else if (o == 'w')
                        {
                            counts = cast<Counts>(counts | Counts.words);
                        }
                        else if (o == 'l')
                        {
                            counts = cast<Counts>(counts | Counts.lines);
                        }
                        else
                        {
                            throw Exception("unknown option '-" + string(o) + "'");
                        }
                    }
                }
            }
            else
            {
                files.Add(arg);
            }
        }
        if (files.IsEmpty())
        {
            files.Add(string());
        }
        if (counts == Counts.none)
        {
            counts = Counts.all;
        }
        int totalBytes = 0;
        int totalWords = 0;
        int totalLines = 0;
        List<CountData> fileCounts;
        for (const string& file : files)
        {
            fileCounts.Add(Count(file, counts, totalBytes, totalWords, totalLines));
        }
        if (files.Count() > 1)
        {
            CountData total;
            if ((counts & Counts.lines) != Counts.none)
            {
                total.lines = ToString(totalLines);
            }
            if ((counts & Counts.words) != Counts.none)
            {
                total.words = ToString(totalWords);
            }
            if ((counts & Counts.bytes) != Counts.none)
            {
                total.bytes = ToString(totalBytes);
            }
            total.file = "total";
            fileCounts.Add(total);
        }
        Print(counts, fileCounts);
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
