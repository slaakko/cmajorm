// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Os;

void PrintHelp()
{
    Console.Out() << "Usage: mkdir [options] <directory>..." << endl() << endl() <<
        "Create directories if they do not already exist." << endl() << endl() <<
        "Options:" << endl() << endl() <<
        "--help | -h" << endl() <<
        "   Print help and exit." << endl() << endl() <<
        "--diagnostics | -d" << endl() <<
        "   Show stack trace in case of error." << endl() << endl() <<
        "--verbose | -v" << endl() <<
        "   Be verbose." << endl() << endl() <<
        "--mode=MODE | -m=MODE" << endl() <<
        "   Set access mode to MODE where MODE is three octal digits." << endl() <<
        "   By default create directory with mode 777 (octal) masked with umask of the process." << endl() << endl() <<
        "--parents | -p" << endl() <<
        "   Create also parent directories if they do not exist." << endl() << endl();
}

int main(int argc, const char** argv)
{
    bool diagnostics = false;
    try
    {
        List<string> directories;
        bool verbose = false;
        int mode = 0;
        bool parents = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--diagnostics")
                {
                    diagnostics = true;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else if (arg.StartsWith("--mode="))
                {
                    string modeStr = arg.Substring(7);
                    mode = cast<int>(ParseOctal(modeStr));
                }
                else if (arg == "--parents")
                {
                    parents = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                if (arg == "-h")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "-d")
                {
                    diagnostics = true;
                }
                else if (arg == "-v")
                {
                    verbose = true;
                }
                else if (arg.StartsWith("-m="))
                {
                    string modeStr = arg.Substring(3);
                    mode = cast<int>(ParseOctal(modeStr));
                }
                else if (arg == "-p")
                {
                    parents = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else
            {
                directories.Add(arg);
            }
        }
        if (directories.IsEmpty())
        {
            throw Exception("no directories given");
        }
        for (const string& directory : directories)
        {
            if (parents)
            {
                CreateDirectories(directory, mode, verbose);
            }
            else if (!Directory.Exists(directory))
            {
                Mkdir(directory.Chars(), mode);
                if (verbose)
                {
                    Console.Out() << "created directory '" + directory + "'" << endl();
                }
            }
        }
    }
    catch (const Exception& ex)
    {
        if (diagnostics)
        {
            Console.Error() << ex.ToString() << endl();
        }
        else
        {
            Console.Error() << ex.Message() << endl();
        }
        return 1;
    }
    return 0;
}
