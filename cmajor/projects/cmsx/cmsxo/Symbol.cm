using System;
using System.Collections;

namespace cmsx.object
{
    public const ulong undefinedValue = cast<ulong>(-1);

    public enum Segment : byte
    {
        text = 0u, data = 1u, pool = 2u, stack = 3u, unknown = 255u
    }

    public string SegmentStr(Segment segment)
    {
        switch (segment)
        {
            case Segment.text: return "text";
            case Segment.data: return "data";
            case Segment.pool: return "pool";
            case Segment.stack: return "stack";
        }
        return "-";
    }

    public enum Linkage : byte 
    {
        internal_ = 0u, external = 1u, once = 2u, remove = 3u, undefined = 4u
    }

    public string LinkageStr(Linkage linkage)
    {
        switch (linkage)
        {
            case Linkage.internal_: return "internal";
            case Linkage.external: return "external";
            case Linkage.once: return "once";
            case Linkage.remove: return "remove";
            case Linkage.undefined: return "undefined";
        }
        return "";
    }

    public string ValueFlagStr(Value.Flag flags)
    {
        if (flags == Value.Flag.undefined)
        {
            return "U";
        }
        string s;
        if ((flags & Value.Flag.register) != Value.Flag.undefined)
        {
            s.Append('R');
        }
        if ((flags & Value.Flag.pure) != Value.Flag.undefined)
        {
            s.Append('P');
        }
        if ((flags & Value.Flag.address) != Value.Flag.undefined)
        {
            s.Append('A');
        }
        if ((flags & Value.Flag.function) != Value.Flag.undefined)
        {
            s.Append('F');
        }
        if ((flags & Value.Flag.structure) != Value.Flag.undefined)
        {
            s.Append('S');
        }
        return s;
    }

    public class Value
    {
        public enum Flag : byte
        {
            undefined = 0u,
            register = 1u << 0u,
            pure = 1u << 1u,
            address = 1u << 2u,
            function = 1u << 3u,
            structure = 1u << 4u
        }
        public nothrow Value() : flags(Flag.undefined), value(undefinedValue), symbol(null)
        {
        }
        public nothrow Value(Flag flags_, ulong value_, Symbol* symbol_) : flags(flags_), value(value_), symbol(symbol_)
        {
        }
        public nothrow inline void SetUndefined()
        {
            flags = Flag.undefined;
        }
        public nothrow inline void SetRegister()
        {
            flags = Flag.register;
        }
        public nothrow inline void SetPure()
        {
            flags = cast<Flag>(flags | Flag.pure);
        }
        public nothrow inline void SetAddress()
        {
            flags = cast<Flag>(flags | Flag.address);
        }
        public nothrow inline void SetFunction()
        {
            flags = cast<Flag>(flags | Flag.function);
        }
        public nothrow inline void SetStructure()
        {
            flags = cast<Flag>(flags | Flag.structure);
        }
        public nothrow inline bool GetFlag(Flag flag)
        {
            return (flags & flag) != Flag.undefined;
        }
        public Flag flags;
        public ulong value;
        public Symbol* symbol;
    }

    public string ValueStr(const Value& value)
    {
        string result = Format(ValueFlagStr(value.flags), 5) + " #" + ToHexString(value.value) + " ";
        if (value.flags == Value.Flag.register)
        {
            result.Append(Format("$" + ToString(value.value), 20));
        }
        else
        {
            result.Append(Format(ToString(value.value), 20));
        }
        return result;
    }

    public class Symbol
    {
        public Symbol* Clone()
        {
            Symbol* clone = new Symbol();
            clone->index = -1;
            clone->name = name;
            clone->segment = segment;
            clone->linkage = linkage;
            clone->value = value;
            clone->start = start;
            clone->length = length;
            clone->section = section;
            return clone;
        }
        public int index;
        public string name;
        public string localName;
        public Segment segment;
        public Linkage linkage;
        public Value value;
        public ulong start;
        public ulong length;
        public Section* section;
    }

    public class SymbolTable
    {
        public SymbolTable(BinaryFile* file_, bool init) : file(file_)
        {
            if (init)
            {
                Symbol* ax = new Symbol();
                ax->index = -1;
                ax->name = "ax";
                ax->segment = Segment.unknown;
                ax->linkage = Linkage.internal_;
                ax->value = Value(Value.Flag.register, cmsx.machine.regAX, ax);
                AddSymbol(ax);
                Symbol* bx = new Symbol();
                bx->index = -1;
                bx->name = "bx";
                bx->segment = Segment.unknown;
                bx->linkage = Linkage.internal_;
                bx->value = Value(Value.Flag.register, cmsx.machine.regBX, bx);
                AddSymbol(bx);
                Symbol* cx = new Symbol();
                cx->index = -1;
                cx->name = "cx";
                cx->segment = Segment.unknown;
                cx->linkage = Linkage.internal_;
                cx->value = Value(Value.Flag.register, cmsx.machine.regCX, cx);
                AddSymbol(cx);
                Symbol* dx = new Symbol();
                dx->index = -1;
                dx->name = "dx";
                dx->segment = Segment.unknown;
                dx->linkage = Linkage.internal_;
                dx->value = Value(Value.Flag.register, cmsx.machine.regDX, dx);
                AddSymbol(dx);
                Symbol* ex = new Symbol();
                ex->index = -1;
                ex->name = "ex";
                ex->segment = Segment.unknown;
                ex->linkage = Linkage.internal_;
                ex->value = Value(Value.Flag.register, cmsx.machine.regEX, ex);
                AddSymbol(ex);
                Symbol* sp = new Symbol();
                sp->index = -1;
                sp->name = "sp";
                sp->segment = Segment.unknown;
                sp->linkage = Linkage.internal_;
                sp->value = Value(Value.Flag.register, cmsx.machine.regSP, sp);
                AddSymbol(sp);
                Symbol* fp = new Symbol();
                fp->index = -1;
                fp->name = "fp";
                fp->segment = Segment.unknown;
                fp->linkage = Linkage.internal_;
                fp->value = Value(Value.Flag.register, cmsx.machine.regFP, fp);
                AddSymbol(fp);
                Symbol* rA = new Symbol();
                rA->index = -1;
                rA->name = "rA";
                rA->segment = Segment.unknown;
                rA->linkage = Linkage.internal_;
                rA->value = Value(Value.Flag.pure, cmsx.machine.Registers.rA, rA);
                AddSymbol(rA);
                Symbol* rB = new Symbol();
                rB->index = -1;
                rB->name = "rB";
                rB->segment = Segment.unknown;
                rB->linkage = Linkage.internal_;
                rB->value = Value(Value.Flag.pure, cmsx.machine.Registers.rB, rB);
                AddSymbol(rB);
                Symbol* rC = new Symbol();
                rC->index = -1;
                rC->name = "rC";
                rC->segment = Segment.unknown;
                rC->linkage = Linkage.internal_;
                rC->value = Value(Value.Flag.pure, cmsx.machine.Registers.rC, rC);
                AddSymbol(rC);
                Symbol* rD = new Symbol();
                rD->index = -1;
                rD->name = "rD";
                rD->segment = Segment.unknown;
                rD->linkage = Linkage.internal_;
                rD->value = Value(Value.Flag.pure, cmsx.machine.Registers.rD, rD);
                AddSymbol(rD);
                Symbol* rE = new Symbol();
                rE->index = -1;
                rE->name = "rE";
                rE->segment = Segment.unknown;
                rE->linkage = Linkage.internal_;
                rE->value = Value(Value.Flag.pure, cmsx.machine.Registers.rE, rE);
                AddSymbol(rE);
                Symbol* rF = new Symbol();
                rF->index = -1;
                rF->name = "rF";
                rF->segment = Segment.unknown;
                rF->linkage = Linkage.internal_;
                rF->value = Value(Value.Flag.pure, cmsx.machine.Registers.rF, rF);
                AddSymbol(rF);
                Symbol* rG = new Symbol();
                rG->index = -1;
                rG->name = "rG";
                rG->segment = Segment.unknown;
                rG->linkage = Linkage.internal_;
                rG->value = Value(Value.Flag.pure, cmsx.machine.Registers.rG, rG);
                AddSymbol(rG);
                Symbol* rH = new Symbol();
                rH->index = -1;
                rH->name = "rH";
                rH->segment = Segment.unknown;
                rH->linkage = Linkage.internal_;
                rH->value = Value(Value.Flag.pure, cmsx.machine.Registers.rH, rH);
                AddSymbol(rH);
                Symbol* rI = new Symbol();
                rI->index = -1;
                rI->name = "rI";
                rI->segment = Segment.unknown;
                rI->linkage = Linkage.internal_;
                rI->value = Value(Value.Flag.pure, cmsx.machine.Registers.rI, rI);
                AddSymbol(rI);
                Symbol* rJ = new Symbol();
                rJ->index = -1;
                rJ->name = "rJ";
                rJ->segment = Segment.unknown;
                rJ->linkage = Linkage.internal_;
                rJ->value = Value(Value.Flag.pure, cmsx.machine.Registers.rJ, rJ);
                AddSymbol(rJ);
                Symbol* rK = new Symbol();
                rK->index = -1;
                rK->name = "rK";
                rK->segment = Segment.unknown;
                rK->linkage = Linkage.internal_;
                rK->value = Value(Value.Flag.pure, cmsx.machine.Registers.rK, rK);
                AddSymbol(rK);
                Symbol* rL = new Symbol();
                rL->index = -1;
                rL->name = "rL";
                rL->segment = Segment.unknown;
                rL->linkage = Linkage.internal_;
                rL->value = Value(Value.Flag.pure, cmsx.machine.Registers.rL, rL);
                AddSymbol(rL);
                Symbol* rM = new Symbol();
                rM->index = -1;
                rM->name = "rM";
                rM->segment = Segment.unknown;
                rM->linkage = Linkage.internal_;
                rM->value = Value(Value.Flag.pure, cmsx.machine.Registers.rM, rM);
                AddSymbol(rM);
                Symbol* rN = new Symbol();
                rN->index = -1;
                rN->name = "rN";
                rN->segment = Segment.unknown;
                rN->linkage = Linkage.internal_;
                rN->value = Value(Value.Flag.pure, cmsx.machine.Registers.rN, rN);
                AddSymbol(rN);
                Symbol* rO = new Symbol();
                rO->index = -1;
                rO->name = "rO";
                rO->segment = Segment.unknown;
                rO->linkage = Linkage.internal_;
                rO->value = Value(Value.Flag.pure, cmsx.machine.Registers.rO, rO);
                AddSymbol(rO);
                Symbol* rP = new Symbol();
                rP->index = -1;
                rP->name = "rP";
                rP->segment = Segment.unknown;
                rP->linkage = Linkage.internal_;
                rP->value = Value(Value.Flag.pure, cmsx.machine.Registers.rP, rP);
                AddSymbol(rP);
                Symbol* rQ = new Symbol();
                rQ->index = -1;
                rQ->name = "rQ";
                rQ->segment = Segment.unknown;
                rQ->linkage = Linkage.internal_;
                rQ->value = Value(Value.Flag.pure, cmsx.machine.Registers.rQ, rQ);
                AddSymbol(rQ);
                Symbol* rR = new Symbol();
                rR->index = -1;
                rR->name = "rR";
                rR->segment = Segment.unknown;
                rR->linkage = Linkage.internal_;
                rR->value = Value(Value.Flag.pure, cmsx.machine.Registers.rR, rR);
                AddSymbol(rR);
                Symbol* rS = new Symbol();
                rS->index = -1;
                rS->name = "rS";
                rS->segment = Segment.unknown;
                rS->linkage = Linkage.internal_;
                rS->value = Value(Value.Flag.pure, cmsx.machine.Registers.rS, rS);
                AddSymbol(rS);
                Symbol* rT = new Symbol();
                rT->index = -1;
                rT->name = "rT";
                rT->segment = Segment.unknown;
                rT->linkage = Linkage.internal_;
                rT->value = Value(Value.Flag.pure, cmsx.machine.Registers.rT, rT);
                AddSymbol(rT);
                Symbol* rU = new Symbol();
                rU->index = -1;
                rU->name = "rU";
                rU->segment = Segment.unknown;
                rU->linkage = Linkage.internal_;
                rU->value = Value(Value.Flag.pure, cmsx.machine.Registers.rU, rU);
                AddSymbol(rU);
                Symbol* rV = new Symbol();
                rV->index = -1;
                rV->name = "rV";
                rV->segment = Segment.unknown;
                rV->linkage = Linkage.internal_;
                rV->value = Value(Value.Flag.pure, cmsx.machine.Registers.rV, rV);
                AddSymbol(rV);
                Symbol* rW = new Symbol();
                rW->index = -1;
                rW->name = "rW";
                rW->segment = Segment.unknown;
                rW->linkage = Linkage.internal_;
                rW->value = Value(Value.Flag.pure, cmsx.machine.Registers.rW, rW);
                AddSymbol(rW);
                Symbol* rX = new Symbol();
                rX->index = -1;
                rX->name = "rX";
                rX->segment = Segment.unknown;
                rX->linkage = Linkage.internal_;
                rX->value = Value(Value.Flag.pure, cmsx.machine.Registers.rX, rX);
                AddSymbol(rX);
                Symbol* rY = new Symbol();
                rY->index = -1;
                rY->name = "rY";
                rY->segment = Segment.unknown;
                rY->linkage = Linkage.internal_;
                rY->value = Value(Value.Flag.pure, cmsx.machine.Registers.rY, rY);
                AddSymbol(rY);
                Symbol* rZ = new Symbol();
                rZ->index = -1;
                rZ->name = "rZ";
                rZ->segment = Segment.unknown;
                rZ->linkage = Linkage.internal_;
                rZ->value = Value(Value.Flag.pure, cmsx.machine.Registers.rZ, rZ);
                AddSymbol(rZ);
                Symbol* rBB = new Symbol();
                rBB->index = -1;
                rBB->name = "rBB";
                rBB->segment = Segment.unknown;
                rBB->linkage = Linkage.internal_;
                rBB->value = Value(Value.Flag.pure, cmsx.machine.Registers.rBB, rBB);
                AddSymbol(rBB);
                Symbol* rTT = new Symbol();
                rTT->index = -1;
                rTT->name = "rTT";
                rTT->segment = Segment.unknown;
                rTT->linkage = Linkage.internal_;
                rTT->value = Value(Value.Flag.pure, cmsx.machine.Registers.rTT, rTT);
                AddSymbol(rTT);
                Symbol* rWW = new Symbol();
                rWW->index = -1;
                rWW->name = "rWW";
                rWW->segment = Segment.unknown;
                rWW->linkage = Linkage.internal_;
                rWW->value = Value(Value.Flag.pure, cmsx.machine.Registers.rWW, rWW);
                AddSymbol(rWW);
                Symbol* rXX = new Symbol();
                rXX->index = -1;
                rXX->name = "rXX";
                rXX->segment = Segment.unknown;
                rXX->linkage = Linkage.internal_;
                rXX->value = Value(Value.Flag.pure, cmsx.machine.Registers.rXX, rXX);
                AddSymbol(rXX);
                Symbol* rYY = new Symbol();
                rYY->index = -1;
                rYY->name = "rYY";
                rYY->segment = Segment.unknown;
                rYY->linkage = Linkage.internal_;
                rYY->value = Value(Value.Flag.pure, cmsx.machine.Registers.rYY, rYY);
                AddSymbol(rYY);
                Symbol* rZZ = new Symbol();
                rZZ->index = -1;
                rZZ->name = "rZZ";
                rZZ->segment = Segment.unknown;
                rZZ->linkage = Linkage.internal_;
                rZZ->value = Value(Value.Flag.pure, cmsx.machine.Registers.rZZ, rZZ);
                AddSymbol(rZZ);
            }
        }
        suppress SymbolTable(const SymbolTable&);
        suppress void operator=(const SymbolTable&);
        suppress SymbolTable(SymbolTable&&);
        suppress void operator=(SymbolTable&&);
        public nothrow const List<UniquePtr<Symbol>>& Symbols() const
        {
            return symbols;
        }
        public nothrow const List<UniquePtr<Symbol>>& InternalSymbols() const
        {
            return internalSymbols;
        }
        public Symbol* GetSymbol(int index) const
        {
            return symbols[index].Get();
        }
        public Symbol* GetSymbol(const string& name) const
        {
            Map<string, Symbol*>.ConstIterator it = table.CFind(name);
            if (it != table.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public Symbol* GetSymbolByAddress(ulong absoluteAddress) const
        {
            Map<ulong, Symbol*>.ConstIterator it = addressMap.CFind(absoluteAddress);
            if (it != addressMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public Symbol* GetSymbolByValue(ulong value) const
        {
            Map<ulong, Symbol*>.ConstIterator it = valueMap.CFind(value);
            if (it != valueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public Symbol* GetRegisterSymbol(byte registerNumber) const
        {
            Map<byte, Symbol*>.ConstIterator it = registerMap.CFind(registerNumber);
            if (it != registerMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public void AddSymbol(Symbol* symbol, bool setIndex)
        {
            if (setIndex)
            {
                symbol->index = cast<int>(symbols.Count());
            }
            symbols.Add(UniquePtr<Symbol>(symbol));
            table[symbol->name] = symbol;
            if (symbol->value.flags == Value.Flag.register)
            {
                registerMap[cast<byte>(symbol->value.value)] = symbol;
            }
            valueMap[symbol->value.value] = symbol;
        }
        public void AddSymbol(Symbol* symbol)
        {
            AddSymbol(symbol, true);
        }
        public void AddSymbolToAddressMap(Symbol* symbol)
        {
            if (symbol->value.GetFlag(Value.Flag.address))
            {
                symbol->start = symbol->section->baseAddress + symbol->value.value;
                addressMap[symbol->start] = symbol;
            }
        }
        public void AddInternalSymbol(Symbol* internalSymbol, bool setIndex)
        {
            if (setIndex)
            {
                internalSymbol->index = cast<int>(internalSymbols.Count());
            }
            #assert(internalSymbol->linkage == Linkage.internal_);
            internalSymbols.Add(UniquePtr<Symbol>(internalSymbol));
            addressMap[internalSymbol->start] = internalSymbol;
            if (internalSymbol->value.flags == Value.Flag.register)
            {
                registerMap[cast<byte>(internalSymbol->value.value)] = internalSymbol;
            }
        }
        public void AddInternalSymbol(Symbol* internalSymbol)
        {
            AddInternalSymbol(internalSymbol, true);
        }
        private BinaryFile* file;
        private List<UniquePtr<Symbol>> symbols;
        private List<UniquePtr<Symbol>> internalSymbols;
        private Map<string, Symbol*> table;
        private Map<ulong, Symbol*> addressMap;
        private Map<byte, Symbol*> registerMap;
        private Map<ulong, Symbol*> valueMap;
    }
}
