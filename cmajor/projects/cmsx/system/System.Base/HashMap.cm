// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Concepts;

namespace System.Collections
{
    public class HashMap<K, T, H = Hasher<K>, C = EqualTo<K>>
        where K is Semiregular and T is Semiregular and HashFunction<H, K> and C is Relation and C.Domain is K
    {
        public typedef K KeyType;
        public typedef T MappedType;
        public typedef Pair<KeyType, MappedType> ValueType;
        public typedef H HashFun;
        public typedef C Compare;
        public typedef TableType.ConstIterator ConstIterator;
        public typedef TableType.Iterator Iterator;
        private typedef HashMap<KeyType, MappedType, HashFun, Compare> Self;
        private typedef Hashtable<KeyType, ValueType, SelectFirst<KeyType, MappedType>, HashFun, Compare> TableType;

        public inline nothrow Iterator Begin()
        {
            return table.Begin();
        }
        public inline nothrow ConstIterator Begin() const
        {
            return table.CBegin();
        }
        public inline nothrow ConstIterator CBegin() const
        {
            return table.CBegin();
        }
        public inline nothrow Iterator End()
        {
            return table.End();
        }
        public inline nothrow ConstIterator End() const
        {
            return table.CEnd();
        }
        public inline nothrow ConstIterator CEnd() const
        {
            return table.CEnd();
        }
        public inline nothrow long Count() const
        {
            return table.Count();
        }
        public inline nothrow bool IsEmpty() const
        {
            return table.IsEmpty();
        }
        public inline nothrow void Clear()
        {
            table.Clear();
        }
        public inline nothrow Iterator Find(const KeyType& key) 
        {
            return table.Find(key);
        }
        public inline nothrow ConstIterator Find(const KeyType& key) const
        {
            return table.CFind(key);
        }
        public inline nothrow ConstIterator CFind(const KeyType& key) const
        {
            return table.CFind(key);
        }
        public inline MappedType& operator[](const KeyType& key)
        {
            Pair<Iterator, bool> ib = Insert(ValueType(key, MappedType()));
            Iterator i = ib.first;
            return i->second;
        }
        public inline Pair<Iterator, bool> Insert(const ValueType& value)
        {
            return table.Insert(value);
        }
        public inline nothrow void Remove(const KeyType& key)
        {
            table.Remove(key);
        }
        public inline nothrow void Remove(Iterator pos)
        {
            table.Remove(pos);
        }
        private TableType table;
    }

    public nothrow bool operator==<K, T, H, C>(const HashMap<K, T, H, C>& left, const HashMap<K, T, H, C>& right) 
        where K is Semiregular and T is Semiregular and HashFunction<H, K> and C is Relation and C.Domain is K
    {
        if (left.Count() != right.Count()) return false;
        for (const Pair<K, T>& p : left)
        {
            HashMap<K, T, H, C>.ConstIterator i = right.CFind(p.first);
            if (i == right.CEnd()) return false;
            if (i->second != p.second) return false;
        }
        return true;
    }
}
