// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.IO;

namespace System.Os
{
    public nothrow void Exit(byte exitCode)
    {
        exit(exitCode);
    }
    
    public int Wait(ushort* exitCodeAddress)
    {
        int result = wait(exitCodeAddress);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public int Fork()
    {
        int result = fork();
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public int Create(const char* path, int mode)
    {
        int result = create(path, mode);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public int Open(const char* path, int flags, int mode)
    {
        int result = open(path, flags, mode);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public void Close(int fd)
    {
        int result = close(fd);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public long Read(int fd, void* buffer, long count)
    {
        long result = read(fd, buffer, count);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public long Write(int fd, void* buffer, long count)
    {
        long result = write(fd, buffer, count);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public long Seek(int fd, long pos, byte origin)
    {
        long result = seek(fd, pos, origin);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public long Tell(int fd)
    {
        long result = tell(fd);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public nothrow void* PoolEnd()
    {
        return pool_end();
    }
    
    public void SetPoolEnd(void* poolEnd)
    {
        long result = set_pool_end(poolEnd);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }

    public void StackTrace(void* buffer, long count)
    {
        long result = stack_trace(buffer, count);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public uint GetRandomSeed()
    {
        long seed = get_random_seed();
        if (seed == -1)
        {
            ThrowSystemError();
        }
        return cast<uint>(seed);
    }
    
    public bool IsHostTextFile(int fd)
    {
        int result = is_host_text_file(fd);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result != 0;
    }

    public bool IsConsole(int fd)
    {
        int result = is_console(fd);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result != 0;
    }
    
    public void RemoveFile(const char* filePath)
    {
        int result = unlink(filePath);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public void Mkdir(const char* path)
    {
        int result = mkdir(path);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public int OpenDir(const char* dirPath)
    {
        int result = opendir(dirPath);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public int ReadDir(int dd, int* inodeNumber, char* entryName)
    {
        int result = readdir(dd,inodeNumber, entryName);
        if (result == -1)
        {
            ThrowSystemError();
        }
        return result;
    }
    
    public void CloseDir(int dd)
    {
        int result = closedir(dd);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public void GetCWD(char* buffer, long count)
    {
        int result = getcwd(buffer, count);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public void ChDir(const char* path)
    {
        int result = chdir(path);
        if (result == -1)
        {
            ThrowSystemError();
        }
    }
    
    public const int statBufSize = 56;

    public void Stat(const char* path, StatInfo& statInfo)
    {
        byte[statBufSize] statBuf;
        int result = stat(path, &statBuf[0]);
        if (result == -1)
        {
            ThrowSystemError();
        }
        StatBufToStatInfo(&statBuf[0], statInfo);
    }
}
