using System;
using System.Threading;
using System.IO;
using System.Collections;
using System.Unicode;
using cmsx.machine;

namespace cmsx.kernel
{
    public delegate void ConsoleInputCallback();

    public Kernel& GetKernel()
    {
        return Kernel.Instance();
    }

    public const ushort FOREGROUND_BLUE = 0x01u;
    public const ushort FOREGROUND_GREEN = 0x02u;
    public const ushort FOREGROUND_RED = 0x04u;
    public const ushort FOREGROUND_INTENSITY = 0x08u;
    public const ushort BACKGROUND_BLUE = 0x10u;
    public const ushort BACKGROUND_GREEN = 0x20u;
    public const ushort BACKGROUND_RED = 0x40u;
    public const ushort BACKGROUND_INTENSITY = 0x80u;

    public enum ConsoleColor : byte
    {
        black = 0u, darkBlue = 1u, darkGreen = 2u, darkCyan = 3u, darkRed = 4u, darkYellow = 6u, gray = 7u,
        darkGray = 8u, blue = 9u, green = 10u, cyan = 11u, red = 12u, magenta = 13u, yellow = 14u, white = 15u
    }

    public string ConsoleColorName(ConsoleColor color)
    {
        switch (color)
        {
            case ConsoleColor.black: return "black";
            case ConsoleColor.darkBlue: return "darkblue";
            case ConsoleColor.darkGreen: return "dardgreen";
            case ConsoleColor.darkCyan: return "dardcyan";
            case ConsoleColor.darkRed: return "darkred";
            case ConsoleColor.darkYellow: return "darkyellow";
            case ConsoleColor.gray: return "gray";
            case ConsoleColor.darkGray: return "darkgray";
            case ConsoleColor.blue: return "blue";
            case ConsoleColor.green: return "green";
            case ConsoleColor.cyan: return "cyan";
            case ConsoleColor.red: return "red";
            case ConsoleColor.magenta: return "magenta";
            case ConsoleColor.yellow: return "yellow";
            case ConsoleColor.white: return "white";
        }
        return string();
    }

    public const uchar beginColors = cast<uchar>(0x100000u);    // begin Unicode supplemental private use area B
    public const uchar endColors = cast<uchar>(0x10FFFDu);      // end Unicode supplemental private use area B

    public nothrow inline bool BeginColors(uchar c)
    {
        return (cast<uint>(c) & cast<uint>(beginColors)) == cast<uint>(beginColors);
    }

    public nothrow inline bool EndColors(uchar c)
    {
        return c == endColors;
    }

    public nothrow inline void GetColors(uchar c, ConsoleColor& foregroundColor, ConsoleColor& backgroundColor)
    {
        ushort x = cast<ushort>(cast<uint>(c));
        foregroundColor = cast<ConsoleColor>(cast<byte>(x));
        backgroundColor = cast<ConsoleColor>(cast<byte>(x >> 8u));
    }

    public class ConsoleDriver
    {
        static ConsoleDriver() : instance(new ConsoleDriver())
        {
        }
        public static ConsoleDriver& Instance()
        {
            return *instance;
        }
        private ConsoleDriver() :
            consoleInputHandle(OsGetStdHandle(stdin)), consoleOutputHandle(OsGetStdHandle(stdout)), machine(GetMachine()),
            pos(0), cursorPosX(0), cursorPosY(0), outputEndCursorPosX(0), outputEndCursorPosY(0), attributes(0u), obeyColorStrings(false), echo(true)
        {
            ConsoleInputCallback callback = ConsoleInputWaitingCallback;
            ulong callBackValue = cast<ulong>(cast<void*>(callback));
            bool retVal = OsRegisterConsoleCallback(consoleInputHandle, callBackValue);
            if (!retVal)
            {
                Panic("Console driver callback initialization failed");
            }
        }
        public void Stop()
        {
            consoleInputHandle = null;
        }
        public void GetDimensions(int& rows, int& cols)
        {
            GetDimensions();
            rows = screenSizeY;
            cols = screenSizeX;
        }
        public void GetDimensions()
        {
            if (!OsGetConsoleScreenBufferInfo(consoleOutputHandle, &cursorPosX, &cursorPosY, &screenSizeX, &screenSizeY, &attributes))
            {
                Panic("Console driver screen buffer info initialization failed");
            }
        }
        public nothrow inline bool Eof() const
        {
            return eof;
        }
        public nothrow inline void ResetEof()
        {
            eof = false;
        }
        public nothrow inline bool Echo() const
        {
            return echo;
        }
        public nothrow inline void SetEcho(bool echo_)
        {
            echo = echo_;
        }
        public nothrow bool HasLine() const
        {
            return !lines.IsEmpty();
        }
        public nothrow string GetLine() const
        {
            return ToUtf8(lines.RemoveFirst());
        }
        public nothrow inline void* GetConsoleInputHandle()
        {
            return consoleInputHandle;
        }
        public nothrow inline void* GetConsoleOutputHandle()
        {
            return consoleOutputHandle;
        }
        public void GetConsoleColors(ConsoleColor& foregroundColor, ConsoleColor& backgroundColor)
        {
            foregroundColor = cast<ConsoleColor>(cast<byte>(attributes & 0x0Fu));
            backgroundColor = cast<ConsoleColor>(cast<byte>((attributes >> 8u) & 0x0Fu));
        }
        public void SetConsoleColors(ConsoleColor foregroundColor, ConsoleColor backgroundColor)
        {
            ushort attrs = cast<ushort>(cast<byte>(foregroundColor)) | (cast<ushort>(cast<byte>(backgroundColor)) << 8u);
            // Note if passing OsGetStdHandle(stdout) from here as a parameter, the following call fails, but it does not fail if we call GetStdHandle() from the DLL!!!
            if (!OsSetConsoleTextAttribute(attrs)) 
            {
                Panic("Console driver could not set text attributes: WIN32 error " + ToString(OsGetLastError()));
            }
            attributes = attrs;
        }
        public void PushColors(ConsoleColor foregroundColor, ConsoleColor backgroundColor)
        {
            attributeStack.Push(attributes);
            SetConsoleColors(foregroundColor, backgroundColor);
        }
        public void PopColors()
        {
            attributes = attributeStack.Pop();
            OsSetConsoleTextAttribute(attributes);
        }
        public void BeginObeyColorStrings()
        {
            obeyColorStrings = true;
        }
        public void EndObeyColorStrings()
        {
            obeyColorStrings = false;
        }
        public void WriteToConsole(byte* buffer, long count)
        {
            ustring u;
            for (long i = 0; i < count; ++i)
            {
                byte x = buffer[i];
                unicodeEngine.Put(x);
                if (unicodeEngine.ResultReady())
                {
                    uchar c = unicodeEngine.Get();
                    if (c != '\r')
                    {
                        u.Append(c);
                    }
                }
            }
            if (!u.IsEmpty())
            {
                if (obeyColorStrings)
                {
                    WriteWithColors(u);
                }
                else
                {
                    Write(u);
                }
            }
        }
        private void Write(const ustring& u)
        {
            OsWriteConsole(consoleOutputHandle, u.Chars());
            GetDimensions();
            outputEndCursorPosX = cursorPosX;
            outputEndCursorPosY = cursorPosY;
        }
        public void WriteWithColors(const ustring& u)
        {
            ustring buffer;
            for (uchar c : u)
            {
                if (EndColors(c))
                {
                    if (!buffer.IsEmpty())
                    {
                        Write(buffer);
                        buffer.Clear();
                    }
                    PopColors();
                }
                else if (BeginColors(c))
                {
                    if (!buffer.IsEmpty())
                    {
                        Write(buffer);
                        buffer.Clear();
                    }
                    ConsoleColor foregroundColor;
                    ConsoleColor backgroundColor;
                    GetColors(c, foregroundColor, backgroundColor);
                    PushColors(foregroundColor, backgroundColor);
                }
                else
                {
                    buffer.Append(c);
                }
            }
            if (!buffer.IsEmpty())
            {
                Write(buffer);
            }
        }
        public void KeyPressed(uchar c)
        {
            AddCharToInputBuffer(c);
            machine.GetRegisters().SetInterrupt(KEYBOARD_BIT);
        }
        public void HandleBufferedInput()
        {
            GetDimensions();
            outputEndCursorPosY = cursorPosY;
            ustring chars = GetCharsFromInputBuffer();
            for (uchar c : chars)
            {
                switch (c)
                {
                    case cast<uchar>(keyEnter): HandleEnter(); break;
                    case cast<uchar>(keyControlD): HandleEof(); break;
                    case cast<uchar>(keyHome): HandleHome(); break;
                    case cast<uchar>(keyEnd): HandleEnd(); break;
                    case cast<uchar>(keyLeft): HandleLeft(); break;
                    case cast<uchar>(keyRight): HandleRight(); break;
                    case cast<uchar>(keyDel): HandleDelete(); break;
                    case cast<uchar>(keyBackspace): HandleBackspace(); break;
                    default: HandleChar(c); break;
                }
            }
        }
        private void DeliverInputLine()
        {
            Machine& machine = GetMachine();
            Kernel& kernel = GetKernel();
            Session* session = kernel.CurrentSession();
            if (session->fgpid != -1)
            {
                ProcessTable& processTable = kernel.GetProcessTable();
                Process* reader = processTable.GetProcess(session->fgpid);
                if (reader != null)
                {
                    if (reader->state == Process.State.asleep && reader->event == consoleInputEvent)
                    {
                        GlobalFileTable& fileTable = kernel.FileTable();
                        ConsoleInputFile* consoleInputFile = fileTable.GetConsoleInputFile();
                        if (!consoleInputFile->HasBufferedInput())
                        {
                            if (HasLine())
                            {
                                consoleInputFile->SetBufferedInput(GetLine());
                            }
                        }
                        WakeUpProcess(processTable, reader);
                    }
                }
            }
        }
        private void HandleEnter()
        {
            line.Append('\n');
            lines.Add(line);
            line.Clear();
            DeliverInputLine();
            pos = 0;
            ++cursorPosY;
            SetCursorPos(0, cursorPosY);
            outputEndCursorPosX = 0;
            outputEndCursorPosY = cursorPosY;
        }
        private void HandleEof()
        {
            eof = true;
            lines.Add(line);
            line.Clear();
            DeliverInputLine();
            pos = 0;
            ++cursorPosY;
            SetCursorPos(0, cursorPosY);
            outputEndCursorPosX = 0;
            outputEndCursorPosY = cursorPosY;
        }
        private void HandleHome()
        {
            pos = 0;
            if (echo)
            {
                SetCursorPos(outputEndCursorPosX, outputEndCursorPosY);
            }
        }
        private void HandleEnd()
        {
            pos = cast<int>(line.Length());
            if (echo)
            {
                SetCursorPos(outputEndCursorPosX + pos, outputEndCursorPosY);
            }
        }
        private void HandleLeft()
        {
            if (pos > 0)
            {
                --pos;
                if (echo)
                {
                    SetCursorPos(outputEndCursorPosX + pos, outputEndCursorPosY);
                }
            }
        }
        private void HandleRight()
        {
            if (pos < line.Length())
            {
                ++pos;
                if (echo)
                {
                    SetCursorPos(outputEndCursorPosX + pos, outputEndCursorPosY);
                }
            }
        }
        private void HandleDelete()
        {
            if (pos < line.Length())
            {
                ++pos;
                line = line.Substring(0, pos - 1) + line.Substring(pos);
                --pos;
                UpdateLine();
            }
        }
        private void HandleBackspace()
        {
            if (pos > 0)
            {
                line = line.Substring(0, pos - 1) + line.Substring(pos);
                --pos;
                UpdateLine();
                if (echo)
                {
                    SetCursorPos(outputEndCursorPosX + pos, outputEndCursorPosY);
                }
            }
        }
        private void HandleChar(uchar c)
        {
            if (IsGraphic(c) && cursorPosX < screenSizeX - 1)
            {
                if (pos < line.Length())
                {
                    line = line.Substring(0, pos) + ustring(c, 1) + line.Substring(pos);
                }
                else
                {
                    line.Append(c);
                }
                ++pos;
                UpdateLine();
                if (echo)
                {
                    SetCursorPos(outputEndCursorPosX + pos, outputEndCursorPosY);
                }
            }
        }
        private void AddCharToInputBuffer(uchar c)
        {
            LockGuard<Mutex> lock(inputBufferMutex);
            inputBuffer.Append(c);
        }
        private ustring GetCharsFromInputBuffer()
        {
            LockGuard<Mutex> lock(inputBufferMutex);
            ustring chars;
            Swap(chars, inputBuffer);
            return chars;
        }
        private void SetCursorPos(int x, int y)
        {
            cursorPosX = x;
            cursorPosY = y;
            OsSetConsoleCursorPosition(consoleOutputHandle, x, y);
        }
        private void UpdateLine()
        {
            if (!echo) return;
            int prevCursorPosX = cursorPosX;
            int prevCursorPosY = cursorPosY;
            SetCursorPos(outputEndCursorPosX, outputEndCursorPosY);
            ustring updateLine;
            cursorPosX = outputEndCursorPosX;
            cursorPosY = outputEndCursorPosY;
            for (int i = 0; i < line.Length(); ++i)
            {
                if (cursorPosX + i < screenSizeX)
                {
                    updateLine.Append(line[i]);
                }
                else
                {
                    OsWriteConsole(consoleOutputHandle, updateLine.Chars());
                    updateLine.Clear();
                    cursorPosX = 0;
                    ++cursorPosY;
                }
            }
            if (!updateLine.IsEmpty())
            {
                OsWriteConsole(consoleOutputHandle, updateLine.Chars());
                updateLine.Clear();                
            }
            for (int i = cursorPosX; i < screenSizeX; ++i)
            {
                updateLine.Append(' ');
            }
            OsWriteConsole(consoleOutputHandle, updateLine.Chars());
            SetCursorPos(prevCursorPosX, prevCursorPosY);
        }
        private static UniquePtr<ConsoleDriver> instance;
        private void* consoleInputHandle;
        private void* consoleOutputHandle;
        private Machine& machine;
        private ustring inputBuffer;
        private Mutex inputBufferMutex;
        private ustring line;
        private List<ustring> lines;
        private bool eof;
        private int pos;
        private int cursorPosX;
        private int cursorPosY;
        private int outputEndCursorPosX;
        private int outputEndCursorPosY;
        private int screenSizeX;
        private int screenSizeY;
        private ushort attributes;
        private Stack<ushort> attributeStack;
        private UnicodeEngine unicodeEngine;
        private bool obeyColorStrings;
        private bool echo;
    }

    public void ConsoleInputWaitingCallback()
    {
        if (ConsoleDriver.Instance().GetConsoleInputHandle() != null)
        {
            uchar c = '\0';
            bool retVal = OsReadConsoleInput(ConsoleDriver.Instance().GetConsoleInputHandle(), &c);
            if (retVal && c != '\0')
            {
                ConsoleDriver.Instance().KeyPressed(c);
            }
        }
    }

    public ConsoleDriver& GetConsoleDriver()
    {
        return ConsoleDriver.Instance();
    }
}
