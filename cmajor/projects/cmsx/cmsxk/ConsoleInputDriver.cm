using System;
using System.IO;
using cmsx.machine;

namespace cmsx.kernel
{
    public class ConsoleInput
    {
        public static nothrow void SetHandle(void* handle_)
        {
            handle = handle_;
        }
        public static nothrow void* GetHandle()
        {
            return handle;
        }
        private static void* handle;
    }

    public void ConsoleInputWaiting()
    {
        void* consoleInputHandle = ConsoleInput.GetHandle();
        if (consoleInputHandle != null)
        {
            uchar c = '\0';
            bool retVal = OsReadConsoleInput(consoleInputHandle, &c);
            if (retVal)
            {
                Console.WriteLine(ToString(cast<int>(c)));
            }
            else
            {
                Console.WriteLine("failed");
            }
        }
        else
        {
            Console.WriteLine("console input handle is null");
        }
    }

    public delegate void ConsoleInputCallback();

    public class ConsoleInputDriver
    {
        public void Initialize()
        {
            consoleInputHandle = OsGetStdHandle(stdin);
            ConsoleInput.SetHandle(consoleInputHandle);
            ConsoleInputCallback callback = ConsoleInputWaiting;
            ulong callBackValue = cast<ulong>(cast<void*>(callback));
            bool retVal = OsRegisterConsoleCallback(consoleInputHandle, callBackValue);
            if (retVal)
            {
                Console.WriteLine("registering succeeded");
            }
            else
            {
                Console.WriteLine("registering failed");
            }
        }
        private void* consoleInputHandle;
    }
}
