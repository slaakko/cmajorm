using System;

namespace cmsx.kernel
{
    public const long maxSegmentDescriptors = 4096;

    public class SegmentDescriptor
    {
        public nothrow SegmentDescriptor() : startAddress(0u), length(0u), useCount(1u), next(null)
        {
        }
        public nothrow SegmentDescriptor(ulong startAddress_, ulong length_) : startAddress(startAddress_), length(length_), useCount(1u), next(null)
        {
        }
        public ulong startAddress;  // address of the first byte 
        public ulong length;        // length of the segment in bytes
        public byte useCount;       // use count
        public SegmentDescriptor* next; // next free segment descriptor in free list
    }

    public class SegmentTable
    {
        static SegmentTable() : instance(new SegmentTable())
        {
        }
        public static nothrow SegmentTable& Instance()
        {
            return *instance;
        }
        public nothrow SegmentDescriptor* AllocateSegmentDescriptor()
        {
            if (freeSegmentDescriptor != null)
            {
                SegmentDescriptor* sd = freeSegmentDescriptor;
                freeSegmentDescriptor = freeSegmentDescriptor->next;
                return sd;
            }
            else if (unusedSegmentDescriptorIndex < maxSegmentDescriptors)
            {
                SegmentDescriptor* sd = &segmentDescriptors[unusedSegmentDescriptorIndex++];
                return sd;
            }
            else
            {
                return null;
            }
        }
        public nothrow void FreeSegmentDescriptor(SegmentDescriptor* sd)
        {
            *sd = SegmentDescriptor();
            sd->next = freeSegmentDescriptor;
            freeSegmentDescriptor = sd;
        }
        private static UniquePtr<SegmentTable> instance;
        private SegmentDescriptor[maxSegmentDescriptors] segmentDescriptors;
        private SegmentDescriptor* freeSegmentDescriptor;
        private long unusedSegmentDescriptorIndex;
    }

    public nothrow SegmentDescriptor* CreateSegmentDescriptor(ulong startAddress, ulong length)
    {
        SegmentDescriptor* sd = SegmentTable.Instance().AllocateSegmentDescriptor();
        if (sd != null)
        {
            sd->startAddress = startAddress;
            sd->length = length;
            sd->useCount = 1u;
            sd->next = null;
            return sd;
        }
        else
        {
            return null;
        }
    }

    public nothrow void FreeSegmentDescriptor(SegmentDescriptor* sd)
    {
        #assert(sd->useCount == 0);
        if (sd->useCount == 0u)
        {
            SegmentTable.Instance().FreeSegmentDescriptor(sd);
        }
    }
}
