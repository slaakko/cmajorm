using System;
using System.Collections;
using System.Threading;
using cmsx.machine;
using cmsx.util;

public const ulong ERROR_IO_PENDING = 997u;

namespace cmsx.kernel
{
    public const ulong ddExitCompletionKey = 0xFFFFFFFFFFFFFFFFu;
    public const ulong ddRequestCompletionKey = 0xFFFFFFFFFFFFFFFEu;

    public enum IOOperation
    {
        read, write
    }

    public nothrow string IOOperationStr(IOOperation op)
    {
        if (op == IOOperation.read)
        {
            return "read";
        }
        else if (op == IOOperation.write)
        {
            return "write";
        }
        return string();
    }

    public class Overlapped
    {
        public nothrow Overlapped(ulong offset)
        {
            overlapped = OsCreateOverlapped(offset);
        }
        public ~Overlapped()
        {
            OsDestroyOverlapped(overlapped);
        }
        public nothrow inline void* Get() const
        {
            return overlapped;
        }
        private void* overlapped;
    }

    public class Buffer
    {
        public nothrow Buffer() : buffer(RtMemAlloc(blockSize))
        {
            RtMemZero(buffer, blockSize);
        }
        public ~Buffer()
        {
            RtMemFree(buffer);
        }
        public nothrow inline void* Get() const
        {
            return buffer;
        }
        private void* buffer;
    }

    public class IORequest
    {
        public nothrow IORequest(int number_, Block* block_, ulong offset_, cmsx.kernel.Process* process_, IOOperation op_, bool deliver_) :
            number(number_), block(block_), overlapped(offset_), process(process_), op(op_), deliver(deliver_)
        {
        }
        public string ToString()
        {
            string s = "number=";
            s.Append(ToString(number));
            s.Append(".block=").Append(block->ToString());
            s.Append(".overlapped=").Append(ToHexString(cast<ulong>(overlapped.Get())));
            s.Append(".process=").Append(ProcessName(process));
            s.Append(".op=").Append(IOOperationStr(op));
            s.Append(".count=").Append(ToString(numberOfBytesTransferred));
            s.Append(".deliver=").Append(ToString(deliver));
            return s;
        }
        public int number;
        public Block* block;
        public Overlapped overlapped;
        public Buffer buffer;
        public cmsx.kernel.Process* process;
        public IOOperation op;
        public ulong numberOfBytesTransferred;
        public bool deliver;
    }

    public class IOCompletion
    {
        public nothrow IOCompletion(IORequest* request_) : request(request_)
        {
        }
        public IORequest* request;
    }

    public abstract class DDRequest
    {
        public abstract void Execute(DiskDriver* dd);
    }

    public class AddFileDDRequest : DDRequest
    {
        public nothrow AddFileDDRequest(HostFile* hostFile_) : hostFile(hostFile_)
        {
        }
        public override void Execute(DiskDriver* dd)
        {
            dd->AddFile(hostFile);
        }
        private HostFile* hostFile;
    }

    public class DiskDriver
    {
        static DiskDriver() : instance(new DiskDriver())
        {
        }
        public static nothrow DiskDriver& Instance()
        {
            return *instance;
        }
        private DiskDriver() : exit(false), completionPort(OsCreateIoCompletionPort()), nextHostFileKey(0u), ddRequestProcessedEvent(OsCreateEvent())
        {
            if (completionPort == null)
            {
                ulong lastError = OsGetLastError();
                Buffer messageBuf;
                OsFormatMessage(lastError, cast<char*>(messageBuf.Get()));
                const char* msg = cast<const char*>(messageBuf.Get());
                string message = "error opening disk driver: creating I/O completion port failed: ";
                message.Append(msg);
                Panic(message);
            }
        }
        public ~DiskDriver()
        {
            OsCloseIoCompletionPort(completionPort);
            OsCloseEvent(ddRequestProcessedEvent);
        }
        public HostFile* GetOrInsertHostFile(const string& hostFilePath, bool randomAccess)
        {
            if (Log())
            {
                LogMessage("fs.dd.GetOrInsertHostFile", "begin");
            }
            HostFile* hostFile = null;
            {
                LockGuard<Mutex> lock(mtx);
                HashMap<string, HostFile*>.ConstIterator it = pathHostFileMap.CFind(hostFilePath);
                if (it != pathHostFileMap.CEnd())
                {
                    return it->second;
                }
                else
                {
                    hostFile = new HostFile(hostFilePath, nextHostFileKey++, randomAccess);
                    pathHostFileMap[hostFilePath] = hostFile;
                    keyHostFileMap[hostFile->Key()] = hostFile;
                    hostFiles.Add(UniquePtr<HostFile>(hostFile));
                    if (Log())
                    {
                        LogMessage("fs.dd.GetOrInsertHostFile", "add:key=" + ToString(hostFile->Key()) + ".path=" + hostFile->GetHostFilePath() + ".randomAccess=" + ToString(randomAccess));
                    }
                }
            }
            if (Log())
            {
                LogMessage("fs.dd.GetOrInsertHostFile", "end");
            }
            SendAddFileRequest(hostFile);
            return hostFile;
        }
        public void SendAddFileRequest(HostFile* hostFile)
        {
            {
                LockGuard<Mutex> lock(mtx);
                ddRequestQueue.Put(UniquePtr<DDRequest>(new AddFileDDRequest(hostFile)));
                if (!OsPostQueuedCompletionStatus(completionPort, 0u, ddRequestCompletionKey))
                {
                    ulong lastError = OsGetLastError();
                    Buffer messageBuf;
                    OsFormatMessage(lastError, cast<char*>(messageBuf.Get()));
                    const char* msg = cast<const char*>(messageBuf.Get());
                    string message = "error operating disk driver: post queued completion status failed: ";
                    message.Append(msg);
                    Panic(message);
                }
            }
            OsWaitEvent(ddRequestProcessedEvent);
        }
        public void AddFile(HostFile* hostFile)
        {
            if (Log())
            {
                LogMessage("fs.dd.AddFile", "begin.key=" + ToString(hostFile->Key()) + ".path=" + hostFile->GetHostFilePath());
            }
            if (OsAssociateFileWithCompletionPort(hostFile->GetFileHandle(), completionPort, hostFile->Key()) == null)
            {
                ulong lastError = OsGetLastError();
                Buffer messageBuf;
                OsFormatMessage(lastError, cast<char*>(messageBuf.Get()));
                const char* msg = cast<const char*>(messageBuf.Get());
                string message = "error operating disk driver: associating file with completion port failed: ";
                message.Append(msg);
                throw Exception(message);
            }
            if (Log())
            {
                LogMessage("fs.dd.AddFile", "end");
            }
        }
        public void RemoveHostFile(const string& hostFilePath)
        {
            if (Log())
            {
                LogMessage("fs.dd.RemoveHostFile", "begin");
            }
            {
                LockGuard<Mutex> lock(mtx);
                HashMap<string, HostFile*>.ConstIterator it = pathHostFileMap.CFind(hostFilePath);
                if (it != pathHostFileMap.CEnd())
                {
                    HostFile* hostFile = it->second;
                    long n = hostFiles.Count();
                    for (long i = 0; i < n; ++i)
                    {
                        if (hostFile == hostFiles[i].Get())
                        {
                            if (Log())
                            {
                                LogMessage("fs.dd.RemoveHostFile", "remove:key=" + ToString(hostFile->Key()) + ".path=" + hostFile->GetHostFilePath());
                            }
                            keyHostFileMap.Remove(hostFile->Key());
                            pathHostFileMap.Remove(hostFile->GetHostFilePath());
                            hostFiles.Remove(hostFiles.Begin() + i);
                            if (Log())
                            {
                                LogMessage("fs.dd.RemoveHostFile", "end");
                            }
                            return;
                        }
                    }
                }
                else
                {
                    throw SystemError(EFAIL, "host file '" + hostFilePath + "' not found in disk driver");
                }
            }
            if (Log())
            {
                LogMessage("fs.dd.RemoveHostFile", "end");
            }
        }
        public void Start()
        {
            ThreadStartMethod runMethod = Run;
            thread = Thread.StartMethod(runMethod);
        }
        public void Stop()
        {
            Exit();
            thread.Join();
        }
        public void Exit()
        {
            if (Log())
            {
                LogMessage("fs.dd", "exit");
            }
            exit = true;
            if (!OsPostQueuedCompletionStatus(completionPort, 0u, ddExitCompletionKey))
            {
                if (Log())
                {
                    LogMessage("fs.dd", "exit:postQueuedCompletionStatus.failed");
                }
            }
        }
        public long Read(Block* block)
        {
            if (Log())
            {
                LogMessage("fs.dd.read", "begin");
            }
            FileSystem* fs = GetMountTable().GetFileSystem(block->Key().fsNumber);
            HostFile* hostFile = fs->GetHostFile(block->Key().fsNumber);
            ulong offset = cast<ulong>(block->Key().blockNumber * blockSize);
            void* fiberData = OsGetFiberData();
            cmsx.kernel.Process* process = cast<cmsx.kernel.Process*>(fiberData);
            UniquePtr<IORequest> request;
            {
                LockGuard<Mutex> lock(mtx);
                request.Reset(new IORequest(nextRequestNumber++, block, offset, process, IOOperation.read, true));
                requestMap[request->overlapped.Get()] = request.Get();
            }
            if (Log())
            {
                LogMessage("fs.dd.read", block->ToString() + ".request:" + request->ToString());
            }
            bool result = OsReadFile(hostFile->GetFileHandle(), request->buffer.Get(), cast<uint>(blockSize), request->overlapped.Get());
            if (result)
            {
                if (Log())
                {
                    LogMessage("fs.dd.read", "immediate=" + request->ToString());
                }
                MemoryWriter writer(cast<byte*>(request->buffer.Get()), blockSize);
                block->Write(writer);
                {
                    LockGuard<Mutex> lock(mtx);
                    requestMap.Remove(request->overlapped.Get());
                }
                long res = cast<long>(request->numberOfBytesTransferred);
                if (Log())
                {
                    LogMessage("fs.dd.read", "end.immediate");
                }
                return res;
            }
            ulong lastError = OsGetLastError();
            if (lastError == ERROR_IO_PENDING)
            {
                lastError = 0u;
            }
            if (lastError == 0u)
            {
                if (Log())
                {
                    LogMessage("fs.dd.read", "sleep");
                }
                SleepProcess(process, blockIOEvent, cast<ulong>(cast<void*>(block)), 0u);
                if (Log())
                {
                    LogMessage("fs.dd.read", "wake up");
                }
                MemoryReader reader(cast<byte*>(request->buffer.Get()), blockSize);
                block->Read(reader);
                {
                    LockGuard<Mutex> lock(mtx);
                    requestMap.Remove(request->overlapped.Get());
                }
                if (Log())
                {
                    LogMessage("fs.dd.read", "end.deliver=true");
                }
                long res = cast<long>(request->numberOfBytesTransferred);
                return res;
            }
            else
            {
                {
                    LockGuard<Mutex> lock(mtx);
                    requestMap.Remove(request->overlapped.Get());
                }
                Buffer messageBuf;
                OsFormatMessage(lastError, cast<char*>(messageBuf.Get()));
                const char* msg = cast<const char*>(messageBuf.Get());
                string message = "Could not read from file '";
                message.Append(hostFile->GetHostFilePath()).Append("': ").Append(msg);
                if (Log())
                {
                    LogMessage("fs.dd.read", "end.error");
                }
                throw SystemError(EIO, message);
            }
        }
        public long Write(Block* block)
        {
            if (Log())
            {
                LogMessage("fs.dd.write", "begin");
            }
            FileSystem* fs = GetMountTable().GetFileSystem(block->Key().fsNumber);
            HostFile* hostFile = fs->GetHostFile(block->Key().fsNumber);
            ulong offset = cast<ulong>(block->Key().blockNumber * blockSize);
            void* fiberData = OsGetFiberData();
            cmsx.kernel.Process* process = cast<cmsx.kernel.Process*>(fiberData);
            bool deliver = false;
            if (Machine.GetFlag(Machine.Flags.sleepingWrite) || process == null)
            {
                deliver = true;
            }
            UniquePtr<IORequest> request;
            {
                LockGuard<Mutex> lock(mtx);
                request.Reset(new IORequest(nextRequestNumber++, block, offset, process, IOOperation.write, deliver));
                requestMap[request->overlapped.Get()] = request.Get();
            }
            MemoryWriter writer(cast<byte*>(request->buffer.Get()), blockSize);
            block->Write(writer);
            if (Log())
            {
                LogMessage("fs.dd.write", block->ToString() + ".request:" + request->ToString());
            }
            bool result = OsWriteFile(hostFile->GetFileHandle(), request->buffer.Get(), cast<uint>(blockSize), request->overlapped.Get());
            if (result)
            {
                if (Log())
                {
                    LogMessage("fs.dd.write", "immediate=" + request->ToString());
                }
                {
                    LockGuard<Mutex> lock(mtx);
                    requestMap.Remove(request->overlapped.Get());
                }
                long res = cast<long>(request->numberOfBytesTransferred);
                if (Log())
                {
                    LogMessage("fs.dd.write", "end.immediate");
                }
                return res;
            }
            ulong lastError = OsGetLastError();
            if (lastError == ERROR_IO_PENDING)
            {
                lastError = 0u;
            }
            if (lastError == 0u)
            {
                if (request->deliver)
                {
                    if (Log())
                    {
                        LogMessage("fs.dd.write", "sleep");
                    }
                    SleepProcess(process, blockIOEvent, cast<ulong>(cast<void*>(block)), 0u);
                    if (Log())
                    {
                        LogMessage("fs.dd.write", "wake up");
                    }
                    {
                        LockGuard<Mutex> lock(mtx);
                        requestMap.Remove(request->overlapped.Get());
                    }
                    long res = cast<long>(request->numberOfBytesTransferred);
                    if (Log())
                    {
                        LogMessage("fs.dd.write", "end.deliver=true");
                    }
                    return res;
                }
                else
                {
                    if (Log())
                    {
                        LogMessage("fs.dd.write", "end.deliver=false");
                    }
                    request.Release();
                    return blockSize;
                }
            }
            else
            {
                {
                    LockGuard<Mutex> lock(mtx);
                    requestMap.Remove(request->overlapped.Get());
                }
                Buffer messageBuf;
                OsFormatMessage(lastError, cast<char*>(messageBuf.Get()));
                const char* msg = cast<const char*>(messageBuf.Get());
                string message = "Could not write to file '";
                message.Append(hostFile->GetHostFilePath()).Append("': ").Append(msg);
                if (Log())
                {
                    LogMessage("fs.dd.write", "end.error");
                }
                throw SystemError(EIO, message);
            }
        }
        public void Run()
        {
            try
            {
                OsConvertThreadToFiber(null);
                while (!exit)
                {
                    if (Log())
                    {
                        LogMessage("fs.dd.run", "begin");
                    }
                    ulong numberOfBytesTransferred = 0u;
                    ulong completionKey = 0u;
                    void* overlapped = null;
                    if (Log())
                    {
                        LogMessage("fs.dd.run", ">getQueuedCompletionStatus");
                    }
                    bool retval = OsGetQueuedCompletionStatus(completionPort, &numberOfBytesTransferred, &completionKey, &overlapped);
                    if (Log())
                    {
                        LogMessage("fs.dd.run", "<getQueuedCompletionStatus:completionKey=" + ToHexString(completionKey));
                    }
                    if (retval)
                    {
                        HostFile* hostFile = null;
                        if (completionKey == ddExitCompletionKey)
                        {
                            if (Log())
                            {
                                LogMessage("fs.dd.run", "exit.received");
                                LogMessage("fs.dd.run", "end");
                            }
                            return;
                        }
                        else if (completionKey == ddRequestCompletionKey)
                        {
                            if (Log())
                            {
                                LogMessage("fs.dd.run", "request.received");
                            }
                            ProcessRequests();
                            if (Log())
                            {
                                LogMessage("fs.dd.run", "end");
                            }
                            continue;
                        }
                        else
                        {
                            LockGuard<Mutex> lock(mtx);
                            HashMap<ulong, HostFile*>.ConstIterator it = keyHostFileMap.CFind(completionKey);
                            if (it != keyHostFileMap.CEnd())
                            {
                                hostFile = it->second;
                            }
                        }
                        if (hostFile != null)
                        {
                            if (Log())
                            {
                                LogMessage("fs.dd.run", "completion.received:hostFile=" + ToString(completionKey));
                            }
                            bool handleCompletions = false;
                            UniquePtr<IORequest> ioRequest;
                            {
                                LockGuard<Mutex> lock(mtx);
                                ioRequest.Reset(requestMap[overlapped]);
                            }
                            if (ioRequest.IsNull())
                            {
                                Panic("error from disk driver run: I/O request for overlapped " + ToHexString(cast<ulong>(overlapped)) + " not found");
                            }
                            ioRequest->numberOfBytesTransferred = numberOfBytesTransferred;
                            if (Log())
                            {
                                LogMessage("fs.dd.run.ioready",  "request:" + ioRequest->ToString());
                            }
                            if (ioRequest->deliver)
                            {
                                {
                                    LockGuard<Mutex> lock(mtx);
                                    completionQueue.Put(IOCompletion(ioRequest.Release()));
                                }
                                if (GetKernel().Booting())
                                {
                                    if (Log())
                                    {
                                        LogMessage("fs.dd.run", "deliver.handleCompletions");
                                    }
                                    handleCompletions = true;
                                }
                                else
                                {
                                    if (Log())
                                    {
                                        LogMessage("fs.dd.run", "deliver.setInterrupt");
                                    }
                                    GetMachine().GetRegisters().SetInterrupt(DISK_BIT);
                                }
                            }
                            else
                            {
                                if (Log())
                                {
                                    LogMessage("fs.dd.run", "deliver.remove");
                                }
                                LockGuard<Mutex> lock(mtx);
                                requestMap.Remove(overlapped);
                            }
                            if (handleCompletions)
                            {
                                InterruptService();
                            }
                        }
                        else
                        {
                            Panic("error from disk driver run: unknown completion key received");
                        }
                    }
                    else
                    {
                        Panic("error from disk driver run: get queued completion status failed");
                    }
                    if (Log())
                    {
                        LogMessage("fs.dd.run", "end");
                    }
                }
            }
            catch (const Exception& ex)
            {
                Console.Error() << ex.Message() << endl();
                ExceptionPtr exceptionPtr = CaptureCurrentException();
                Machine& machine = GetMachine();
                machine.SetException(exceptionPtr);
                machine.Exit();
            }
        }
        public void ProcessRequests()
        {
            if (Log())
            {
                LogMessage("fs.dd.ProcessRequests", "begin");
            }
            LockGuard<Mutex> lock(mtx);
            while (!ddRequestQueue.IsEmpty())
            {
                UniquePtr<DDRequest> request = ddRequestQueue.Get();
                request->Execute(this);
                OsSetEvent(ddRequestProcessedEvent);
            }
            if (Log())
            {
                LogMessage("fs.dd.ProcessRequests", "end");
            }
        }
        public void InterruptService()
        {
            if (Log())
            {
                LogMessage("fs.dd.interrupt", "begin");
            }
            Kernel& kernel = GetKernel();
            ProcessTable& processTable = kernel.GetProcessTable();
            {
                LockGuard<Mutex> lock(mtx);
                while (!completionQueue.IsEmpty())
                {
                    IOCompletion ioCompletion = completionQueue.Get();
                    WakeUpProcess(processTable, ioCompletion.request->process);
                }
            }
            if (processTable.GetRunning() == processTable.GetIdle())
            {
                if (Log())
                {
                    LogMessage("fs.dd.interrupt", "schedule");
                }
                GetMachine().GetRegisters().SetInterrupt(CLOCK_BIT);
            }
            if (Log())
            {
                LogMessage("fs.dd.interrupt", "end");
            }
        }
        private static UniquePtr<DiskDriver> instance;
        private bool exit;
        private void* completionPort;
        private ulong nextHostFileKey;
        private List<UniquePtr<HostFile>> hostFiles;
        private HashMap<string, HostFile*> pathHostFileMap;
        private HashMap<ulong, HostFile*> keyHostFileMap;
        private List<void*> eventHandles;
        private Queue<IOCompletion> completionQueue;
        private Queue<UniquePtr<DDRequest>> ddRequestQueue;
        private HashMap<void*, IORequest*> requestMap;
        private Thread thread;
        private int nextRequestNumber;
        private Mutex mtx;
        private void* ddRequestProcessedEvent;
    }

    public DiskDriver& GetDiskDriver()
    {
        return DiskDriver.Instance();
    }
}
