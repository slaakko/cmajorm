using System;
using System.Collections;
using cmsx.machine;

namespace cmsx.kernel
{
    public void* mainFiber = null;

    public const char* KernelVersion()
    {
        return "0.2.0";
    }

    public nothrow void InitializeInterruptVector(Machine& machine)
    {
        Memory& mem = machine.GetMemory();
        for (byte i = 0u; i < irqMax; ++i)
        {
            mem.WriteULong(MakeInterruptHandlerPtrAddress(i), 0u, Protection.write);
        }
        InterruptHandler softwareInterruptHandler = SoftwareInterruptHandler;
        ulong softwareInterruptHandlerAddress = cast<ulong>(cast<void*>(softwareInterruptHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqSoftware), softwareInterruptHandlerAddress, Protection.write);
        InterruptHandler intervalInterruptHandler = IntervalInterruptHandler;
        ulong intervalInterruptHandlerAddress = cast<ulong>(cast<void*>(intervalInterruptHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqInterval), intervalInterruptHandlerAddress, Protection.write);
        InterruptHandler clockInterruptHandler = ClockInterruptHandler;
        ulong clockInterruptHandlerAddress = cast<ulong>(cast<void*>(clockInterruptHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqClock), clockInterruptHandlerAddress, Protection.write);
        InterruptHandler diskInterruptHandler = DiskInterruptHandler;
        ulong diskInterruptHandlerAddress = cast<ulong>(cast<void*>(diskInterruptHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqDisk), diskInterruptHandlerAddress, Protection.write);
        InterruptHandler keyboardInterruptHandler = KeyboardInterruptHandler;
        ulong keyboardInterruptHandlerAddress = cast<ulong>(cast<void*>(keyboardInterruptHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqKeyboard), keyboardInterruptHandlerAddress, Protection.write);
        InterruptHandler pageFaultHandler = PageFaultHandler;
        ulong pageFaultHandlerAddress = cast<ulong>(cast<void*>(pageFaultHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqR), pageFaultHandlerAddress, Protection.write);
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqW), pageFaultHandlerAddress, Protection.write);
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqX), pageFaultHandlerAddress, Protection.write);
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqCOW), pageFaultHandlerAddress, Protection.write);
        InterruptHandler securityViolationHandler = SecurityViolationHandler;
        ulong securityViolationHandlerAddress = cast<ulong>(cast<void*>(securityViolationHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqS), securityViolationHandlerAddress, Protection.write);
        machine.GetRegisters().SetSpecial(Registers.rTT, interruptVectorBaseAddress);
        machine.GetRegisters().SetSpecial(Registers.rT, trapTableBaseAddress);
    }

    public nothrow void InitializeSystemCalls(Machine& machine)
    {
        Memory& mem = machine.GetMemory();
        for (int i = 0; i < maxTraps; ++i)
        {
            mem.WriteULong(MakeSystemCallPtrAddress(i), 0u, Protection.write);
        }
        SystemCallHandler exitSystemCallHandler = Exit;
        ulong exitSystemCallAddress = cast<ulong>(cast<void*>(exitSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_exit), exitSystemCallAddress, Protection.write);
        SystemCallHandler waitSystemCallHandler = Wait;
        ulong waitSystemCallAddress = cast<ulong>(cast<void*>(waitSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_wait), waitSystemCallAddress, Protection.write);
        SystemCallHandler forkSystemCallHandler = Fork;
        ulong forkSystemCallAddress = cast<ulong>(cast<void*>(forkSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_fork), forkSystemCallAddress, Protection.write);
        SystemCallHandler execSystemCallHandler = Exec;
        ulong execSystemCallAddress = cast<ulong>(cast<void*>(execSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_exec), execSystemCallAddress, Protection.write);
        SystemCallHandler killSystemCallHandler = Kill;
        ulong killSystemCallAddress = cast<ulong>(cast<void*>(killSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_kill), killSystemCallAddress, Protection.write);
        SystemCallHandler createSystemCallHandler = Create;
        ulong createSystemCallAddress = cast<ulong>(cast<void*>(createSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_create), createSystemCallAddress, Protection.write);
        SystemCallHandler openSystemCallHandler = Open;
        ulong openSystemCallAddress = cast<ulong>(cast<void*>(openSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_open), openSystemCallAddress, Protection.write);
        SystemCallHandler closeSystemCallHandler = Close;
        ulong closeSystemCallAddress = cast<ulong>(cast<void*>(closeSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_close), closeSystemCallAddress, Protection.write);
        SystemCallHandler readSystemCallHandler = Read;
        ulong readSystemCallAddress = cast<ulong>(cast<void*>(readSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_read), readSystemCallAddress, Protection.write);
        SystemCallHandler writeSystemCallHandler = Write;
        ulong writeSystemCallAddress = cast<ulong>(cast<void*>(writeSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_write), writeSystemCallAddress, Protection.write);
        SystemCallHandler seekSystemCallHandler = Seek;
        ulong seekSystemCallAddress = cast<ulong>(cast<void*>(seekSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_seek), seekSystemCallAddress, Protection.write);
        SystemCallHandler tellSystemCallHandler = Tell;
        ulong tellSystemCallAddress = cast<ulong>(cast<void*>(tellSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_tell), tellSystemCallAddress, Protection.write);
        SystemCallHandler poolEndSystemCallHandler = PoolEnd;
        ulong poolEndSystemCallAddress = cast<ulong>(cast<void*>(poolEndSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_pool_end), poolEndSystemCallAddress, Protection.write);
        SystemCallHandler setPoolEndSystemCallHandler = SetPoolEnd;
        ulong setPoolEndSystemCallAddress = cast<ulong>(cast<void*>(setPoolEndSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_set_pool_end), setPoolEndSystemCallAddress, Protection.write);
        SystemCallHandler debugBreakSystemCallHandler = DebugBreak;
        ulong debugBreakSystemCallAddress = cast<ulong>(cast<void*>(debugBreakSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_debug_break), debugBreakSystemCallAddress, Protection.write);
        SystemCallHandler stackTraceSystemCallHandler = StackTrace;
        ulong stackTraceSystemCallAddress = cast<ulong>(cast<void*>(stackTraceSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_stack_trace), stackTraceSystemCallAddress, Protection.write);
        SystemCallHandler throwSystemCallHandler = Throw;
        ulong throwSystemCallAddress = cast<ulong>(cast<void*>(throwSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_throw), throwSystemCallAddress, Protection.write);
        SystemCallHandler catchSystemCallHandler = Catch;
        ulong catchSystemCallAddress = cast<ulong>(cast<void*>(catchSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_catch), catchSystemCallAddress, Protection.write);
        SystemCallHandler resumeSystemCallHandler = Resume;
        ulong resumeSystemCallAddress = cast<ulong>(cast<void*>(resumeSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_resume), resumeSystemCallAddress, Protection.write);
        SystemCallHandler getSystemErrorSystemCallHandler = GetSystemError;
        ulong getSystemErrorSystemCallAddress = cast<ulong>(cast<void*>(getSystemErrorSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_get_system_error), getSystemErrorSystemCallAddress, Protection.write);
        SystemCallHandler getCurrentTimePointSystemCallHandler = GetCurrentTimePoint;
        ulong getCurrentTimePointSystemCallAddress = cast<ulong>(cast<void*>(getCurrentTimePointSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_get_current_time_point), getCurrentTimePointSystemCallAddress, Protection.write);
        SystemCallHandler sleepSystemCallHandler = Sleep;
        ulong sleepSystemCallAddress = cast<ulong>(cast<void*>(sleepSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_sleep), sleepSystemCallAddress, Protection.write);
        SystemCallHandler getCurrentDateSystemCallHandler = GetCurrentDate;
        ulong getCurrentDateSystemCallAddress = cast<ulong>(cast<void*>(getCurrentDateSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_get_current_date), getCurrentDateSystemCallAddress, Protection.write);
        SystemCallHandler getCurrentDateTimeSystemCallHandler = GetCurrentDateTime;
        ulong getCurrentDateTimeSystemCallAddress = cast<ulong>(cast<void*>(getCurrentDateTimeSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_get_current_date_time), getCurrentDateTimeSystemCallAddress, Protection.write);
        SystemCallHandler powSystemCallHandler = Pow;
        ulong powSystemCallAddress = cast<ulong>(cast<void*>(powSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_pow), powSystemCallAddress, Protection.write);
        SystemCallHandler getRandomSeedSystemCallHandler = GetRandomSeed;
        ulong getRandomSeedSystemCallAddress = cast<ulong>(cast<void*>(getRandomSeedSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_get_random_seed), getRandomSeedSystemCallAddress, Protection.write);
        SystemCallHandler linkSystemCallHandler = Link;
        ulong linkSystemCallAddress = cast<ulong>(cast<void*>(linkSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_link), linkSystemCallAddress, Protection.write);
        SystemCallHandler unlinkSystemCallHandler = Unlink;
        ulong unlinkSystemCallAddress = cast<ulong>(cast<void*>(unlinkSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_unlink), unlinkSystemCallAddress, Protection.write);
        SystemCallHandler renameSystemCallHandler = Rename;
        ulong renameSystemCallAddress = cast<ulong>(cast<void*>(renameSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_rename), renameSystemCallAddress, Protection.write);
        SystemCallHandler mkdirSystemCallHandler = Mkdir;
        ulong mkdirSystemCallAddress = cast<ulong>(cast<void*>(mkdirSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_mkdir), mkdirSystemCallAddress, Protection.write);
        SystemCallHandler opendirSystemCallHandler = OpenDir;
        ulong opendirSystemCallAddress = cast<ulong>(cast<void*>(opendirSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_opendir), opendirSystemCallAddress, Protection.write);
        SystemCallHandler readdirSystemCallHandler = ReadDir;
        ulong readdirSystemCallAddress = cast<ulong>(cast<void*>(readdirSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_readdir), readdirSystemCallAddress, Protection.write);
        SystemCallHandler closedirSystemCallHandler = CloseDir;
        ulong closedirSystemCallAddress = cast<ulong>(cast<void*>(closedirSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_closedir), closedirSystemCallAddress, Protection.write);
        SystemCallHandler getcwdSystemCallHandler = GetCWD;
        ulong getcwdSystemCallAddress = cast<ulong>(cast<void*>(getcwdSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_getcwd), getcwdSystemCallAddress, Protection.write);
        SystemCallHandler chdirSystemCallHandler = ChDir;
        ulong chdirSystemCallAddress = cast<ulong>(cast<void*>(chdirSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_chdir), chdirSystemCallAddress, Protection.write);
        SystemCallHandler statSystemCallHandler = Stat;
        ulong statSystemCallAddress = cast<ulong>(cast<void*>(statSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_stat), statSystemCallAddress, Protection.write);
        SystemCallHandler umaskSystemCallHandler = UMask;
        ulong umaskSystemCallAddress = cast<ulong>(cast<void*>(umaskSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_umask), umaskSystemCallAddress, Protection.write);
        SystemCallHandler ioctlSystemCallHandler = IOCtl;
        ulong ioctlSystemCallAddress = cast<ulong>(cast<void*>(ioctlSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_ioctl), ioctlSystemCallAddress, Protection.write);
        SystemCallHandler chmodSystemCallHandler = Chmod;
        ulong chmodSystemCallAddress = cast<ulong>(cast<void*>(chmodSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_chmod), chmodSystemCallAddress, Protection.write);
        SystemCallHandler chownSystemCallHandler = Chown;
        ulong chownSystemCallAddress = cast<ulong>(cast<void*>(chownSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_chown), chownSystemCallAddress, Protection.write);
        SystemCallHandler utimeSystemCallHandler = UTime;
        ulong utimeSystemCallAddress = cast<ulong>(cast<void*>(utimeSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_utime), utimeSystemCallAddress, Protection.write);
        SystemCallHandler getuidSystemCallHandler = GetUID;
        ulong getuidSystemCallAddress = cast<ulong>(cast<void*>(getuidSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_getuid), getuidSystemCallAddress, Protection.write);
        SystemCallHandler setuidSystemCallHandler = SetUID;
        ulong setuidSystemCallAddress = cast<ulong>(cast<void*>(setuidSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_setuid), setuidSystemCallAddress, Protection.write);
        SystemCallHandler getgidSystemCallHandler = GetGID;
        ulong getgidSystemCallAddress = cast<ulong>(cast<void*>(getgidSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_getgid), getgidSystemCallAddress, Protection.write);
        SystemCallHandler setgidSystemCallHandler = SetGID;
        ulong setgidSystemCallAddress = cast<ulong>(cast<void*>(setgidSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_setgid), setgidSystemCallAddress, Protection.write);
        SystemCallHandler getpgrpSystemCallHandler = GetPGRP;
        ulong getpgrpSystemCallAddress = cast<ulong>(cast<void*>(getpgrpSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_getpgrp), getpgrpSystemCallAddress, Protection.write);
        SystemCallHandler setpgrpSystemCallHandler = SetPGRP;
        ulong setpgrpSystemCallAddress = cast<ulong>(cast<void*>(setpgrpSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_setpgrp), setpgrpSystemCallAddress, Protection.write);
        SystemCallHandler tcgetpgrpSystemCallHandler = TCGetPGRP;
        ulong tcgetpgrpSystemCallAddress = cast<ulong>(cast<void*>(tcgetpgrpSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_tcgetpgrp), tcgetpgrpSystemCallAddress, Protection.write);
        SystemCallHandler tcsetpgrpSystemCallHandler = TCSetPGRP;
        ulong tcsetpgrpSystemCallAddress = cast<ulong>(cast<void*>(tcsetpgrpSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_tcsetpgrp), tcsetpgrpSystemCallAddress, Protection.write);
        SystemCallHandler syncSystemCallHandler = Sync;
        ulong syncSystemCallAddress = cast<ulong>(cast<void*>(syncSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_sync), syncSystemCallAddress, Protection.write);
        SystemCallHandler timesSystemCallHandler = Times;
        ulong timesSystemCallAddress = cast<ulong>(cast<void*>(timesSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_times), timesSystemCallAddress, Protection.write);
        SystemCallHandler getHostNameSystemCallHandler = GetHostName;
        ulong getHostNameSystemCallAddress = cast<ulong>(cast<void*>(getHostNameSystemCallHandler)); 
        mem.WriteULong(MakeSystemCallPtrAddress(sys_get_host_name), getHostNameSystemCallAddress, Protection.write);
        SystemCallHandler dupSystemCallHandler = Dup;
        ulong dupSystemCallAddress = cast<ulong>(cast<void*>(dupSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(sys_dup), dupSystemCallAddress, Protection.write);
    }

    public void Boot(Machine& machine)
    {
        mainFiber = OsConvertThreadToFiber(null);
        if (Log())
        {
            StartLog();
            LogMessage("boot", "begin");
        }
        if (Machine.GetFlag(Machine.Flags.verbose))
        {
            Console.Out() << "Cmajor System X kernel version " << KernelVersion() << " booting...";
        }
        Kernel& kernel = Kernel.Instance();
        kernel.SetBooting();
        machine.GetProcessor().SetInterruptReturn(KernelInterruptReturn);
        SetKernelMaxStackSizeFunction(KernelGetMaxStackSize);
        SetKernelGrowStackFunction(KernelGrowStack);
        SetStartUserTimeFunction(StartUserTime);
        SetStopUserTimeFunction(StopUserTime);
        Registers& regs = machine.GetRegisters();
        DisableAllInterrupts(regs);
        InitializeInterruptVector(machine);
        InitializeSystemCalls(machine);
        GetDiskDriver().Start();
        GetMountTable().Init();
        SessionTable& sessionTable = kernel.GetSessionTable();
        Session* currentSession = sessionTable.CreateSession();
        kernel.SetCurrentSession(currentSession);
        if (!kernel.HasUserDebugger())
        {
            kernel.SetConsoleDriver(&cmsx.kernel.GetConsoleDriver());
        }
        ProcessTable& processTable = kernel.GetProcessTable();
        int pid = -1;
        if (Machine.GetFlag(Machine.Flags.runProgram))
        {
            pid = Load(kernel.GetProgramFileName(), kernel.GetProgramArguments(), currentSession->sid);
            kernel.SetProgramPID(pid);
        }
        else
        {
            string cmajorRootDir = RtGetEnvironmentVariable("CMAJOR_ROOT");
            if (cmajorRootDir.IsEmpty())
            {
                throw Exception("CMAJOR_ROOT environment variable not set. Please set it to contain /path/to/cmajor directory");
            }
            string initProgramFileName = System.IO.GetFullPath(System.IO.Path.Combine(System.IO.Path.Combine(System.IO.Path.Combine(System.IO.Path.Combine(System.IO.Path.Combine(
                System.IO.Path.Combine(System.IO.Path.Combine(System.IO.Path.Combine(cmajorRootDir, "projects"), "cmsx"), "build"), "proc"), "init"), "bin"), "release"), "init"));
            List<string> initProgramArguments;
            initProgramArguments.Add("--user=" + kernel.User());
            if (Machine.GetFlag(Machine.Flags.install))
            {
                initProgramArguments.Add("--install");
            }
            if (Machine.GetFlag(Machine.Flags.verbose))
            {
                initProgramArguments.Add("--verbose");
            }
            pid = Load(initProgramFileName, initProgramArguments, currentSession->sid);
            kernel.SetProgramPID(pid);
            processTable.SetInit(processTable.GetProcess(pid));
        }
        if (pid != -1)
        {
            Process* process = processTable.GetProcess(pid);
            Debugger* debugger = kernel.GetDebugger();
            debugger->Init(process);
        }
        Schedule(machine, processTable);
        SetProcessorToUserMode(regs);
        EnableAllInterrupts(regs);
        if (Machine.GetFlag(Machine.Flags.verbose))
        {
            Console.Out() << "\b\b\b, done." << endl();
        }
        if (Machine.GetFlag(Machine.Flags.runProgram))
        {
            if (Machine.GetFlag(Machine.Flags.verbose))
            {
                Console.Out() << "running program '" << kernel.GetProgramFileName() << "' as process " << pid << endl();
            }
        }
        ConsoleDriver* consoleDriver = kernel.GetConsoleDriver();
        if (consoleDriver != null)
        {
            consoleDriver->GetDimensions();
        }
        kernel.ResetBooting();
        if (Log())
        {
            LogMessage("boot", "done");
        }
    }
}
