using System;
using cmsx.machine;

namespace cmsx.kernel
{
    public const char* KernelVersion()
    {
        return "0.1.0";
    }

    public nothrow void InitializeInterruptVector(Machine& machine)
    {
        Memory& mem = machine.GetMemory();
        for (byte i = 0u; i < irqMax; ++i)
        {
            mem.WriteULong(MakeInterruptHandlerPtrAddress(i), 0u, Protection.write);
        }
        InterruptHandler softwareInterruptHandler = SoftwareInterruptHandler;
        ulong softwareInterruptHandlerAddress = cast<ulong>(cast<void*>(softwareInterruptHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqSoftware), softwareInterruptHandlerAddress, Protection.write);
        InterruptHandler intervalInterruptHandler = IntervalInterruptHandler;
        ulong intervalInterruptHandlerAddress = cast<ulong>(cast<void*>(intervalInterruptHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqInterval), intervalInterruptHandlerAddress, Protection.write);
        InterruptHandler clockHandler = ClockHandler;
        ulong clockHandlerAddress = cast<ulong>(cast<void*>(clockHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqClock), clockHandlerAddress, Protection.write);
        InterruptHandler pageFaultHandler = PageFaultHandler;
        ulong pageFaultHandlerAddress = cast<ulong>(cast<void*>(pageFaultHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqR), pageFaultHandlerAddress, Protection.write);
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqW), pageFaultHandlerAddress, Protection.write);
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqX), pageFaultHandlerAddress, Protection.write);
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqCOW), pageFaultHandlerAddress, Protection.write);
        InterruptHandler securityViolationHandler = SecurityViolationHandler;
        ulong securityViolationHandlerAddress = cast<ulong>(cast<void*>(securityViolationHandler));
        mem.WriteULong(MakeInterruptHandlerPtrAddress(irqS), securityViolationHandlerAddress, Protection.write);
        machine.GetRegisters().SetSpecial(Registers.rTT, interruptVectorBaseAddress);
        machine.GetRegisters().SetSpecial(Registers.rT, trapTableBaseAddress);
    }

    public nothrow void InitializeSystemCalls(Machine& machine)
    {
        Memory& mem = machine.GetMemory();
        for (int i = 0; i < maxTraps; ++i)
        {
            mem.WriteULong(MakeSystemCallPtrAddress(i), 0u, Protection.write);
        }
        TrapHandler exitSystemCallHandler = Exit;
        ulong exitSystemCallAddress = cast<ulong>(cast<void*>(exitSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(exitSystemCall), exitSystemCallAddress, Protection.write);
        TrapHandler waitSystemCallHandler = Wait;
        ulong waitSystemCallAddress = cast<ulong>(cast<void*>(waitSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(waitSystemCall), waitSystemCallAddress, Protection.write);
        TrapHandler forkSystemCallHandler = Fork;
        ulong forkSystemCallAddress = cast<ulong>(cast<void*>(forkSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(forkSystemCall), forkSystemCallAddress, Protection.write);
        TrapHandler writeSystemCallHandler = Write;
        ulong writeSystemCallAddress = cast<ulong>(cast<void*>(writeSystemCallHandler));
        mem.WriteULong(MakeSystemCallPtrAddress(writeSystemCall), writeSystemCallAddress, Protection.write);
    }

    public void Boot(Machine& machine)
    {
        if (Machine.GetFlag(Machine.Flags.verbose))
        {
            Console.Out() << "Cmajor System X kernel version " << KernelVersion() << " booting...";
        }
        Registers& regs = machine.GetRegisters();
        DisableAllInterrupts(regs);
        InitializeInterruptVector(machine);
        InitializeSystemCalls(machine);
        Kernel& kernel = Kernel.Instance();
        ProcessTable& processTable = kernel.GetProcessTable();
        int pid = -1;
        if (Machine.GetFlag(Machine.Flags.runProgram))
        {
            pid = Load(kernel.GetProgramFileName(), kernel.GetProgramArguments());
            kernel.SetProgramPID(pid);
        }
        else
        {
            CreateInitAndIdleProcesses(machine, processTable);
        }
        Schedule(machine, processTable);
        SetProcessorToUserMode(regs);
        EnableAllInterrupts(regs);
        if (Machine.GetFlag(Machine.Flags.verbose))
        {
            Console.Out() << "\b\b\b, done." << endl();
        }
        if (Machine.GetFlag(Machine.Flags.runProgram))
        {
            if (Machine.GetFlag(Machine.Flags.verbose))
            {
                Console.Out() << "running program '" << kernel.GetProgramFileName() << "' as process " << pid << endl();
            }
        }
    }
}
