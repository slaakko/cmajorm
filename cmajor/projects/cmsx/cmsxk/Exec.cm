using System;
using System.IO;
using System.Collections;
using cmsx.machine;
using cmsx.object;
using cmsx.util;

namespace cmsx.kernel
{
    public SharedPtr<ByteStream> ReadFileIntoMemoryStream(INode* inode)
    {
        if (Log())
        {
            LogMessage("proc.exec", "read.mem.begin");
        }
        SharedPtr<ByteStream> memoryStream(new MemoryByteStream());
        long fileSize = inode->GetFileSize();
        FileSystem* fs = GetMountTable().GetFileSystem(inode->Key().fsNumber);
        long bytesLeft = fileSize;
        long offset = 0;
        while (bytesLeft > 0)
        {
            int blockNumber = 0;
            int blockOffset = 0;
            fs->GetBlockManager()->GetBlockNumber(inode, offset, blockNumber, blockOffset, false);
            long bytesToRead = Min(bytesLeft, blockSize - blockOffset);
            if (bytesToRead == 0)
            {
                break;
            }
            Block* block = null;
            if (!fs->IsRootFileSystem() || blockNumber != 0)
            {
                block = fs->GetBlockManager()->ReadBlock(BlockKey(blockNumber, inode->Key().fsNumber, BlockKind.fileBlock), null);
                #assert(block is FileBlock*);
                BlockPutter blockPutter(block);
                FileBlock* fileBlock = cast<FileBlock*>(block);
                for (long i = 0; i < bytesToRead; ++i)
                {
                    byte x = fileBlock->GetByte(blockOffset + i);
                    memoryStream->Write(x);
                }
            }
            else
            {
                for (long i = 0; i < bytesToRead; ++i)
                {
                    byte x = 0u;
                    memoryStream->Write(x);
                }
            }
            bytesLeft = bytesLeft - bytesToRead;
            offset = offset + bytesToRead;
        }
        if (Log())
        {
            LogMessage("proc.exec", "read.mem.end");
        }
        return memoryStream;
    }

    public SharedPtr<ByteStream> ReadFirstBlockIntoMemoryStream(INode* inode)
    {
        SharedPtr<ByteStream> memoryStream(new MemoryByteStream());
        long fileSize = inode->GetFileSize();
        FileSystem* fs = GetMountTable().GetFileSystem(inode->Key().fsNumber);
        long bytesLeft = Min(blockSize, fileSize);
        long offset = 0;
        while (bytesLeft > 0)
        {
            int blockNumber = 0;
            int blockOffset = 0;
            fs->GetBlockManager()->GetBlockNumber(inode, offset, blockNumber, blockOffset, false);
            long bytesToRead = Min(bytesLeft, blockSize - blockOffset);
            if (bytesToRead == 0)
            {
                break;
            }
            Block* block = null;
            if (!fs->IsRootFileSystem() || blockNumber != 0)
            {
                block = fs->GetBlockManager()->ReadBlock(BlockKey(blockNumber, inode->Key().fsNumber, BlockKind.fileBlock), null);
                #assert(block is FileBlock*);
                BlockPutter blockPutter(block);
                FileBlock* fileBlock = cast<FileBlock*>(block);
                for (long i = 0; i < bytesToRead; ++i)
                {
                    byte x = fileBlock->GetByte(blockOffset + i);
                    memoryStream->Write(x);
                }
            }
            else
            {
                for (long i = 0; i < bytesToRead; ++i)
                {
                    byte x = 0u;
                    memoryStream->Write(x);
                }
            }
            bytesLeft = bytesLeft - bytesToRead;
            offset = offset + bytesToRead;
        }
        return memoryStream;
    }

    public SharedPtr<ByteStream> ReadFilePortionIntoMemoryStream(INode* inode, long fileOffset, long count)
    {
        SharedPtr<ByteStream> memoryStream(new MemoryByteStream());
        FileSystem* fs = GetMountTable().GetFileSystem(inode->Key().fsNumber);
        long offset = fileOffset;
        while (count > 0)
        {
            int blockNumber = 0;
            int blockOffset = 0;
            fs->GetBlockManager()->GetBlockNumber(inode, offset, blockNumber, blockOffset, false);
            long bytesLeft = Min(blockSize, count);
            long bytesToRead = Min(bytesLeft, blockSize - blockOffset);
            if (bytesToRead == 0)
            {
                break;
            }
            Block* block = null;
            if (!fs->IsRootFileSystem() || blockNumber != 0)
            {
                block = fs->GetBlockManager()->ReadBlock(BlockKey(blockNumber, inode->Key().fsNumber, BlockKind.fileBlock), null);
                #assert(block is FileBlock*);
                BlockPutter blockPutter(block);
                FileBlock* fileBlock = cast<FileBlock*>(block);
                for (long i = 0; i < bytesToRead; ++i)
                {
                    byte x = fileBlock->GetByte(blockOffset + i);
                    memoryStream->Write(x);
                }
            }
            else
            {
                for (long i = 0; i < bytesToRead; ++i)
                {
                    byte x = 0u;
                    memoryStream->Write(x);
                }
            }
            offset = offset + bytesToRead;
            count = count - bytesToRead;
        }
        return memoryStream;
    }

    public void Exec(Machine& machine, ProcessTable& processTable, Process* process, int argc, int envc, ulong bufferAddress, long count)
    {
        if (Log())
        {
            LogMessage("proc.exec", "begin");
        }
        bool followExec = Machine.GetFlag(Machine.Flags.followExec);
        if (argc < 1)
        {
            throw SystemError(EINVAL, "exec: argc must be at least 1");
        }
        if (envc < 0)
        {
            throw SystemError(EINVAL, "exec: envc is negative");
        }
        if (bufferAddress == 0u)
        {
            throw SystemError(EINVAL, "exec: buffer address is null");
        }
        if (count < 0)
        {
            throw SystemError(EINVAL, "exec: count is negative");
        }
        UniquePtr<byte> buffer(cast<byte*>(RtMemAlloc(count)));
        ReadProcessMemory(machine, process, bufferAddress, buffer.Get(), cast<ulong>(count));
        MemoryReader reader(buffer.Get(), count);
        List<string> args;
        for (int i = 0; i < argc; ++i)
        {
            long offset = reader.ReadLong();
            long length = reader.ReadLong();
            byte* argPtr = buffer.Get() + offset;
            MemoryReader argReader(argPtr, length);
            string arg = argReader.ReadString();
            if (arg.IsEmpty())
            {
                throw SystemError(EINVAL, "exec: argument " + ToString(i) + " is empty");
            }
            args.Add(arg);
        }
        #assert(!args.IsEmpty());
        List<string> environment;
        for (int i = 0; i < envc; ++i)
        {
            long offset = reader.ReadLong();
            long length = reader.ReadLong();
            byte* envPtr = buffer.Get() + offset;
            MemoryReader envReader(envPtr, length);
            string env = envReader.ReadString();
            if (env.IsEmpty())
            {
                throw SystemError(EINVAL, "exec: environment variable " + ToString(i) + " is empty");
            }
            environment.Add(env);
        }
        const string& executablePath = args.Front();
        FileSystem* rootFS = GetMountTable().GetFileSystem(0);
        INode* inode = rootFS->GetINodeManager()->PathToINode(process, executablePath);
        if (inode == null)
        {
            throw SystemError(ENOENT, "executable '" + executablePath + "' not found");
        }
        INodePutter putter(inode);
        if (inode->Type() != FileType.regular)
        {
            throw SystemError(EINVAL, "path '" + executablePath + "' does not denote a regular file");
        }
        try
        {
            inode->CheckPermissions(process->uid, process->gid, Access.execute);
        }
        catch (const Exception& ex)
        {
            throw FileSystemException("cannot execute '" + executablePath + "' using uid " + ToString(process->uid) + ": " + ex.Message());
        }
        ulong envDataAddress = 0u;
        Section poolSection = MakePoolSection(args, environment, envDataAddress);
        long poolDataLength = poolSection.data.Count();
        long poolSize = Align(poolDataLength, cast<long>(pageSize));
        ulong poolSegmentSize = cast<ulong>(poolSize);
        INodeKey executableINodeKey = inode->Key();
        Process* prevProcess = processTable.GetProcessFromExecutableINodeProcessMap(executableINodeKey);
        ExecutableFile* executable = null;
        if (prevProcess != null && !followExec)
        {
            if (Log())
            {
                LogMessage("proc.exec", "clone.begin");
            }
            SharedPtr<ByteStream> memoryStream = ReadFirstBlockIntoMemoryStream(inode);
            BinaryReader reader(memoryStream);
            UniquePtr<BinaryFile> binaryFile = ReadBinaryFile(reader, executablePath, ReadOption.readHeadersOnly);
            if (binaryFile.Get() is ExecutableFile*)
            {
                executable = cast<ExecutableFile*>(binaryFile.Get());
                FreeProcessMemory(machine.GetMemory(), process);
                InitializeMemoryTable(machine, process->memoryTable, prevProcess->memoryTable, poolSegmentSize);
                AllocateMemory(machine.GetMemory(), process->memoryTable, true);
                Section* codeSection = executable->GetCodeSection();
                codeSection->SetBaseAddress(4096u);
                Section* dataSection = executable->GetDataSection();
                SharedPtr<ByteStream> dataSectionMemoryStream = ReadFilePortionIntoMemoryStream(inode, cast<long>(dataSection->fileOffset), cast<long>(dataSection->length));
                BinaryReader dataSectionReader(dataSectionMemoryStream);
                dataSection->Read(dataSectionReader);
                WriteProcessMemory(machine, process, dataSection->BaseAddress(), dataSection->data.Begin().Ptr(), cast<ulong>(dataSection->data.Count()), Protection.write);
                Section* symbolSection = executable->GetSymbolSection();
                SharedPtr<ByteStream> symbolSectionMemoryStream = ReadFilePortionIntoMemoryStream(inode, cast<long>(symbolSection->fileOffset), cast<long>(symbolSection->length));
                BinaryReader symbolSectionReader(symbolSectionMemoryStream);
                symbolSection->Read(symbolSectionReader);
                executable->AddSymbolsToAddressMap();
                Symbol* mainFunctionSymbol = executable->GetSymbolTable().GetSymbol("Main");
                process->entryPoint = mainFunctionSymbol->start;
                SaveContext(machine, process);
                Symbol* functionTableSymbol = executable->GetSymbolTable().GetSymbol("@function_table");
                process->functionTableAddress = functionTableSymbol->start;
                process->functionTableLength = functionTableSymbol->length;
                if (followExec)
                {
                    executable = cast<ExecutableFile*>(binaryFile.Release());
                }
            }
            else
            {
                throw SystemError(EINVAL, "file '" + executablePath + "' is not a CMSX executable");
            }
            if (Log())
            {
                LogMessage("proc.exec", "clone.end");
            }
        }
        else
        {
            if (Log())
            {
                LogMessage("proc.exec", "read.begin");
            }
            SharedPtr<ByteStream> memoryStream = ReadFileIntoMemoryStream(inode);
            BinaryReader reader(memoryStream);
            UniquePtr<BinaryFile> binaryFile = ReadBinaryFile(reader, executablePath);
            if (binaryFile.Get() is ExecutableFile*)
            {
                executable = cast<ExecutableFile*>(binaryFile.Get());
                executable->AddSymbolsToAddressMap();
                Section* codeSection = executable->GetCodeSection();
                Section* dataSection = executable->GetDataSection();
                Section* symbolSection = executable->GetSymbolSection();
                Symbol* mainFunctionSymbol = executable->GetSymbolTable().GetSymbol("Main");
                process->entryPoint = mainFunctionSymbol->start;
                ulong textSegmentStartAddress = codeSection->BaseAddress();
                if (textSegmentStartAddress == 0u)
                {
                    textSegmentStartAddress = textSegmentStartAddress + 4096u;
                }
                ulong textSegmentSize = codeSection->DataLength();
                ulong dataSegmentSize = dataSection->DataLength();
                ulong minStackSegmentSize = cast<ulong>(executable->MinStackSize());
                ulong maxStackSegmentSize = cast<ulong>(executable->MaxStackSize());
                ulong stackSegmentIncrement = cast<ulong>(executable->StackSizeIncrement());
                FreeProcessMemory(machine.GetMemory(), process);
                InitializeProcessMemory(machine, process, textSegmentStartAddress, textSegmentSize, dataSegmentSize, poolSegmentSize, minStackSegmentSize, maxStackSegmentSize, stackSegmentIncrement);
                if (codeSection->length > 0u)
                {
                    WriteProcessMemory(machine, process, codeSection->BaseAddress(), codeSection->data.Begin().Ptr(), cast<ulong>(codeSection->data.Count()), Protection.execute);
                }
                if (dataSection->length > 0u)
                {
                    WriteProcessMemory(machine, process, dataSection->BaseAddress(), dataSection->data.Begin().Ptr(), cast<ulong>(dataSection->data.Count()), Protection.write);
                }
                Symbol* functionTableSymbol = executable->GetSymbolTable().GetSymbol("@function_table");
                process->functionTableAddress = functionTableSymbol->start;
                process->functionTableLength = functionTableSymbol->length;
                if (followExec)
                {
                    executable = cast<ExecutableFile*>(binaryFile.Release());
                }
            }
            else
            {
                throw SystemError(EINVAL, "file '" + executablePath + "' is not a CMSX executable");
            }
            if (Log())
            {
                LogMessage("proc.exec", "read.end");
            }
        }
        process->executableINodeKey = executableINodeKey;
        processTable.AddProcessToExecutableINodeProcessMap(process);
        ulong poolStart = poolSegmentBaseAddress + cast<ulong>(poolSize);
        ulong poolEnd = poolSegmentBaseAddress + cast<ulong>(poolSize);
        process->poolStart = poolStart;
        process->poolEnd = poolEnd;
        process->name = Path.GetFileName(executablePath);
        if (!poolSection.data.IsEmpty())
        {
            WriteProcessMemory(machine, process, poolSegmentBaseAddress, poolSection.data.Begin().Ptr(), cast<ulong>(poolSection.data.Count()), Protection.write);
            int ax = cast<int>(args.Count());
            ulong bx = poolSegmentBaseAddress;
            ulong cx = envDataAddress;
            WriteProcessMemory(machine, process, process->regAXAddress, cast<ulong>(ax), 8u, Protection.write);
            WriteProcessMemory(machine, process, process->regBXAddress, bx, 8u, Protection.write);
            WriteProcessMemory(machine, process, process->regCXAddress, cx, 8u, Protection.write);
        }
        if (Log())
        {
            LogMessage("proc.exec", "ready");
        }
        SetProcessReadyToRun(processTable, process);
        process->unsave = true;
        if (followExec)
        {
            Kernel& kernel = GetKernel();
            kernel.SetExecutable(executable);
            Debugger* debugger = kernel.GetDebugger();
            debugger->Init(process);
        }
        if (Log())
        {
            LogMessage("proc.exec", "schedule");
        }
        Schedule(machine, processTable);
        if (Log())
        {
            LogMessage("proc.exec", "end");
        }
    }
}
