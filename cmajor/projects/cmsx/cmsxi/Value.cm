using System;
using System.Collections;

namespace cmsx.intermediate
{
    public abstract class Value
    {
        public default nothrow Value();
        public default virtual ~Value();
        public abstract nothrow string Name() const;
        public virtual nothrow string PrintName() const
        {
            return Name();
        }
        public virtual nothrow string IndexStr() const
        {
            return Name();
        }
        public virtual nothrow Location* HomeLocation() const
        {
            return null;
        }
        public virtual nothrow bool IsImmediate(byte& immediateValue) const
        {
            return false;
        }
        public virtual void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            throw Exception("error: tried to generate set for '" + string(type->Name()) + "' value (line " + ToString(line) + ")");            
        }
        public virtual Value* SignExtendTo(Type* targetType, int line)
        {
            throw Exception("error: tried to sign extend '" + type->Name() + "' type value to '" + targetType->Name() + " type value (line " + ToString(line) + ")");            
        }
        public virtual Value* ZeroExtendTo(Type* targetType, int line)
        {
            throw Exception("error: tried to zero extend '" + type->Name() + "' type value to '" + targetType->Name() + " type value (line " + ToString(line) + ")");            
        }
        public virtual Value* TruncateTo(Type* targetType, int line)
        {
            throw Exception("error: tried to truncate '" + type->Name() + "' type value to '" + targetType->Name() + " type value (line " + ToString(line) + ")");            
        }
        public virtual void Validate(Type* type, const string& index)
        {
            Type* thisType = this->type;
            if (thisType != type)
            {
                throw Exception("error: type conflict: element " + index + " has type '" + thisType->Name() + "', type '" + type->Name() + "' expected");
            }
        }
        public Type* type;
        public int line;
    }

    public class ConstantValue : Value
    {
        public override nothrow string Name() const
        {
            return "constant";
        }
        public virtual void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            throw Exception("error: tried to generate code for " + string(typename(*this)));
        }
        public virtual Operand* MakeDataOperand(Context& context) const
        {
            throw Exception("error: tried to make data operand for " + string(typename(*this)));
        }
    }

    public class LiteralValue : ConstantValue
    {
        public override nothrow string Name() const
        {
            return "literal";
        }
    }

    public class BoolValue : LiteralValue
    {
        public default nothrow BoolValue();
        public nothrow BoolValue(bool value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(cast<ulong>(value)));
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cmsx.util.SignExtend(cast<byte>(value)));
        }
        public override ConstantValue* ZeroExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* byteInst = machineCode.GetInstruction(cmsx.assembly.BYTE, label);
            byteInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(cast<byte>(value));
        }
        public bool value;
    }

    public class SByteValue : LiteralValue
    {
        public default nothrow SByteValue();
        public nothrow SByteValue(sbyte value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            if (value >= 0)
            {
                immediateValue = cast<byte>(value);
                return true;
            }
            else
            {
                return false;
            }
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(cast<byte>(value)));
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cmsx.util.SignExtend(cast<byte>(value)));
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* byteInst = machineCode.GetInstruction(cmsx.assembly.BYTE, label);
            byteInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(cast<byte>(value));
        }
        public sbyte value;
    }

    public class ByteValue : LiteralValue
    {
        public default nothrow ByteValue();
        public nothrow ByteValue(byte value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            immediateValue = value;
            return true;
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(value));
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cmsx.util.SignExtend(value));
        }
        public override ConstantValue* ZeroExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(value);
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* byteInst = machineCode.GetInstruction(cmsx.assembly.BYTE, label);
            byteInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(value);
        }
        public byte value;
    }

    public class ShortValue : LiteralValue
    {
        public default nothrow ShortValue();
        public nothrow ShortValue(short value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            if (value >= 0 && value <= 255)
            {
                immediateValue = cast<byte>(value);
                return true;
            }
            else
            {
                return false;
            }
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(cast<ushort>(value)));
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cmsx.util.SignExtend(cast<ushort>(value)));
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* wydeInst = machineCode.GetInstruction(cmsx.assembly.WYDE, label);
            wydeInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(cast<ushort>(value));
        }
        public short value;
    }

    public class UShortValue : LiteralValue
    {
        public default nothrow UShortValue();
        public nothrow UShortValue(ushort value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            if (value <= 255u)
            {
                immediateValue = cast<byte>(value);
                return true;
            }
            else
            {
                return false;
            }
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(value));
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cmsx.util.SignExtend(value));
        }
        public override ConstantValue* ZeroExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(value);
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* wydeInst = machineCode.GetInstruction(cmsx.assembly.WYDE, label);
            wydeInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(value);
        }
        public ushort value;
    }

    public class IntValue : LiteralValue
    {
        public default nothrow IntValue();
        public nothrow IntValue(int value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            if (value >= 0 && value <= 255)
            {
                immediateValue = cast<byte>(value);
                return true;
            }
            else
            {
                return false;
            }
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            ushort low = cast<ushort>(value);
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(low));
            ushort high = cast<ushort>(value >> 16);
            if (high != 0u)
            {
                MachineInstruction* orMLInst =  machineCode.GetInstruction(cmsx.machine.ORML, inst);
                orMLInst->AddOperand(reg);
                orMLInst->AddOperand(machineCode.context.GetLiteralOperand(high));
            }
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cmsx.util.SignExtend(cast<uint>(value)));
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* tetraInst = machineCode.GetInstruction(cmsx.assembly.TETRA, label);
            tetraInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(cast<uint>(value));
        }
        public int value;
    }

    public class UIntValue : LiteralValue
    {
        public default nothrow UIntValue();
        public nothrow UIntValue(uint value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            if (value <= 255u)
            {
                immediateValue = cast<byte>(value);
                return true;
            }
            else
            {
                return false;
            }
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            ushort low = cast<ushort>(value);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(low));
            ushort high = cast<ushort>(value >> 16u);
            if (high != 0u)
            {
                MachineInstruction* orMLInst =  machineCode.GetInstruction(cmsx.machine.ORML, inst);
                orMLInst->AddOperand(reg);
                orMLInst->AddOperand(machineCode.context.GetLiteralOperand(high));
            }
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cmsx.util.SignExtend(value));
        }
        public override ConstantValue* ZeroExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(value);
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* tetraInst = machineCode.GetInstruction(cmsx.assembly.TETRA, label);
            tetraInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(value);
        }
        public uint value;
    }

    public class LongValue : LiteralValue
    {
        public default nothrow LongValue();
        public nothrow LongValue(long value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            if (value >= 0 && value <= 255)
            {
                immediateValue = cast<byte>(value);
                return true;
            }
            else
            {
                return false;
            }
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            ushort low = cast<ushort>(value);
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(low));
            ushort ml = cast<ushort>(value >> 16u);
            if (ml != 0u)
            {
                MachineInstruction* orMLInst =  machineCode.GetInstruction(cmsx.machine.ORML, inst);
                orMLInst->AddOperand(reg);
                orMLInst->AddOperand(machineCode.context.GetLiteralOperand(ml));
            }
            ushort mh = cast<ushort>(value >> 32u);
            if (mh != 0u)
            {
                MachineInstruction* orMHInst =  machineCode.GetInstruction(cmsx.machine.ORMH, inst);
                orMHInst->AddOperand(reg);
                orMHInst->AddOperand(machineCode.context.GetLiteralOperand(mh));
            }
            ushort h = cast<ushort>(value >> 48u);
            if (h != 0u)
            {
                MachineInstruction* orHInst =  machineCode.GetInstruction(cmsx.machine.ORH, inst);
                orHInst->AddOperand(reg);
                orHInst->AddOperand(machineCode.context.GetLiteralOperand(h));
            }
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(cast<ulong>(value));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* octaInst = machineCode.GetInstruction(cmsx.assembly.OCTA, label);
            octaInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(cast<ulong>(value));
        }
        public long value;
    }

    public class ULongValue : LiteralValue
    {
        public default nothrow ULongValue();
        public nothrow ULongValue(ulong value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value);
        }
        public override nothrow bool IsImmediate(byte& immediateValue) const
        {
            if (value <= 255u)
            {
                immediateValue = cast<byte>(value);
                return true;
            }
            else
            {
                return false;
            }
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            ushort low = cast<ushort>(value);
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(low));
            ushort ml = cast<ushort>(value >> 16u);
            if (ml != 0)
            {
                MachineInstruction* orMLInst =  machineCode.GetInstruction(cmsx.machine.ORML, inst);
                orMLInst->AddOperand(reg);
                orMLInst->AddOperand(machineCode.context.GetLiteralOperand(ml));
            }
            ushort mh = cast<ushort>(value >> 32u);
            if (mh != 0u)
            {
                MachineInstruction* orMHInst =  machineCode.GetInstruction(cmsx.machine.ORMH, inst);
                orMHInst->AddOperand(reg);
                orMHInst->AddOperand(machineCode.context.GetLiteralOperand(mh));
            }
            ushort h = cast<ushort>(value >> 48u);
            if (h != 0u)
            {
                MachineInstruction* orHInst =  machineCode.GetInstruction(cmsx.machine.ORH, inst);
                orHInst->AddOperand(reg);
                orHInst->AddOperand(machineCode.context.GetLiteralOperand(h));
            }
        }
        public override ConstantValue* SignExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(value);
        }
        public override ConstantValue* ZeroExtendTo(Type* targetType, int line)
        {
            return targetType->MakeValue(value);
        }
        public override ConstantValue* TruncateTo(Type* targetType, int line)
        {
            return targetType->MakeValue(value);
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* octaInst = machineCode.GetInstruction(cmsx.assembly.OCTA, label);
            octaInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(value);
        }
        public ulong value;
    }

    public class FloatValue : LiteralValue
    {
        public default nothrow FloatValue();
        public nothrow FloatValue(float value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value, 1, 15);
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            uint x = *cast<uint*>(cast<void*>(&value));
            ushort low = cast<ushort>(x);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(low));
            ushort ml = cast<ushort>(x >> 16u);
            if (ml != 0)
            {
                MachineInstruction* orMLInst =  machineCode.GetInstruction(cmsx.machine.ORML, inst);
                orMLInst->AddOperand(reg);
                orMLInst->AddOperand(machineCode.context.GetLiteralOperand(ml));
            }
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* tetraInst = machineCode.GetInstruction(cmsx.assembly.TETRA, label);
            tetraInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(*cast<uint*>(cast<void*>(&value)));
        }
        public float value;
    }

    public class DoubleValue : LiteralValue
    {
        public default nothrow DoubleValue();
        public nothrow DoubleValue(double value_) : value(value_)
        {
        }
        public override nothrow string Name() const
        {
            return ToString(value, 1, 15);
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            ulong x = *cast<ulong*>(cast<void*>(&value));
            ushort low = cast<ushort>(x);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(low));
            ushort ml = cast<ushort>(x >> 16u);
            if (ml != 0)
            {
                MachineInstruction* orMLInst =  machineCode.GetInstruction(cmsx.machine.ORML, inst);
                orMLInst->AddOperand(reg);
                orMLInst->AddOperand(machineCode.context.GetLiteralOperand(ml));
            }
            ushort mh = cast<ushort>(x >> 32u);
            if (mh != 0u)
            {
                MachineInstruction* orMHInst =  machineCode.GetInstruction(cmsx.machine.ORMH, inst);
                orMHInst->AddOperand(reg);
                orMHInst->AddOperand(machineCode.context.GetLiteralOperand(mh));
            }
            ushort h = cast<ushort>(x >> 48u);
            if (h != 0u)
            {
                MachineInstruction* orHInst =  machineCode.GetInstruction(cmsx.machine.ORH, inst);
                orHInst->AddOperand(reg);
                orHInst->AddOperand(machineCode.context.GetLiteralOperand(h));
            }
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* octaInst = machineCode.GetInstruction(cmsx.assembly.OCTA, label);
            octaInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(*cast<ulong*>(cast<void*>(&value)));
        }
        public double value;
    }

    public class NullValue : LiteralValue
    {
        public nothrow NullValue(PtrType* ptrType_) : ptrType(ptrType_)
        {
            type = ptrType;
        }
        public override nothrow string Name() const
        {
            return "null";
        }
        public override void GenerateSetValue(Register* reg, MachineCode& machineCode, int line, Instruction* inst)
        {
            MachineInstruction* setInst = machineCode.GetInstruction(cmsx.assembly.SET, inst);
            setInst->AddOperand(reg);
            setInst->AddOperand(machineCode.context.GetLiteralOperand(0u));
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* octaInst = machineCode.GetInstruction(cmsx.assembly.OCTA, label);
            octaInst->AddOperand(MakeDataOperand(context));
            label.Clear();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetLiteralOperand(0u);
        }
        public PtrType* ptrType;
    }

    public class PtrValue : ConstantValue
    {
        public nothrow PtrValue(PtrType* ptrType_, GlobalVariable* globalVariable_) : globalVariable(globalVariable_)
        {
            type = ptrType_;
        }
        public override nothrow string Name() const
        {
            return globalVariable->Name();
        }
        public override nothrow Location* HomeLocation() const
        {
            return globalVariable->HomeLocation();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetSymbolOperand(globalVariable->name);
        }
        private GlobalVariable* globalVariable;
    }

    public abstract class AggregateValue : ConstantValue
    {
    }

    public class ArrayValue : AggregateValue
    {
        public nothrow ArrayValue()
        {
        }
        public void AddElement(ConstantValue* element)
        {
            elements.Add(element);
        }
        public override void Validate(Type* type, const string& index)
        {
            if (!(type is ArrayType*))
            {
                throw Exception("error: element " + index + " not an array value ('" + type->Name() + "')");
            }
            ArrayType* arrayType = cast<ArrayType*>(type);
            if (arrayType->ElementCount() != elements.Count())
            {
                throw Exception("error: element " + index + " has " + ToString(elements.Count()) + " elements, " + ToString(arrayType->ElementCount()) + " elements expected");
            }
            this->type = arrayType;
            int i = 0;
            for (ConstantValue* element : elements)
            {
                element->Validate(arrayType->ElementType(), index + "." + ToString(i));
                ++i;
            }
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            ArrayType* arrayType = cast<ArrayType*>(type);
            MachineInstruction* inst = arrayType->ElementType()->GetDataInstruction(machineCode, line);
            inst->SetLabel(label);
            for (ConstantValue* element : elements)
            {
                inst->AddOperand(element->MakeDataOperand(context));
            }
            label.Clear();
        }
        public override nothrow string Name() const
        {
            string name = "[ ";
            bool first = true;
            for (ConstantValue* element : elements)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    name.Append(", ");
                }
                if (element is AggregateValue*)
                {
                    name.Append(element->Name());
                }
                else
                {
                    name.Append(element->type->Name()).Append(' ').Append(element->Name());
                }
            }
            name.Append(" ]");
            return name;
        }
        public List<ConstantValue*> elements;
    }

    public class StructureValue : AggregateValue
    {
        public nothrow StructureValue()
        {
        }
        public void AddMember(ConstantValue* member)
        {
            members.Add(member);
        }
        public override void Validate(Type* type, const string& index)
        {
            if (!(type is StructureType*))
            {
                throw Exception("error: element " + index + " is not a structure value ('" + type->Name() + "')");
            }
            StructureType* structureType = cast<StructureType*>(type);
            if (structureType->memberTypes.Count() != members.Count())
            {
                throw Exception("error: element " + index + " has " + ToString(members.Count()) + " members, " + ToString(structureType->memberTypes.Count()) + " members expected");
            }
            this->type = structureType;
            long n = members.Count();
            for (long i = 0; i < n; ++i)
            {
                members[i]->Validate(structureType->memberTypes[i], index + "." + ToString(i));
            }
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            for (ConstantValue* member : members)
            {
                member->GenerateCode(machineCode, label, context);
            }
        }
        public override nothrow string Name() const
        {
            string name = "{ ";
            bool first = true;
            for (ConstantValue* member : members)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    name.Append(", ");
                }
                if (member is AggregateValue*)
                {
                    name.Append(member->Name());
                }
                else
                {
                    name.Append(member->type->Name()).Append(' ').Append(member->Name());
                }
            }
            name.Append(" }");
            return name;
        }
        public List<ConstantValue*> members;
    }

    public class StringValue : ConstantValue
    {
        public nothrow StringValue(const string& value_) : base(), value(value_)
        {
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* inst = machineCode.GetInstruction(cmsx.assembly.BYTE, label);
            int state = 0;
            string str;
            string hex;
            for (char c : value)
            {
                switch (state)
                {
                    case 0:
                    {
                        if (c == '\\')
                        {
                            if (!str.IsEmpty())
                            {
                                inst->AddOperand(context.GetStringOperand(str));
                                str.Clear();
                            }
                            hex.Clear();
                            state = 1;
                        }
                        else
                        {
                            str.Append(c);
                        }
                        break;
                    }
                    case 1:
                    {
                        hex.Append(c);
                        state = 2;
                        break;
                    }
                    case 2:
                    {
                        hex.Append(c);
                        inst->AddOperand(context.GetLiteralOperand(ParseHexByte(hex)));
                        hex.Clear();
                        state = 0;
                        break;
                    }
                }
            }
            if (state == 0)
            {
                if (!str.IsEmpty())
                {
                    inst->AddOperand(context.GetStringOperand(str));
                }
            }
            else if (state == 1)
            {
                throw Exception("two hex characters expected (line=" + ToString(line) + ")");
            }
            else if (state == 2)
            {
                throw Exception("one hex character expected (line=" + ToString(line) + ")");
            }
        }
        public override nothrow string Name() const
        {
            string name = "\"";
            name.Append(value);
            name.Append("\"");
            return name;
        }
        public string value;
    }

    public class StringArrayValue : ArrayValue
    {
        public nothrow StringArrayValue(char prefix_) : base(), prefix(prefix_)
        {
        }
        public override void Validate(Type* type, const string& index)
        {
            if (this->type != type)
            {
                Type* thisType = this->type;
                throw Exception("error: type conflict: element " + index + " has type '" + thisType->Name() + "', type '" + type->Name() + "' expected");
            }
            int i = 0;
            for (ConstantValue* element : elements)
            {
                element->Validate(type, index + "." + ToString(i));
                ++i;
            }
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* inst = type->GetDataInstruction(machineCode, line);
            inst->SetLabel(label);
            for (ConstantValue* element : elements)
            {
                inst->AddOperand(element->MakeDataOperand(context));
            }
            label.Clear();
        }
        public override nothrow string Name() const
        {
            string name = ToString(prefix) + base->Name();
            return name;
        }
        private char prefix;
    }

    public class ConversionValue : ConstantValue
    {
        public nothrow ConversionValue(Type* targetType_, ConstantValue* from_) : base(), from(from_)
        {
            type = targetType_;
        }
        public override nothrow string Name() const
        {
            return "conv(" + from->type->Name() + " " + from->Name() + ")";
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return from->MakeDataOperand(context);
        }
        public override void GenerateCode(MachineCode& machineCode, string& label, Context& context)
        {
            MachineInstruction* inst = type->GetDataInstruction(machineCode, line);
            inst->AddOperand(from->MakeDataOperand(context));
        }
        private ConstantValue* from;
    }

    public class IdValue : Value
    {
        public IdValue(uint id_) : base(), id(id_)
        {
        }
        public override nothrow string Name() const
        {
            return "$" + ToString(id);
        }
        public uint id;
    }

    public class SymbolValue : ConstantValue
    {
        public nothrow SymbolValue(const string& symbol_) : base(), symbol(symbol_)
        {
        }
        public override nothrow string Name() const
        {
            return symbol;
        }
        public override nothrow string PrintName() const
        {
            return "@" + Name();
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetSymbolOperand(symbol);
        }
        public string symbol;
    }

    public class ClsIdValue : ConstantValue
    {
        public ClsIdValue(const string& typeId_) : base(), typeId(typeId_)
        {
        }
        public override nothrow string Name() const
        {
            return "$CLSID(" + typeId + ")";
        }
        public override Operand* MakeDataOperand(Context& context) const
        {
            return context.GetClsIdOperand(typeId);
        }
        private string typeId;
    }
}
