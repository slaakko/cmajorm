using System;
using System.Collections;
using CodeFormatter = System.Text.CodeFormatter;

namespace cmsx.intermediate
{
    public class Context
    {
        public nothrow Context() : compileUnit(*this), currentFunction(null), currentBasicBlock(null)
        {
        }
        public nothrow inline TypeRepository& GetTypeRepository()
        {
            return typeRepository;
        }
        public nothrow inline Function* CurrentFunction() const
        {
            return currentFunction;
        }
        public nothrow inline void SetCurrentFunction(Function* currentFunction_)
        {
            currentFunction = currentFunction_;
        }
        public nothrow inline BasicBlock* CurrentBasicBlock() const
        {
            return currentBasicBlock;
        }
        public nothrow inline void SetCurrentBasicBlock(BasicBlock* basicBlock)
        {
            currentBasicBlock = basicBlock;
        }
        public nothrow inline Type* GetVoidType() const
        {
            return typeRepository.GetVoidType();
        }
        public nothrow inline Type* GetBoolType() const
        {
            return typeRepository.GetBoolType();
        }
        public nothrow inline Type* GetSByteType() const
        {
            return typeRepository.GetSByteType();
        }
        public nothrow inline Type* GetByteType() const
        {
            return typeRepository.GetByteType();
        }
        public nothrow inline Type* GetShortType() const
        {
            return typeRepository.GetShortType();
        }
        public nothrow inline Type* GetUShortType() const
        {
            return typeRepository.GetUShortType();
        }
        public nothrow inline Type* GetIntType() const
        {
            return typeRepository.GetIntType();
        }
        public nothrow inline Type* GetUIntType() const
        {
            return typeRepository.GetUIntType();
        }
        public nothrow inline Type* GetLongType() const
        {
            return typeRepository.GetLongType();
        }
        public nothrow inline Type* GetULongType() const
        {
            return typeRepository.GetULongType();
        }
        public nothrow inline Type* GetFloatType() const
        {
            return typeRepository.GetFloatType();
        }
        public nothrow inline Type* GetDoubleType() const
        {
            return typeRepository.GetDoubleType();
        }
        public void AddPtrType(const string& typeId, int line)
        {
            typeRepository.AddPtrType(typeId, line);
        }
        public void AddStructureType(const string& typeId, const List<string>& memberTypeIds)
        {
            typeRepository.AddStructureType(typeId, memberTypeIds);
        }
        public void AddArrayType(const string& typeId, const string& elementTypeId, long size)
        {
            typeRepository.AddArrayType(typeId, elementTypeId, size);
        }
        public void AddFunctionType(const string& typeId, const string& returnTypeId, const List<string>& paramTypeIds)
        {
            typeRepository.AddFunctionType(typeId, returnTypeId, paramTypeIds);
        }
        public void ResolveTypes()
        {
            typeRepository.ResolveTypes();
        }
        public nothrow void SetFileName(const string& fileName)
        {
            compileUnit.SetFileName(fileName);
        }
        public Function* AddFunction(int lineNumber, Type* type, const string& name, bool once, MDStructRef* md)
        {
            return compileUnit.AddFunction(lineNumber, type, name, once, md);
        }
        public Type* GetTypeById(int lineNumber, const string& typeId) const
        {
            Type* type = typeRepository.GetTypeById(typeId);
            if (type != null)
            {
                return type;
            }
            else
            {
                throw Exception("type for id '" + typeId + "' not found (" + compileUnit.fileName + ":" + ToString(lineNumber) + ")");
            }
        }
        public PtrType* GetPtrType(Type* baseType)
        {
            return typeRepository.GetPtrType(baseType);
        }
        public ConstantValue* MakeSymbolValue(int lineNumber, const string& symbol, Type* type)
        {
            HashMap<string, SymbolValue*>.ConstIterator it = symbolValueMap.CFind(symbol);
            if (it != symbolValueMap.CEnd())
            {
                SymbolValue* symbolValue = it->second;
                if (symbolValue->type != type)
                {
                    throw Exception("type " + type->Name() + " conflicts type " + symbolValue->type->Name() + " in earlier definition at line " + ToString(symbolValue->line) +
                        " (" + compileUnit.fileName + ":" + ToString(lineNumber) + ")");
                }                    
                return symbolValue;
            }
            else
            {
                SymbolValue* symbolValue = new SymbolValue(symbol);
                symbolValue->type = type;
                symbolValue->line = lineNumber;
                values.Add(UniquePtr<Value>(symbolValue));
                symbolValueMap[symbol] = symbolValue;
                return symbolValue;
            }
        }
        public ConstantValue* MakeLiteralValue(int lineNumber, const string& fromStr, Type* type)
        {
            try
            {
                return type->MakeValue(fromStr, *this);
            }
            catch (const Exception& ex)
            {
                throw Exception(ex.Message() + " (" + compileUnit.fileName + ":" + ToString(lineNumber) + ")");
            }
            return null;
        }
        public ConstantValue* MakeSByteValue(SByteType* type, sbyte value)
        {
            HashMap<sbyte, ConstantValue*>.ConstIterator it = sbyteValueMap.CFind(value);
            if (it != sbyteValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                SByteValue* val = new SByteValue(value);
                val->type = type;
                AddValue(val);
                sbyteValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeByteValue(ByteType* type, byte value)
        {
            HashMap<byte, ConstantValue*>.ConstIterator it = byteValueMap.CFind(value);
            if (it != byteValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                ByteValue* val = new ByteValue(value);
                val->type = type;
                AddValue(val);
                byteValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeShortValue(ShortType* type, short value)
        {
            HashMap<short, ConstantValue*>.ConstIterator it = shortValueMap.CFind(value);
            if (it != shortValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                ShortValue* val = new ShortValue(value);
                val->type = type;
                AddValue(val);
                shortValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeUShortValue(UShortType* type, ushort value)
        {
            HashMap<ushort, ConstantValue*>.ConstIterator it = ushortValueMap.CFind(value);
            if (it != ushortValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                UShortValue* val = new UShortValue(value);
                val->type = type;
                AddValue(val);
                ushortValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeIntValue(IntType* type, int value)
        {
            HashMap<int, ConstantValue*>.ConstIterator it = intValueMap.CFind(value);
            if (it != intValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                IntValue* val = new IntValue(value);
                val->type = type;
                AddValue(val);
                intValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeUIntValue(UIntType* type, uint value)
        {
            HashMap<uint, ConstantValue*>.ConstIterator it = uintValueMap.CFind(value);
            if (it != uintValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                UIntValue* val = new UIntValue(value);
                val->type = type;
                AddValue(val);
                uintValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeLongValue(LongType* type, long value)
        {
            HashMap<long, ConstantValue*>.ConstIterator it = longValueMap.CFind(value);
            if (it != longValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                LongValue* val = new LongValue(value);
                val->type = type;
                AddValue(val);
                longValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeULongValue(ULongType* type, ulong value)
        {
            HashMap<ulong, ConstantValue*>.ConstIterator it = ulongValueMap.CFind(value);
            if (it != ulongValueMap.CEnd())
            {
                return it->second;
            }
            else
            {
                ULongValue* val = new ULongValue(value);
                val->type = type;
                AddValue(val);
                ulongValueMap[value] = val;
                return val;
            }
        }
        public ConstantValue* MakeFloatValue(FloatType* type, float value)
        {
            FloatValue* val = new FloatValue(value);
            val->type = type;
            AddValue(val);
            return val;
        }
        public ConstantValue* MakeDoubleValue(DoubleType* type, double value)
        {
            DoubleValue* val = new DoubleValue(value);
            val->type = type;
            AddValue(val);
            return val;
        }
        public ArrayValue* MakeArrayValue()
        {
            ArrayValue* val = new ArrayValue();
            AddValue(val);
            return val;
        }
        public StructureValue* MakeStructureValue()
        {
            StructureValue* val = new StructureValue();
            AddValue(val);
            return val;
        }
        public StringValue* MakeStringValue(const string& value)
        {
            StringValue* val = new StringValue(value);
            val->type = GetByteType();
            AddValue(val);
            return val;
        }
        public StringArrayValue* MakeStringArrayValue(char prefix)
        {
            StringArrayValue* val = new StringArrayValue(prefix);
            bool error = false;
            switch (prefix)
            {
                case 'w' : val->type = GetUShortType(); break;
                case 'u' : val->type = GetUIntType(); break;
                case 'b' : val->type = GetByteType(); break;
                default: error = true; break;
            }
            if (error)
            {
                throw Exception("invalid prefix '" + ToString(prefix) + "'");
            }
            AddValue(val);
            return val;
        }
        public ConversionValue* MakeConversionValue(Type* targetType, ConstantValue* from, int lineNumber)
        {
            ConversionValue* val = new ConversionValue(targetType, from);
            val->line = lineNumber;
            AddValue(val);
            return val;
        }
        public void PrintTypes(CodeFormatter& formatter)
        {
            typeRepository.PrintTypes(formatter);
        }
        public void AddValue(Value* value)
        {
            values.Add(UniquePtr<Value>(value));
        }
        public nothrow LiteralOperand* GetLiteralOperand(ulong value)
        {
            HashMap<ulong, LiteralOperand*>.ConstIterator it = literalOperandMap.CFind(value);
            if (it != literalOperandMap.CEnd())
            {
                return it->second;
            }
            else
            {
                LiteralOperand* literalOperand = new LiteralOperand(value);
                operands.Add(UniquePtr<Operand>(literalOperand));
                literalOperandMap[value] =  literalOperand;
                return literalOperand;
            }
        }
        public nothrow LiteralOperand* CreateLiteralOperand()
        {
            LiteralOperand* literalOperand = new LiteralOperand();
            operands.Add(UniquePtr<Operand>(literalOperand));
            return literalOperand;
        }
        public nothrow SymbolOperand* GetSymbolOperand(const string& value)
        {
            HashMap<string, SymbolOperand*>.ConstIterator it = symbolOperandMap.CFind(value);
            if (it != symbolOperandMap.CEnd())
            {
                return it->second;
            }
            else
            {
                SymbolOperand* symbolOperand = new SymbolOperand(value);
                operands.Add(UniquePtr<Operand>(symbolOperand));
                symbolOperandMap[value] = symbolOperand;
                return symbolOperand;
            }
        }
        public nothrow Operand* GetStringOperand(const string& value)
        {
            StringOperand* stringOperand = new StringOperand(value);
            operands.Add(UniquePtr<Operand>(stringOperand));
            return stringOperand;
        }
        public nothrow Operand* GetClsIdOperand(const string& typeId)
        {
            ClsIdOperand* clsIdOperand = new ClsIdOperand(typeId);
            operands.Add(UniquePtr<Operand>(clsIdOperand));
            return clsIdOperand;
        }
        public GlobalVariable* GetGlobalVariableNothrow(const string& globalVariableName) const
        {
            return compileUnit.GetGlobalVariableNothrow(globalVariableName);
        }
        public GlobalVariable* GetGlobalVariable(const string& globalVariableName) const
        {
            return compileUnit.GetGlobalVariable(globalVariableName);
        }
        public void AddGlobalVariable(Type* type, const string& name, ConstantValue* initializer, int line, bool once)
        {
            compileUnit.AddGlobalVariable(type, name, initializer, line, once);
        }
        public void ValidateGlobalVariables()
        {
            compileUnit.ValidateGlobalVariables();
        }
        public ClsIdValue* MakeClsIdValue(Type* type, const string& typeId, int line)
        {
            ClsIdValue* val = new ClsIdValue(typeId);
            val->type = type;
            val->line = line;
            AddValue(val);
            return val;
        }
        public void SetCompileUnitInfo(const string& compileUnitId, MDStructRef* mdRef)
        {
            compileUnit.AddInfo(compileUnitId, mdRef);
        }
        public MDBool* CreateMDBool(bool value)
        {
            return compileUnit.metadata.CreateMDBool(value);
        }
        public MDLong* CreateMDLong(long value)
        {
            return compileUnit.metadata.CreateMDLong(value);
        }
        public MDString* CreateMDString(const string& value)
        {
            return compileUnit.metadata.CreateMDString(value);
        }
        public MDStructRef* CreateMDStructRef(int id)
        {
            return compileUnit.metadata.CreateMDStructRef(id);
        }
        public MDStruct* CreateMDStruct(int id)
        {
            return compileUnit.metadata.CreateMDStruct(id);
        }
        public CompileUnit compileUnit;
        public Function* currentFunction;
        public Registers regs;
        private TypeRepository typeRepository;
        private BasicBlock* currentBasicBlock;
        private List<UniquePtr<Value>> values;
        private HashMap<uint, IdValue*> idValueMap;
        private HashMap<string, SymbolValue*> symbolValueMap;
        private HashMap<sbyte, ConstantValue*> sbyteValueMap;
        private HashMap<byte, ConstantValue*> byteValueMap;
        private HashMap<short, ConstantValue*> shortValueMap;
        private HashMap<ushort, ConstantValue*> ushortValueMap;
        private HashMap<int, ConstantValue*> intValueMap;
        private HashMap<uint, ConstantValue*> uintValueMap;
        private HashMap<long, ConstantValue*> longValueMap;
        private HashMap<ulong, ConstantValue*> ulongValueMap;
        private List<UniquePtr<Operand>> operands;
        private HashMap<ulong, LiteralOperand*> literalOperandMap;
        private HashMap<string, SymbolOperand*> symbolOperandMap;
    }
}
