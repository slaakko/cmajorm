using System;
using System.Collections;
using System.IO;
using CodeFormatter = System.Text.CodeFormatter;

namespace cmsx.intermediate
{
    public const int printMachineCodeStage = 9999;

    public class CompileUnit
    {
        public nothrow CompileUnit(Context& context_) : context(context_)
        {
        }
        public nothrow void SetFileName(const string& fileName_)
        {
            fileName = fileName_;
        }
        public Function* AddFunction(int lineNumber, Type* type, const string& name)
        {
            if (type is FunctionType*)
            {
                Function* function = new Function(context, cast<FunctionType*>(type), name);
                functions.Add(UniquePtr<Function>(function));
                return function;
            }
            else
            {
                throw Exception("function type expected (" + fileName + ":" + ToString(lineNumber) + ")");
            }
        }
        public void MapInstructions()
        {
            for (const UniquePtr<Function>& function : functions)
            {
                function->MapInstructions();
            }
        }
        public void Validate()
        {
            for (const UniquePtr<Function>& function : functions)
            {
                try
                {
                    function->Validate();
                }
                catch (const Exception& ex)
                {
                    throw Exception("validation of function " + function->name + " in file '" + fileName + "' failed: " + ex.Message());
                }
            }
        }
        public void Print(int stage)
        {
            string filePath;
            if (stage == printMachineCodeStage)
            {
                filePath = Path.ChangeExtension(fileName, ".is");
            }
            else
            {
                filePath = Path.ChangeExtension(fileName, ".i" + ToString(stage));
            }
            StreamWriter writer = File.CreateText(filePath);
            CodeFormatter formatter(writer);
            formatter.SetIndentSize(5);
            context.PrintTypes(formatter);
            formatter.WriteLine();
            bool first = true;
            for (const UniquePtr<Function>& function : functions)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    formatter.WriteLine();
                }
                function->Print(formatter, stage);
            }
            if (Flags.Get(Flag.verbose))
            {
                Console.Out() << "==> " << filePath << endl();
            }
        }
        public nothrow void ComputeLivenessAndNextUse()
        {
            for (const UniquePtr<Function>& function : functions)
            {
                function->ComputeLivenessAndNextUse();
            }
        }
        public void GenerateCode(MachineCode& machineCode)
        {
            StreamWriter* writer = &Console.Out();
            UniquePtr<StreamWriter> debugWriter;
            if (Flags.Get(Flag.debug))
            {
                string filePath = Path.ChangeExtension(fileName, ".id");
                debugWriter.Reset(new StreamWriter(File.CreateText(filePath)));
                writer = debugWriter.Get();
            }
            CodeFormatter formatter(*writer);
            for (const UniquePtr<Function>& function : functions)
            {
                function->GenerateDeclaration(machineCode);
            }
            for (const UniquePtr<Function>& function : functions)
            {
                machineCode.GetInstruction(separatorInstructionOpCode);
                function->GenerateCode(machineCode, formatter);
            }
        }
        public Context& context;
        public string fileName;
        private List<UniquePtr<Function>> functions;
    }
}
