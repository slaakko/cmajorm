using System;
using System.Collections;

long Partition(List<int>& intList, long left, long right)
{
    long i = left;
    long j = right;
    int pivot = intList[(left + right) / 2];
    while (i <= j)
    {
        while (intList[i] < pivot) ++i;
        while (intList[j] > pivot) --j;
        if (i <= j)
        {
            Swap(intList[i], intList[j]);
            ++i;
            --j;
        }
    }
    return i;
}

void QuickSort(List<int>& intList, long left, long right)
{
    long index = Partition(intList, left, right);
    if (left < index - 1)
    {
        QuickSort(intList, left, index - 1);
    }
    if (index < right)
    {
        QuickSort(intList, index, right);
    }
}

void QuickSort(List<int>& intList)
{
    if (!intList.IsEmpty())
    {
        QuickSort(intList, 0, intList.Count() - 1);
    }
}

void Print(const List<int>& intList)
{
    bool first = true;
    for (int x : intList)
    {
        if (first)
        {
            first = false;
        }
        else
        {
            Console.Out() << ", ";
        }
        Console.Out() << x;
    }
    Console.Out() << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        long N = 10;
        if (argc > 1)
        {
            string arg = argv[1];
            N = ParseLong(arg);
        }
        List<int> intList;
        for (int i = 0; i < N; ++i)
        {
            intList.Add(cast<int>(Random()));
        }
        Print(intList);
        QuickSort(intList);
        Print(intList);
        
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
