using System;
using System.Collections;
using System.Security;

void PrintHelp()
{
    Console.Out() << 
        "Usage: sha1 [options] [<file> | <message>]..." << endl() << 
        "Compute and print a SHA1 message digest for each argument file or message." << endl() <<
        "If no arguments are given, process standard input." << endl() << endl() <<
        "Options:" << endl() << endl() <<
        "--help | -h" << endl() <<
        "   Print help." << endl() << endl() <<
        "--verbose | -v" << endl() <<
        "   Be verbose." << endl() << endl() <<
        "--files | -f" << endl() <<
        "   Treat arguments as file names. This is default option." << endl() << endl() <<
        "--messages | -m" << endl() <<
        "   Treat arguments as messages." << endl() << endl() <<
        "--cumulative | -c" << endl() <<
        "   Print digest for cumulative content." << endl() << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        List<string> args;
        bool verbose = false;
        bool messages = false;
        bool cumulative = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else if (arg == "--files")
                {
                    messages = false;
                }
                else if (arg == "--messages")
                {
                    messages = true;
                }
                else if (arg == "--cumulative")
                {
                    cumulative = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown option " + options);
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else if (o == 'v')
                        {
                            verbose = true;
                        }
                        else if (o == 'f')
                        {
                            messages = false;
                        }
                        else if (o == 'm')
                        {
                            messages = true;
                        }
                        else if (o == 'c')
                        {
                            cumulative = true;
                        }
                        else
                        {
                            throw Exception("unknown option '-" + string(o)+  "'");
                        }
                    }
                }
            }
            else 
            {
                args.Add(arg);
            }
        }
        if (args.IsEmpty())
        {
            if (verbose)
            {
                Console.Out() << "enter content: ";
            }
            string digest = GetSha1MessageDigest(Console.In().ReadToEnd());
            Console.Out() << digest << endl();
        }
        else if (!cumulative)
        {
            for (const string& arg : args)
            {
                if (verbose)
                {
                    Console.Out() << arg << ": ";
                }
                string digest;
                if (messages)
                {
                    digest = GetSha1MessageDigest(arg);
                }
                else
                {
                    digest = GetSha1FileDigest(arg);
                }
                Console.Out() << digest << endl();
            }
        }
        else
        {
            string digest;
            if (messages)
            {
                string content;
                for (const string& message : args)
                {
                    content.Append(message);
                }
                digest = GetSha1MessageDigest(content);
            }
            else
            {
                digest = GetCumulativeSha1FileDigest(args);
            }
            Console.Out() << digest << endl();
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
