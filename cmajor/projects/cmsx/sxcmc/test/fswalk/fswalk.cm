using System;
using System.Os;
using System.Text;
using System.IO;

static class Path
{
    public static string Combine(const string& left, const string& right)
    {
        if (left.EndsWith("/"))
        {
            return left + right;
        }
        else
        {
            return left + "/" + right;
        }
    }
}

void DirWalk(CodeFormatter& formatter, const string& dirPath)
{
    formatter << dirPath << endl();
    formatter.IncIndent();
    DirectoryReader reader(dirPath);
    DirectoryEntry dirEntry;
    while (reader.Read(dirEntry))
    {
        string entryName = &dirEntry.entryName[0];
        if (!entryName.StartsWith("."))
        {
            formatter << entryName << endl();
            string subPath = Path.Combine(dirPath, entryName);
            StatInfo statInfo;
            Stat(subPath.Chars(), statInfo);
            formatter.IncIndent();
            formatter << "inode: " << statInfo.INodeNumber() << endl();
            formatter << "fs: " << statInfo.FSNumber() << endl();
            formatter << "type: " << FileTypeStr(statInfo.Type()) << endl();
            formatter << "owner: " << AccessStr(statInfo.OwnerAccess()) << endl();
            formatter << "group: " << AccessStr(statInfo.GroupAccess()) << endl();
            formatter << "other: " << AccessStr(statInfo.OtherAccess()) << endl();
            formatter << "mountPoint: " << ToString(statInfo.MountPoint()) << endl();
            formatter << "uid: " << statInfo.UID() << endl();
            formatter << "gid: " << statInfo.GID() << endl();
            formatter << "nlinks: " << statInfo.GetNumLinks() << endl();
            formatter << "filesize: " << statInfo.GetFileSize() << endl();
            formatter << "ctime: " << statInfo.CTime().ToString() << endl();
            formatter << "mtime: " << statInfo.MTime().ToString() << endl();
            formatter << "atime: " << statInfo.ATime().ToString() << endl();
            formatter.DecIndent();
            if (statInfo.Type() == FileType.directory)
            {
                DirWalk(formatter, subPath);
            }
        }
    }
    formatter.DecIndent();
}

void PrintUsage()
{
    Console.Out() << "Usage: fswalk <dirPath>" << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        if (argc != 2)
        {
            PrintUsage();
            return 1;
        }
        CodeFormatter formatter(Console.Out());
        DirWalk(formatter, argv[1]);
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
