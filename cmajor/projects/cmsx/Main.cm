using System;
using System.Collections;
using System.Threading;
using cmsx.machine;
using cmsx.kernel;

void Init(Machine& machine)
{
    Kernel& kernel = Kernel.Instance();
    kernel.Init();
    MemoryTable& kernelMemoryTable = kernel.GetMemoryTable();
    machine.SetKernelRootPageAddress(kernelMemoryTable.rootPageAddress);
    Memory& mem = machine.GetMemory();
    AllocateMemory(mem, kernelMemoryTable);
    Registers& regs = machine.GetRegisters();
    SetProcessorToKernelMode(regs);
    regs.SetSpecial(Registers.rV, MakeVirtualTranslationRegisterValue(kernelMemoryTable.rootPageAddress, kernelMemoryTable.addressSpaceNumber));
    BootProc boot = Boot;
    ulong bootProcValue = cast<ulong>(cast<void*>(boot));
    mem.WriteULong(bootProcAddress, bootProcValue, Protection.write);
}

void Run(Machine& machine)
{
    machine.Run();
}

void Terminate(Machine& machine)
{
    Kernel& kernel = Kernel.Instance();
    if (Machine.GetFlag(Machine.Flags.runProgram))
    {
        int pid = kernel.GetProgramPID();
        Process* process = kernel.GetProcessTable().GetProcess(pid);
        if (process != null && Machine.GetFlag(Machine.Flags.verbose))
        {
            Console.Out() << "program exited with code " << process->exitCode << "." << endl();
        }
    }
    Registers& regs = machine.GetRegisters();
    SetProcessorToKernelMode(regs);
    regs.SetSpecial(Registers.rV, MakeVirtualTranslationRegisterValue(machine.GetKernelRootPageAddress(), kernelAddressSpaceNumber));
    MemoryTable& kernelMemoryTable = kernel.GetMemoryTable();
    FreeMemory(machine.GetMemory(), kernelMemoryTable);
}

void MachineThreadFunction(void* machineParam)
{
    try
    {
        Machine* machine = cast<Machine*>(machineParam);
        if (machine != null)
        {
            Init(*machine);
            Run(*machine);
            Terminate(*machine);
        }
    }
    catch (const Exception& ex)
    {
        System.Console.Error() << ex.ToString() << endl();
    }
}

class MachineDriver
{
    public MachineDriver(Machine& machine_) : machine(machine_), machineThread()
    {
    }
    public void RunThread()
    {
        machineThread = Thread.StartFunction(MachineThreadFunction, &machine);
    }
    public ~MachineDriver()
    {
        if (!Machine.GetFlag(Machine.Flags.runProgram))
        {
            machine.Exit();
        }
        machineThread.Join();
    }
    private Machine& machine;
    private Thread machineThread;
}

void Run()
{
    Machine& machine = Machine.Instance();
    MachineDriver machineDriver(machine);
    machineDriver.RunThread();
    if (!machine.GetFlag(Machine.Flags.runProgram))
    {
        string line = Console.ReadLine();
        while (!Console.In().EndOfStream())
        {
            if (line == "logout" || line == "exit")
            {
                break;
            }
            line = Console.ReadLine();
        }
    }
}

public const char* Version()
{
   return "0.1.0";
}

public void PrintHelp()
{
    Console.Out() << "Cmajor System X Driver version " << Version() << endl();
    Console.Out() << "Usage: cmsx [cmsx-options] [ EXECUTABLE [args] ]" << endl();
    Console.Out() << "Run/debug EXECUTABLE in System X virtual machine with args." << endl();
    Console.Out() << "cmsx-options:" << endl();
    Console.Out() << "--help (-h)" << endl();
    Console.Out() << "  print help" << endl();
    Console.Out() << "--verbose (-v)" << endl();
    Console.Out() << "  be verbose" << endl();
    Console.Out() << "--quiet (-q)" << endl();
    Console.Out() << "  be quiet" << endl();
    //Console.Out() << "--debug (-d)" << endl();
    //Console.Out() << "  debug EXECUTABLE" << endl();
}

int main(int argc, const char** argv)
{
    Debug.Start();
    try
    {
        string programFileName;
        List<string> programArguments;
        bool cmsxOptions = true;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (cmsxOptions && arg.StartsWith("-"))
            {
                if (arg == "--help" || arg == "-h")
                {
                    PrintHelp();
                    return 0;
                }
                else if (arg == "--verbose" || arg == "-v")
                {
                    Machine.SetFlag(Machine.Flags.verbose);
                }
                else if (arg == "--quiet" || arg == "-q")
                {
                    Machine.SetFlag(Machine.Flags.quiet);
                }
                else if (arg == "--debug" || arg == "-d")
                {
                    Machine.SetFlag(Machine.Flags.debug);
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (programFileName.IsEmpty())
            {
                programFileName = arg;
                cmsxOptions = false;
                Machine.SetFlag(Machine.Flags.runProgram);
            }
            else
            {
                programArguments.Add(arg);
            }
        }
        if (Machine.GetFlag(Machine.Flags.runProgram))
        {
            Kernel.Instance().SetProgramFileName(programFileName);
            Kernel.Instance().SetProgramArguments(programArguments);
        }
        Run();
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
