using System;
using System.Collections;
using System.IO;

const char* Version()
{
    return "4.0.0";
}

void PrintHelp()
{
    Console.Out() <<
        "Cmajor System X Intermediate Code Compiler version " << Version() << endl() <<
        "Usage: cmsxic [options] { <file.i> }" << endl() <<
        "Compiles given System X intermediate code files (*.i) to System X assembly files (*.s)" << endl() <<
        "Options:" << endl() <<
        "--help (-h)" << endl() <<
        "   Print help" << endl() <<
        "--verbose (-v)" << endl() <<
        "   Be verbose" << endl() <<
        "--debug (-d)" << endl() <<
        "   Print debugging messages to stdout" << endl() <<
        "--stages (-s)" << endl() <<
        "   Generate intermediate stage files (*.iN) N = 0, 1, 2, ..." << endl() <<
        "   and combined assembly code file (*.is)" << endl() <<
        "--optimization-level=N (-O=N)" << endl() <<
        "   Set optimization level to N=0-3." << endl() <<
        "   Default is 0." << endl() <<
        "--local-regs=N (-l=N)" << endl() <<
        "   Set number of local registers to N, where N must be >= 128 and <= 255." << endl() <<
        endl();
}

int main(int argc, const char** argv)
{
    try
    {
        List<string> intermediateCodeFileNames;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--verbose")
                {
                    cmsx.intermediate.Flags.Set(cmsx.intermediate.Flag.verbose);
                }
                else if (arg == "--debug")
                {
                    cmsx.intermediate.Flags.Set(cmsx.intermediate.Flag.debug);
                }
                else if (arg == "--stages")
                {
                    cmsx.intermediate.Flags.Set(cmsx.intermediate.Flag.stages);
                }
                else if (arg.StartsWith("--optimization-level="))
                {
                    int level = ParseInt(arg.Substring(21));
                    if (level < 0 || level > 3)
                    {
                        throw Exception("invalid optimization level (must be 0-3)");
                    }
                    cmsx.intermediate.Flags.SetOptimizationLevel(level);
                }
                else if (arg.StartsWith("--local-regs="))
                {
                    byte numLocalRegs = ParseByte(arg.Substring(13));
                    cmsx.intermediate.Flags.SetNumLocalRegs(numLocalRegs);
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                if (arg.StartsWith("-O="))
                {
                    int level = ParseInt(arg.Substring(3));
                    if (level < 0 || level > 3)
                    {
                        throw Exception("invalid optimization level (must be 0-3)");
                    }
                    cmsx.intermediate.Flags.SetOptimizationLevel(level);
                }
                else if (arg.StartsWith("-l="))
                {
                    byte numLocalRegs = ParseByte(arg.Substring(3));
                    cmsx.intermediate.Flags.SetNumLocalRegs(numLocalRegs);
                }
                else
                {
                    string options = arg.Substring(1);
                    if (options.IsEmpty())
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                    else
                    {
                        for (char o : options)
                        {
                            if (o == 'h')
                            {
                                PrintHelp();
                                return 1;
                            }
                            else if (o == 'v')
                            {
                                cmsx.intermediate.Flags.Set(cmsx.intermediate.Flag.verbose);
                            }
                            else if (o == 'd')
                            {
                                cmsx.intermediate.Flags.Set(cmsx.intermediate.Flag.debug);
                            }
                            else if (o == 's')
                            {
                                cmsx.intermediate.Flags.Set(cmsx.intermediate.Flag.stages);
                            }
                            else
                            {
                                throw Exception("unknown option '-" + string(o) + "'");
                            }
                        }
                    }
                }
            }
            else
            {
                intermediateCodeFileNames.Add(GetFullPath(arg));
            }
        }
        if (intermediateCodeFileNames.IsEmpty())
        {
            PrintHelp();
            throw Exception("no intermediate code files given");
        }
        for (const string& intermediateCodeFileName : intermediateCodeFileNames)
        {
            if (cmsx.intermediate.Flags.Get(cmsx.intermediate.Flag.verbose))
            {
                Console.Out() << "> " << intermediateCodeFileName << endl();
            }
            cmsx.intermediate.Compile(intermediateCodeFileName);
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
