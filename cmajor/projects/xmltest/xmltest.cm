using System;
using System.Text;
using System.Xml.Serialization;

namespace xmltest
{
    new class ConcreteXmlSerializableExtractor<Vehicle>;
    new class ConcreteXmlSerializableExtractor<Car>;
    new class ConcreteXmlSerializableExtractor<Person>;
    
    public const int vehicleClassId = 0;
    public const int carClassId = 1;
    public const int personClassId = 2;

    public void Register()
    {
        Vehicle.Register(vehicleClassId);
        Car.Register(carClassId);
        Person.Register(personClassId);
    }

    public void TestXmlSerializable()
    {
        try
        {
            OwningXmlContainer container;
            Vehicle* vehicle = new Vehicle();
            Add(vehicle, &container);
            XmlSerializable serializableVehicle = *vehicle;
            int classId = serializableVehicle.ClassId();
            Console.Out() << classId << endl();
            string className = serializableVehicle.ClassName();
            Console.Out() << className << endl();

            System.Dom.Document vehicleDoc;
            vehicleDoc.AppendChild(UniquePtr<System.Dom.Node>(serializableVehicle.ToXml("object")));
            CodeFormatter formatter(Console.Out());
            formatter.SetIndentSize(1);
            vehicleDoc.Write(formatter);

            Car* car = new Car();
            Add(car, &container);
            XmlSerializable serializabledCar = *car;
            int carClassId = serializabledCar.ClassId();
            Console.Out() << carClassId << endl();
            string carClassName = serializabledCar.ClassName();
            Console.Out() << carClassName << endl();

            System.Dom.Document carDoc;
            carDoc.AppendChild(UniquePtr<System.Dom.Node>(serializabledCar.ToXml("object")));
            carDoc.Write(formatter);

            XmlSerializableProxy* vehicleProxy = container.Get(vehicle->ObjectId());
            Vehicle* v = XmlCast<Vehicle>(vehicleProxy);
            if (v != null)
            {
                Console.Out() << "vehicleProxy has Vehicle" << endl();
            }
            else
            {
                Console.Out() << "vehicleProxy has not Vehicle!!!" << endl();
            }

            Car* vc = XmlCast<Car>(vehicleProxy);
            if (vc != null)
            {
                Console.Out() << "vehicleProxy has Car!!!" << endl();
            }
            else
            {
                Console.Out() << "vehicleProxy has not Car" << endl();
            }

            XmlSerializableProxy* carProxy = container.Get(car->ObjectId());
            Car* c = XmlCast<Car>(carProxy);
            if (c != null)
            {
                Console.Out() << "carProxy has Car" << endl();
            }
            else
            {
                Console.Out() << "carProxy has not Car!!!" << endl();
            }

            Vehicle* cv = XmlCast<Vehicle>(carProxy);
            if (cv != null)
            {
                Console.Out() << "carProxy has Vehicle!!!" << endl();
            }
            else
            {
                Console.Out() << "carProxy has not Vehicle" << endl();
            }
        }
        catch (const Exception& ex)
        {
            Console.Error() << ex.ToString() << endl();
        }
    }

    public void TestXmlBundle()
    {
        OwningXmlContainer container;
        Vehicle* vehicle = new Vehicle();
        Add(vehicle, &container);
        XmlSerializableProxy* vehicleProxy = container.Get(vehicle->ObjectId());
        Car* car = new Car();
        Add(car, &container);
        XmlSerializableProxy* carProxy = container.Get(car->ObjectId());

        XmlBundle bundle = container.CreateBundle(vehicle);
        string str = bundle.ToXmlString();
        Console.Out() << str << endl();
    }
}

int main()
{
    try
    {
        xmltest.Register();
        //xmltest.TestXmlSerializable();
        xmltest.TestXmlBundle();
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
