// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.Parser;
using ContainerFileTokens;

parser ProjectFileParser
{
    uselexer ContainerFileLexer;
    main;

    ProjectFile(string config, BackEnd backend, var UniquePtr<Project> project) : Project*
        ::=
        (   PROJECT QualifiedId:name! SEMICOLON!{ project.Reset(new Project(name, lexer.FileName(), config, backend)); }
            (Declaration:declaration{ project->AddDeclaration(declaration); })*
        )
        {
            return project.Release();
        }
        ;
        
    QualifiedId(var Span s) : ustring
        ::= 
        (
            ID{ s = span; } (DOT ID{ s.end = span.end; })*
        )
        {
            return lexer.GetMatch(s);
        }
        ;
        
    Declaration : ProjectDeclaration*
        ::= ReferenceDeclaration:referenceDeclaration{ return referenceDeclaration; }
        |   SourceFileDeclaration:sourceFileDeclaration{ return sourceFileDeclaration; }
        |   TextFileDeclaration:textFileDeclaration{ return textFileDeclaration; }
        |   TargetDeclaration:targetDeclaration{ return targetDeclaration; }
        ;
        
    ReferenceDeclaration(var string filePath) : ProjectDeclaration*
        ::= REFERENCE FILEPATH!{ filePath = lexer.filePath; } SEMICOLON!{ return new Cm.Ast.ReferenceDeclaration(filePath); }
        ;
        
    SourceFileDeclaration(var string filePath) : ProjectDeclaration*
        ::= SOURCE FILEPATH!{ filePath = lexer.filePath; } SEMICOLON!{ return new Cm.Ast.SourceFileDeclaration(filePath); }
        ;
        
    TextFileDeclaration(var string filePath) : ProjectDeclaration*
        ::= TEXT FILEPATH!{ filePath = lexer.filePath; } SEMICOLON!{ return new Cm.Ast.TextFileDeclaration(filePath); }
        ;
        
    TargetDeclaration : ProjectDeclaration*
        ::= TARGET ASSIGN! Target:target! SEMICOLON!{ return new Cm.Ast.TargetDeclaration(target); }
        ;
        
    Target : Cm.Ast.Target
        ::= PROGRAM{ return Cm.Ast.Target.program; }
        |   WINGUIAPP{ return Cm.Ast.Target.winguiapp; }
        |   WINAPP{ return Cm.Ast.Target.winapp; }
        |   LIBRARY{ return Cm.Ast.Target.library; }
        |   WINLIB{ return Cm.Ast.Target.winlib; }
        |   UNITTEST{ return Cm.Ast.Target.unitTest; }
        ;
}
