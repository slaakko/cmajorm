// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.Lexer;
using Cm.Parser;
using CmajorTokens;

parser TemplateParser
{
    uselexer CmajorLexer;
    using IdentifierParser.QualifiedId;
    using IdentifierParser.Identifier;
    using TypeExprParser.TypeExpr;

    TemplateId(ParsingContext* ctx, var UniquePtr<TemplateIdNode> templateId, var Span e) : Node*
        ::= empty{ ctx->BeginParsingTemplateId(); }
            (QualifiedId(ctx):primary{ templateId.Reset(new TemplateIdNode(span, ctx->ModuleId(), primary)); }
            LANGLE{ ++lexer.leftAngleCount; }
            ((TypeExpr(ctx):templateArg{ templateId->AddTemplateArgument(templateArg); } % COMMA) RANGLE{ e = span; }){ --lexer.leftAngleCount; } / { --lexer.leftAngleCount; })
        {
            templateId->SetSpanEnd(e.end);
            ctx->EndParsingTemplateId();
            return templateId.Release();
        }
        /
        {
            ctx->EndParsingTemplateId();
        }
        ;

    TemplateParameter(ParsingContext* ctx) : TemplateParameterNode*
        ::= Identifier(ctx):id ((ASSIGN TypeExpr(ctx):defaultTemplateArg)?){ return new TemplateParameterNode(span, ctx->ModuleId(), id, defaultTemplateArg); }
        ;

    TemplateParameterList(ParsingContext* ctx, Node* owner)
        ::= LANGLE (TemplateParameter(ctx):tp{ owner->AddTemplateParameter(tp); } % COMMA) RANGLE!
        ;
}
