// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.Parser;
using CmajorTokens;

parser InterfaceParser
{
    uselexer CmajorLexer;

    using AttributeParser.Attributes;
    using SpecifierParser.Specifiers;
    using IdentifierParser.Identifier;
    using TypeExprParser.TypeExpr;
    using ParameterParser.ParameterList;
    
    Interface(ParsingContext* ctx, var UniquePtr<InterfaceNode> intf, var Span s, var Span specifierSpan, var Span beginBraceSpan, var Span endBraceSpan) : InterfaceNode*
        ::=
        (   empty{ s = span; } Attributes:attrs? Specifiers:specifiers{ specifierSpan = span; } INTERFACE Identifier:id!
            {
                s.end = span.end;
                intf.Reset(new InterfaceNode(s, specifiers, id, attrs));
                intf->SetSpecifierSpan(specifierSpan);
            }
            LBRACE!{ beginBraceSpan = span; } InterfaceContent(ctx, intf.Get()):content RBRACE!{ endBraceSpan = span; intf->SetBeginBraceSpan(beginBraceSpan); intf->SetEndBraceSpan(endBraceSpan); }
        )
        {
            return intf.Release();
        }
        ;
        
    InterfaceContent(ParsingContext* ctx, InterfaceNode* intf)
        ::= (InterfaceMemFun(ctx):intfMemFun{ intf->AddMember(intfMemFun); })*
        ;
        
    InterfaceMemFun(ParsingContext* ctx, var UniquePtr<MemberFunctionNode> memFun, var Span s) : Node*
        ::= empty{ s = span; } Attributes:attrs? TypeExpr(ctx):returnType InterfaceFunctionGroupId:groupId!
        {
            s.end = span.end;
            memFun.Reset(new MemberFunctionNode(s, Specifiers(), returnType, groupId, attrs));
        }
        ParameterList(ctx, memFun.Get()):paramList! SEMICOLON!
        {
            return memFun.Release();
        }
        ;
        
    InterfaceFunctionGroupId : ustring
        ::= ID{ return lexer.GetMatch(span); }
        ;
}
