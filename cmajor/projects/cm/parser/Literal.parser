// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.Lexer;
using Cm.Parser;
using CmajorTokens;

parser LiteralParser
{
    uselexer CmajorLexer;
    using ExpressionParser.Expression;
    
    Literal(ParsingContext* ctx) : LiteralNode*
        ::= SimpleLiteral:simpleLiteral{ return simpleLiteral; }
        |   ComplexLiteral(ctx):complexLiteral{ return complexLiteral; }
        ;
        
    SimpleLiteral : LiteralNode*
        ::= TRUE
        { 
            LiteralNode* value = new BooleanLiteralNode(span, true); 
            value->SetText(lexer.GetMatch(span));
            return value;
        }
        |   FALSE
        { 
            LiteralNode* value = new BooleanLiteralNode(span, false);
            value->SetText(lexer.GetMatch(span));
            return value;
        }
        |   FLOATINGLIT
        {
            ParseFloatingLiteral(lexer.FileName(), lexer.GetToken(pos), lexer.floatingLit, lexer.floatingLitFloat);
            LiteralNode* value = CreateFloatingLiteralNode(span, lexer.floatingLit, lexer.floatingLitFloat);
            value->SetText(lexer.GetMatch(span));
            return value;
        }
        |   INTLIT
        {
            ParseIntegerLiteral(lexer.FileName(), lexer.GetToken(pos), lexer.intLit, lexer.intLitUnsigned);
            LiteralNode* value = CreateIntegerLiteralNode(span, lexer.intLit, lexer.intLitUnsigned);
            value->SetText(lexer.GetMatch(span));
            return value;
        }
        |   CHARLIT
        {
            ParseCharacterLiteral(lexer.FileName(), lexer.GetToken(pos), lexer.chrLit, lexer.chrLitPrefix);
            LiteralNode* value = CreateCharacterLiteralNode(span, lexer.chrLit, lexer.chrLitPrefix);
            value->SetText(lexer.GetMatch(span));
            return value;
        }
        |   STRINGLIT
        {
            ParseStringLiteral(lexer.FileName(), lexer.GetToken(pos), lexer.strLit, lexer.strLitPrefix);
            LiteralNode* value = CreateStringLiteralNode(span, lexer.strLit, lexer.strLitPrefix);
            value->SetText(lexer.GetMatch(span));
            return value;
        }
        |   NULLLIT
        {
            LiteralNode* value = new NullLiteralNode(span);
            value->SetText(lexer.GetMatch(span));
            return value;
        }
        ;
        
    ComplexLiteral(ParsingContext* ctx) : LiteralNode*
        ::= ArrayLiteral(ctx):arrayLiteral{ return arrayLiteral; }
        |   StructuredLiteral(ctx):structuredLiteral{ return structuredLiteral; }
        ;
        
    ArrayLiteral(ParsingContext* ctx, var UniquePtr<ArrayLiteralNode> arrayLiteral) : ArrayLiteralNode*
        ::= 
        (   LBRACKET{ arrayLiteral.Reset(new ArrayLiteralNode(span)); }
            (Expression(ctx):expr{ arrayLiteral->AddValue(expr); } % COMMA)?
            RBRACKET!
        )
        {
            return arrayLiteral.Release();
        }
        ;
        
    StructuredLiteral(ParsingContext* ctx, var UniquePtr<StructuredLiteralNode> structuredLiteral) : StructuredLiteralNode*
        ::= 
        (   LBRACE{ structuredLiteral.Reset(new StructuredLiteralNode(span)); }
            (Expression(ctx):expr{ structuredLiteral->AddMember(expr); } % COMMA)?
            RBRACE!
        )
        {
            return structuredLiteral.Release();
        }
        ;   
}
