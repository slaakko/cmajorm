using System;
using System.Collections;
using System.Lex;
using System.Parsing;
using System;
using Cm.Ast;
using Cm.Lexer;
using Cm.Parser;
using CmajorTokens;

// this file has been automatically generated from 'C:/work/cmajorm/cmajor/projects/cm/parser/Enumeration.parser' using soulcm parser generator scmpg version 3.10.0

public static class EnumerationParser
{
    public static Match EnumType(CmajorLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"EnumType");
            }
        #endif
        UniquePtr<EnumTypeNode> enumType;
        Span s;
        Span beginBraceSpan;
        Span endBraceSpan;
        UniquePtr<Value<Cm.Ast.Specifiers>> specifiers;
        UniquePtr<IdentifierNode> enumTypeId;
        UniquePtr<Node> underlyingType;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Span span = lexer.GetSpan();
                                    Match match = SpecifierParser.Specifiers(lexer);
                                    specifiers.Reset(cast<Value<Cm.Ast.Specifiers>*>(match.value));
                                    if (match.hit)
                                    {
                                        s = span;
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch7 = &match;
                                {
                                    Match match(false);
                                    if (*lexer == ENUM)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    *parentMatch7 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch8 = &match;
                            {
                                Match match(false);
                                Match* parentMatch9 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Span span = lexer.GetSpan();
                                    Match match(true);
                                    Match* parentMatch10 = &match;
                                    {
                                        System.Lex.Span span = lexer.GetSpan();
                                        Match match = IdentifierParser.Identifier(lexer, ctx);
                                        enumTypeId.Reset(cast<IdentifierNode*>(match.value));
                                        if (match.hit)
                                        {
                                            *parentMatch10 = match;
                                        }
                                        else
                                        {
                                            lexer.ThrowExpectationFailure(span, u"Identifier");
                                        }
                                    }
                                    if (match.hit)
                                    {
                                        s.end = span.end;
                                        enumType.Reset(new EnumTypeNode(s, ctx->ModuleId(), specifiers->value, enumTypeId.Release()));
                                    }
                                    *parentMatch9 = match;
                                }
                                *parentMatch8 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch11 = &match;
                        {
                            Match match(true);
                            long save = lexer.GetPos();
                            Match* parentMatch12 = &match;
                            {
                                Match match(false);
                                Match* parentMatch13 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch14 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Match match = EnumerationParser.UnderlyingType(lexer, ctx);
                                        underlyingType.Reset(cast<Node*>(match.value));
                                        if (match.hit)
                                        {
                                            enumType->SetUnderlyingType(underlyingType.Release());
                                        }
                                        *parentMatch14 = match;
                                    }
                                    *parentMatch13 = match;
                                }
                                if (match.hit)
                                {
                                    *parentMatch12 = match;
                                }
                                else
                                {
                                    lexer.SetPos(save);
                                }
                            }
                            *parentMatch11 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch15 = &match;
                    {
                        Match match(false);
                        Match* parentMatch16 = &match;
                        {
                            long pos = lexer.GetPos();
                            Span span = lexer.GetSpan();
                            Match match(true);
                            Match* parentMatch17 = &match;
                            {
                                System.Lex.Span span = lexer.GetSpan();
                                Match match(false);
                                if (*lexer == LBRACE)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                if (match.hit)
                                {
                                    *parentMatch17 = match;
                                }
                                else
                                {
                                    lexer.ThrowExpectationFailure(span, GetTokenName(LBRACE));
                                }
                            }
                            if (match.hit)
                            {
                                beginBraceSpan = span;
                            }
                            *parentMatch16 = match;
                        }
                        *parentMatch15 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                Match match(false);
                Match* parentMatch18 = &match;
                {
                    Match match = EnumerationParser.EnumConstants(lexer, ctx, enumType.Get());
                    *parentMatch18 = match;
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch19 = &match;
            {
                Match match(false);
                Match* parentMatch20 = &match;
                {
                    long pos = lexer.GetPos();
                    Span span = lexer.GetSpan();
                    Match match(true);
                    Match* parentMatch21 = &match;
                    {
                        System.Lex.Span span = lexer.GetSpan();
                        Match match(false);
                        if (*lexer == RBRACE)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        if (match.hit)
                        {
                            *parentMatch21 = match;
                        }
                        else
                        {
                            lexer.ThrowExpectationFailure(span, GetTokenName(RBRACE));
                        }
                    }
                    if (match.hit)
                    {
                        endBraceSpan = span;
                        enumType->SetBeginBraceSpan(beginBraceSpan);
                        enumType->SetEndBraceSpan(endBraceSpan);
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EnumType");
                            #endif
                            return Match(true, enumType.Release());
                        }
                    }
                    *parentMatch20 = match;
                }
                *parentMatch19 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EnumType");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"EnumType");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match UnderlyingType(CmajorLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"UnderlyingType");
            }
        #endif
        UniquePtr<Node> type;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            if (*lexer == COLON)
            {
                ++lexer;
                match.hit = true;
            }
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long pos = lexer.GetPos();
                    Match match = TypeExprParser.TypeExpr(lexer, ctx);
                    type.Reset(cast<Node*>(match.value));
                    if (match.hit)
                    {
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnderlyingType");
                            #endif
                            return Match(true, type.Release());
                        }
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"UnderlyingType");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"UnderlyingType");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match EnumConstants(CmajorLexer& lexer, ParsingContext* ctx, EnumTypeNode* enumType)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"EnumConstants");
            }
        #endif
        UniquePtr<EnumConstantNode> enumConstant;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long pos = lexer.GetPos();
                Match match(true);
                Match* parentMatch2 = &match;
                {
                    System.Lex.Span span = lexer.GetSpan();
                    Match match = EnumerationParser.EnumConstant(lexer, ctx, enumType);
                    enumConstant.Reset(cast<EnumConstantNode*>(match.value));
                    if (match.hit)
                    {
                        *parentMatch2 = match;
                    }
                    else
                    {
                        lexer.ThrowExpectationFailure(span, u"EnumConstant");
                    }
                }
                if (match.hit)
                {
                    enumType->AddConstant(enumConstant.Release());
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch3 = &match;
            {
                Match match(true);
                Match* parentMatch4 = &match;
                {
                    while (true)
                    {
                        long save = lexer.GetPos();
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                if (*lexer == COMMA)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch7 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Match match(true);
                                        Match* parentMatch8 = &match;
                                        {
                                            System.Lex.Span span = lexer.GetSpan();
                                            Match match = EnumerationParser.EnumConstant(lexer, ctx, enumType);
                                            enumConstant.Reset(cast<EnumConstantNode*>(match.value));
                                            if (match.hit)
                                            {
                                                *parentMatch8 = match;
                                            }
                                            else
                                            {
                                                lexer.ThrowExpectationFailure(span, u"EnumConstant");
                                            }
                                        }
                                        if (match.hit)
                                        {
                                            enumType->AddConstant(enumConstant.Release());
                                        }
                                        *parentMatch7 = match;
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                *parentMatch4 = match;
                            }
                            else
                            {
                                lexer.SetPos(save);
                                break;
                            }
                        }
                    }
                }
                *parentMatch3 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EnumConstants");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"EnumConstants");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match EnumConstant(CmajorLexer& lexer, ParsingContext* ctx, EnumTypeNode* enumType)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"EnumConstant");
            }
        #endif
        Span s;
        UniquePtr<Node> expr;
        UniquePtr<IdentifierNode> constantId;
        UniquePtr<Node> constantValue;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long pos = lexer.GetPos();
                Span span = lexer.GetSpan();
                Match match(true);
                Match* parentMatch2 = &match;
                {
                    System.Lex.Span span = lexer.GetSpan();
                    Match match = IdentifierParser.Identifier(lexer, ctx);
                    constantId.Reset(cast<IdentifierNode*>(match.value));
                    if (match.hit)
                    {
                        *parentMatch2 = match;
                    }
                    else
                    {
                        lexer.ThrowExpectationFailure(span, u"Identifier");
                    }
                }
                if (match.hit)
                {
                    s = span;
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch3 = &match;
            {
                Match match(false);
                Match* parentMatch4 = &match;
                {
                    Match match(false);
                    Match* parentMatch5 = &match;
                    {
                        long save = lexer.GetPos();
                        Match match(false);
                        Match* parentMatch6 = &match;
                        {
                            Match match(false);
                            if (*lexer == ASSIGN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            *parentMatch6 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch7 = &match;
                            {
                                Match match(false);
                                Match* parentMatch8 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match = ExpressionParser.Expression(lexer, ctx);
                                    constantValue.Reset(cast<Node*>(match.value));
                                    if (match.hit)
                                    {
                                        expr.Reset(constantValue.Release());
                                        expr->SetFullSpan();
                                        Span v = expr->GetSpan();
                                        s.end = expr->GetSpan().end;
                                        EnumConstantNode* value = new EnumConstantNode(s, ctx->ModuleId(), constantId.Release(), expr.Release());
                                        value->SetHasValue();
                                        value->SetStrValue(lexer.GetMatch(v));
                                        {
                                            #if (DEBUG)
                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EnumConstant");
                                            #endif
                                            return Match(true, value);
                                        }
                                    }
                                    *parentMatch8 = match;
                                }
                                *parentMatch7 = match;
                            }
                            *parentMatch6 = match;
                        }
                        *parentMatch5 = match;
                        if (!match.hit)
                        {
                            Match match(false);
                            Match* parentMatch9 = &match;
                            lexer.SetPos(save);
                            {
                                Match match(false);
                                Match* parentMatch10 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match(true);
                                    if (match.hit)
                                    {
                                        {
                                            #if (DEBUG)
                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EnumConstant");
                                            #endif
                                            return Match(true, new EnumConstantNode(s, ctx->ModuleId(), constantId.Release(), MakeNextEnumConstantValue(s, ctx->ModuleId(), enumType)));
                                        }
                                    }
                                    *parentMatch10 = match;
                                }
                                *parentMatch9 = match;
                            }
                            *parentMatch5 = match;
                        }
                    }
                    *parentMatch4 = match;
                }
                *parentMatch3 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"EnumConstant");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"EnumConstant");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
}
