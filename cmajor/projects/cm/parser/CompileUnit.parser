// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.Parser;
using CmajorTokens;

parser CompileUnitParser
{
    uselexer CmajorLexer;
    main;
    
    using IdentifierParser.Identifier;
    using IdentifierParser.QualifiedId;
    using ConceptParser.Concept;
    using FunctionParser.Function;
    using ClassParser.Class;
    using InterfaceParser.Interface;
    using TypedefParser.Typedef;
    using EnumerationParser.EnumType;
    using ConstantParser.Constant;
    using DelegateParser.Delegate;
    using DelegateParser.ClassDelegate;
    using GlobalVariableParser.GlobalVariable;
    
    CompileUnit(ParsingContext* ctx, var UniquePtr<CompileUnitNode> compileUnit) : CompileUnitNode*
        ::= empty{ compileUnit.Reset(new CompileUnitNode(span, lexer.FileName())); }
            NamespaceContent(ctx, compileUnit.Get(), compileUnit->GlobalNs()):content{ return compileUnit.Release(); }
        ;
        
    NamespaceContent(ParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns)
        ::= UsingDirectives(ctx, ns):usingDirectives
            Definitions(ctx, cu, ns):definitions
        ;
        
    UsingDirectives(ParsingContext* ctx, NamespaceNode* ns)
        ::= UsingDirective(ctx, ns):usingDirective*
        ;
        
    UsingDirective(ParsingContext* ctx, NamespaceNode* ns)
        ::= UsingAliasDirective:usingAlias{ ns->AddMember(usingAlias); }
        |   UsingNamespaceDirective(ctx):usingNs{ ns->AddMember(usingNs); }
        ;
        
    UsingAliasDirective(var Span s) : Node*
        ::= USING{ s = span; } Identifier:id ASSIGN QualifiedId:qid! SEMICOLON!
        {
            s.end = span.end;
            return new AliasNode(s, id, qid);
        }
        ;
        
    UsingNamespaceDirective(ParsingContext* ctx, var Span s) : Node*
        ::= USING{ s = span; } QualifiedId:ns! SEMICOLON!
        {
            s.end = span.end;
            return new NamespaceImportNode(s, ns);
        }
        ;
        
    Definitions(ParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns)
        ::= (Definition(ctx, cu, ns):definition{ ns->AddMember(definition); })*
        ;
        
    Definition(ParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns) : Node* 
        ::= NamespaceDefinition(ctx, cu, ns):nsDefinition{ return nsDefinition; }
        |   TypedefDeclaration(ctx):typedefDeclaration{ return typedefDeclaration; }
        |   ConceptDefinition(ctx):conceptDefinition{ return conceptDefinition; }
        |   FunctionDefinition(ctx):functionDefinition{ return functionDefinition; }
        |   ClassDefinition(ctx):classDefinition{ return classDefinition; }
        |   InterfaceDefinition(ctx):interfaceDefinition{ return interfaceDefinition; }
        |   EnumTypeDefinition(ctx):enumTypeDefinition{ return enumTypeDefinition; }
        |   ConstantDefinition(ctx):constantDefinition{ return constantDefinition; }
        |   DelegateDefinition(ctx):delegateDefinition{ return delegateDefinition; }
        |   ClassDelegateDefinition(ctx):classDelegateDefinition{ return classDelegateDefinition; }
        |   GlobalVariableDefinition(ctx, cu):globalVariableDefinition{ return globalVariableDefinition; }
        ;
        
    NamespaceDefinition(ParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns, var UniquePtr<NamespaceNode> nsNode, var Span s) : NamespaceNode*
        ::= NAMESPACE{ s = span; } (QualifiedId:nsName{ s.end = span.end; nsNode.Reset(new NamespaceNode(s, nsName)); } | empty{ nsNode.Reset(new NamespaceNode(s, null)); })
            LBRACE! NamespaceContent(ctx, cu, nsNode.Get()):content! RBRACE!
        {
            return nsNode.Release();
        }
        ;
        
    TypedefDeclaration(ParsingContext* ctx) : TypedefNode*
        ::= Typedef(ctx):typedefDeclaration{ return typedefDeclaration; }
        ;
        
    ConceptDefinition(ParsingContext* ctx) : ConceptNode*
        ::= Concept(ctx):conceptDefinition{ return conceptDefinition; }
        ;
        
    FunctionDefinition(ParsingContext* ctx) : FunctionNode*
        ::= Function(ctx):functionDefinition{ return functionDefinition; }
        ;
        
    ClassDefinition(ParsingContext* ctx) : ClassNode*
        ::= Class(ctx):classDefinition{ return classDefinition; }
        ;
        
    InterfaceDefinition(ParsingContext* ctx) : InterfaceNode*
        ::= Interface(ctx):interfaceDefinition{ return interfaceDefinition; }
        ;
        
    EnumTypeDefinition(ParsingContext* ctx) : EnumTypeNode*
        ::= EnumType(ctx):enumTypeDefinition{ return enumTypeDefinition; }
        ;
        
    ConstantDefinition(ParsingContext* ctx) : ConstantNode*
        ::= Constant(ctx):constantDefinition{ return constantDefinition; }
        ;
        
    DelegateDefinition(ParsingContext* ctx) : DelegateNode*
        ::= Delegate(ctx):delegateDefinition{ return delegateDefinition; }
        ;
        
    ClassDelegateDefinition(ParsingContext* ctx) : ClassDelegateNode*
        ::= ClassDelegate(ctx):classDelegateDefinition{ return classDelegateDefinition; }
        ;
        
    GlobalVariableDefinition(ParsingContext* ctx, CompileUnitNode* cu) : GlobalVariableNode*
        ::= GlobalVariable(ctx, cu):globalVariableDefinition{ return globalVariableDefinition; }
        ;
}
