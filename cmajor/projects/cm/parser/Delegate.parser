// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.Lexer;
using Cm.Parser;
using CmajorTokens;

parser DelegateParser
{
    uselexer CmajorLexer;

    using SpecifierParser.Specifiers;
    using TypeExprParser.TypeExpr;
    using ParameterParser.ParameterList;
    using IdentifierParser.Identifier;
    
    Delegate(ParsingContext* ctx, var Span s, var UniquePtr<DelegateNode> dlg) : DelegateNode*
        ::= Specifiers:specifiers{ s = span; } DELEGATE TypeExpr(ctx):type! Identifier:id!{ dlg.Reset(new DelegateNode(s, specifiers, type, id)); }
            ParameterList(ctx, dlg.Get()):parameterList! SEMICOLON!{ dlg->SetSpanEnd(span.end); return dlg.Release(); }
        ;
        
    ClassDelegate(ParsingContext* ctx, var Span s, var UniquePtr<ClassDelegateNode> clsDlg) : ClassDelegateNode*
        ::= Specifiers:specifiers{ s = span; } CLASS DELEGATE TypeExpr(ctx):type! Identifier:id!{ clsDlg.Reset(new ClassDelegateNode(s, specifiers, type, id)); }
            ParameterList(ctx, clsDlg.Get()):parameterList! SEMICOLON!{ clsDlg->SetSpanEnd(span.end); return clsDlg.Release(); }
        ;
        
}
