// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;
using Cm.Service.Debug;

namespace Cm.Views
{
    public nothrow System.Windows.Color DefaultBreakpointColor()
    {
        return System.Windows.Color(228u, 20u, 0u);
    }

    public nothrow System.Windows.Color TransparentColor()
    {
        return System.Windows.Color(0u, 128u, 128u);
    }

    public nothrow Point DefaultArrowOffset()
    {
        return Point(1, 1);
    }

    public nothrow Point DefaultBreakpointOffset()
    {
        return Point(0, -2);
    }

    public nothrow Size DefaultBreakpointInflate()
    {
        return Size(-4, -4);
    }

    public class AddBreakpointEventArgs
    {
        public string filePath;
        public Breakpoint* breakpoint;
    }

    public class RemoveBreakpointEventArgs
    {
        public string breakpointId;
    }

    public class delegate void AddBreakpointEventHandler(AddBreakpointEventArgs& args);
    public class delegate void RemoveBreakpointEventHandler(RemoveBreakpointEventArgs& args);

    public class DebugStrip : Control
    {
        public DebugStrip(int width, const Color& backgroundColor, BreakpointList& breakpointList_, TextView* view_) :
            base("Cm.Views.DebugStrip", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
                backgroundColor, "debugStrip", Point(), Size(width, 0), Dock.left, Anchors.none), breakpointList(breakpointList_), view(view_),
                breakpointColor(DefaultBreakpointColor()), redBrush(breakpointColor), whiteBrush(Color.White()), redPen(breakpointColor),
                topLineNumber(1), origin(), arrowBitmap(Bitmaps.Instance().GetBitmap("cm.views.arrow.bitmap")),
                arrowBitmapSize(Size(cast<int>(arrowBitmap->GetWidth()), cast<int>(arrowBitmap->GetHeight())))
        {
            view->ContentLocationChangedEvent().AddHandler(ViewContentLocationChanged);
            view->LineInsertedEvent().AddHandler(ViewLineInserted);
            view->LineDeletedEvent().AddHandler(ViewLineDeleted);
        }
        private void ViewContentLocationChanged()
        {
            topLineNumber = view->TopLine();
            origin = view->ContentLocation();
            Invalidate();
        }
        private void ViewLineInserted(LineEventArgs& args)
        {
            bool changed = false;
            int line = args.lineIndex + 1 - 1;
            for (Breakpoint* breakpoint : breakpointList.Breakpoints())
            {
                if (breakpoint->line >= line)
                {
                    ++breakpoint->line;
                    changed = true;
                }
            }
            if (changed)
            {
                Invalidate();
            }
        }
        private void ViewLineDeleted(LineEventArgs& args)
        {
            bool changed = false;
            List<Breakpoint*> breakpointsToDelete;
            int line = args.lineIndex + 1;
            for (Breakpoint* breakpoint : breakpointList.Breakpoints())
            {
                if (breakpoint->line == line)
                {
                    breakpointsToDelete.Add(breakpoint);
                }
                else if (breakpoint->line > line)
                {
                    --breakpoint->line;
                    changed = true;
                }
            }
            for (Breakpoint* breakpointToDelete : breakpointsToDelete)
            {
                breakpointList.RemoveBreakpoint(breakpointToDelete);
                changed = true;
            }
            if (changed)
            {
                Invalidate();
            }
        }
        protected override void OnMouseDown(MouseEventArgs& args)
        {
            try
            {
                Point location = args.location;
                view->TranslateMousePos(location);
                int line = cast<int>(location.y / view->CharHeight() + 1);
                if (args.buttons == MouseButtons.lbutton && args.clicks == 1)
                {
                    Breakpoint* bp = GetBreakpoint(line);
                    if (bp != null)
                    {
                        RemoveBreakpoint(bp);
                        Invalidate();
                    }
                    else
                    {
                        Breakpoint* bp = new Breakpoint(line);
                        AddBreakpoint(bp);
                        Invalidate();
                    }
                }
                else if (args.buttons == MouseButtons.rbutton && args.clicks == 1)
                {
                    // todo    
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }
        protected override void OnPaint(PaintEventArgs& args)
        {
            try
            {
                args.graphics.Clear(BackgroundColor());
                if (breakpointList.IsEmpty() && debugLocation == SourceSpan()) return;
                if (view->CharHeight() == 0 || view->CharWidth() == 0) return;
                SmoothingMode prevSmoothingMode = args.graphics.GetSmoothingModeChecked();
                args.graphics.SetSmoothingModeChecked(SmoothingMode.highQuality);
                Point myOrigin = origin;
                view->TranslateContentLocation(myOrigin);
                int visibleLineCount = view->GetVisibleLineCount();
                float topLineDiff = view->TopLineDiff();
                PointF o(myOrigin.x, myOrigin.y);
                float charHeight = view->CharHeight();
                Size s = GetSize();
                SizeF size(s.w, s.w);
                for (int line = topLineNumber; line < topLineNumber + visibleLineCount; ++line)
                {
                    Breakpoint* bp = GetBreakpoint(line);
                    RectF r(o, size);
                    Size inflate = DefaultBreakpointInflate();
                    r.Inflate(inflate.w, inflate.h);
                    Point offset = DefaultBreakpointOffset();
                    r.Offset(offset.x, offset.y);
                    r.Offset(0.0f, topLineDiff);
                    if (bp != null)
                    {
                        if (bp->disabled)
                        {
                            args.graphics.FillEllipseChecked(whiteBrush, r);
                            args.graphics.DrawEllipseChecked(redPen, r);
                        }
                        else
                        {
                            args.graphics.FillEllipseChecked(redBrush, r);
                        }
                    }
                    if (debugLocation.line == line)
                    {
                        DrawArrow(args.graphics, r.location);
                    }
                    o.y = o.y + charHeight;
                }
                args.graphics.SetSmoothingModeChecked(prevSmoothingMode);
                base->OnPaint(args);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }
        public nothrow Breakpoint* GetBreakpoint(int line) const
        {
            return breakpointList.GetBreakpoint(line);
        }
        public void AddBreakpoint(Breakpoint* breakpoint)
        {
            breakpointList.AddBreakpoint(breakpoint);
            OnBreakpointAdded(breakpointList.FilePath(), breakpoint);
        }
        protected virtual void OnBreakpointAdded(const string& filePath, Breakpoint* breakpoint)
        {
            AddBreakpointEventArgs args;
            args.filePath = filePath;
            args.breakpoint = breakpoint;
            breakpointAddedEvent.Fire(args);
            breakpoint->disabled = !breakpoint->info.success;
            Invalidate();
        }
        public void RemoveBreakpoint(Breakpoint* breakpoint)
        {
            string breakpointId = breakpoint->info.breakpointId;
            breakpointList.RemoveBreakpoint(breakpoint);
            OnBreakpointRemoved(breakpointId);
        }
        protected virtual void OnBreakpointRemoved(const string& breakpointId)
        {
            RemoveBreakpointEventArgs args;
            args.breakpointId = breakpointId;
            breakpointRemovedEvent.Fire(args);
            Invalidate();
        }
        public nothrow const SourceSpan& DebugLocation() const
        {
            return debugLocation;
        }
        public nothrow void SetDebugLocation(const SourceSpan& debugLocation_)
        {
            debugLocation = debugLocation_;
        }
        public nothrow void ResetDebugLocation()
        {
            debugLocation = SourceSpan();
        }
        private void DrawArrow(Graphics& graphics, const PointF& location)
        {
            PointF bitmapLocation(location);
            Point offset = DefaultArrowOffset();
            bitmapLocation.x = bitmapLocation.x + offset.x;
            bitmapLocation.y = bitmapLocation.y + offset.y;
            RectF r(bitmapLocation, SizeF(arrowBitmapSize.w, arrowBitmapSize.h));
            ImageAttributes attributes;
            attributes.SetColorKey(TransparentColor(), TransparentColor(), ColorAdjustType.default_);
            RectF s(PointF(), SizeF(arrowBitmapSize.w, arrowBitmapSize.h));
            graphics.DrawImageChecked(*arrowBitmap, r, s, Unit.pixel, attributes);
        }
        public nothrow Event<AddBreakpointEventHandler, AddBreakpointEventArgs>& BreakpointAddedEvent()
        {
            return breakpointAddedEvent;
        }
        public nothrow Event<RemoveBreakpointEventHandler, RemoveBreakpointEventArgs>& BreakpointRemovedEvent()
        {
            return breakpointRemovedEvent;
        }
        private BreakpointList& breakpointList;
        private SourceSpan debugLocation;
        private TextView* view;
        private System.Windows.Color breakpointColor;
        private SolidBrush redBrush;
        private SolidBrush whiteBrush;
        private Pen redPen;
        private int topLineNumber;
        private Point origin;
        private Bitmap* arrowBitmap;
        private Size arrowBitmapSize;
        private Event<AddBreakpointEventHandler, AddBreakpointEventArgs> breakpointAddedEvent;
        private Event<RemoveBreakpointEventHandler, RemoveBreakpointEventArgs> breakpointRemovedEvent;
    }
}
