// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.NothrowParser;
using CmajorNothrowTokens;

parser NothrowTypeExprParser
{
    uselexer CmajorNothrowLexer;
    nothrow;

    using NothrowBasicTypeParser.BasicType;
    using NothrowExpressionParser.Expression;
    using NothrowTemplateParser.TemplateId;

    TypeExpr(NothrowParsingContext* ctx) : Node*
        ::= PrefixTypeExpr(ctx):prefixTypeExpr{ return prefixTypeExpr; }
        ;

    PrefixTypeExpr(NothrowParsingContext* ctx, var Span s) : Node*
        ::= CONST{ s = span; } PostfixTypeExpr(ctx):constTypeExpr
        {
            s.end = span.end;
            ConstNode* node = new ConstNode(s, ctx->ModuleId(), constTypeExpr);
            node->SetLexerFlags(lexer.Flags());
            return node;
        }
        |   PostfixTypeExpr(ctx):postfixTypeExpr{ return postfixTypeExpr; }
        ;

    PostfixTypeExpr(NothrowParsingContext* ctx, var UniquePtr<Node> typeExpr, var Span s) : Node*
        ::=
        (   PrimaryTypeExpr(ctx):primaryTypeExpr{ s = span; typeExpr.Reset(primaryTypeExpr); }
            (   DOT ID{ s.end = span.end; typeExpr.Reset(new DotNode(s, ctx->ModuleId(), typeExpr.Release(), new IdentifierNode(span, ctx->ModuleId(), lexer.GetToken(pos)))); }
            |   STAR{ s.end = span.end; typeExpr.Reset(new PointerNode(s, ctx->ModuleId(), typeExpr.Release())); }
            |   AMPAMP{ s.end = span.end; typeExpr.Reset(new RValueRefNode(s, ctx->ModuleId(), typeExpr.Release())); }
            |   AMP{ s.end = span.end; typeExpr.Reset(new LValueRefNode(s, ctx->ModuleId(), typeExpr.Release())); }
            |   LBRACKET Expression(ctx):size? RBRACKET!{ s.end = span.end; typeExpr.Reset(new ArrayNode(s, ctx->ModuleId(), typeExpr.Release(), size)); }
            )*
        )
        {
            typeExpr->SetLexerFlags(lexer.Flags());
            return typeExpr.Release();
        }
        ;

    PrimaryTypeExpr(NothrowParsingContext* ctx) : Node*
        ::= BasicType(ctx):basicType{ return basicType; }
        |   TemplateId(ctx):templateId{ return templateId; }
        |   ID
        {
            IdentifierNode* node = new IdentifierNode(span, ctx->ModuleId(), lexer.GetToken(pos));
            node->SetLexerFlags(lexer.Flags());
            return node;
        }
        ;
}
