using System;
using System.Collections;
using System.Lex;
using System.Parsing;
using System;
using Cm.Ast;
using Cm.NothrowParser;
using CmajorNothrowTokens;

// this file has been automatically generated from 'C:/work/cmajorm/cmajor/projects/cm/nothrowparser/BasicType.parser' using soulcm parser generator scmpg version 3.10.0

public static class NothrowBasicTypeParser
{
    public static nothrow Match BasicType(CmajorNothrowLexer& lexer, NothrowParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"BasicType");
            }
        #endif
        Match match(false);
        long pos = lexer.GetPos();
        Span span = lexer.GetSpan();
        switch (*lexer)
        {
            case BOOL: 
            {
                ++lexer;
                BoolNode* node = new BoolNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case SBYTE: 
            {
                ++lexer;
                SByteNode* node = new SByteNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case BYTE: 
            {
                ++lexer;
                ByteNode* node = new ByteNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case SHORT: 
            {
                ++lexer;
                ShortNode* node = new ShortNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case USHORT: 
            {
                ++lexer;
                UShortNode* node = new UShortNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case INT: 
            {
                ++lexer;
                IntNode* node = new IntNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case UINT: 
            {
                ++lexer;
                UIntNode* node = new UIntNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case LONG: 
            {
                ++lexer;
                LongNode* node = new LongNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case ULONG: 
            {
                ++lexer;
                ULongNode* node = new ULongNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case FLOAT: 
            {
                ++lexer;
                FloatNode* node = new FloatNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case DOUBLE: 
            {
                ++lexer;
                DoubleNode* node = new DoubleNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case CHAR: 
            {
                ++lexer;
                CharNode* node = new CharNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case WCHAR: 
            {
                ++lexer;
                WCharNode* node = new WCharNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case UCHAR: 
            {
                ++lexer;
                UCharNode* node = new UCharNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
            case VOID: 
            {
                ++lexer;
                VoidNode* node = new VoidNode(span, ctx->ModuleId());
                node->SetLexerFlags(lexer.Flags());
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, node);
                }
                break;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"BasicType");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
}
