// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.NothrowParser;
using CmajorNothrowTokens;

parser NothrowCompileUnitParser
{
    uselexer CmajorNothrowLexer;
    main;
    nothrow;

    using NothrowIdentifierParser.Identifier;
    using NothrowIdentifierParser.QualifiedId;
    using NothrowConceptParser.Concept;
    using NothrowFunctionParser.Function;
    using NothrowClassParser.Class;
    using NothrowInterfaceParser.Interface;
    using NothrowTypedefParser.Typedef;
    using NothrowEnumerationParser.EnumType;
    using NothrowConstantParser.Constant;
    using NothrowDelegateParser.Delegate;
    using NothrowDelegateParser.ClassDelegate;
    using NothrowGlobalVariableParser.GlobalVariable;

    CompileUnit(NothrowParsingContext* ctx, var UniquePtr<CompileUnitNode> compileUnit) : CompileUnitNode*
        ::= empty
            {
                compileUnit.Reset(new CompileUnitNode(span, ctx->ModuleId(), lexer.FileName()));
                List<int> syncTokens;
                syncTokens.Add(SEMICOLON);
                syncTokens.Add(RBRACE);
                lexer.SetSyncTokens(syncTokens);
            }
            NamespaceContent(ctx, compileUnit.Get(), compileUnit->GlobalNs()):content{ return compileUnit.Release(); }
        ;

    NamespaceContent(NothrowParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns)
        ::= UsingDirectives(ctx, ns):usingDirectives
            Definitions(ctx, cu, ns):definitions
        ;

    UsingDirectives(NothrowParsingContext* ctx, NamespaceNode* ns)
        ::= UsingDirective(ctx, ns):usingDirective*
        ;

    UsingDirective(NothrowParsingContext* ctx, NamespaceNode* ns)
        ::= UsingAliasDirective(ctx):usingAlias{ ns->AddMember(usingAlias); }
        |   UsingNamespaceDirective(ctx):usingNs{ ns->AddMember(usingNs); }
        ;

    UsingAliasDirective(NothrowParsingContext* ctx, var Span s) : Node*
        ::= USING{ s = span; } Identifier(ctx):id ASSIGN QualifiedId(ctx):qid SEMICOLON!
        {
            s.end = span.end;
            AliasNode* node = new AliasNode(s, ctx->ModuleId(), id, qid);
            node->SetLexerFlags(lexer.Flags());
            return node;
        }
        ;

    UsingNamespaceDirective(NothrowParsingContext* ctx, var Span s) : Node*
        ::= USING{ s = span; } QualifiedId(ctx):ns SEMICOLON!
        {
            s.end = span.end;
            NamespaceImportNode* node = new NamespaceImportNode(s, ctx->ModuleId(), ns);
            node->SetLexerFlags(lexer.Flags());
            return node;
        }
        ;

    Definitions(NothrowParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns, var UniquePtr<Node> def)
        ::= (Definition(ctx, cu, ns):definition
        {
            def.Reset(definition);
            bool isSyncNode = (def.Get() is SyncNode*);
            if (!isSyncNode)
            {
                lexer.ResetFlag(LexerFlags.synchronized);
            }
            ns->AddMember(def.Release()); }
        )*
        ;

    Definition(NothrowParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns) : Node*
        ::= NamespaceDefinition(ctx, cu, ns):nsDefinition{ return nsDefinition; }
        |   TypedefDeclaration(ctx):typedefDeclaration{ return typedefDeclaration; }
        |   ConceptDefinition(ctx):conceptDefinition{ return conceptDefinition; }
        |   FunctionDefinition(ctx):functionDefinition{ return functionDefinition; }
        |   ClassDefinition(ctx):classDefinition{ return classDefinition; }
        |   InterfaceDefinition(ctx):interfaceDefinition{ return interfaceDefinition; }
        |   EnumTypeDefinition(ctx):enumTypeDefinition{ return enumTypeDefinition; }
        |   ConstantDefinition(ctx):constantDefinition{ return constantDefinition; }
        |   DelegateDefinition(ctx):delegateDefinition{ return delegateDefinition; }
        |   ClassDelegateDefinition(ctx):classDelegateDefinition{ return classDelegateDefinition; }
        |   GlobalVariableDefinition(ctx, cu):globalVariableDefinition{ return globalVariableDefinition; }
        |   SyncDef:sync{ return new SyncNode(span, ctx->ModuleId()); }
        ;

    SyncDef
        ::= empty
        {
            if (lexer.Synchronize())
            {
                ++lexer;
            }
            else
            {
                pass = false;
            }
        }
        ;


    NamespaceDefinition(NothrowParsingContext* ctx, CompileUnitNode* cu, NamespaceNode* ns, var UniquePtr<NamespaceNode> nsNode, var Span s) : NamespaceNode*
        ::= NAMESPACE{ s = span; } (QualifiedId(ctx):nsName{ s.end = span.end; nsNode.Reset(new NamespaceNode(s, ctx->ModuleId(), nsName)); } | empty{ nsNode.Reset(new NamespaceNode(s, ctx->ModuleId(), null)); })
            LBRACE! NamespaceContent(ctx, cu, nsNode.Get()):content RBRACE!
        {
            nsNode->SetLexerFlags(lexer.Flags());
            return nsNode.Release();
        }
        ;

    TypedefDeclaration(NothrowParsingContext* ctx) : TypedefNode*
        ::= Typedef(ctx):typedefDeclaration{ return typedefDeclaration; }
        ;

    ConceptDefinition(NothrowParsingContext* ctx) : ConceptNode*
        ::= Concept(ctx):conceptDefinition{ return conceptDefinition; }
        ;

    FunctionDefinition(NothrowParsingContext* ctx) : FunctionNode*
        ::= Function(ctx):functionDefinition{ return functionDefinition; }
        ;

    ClassDefinition(NothrowParsingContext* ctx) : ClassNode*
        ::= Class(ctx):classDefinition{ return classDefinition; }
        ;

    InterfaceDefinition(NothrowParsingContext* ctx) : InterfaceNode*
        ::= Interface(ctx):interfaceDefinition{ return interfaceDefinition; }
        ;

    EnumTypeDefinition(NothrowParsingContext* ctx) : EnumTypeNode*
        ::= EnumType(ctx):enumTypeDefinition{ return enumTypeDefinition; }
        ;

    ConstantDefinition(NothrowParsingContext* ctx) : ConstantNode*
        ::= Constant(ctx):constantDefinition{ return constantDefinition; }
        ;

    DelegateDefinition(NothrowParsingContext* ctx) : DelegateNode*
        ::= Delegate(ctx):delegateDefinition{ return delegateDefinition; }
        ;

    ClassDelegateDefinition(NothrowParsingContext* ctx) : ClassDelegateNode*
        ::= ClassDelegate(ctx):classDelegateDefinition{ return classDelegateDefinition; }
        ;

    GlobalVariableDefinition(NothrowParsingContext* ctx, CompileUnitNode* cu) : GlobalVariableNode*
        ::= GlobalVariable(ctx, cu):globalVariableDefinition{ return globalVariableDefinition; }
        ;
}
