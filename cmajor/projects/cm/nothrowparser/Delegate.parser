// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Cm.Ast;
using Cm.NothrowParser;
using CmajorNothrowTokens;

parser NothrowDelegateParser
{
    uselexer CmajorNothrowLexer;
    nothrow;

    using NothrowSpecifierParser.Specifiers;
    using NothrowTypeExprParser.TypeExpr;
    using NothrowParameterParser.ParameterList;
    using NothrowIdentifierParser.Identifier;

    Delegate(NothrowParsingContext* ctx, var Span s, var UniquePtr<DelegateNode> dlg) : DelegateNode*
        ::= Specifiers:specifiers{ s = span; } DELEGATE TypeExpr(ctx):type Identifier(ctx):id{ dlg.Reset(new DelegateNode(s, ctx->ModuleId(), specifiers, type, id)); }
            ParameterList(ctx, dlg.Get()):parameterList SEMICOLON!
        {
            dlg->SetSpanEnd(span.end);
            dlg->SetLexerFlags(lexer.Flags());
            return dlg.Release();
        }
        ;

    ClassDelegate(NothrowParsingContext* ctx, var Span s, var UniquePtr<ClassDelegateNode> clsDlg) : ClassDelegateNode*
        ::= Specifiers:specifiers{ s = span; } CLASS DELEGATE TypeExpr(ctx):type Identifier(ctx):id{ clsDlg.Reset(new ClassDelegateNode(s, ctx->ModuleId(), specifiers, type, id)); }
            ParameterList(ctx, clsDlg.Get()):parameterList SEMICOLON!
        {
            clsDlg->SetSpanEnd(span.end);
            clsDlg->SetLexerFlags(lexer.Flags());
            return clsDlg.Release();
        }
        ;

}
