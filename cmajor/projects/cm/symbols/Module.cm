// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace Cm.Symbols
{
    public enum ModuleFlags : byte
    {
        none = 0u,
        system = 1u << 0u, core = 1u << 1u, root = 1u << 2u, immutable = 1u << 3u, compiling = 1u << 4u, fileIndexFilePathMapBuilt = 1u << 5u, readFromModuleFile = 1u << 6u
    }

    public class Module
    {
        public nothrow inline const Uuid& Id() const
        {
            return id;
        }
        public nothrow inline bool GetFlag(ModuleFlags flag) const
        {
            return (flags & flag) != ModuleFlags.none;
        }
        public nothrow inline SymbolTable& GetSymbolTable() const
        {
            return symbolTable;
        }
        private Uuid id;
        private ModuleFlags flags;
        private SymbolTable symbolTable;
    }

    public class Modules
    {
        static Modules() : instance(new Modules())
        {
        }
        public static nothrow Modules& Instance()
        {
            return *instance;
        }
        public nothrow inline Module* RootModule() const
        {
            return rootModule;
        }
        public nothrow void SetRootModule(Module* rootModule_)
        {
            rootModule = rootModule_;
        }
        private Modules() : rootModule(null)
        {
        }
        private static UniquePtr<Modules> instance;
        private Module* rootModule;
    }

    public nothrow Module* GetRootModule()
    {
        return Modules.Instance().RootModule();
    }
}
