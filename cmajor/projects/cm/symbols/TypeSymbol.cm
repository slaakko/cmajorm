// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Span = System.Lex.Span;

namespace Cm.Symbols
{
    public abstract class TypeSymbol : ContainerSymbol
    {
        public nothrow TypeSymbol(SymbolType symbolType, const Span& span, const Uuid& sourceModuleId, const ustring& name) :
            base(symbolType, span, sourceModuleId, name), typeId()
        {
        }
        public override void Write(SymbolWriter& writer)
        {
            base->Write(writer);
            // todo
        }
        public override void Read(SymbolReader& reader)
        {
            base->Read(reader);
            // todo
        }
        public nothrow inline const Uuid& TypeId() const
        {
            return typeId;
        }
        public nothrow void SetTypeId(const Uuid& typeId_)
        {
            typeId = typeId_;
        }
        private Uuid typeId;
    }
}

