// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using System.Collections;
using Span = System.Lex.Span;
using Cm.Ast;

namespace Cm.Symbols
{
    public class SymbolReader
    {
        public SymbolReader(const string& filePath) : astReader(filePath), setProjectBit(false)
        {
        }
        public nothrow inline AstReader& GetAstReader()
        {
            return astReader;
        }
        public nothrow inline BinaryReader& GetBinaryReader()
        {
            return astReader.GetBinaryReader();
        }
        public nothrow inline bool SetProjectBit() const
        {
            return setProjectBit;
        }
        public nothrow void SetProjectBitForSymbols()
        {
            setProjectBit = true;
        }
        public nothrow void SetTypeAndConceptRequestTarget(List<TypeOrConceptRequest>* typeAndConceptRequestTarget)
        {
            typeAndConceptRequests = typeAndConceptRequestTarget;
        }
        public void AddTypeOrConceptRequest(const TypeOrConceptRequest& request)
        {
            #assert(typeAndConceptRequests != null);
            typeAndConceptRequests->Add(request);
        }
        public nothrow void SetFunctionRequestTarget(List<FunctionRequest>* functionRequestTarget)
        {
            functionRequests = functionRequestTarget;
        }
        public void AddFunctionRequest(const FunctionRequest& request)
        {
            #assert(functionRequests != null);
            functionRequests->Add(request);
        }
        public nothrow void SetConversionsTarget(List<FunctionSymbol*>* conversionsTarget)
        {
            conversions = conversionsTarget;
        }
        public void AddConversion(FunctionSymbol* conversion)
        {
            conversions->Add(conversion);
        }
        public Symbol* ReadSymbol(Symbol* parent)
        {
            SymbolType symbolType = cast<SymbolType>(GetBinaryReader().ReadByte());
            Span span = astReader.ReadSpan();
            Uuid sourceModuleId = GetBinaryReader().ReadUuid();
            ustring name = GetBinaryReader().ReadUString();
            Symbol* symbol = SymbolFactory.Instance().CreateSymbol(symbolType, span, sourceModuleId, name);
            symbol->SetModule(module);
            symbol->SetParent(parent);
            symbol->Read(*this);
            return symbol;
        }
        public ParameterSymbol* ReadParameterSymbol(Symbol* parent)
        {
            Symbol* symbol = ReadSymbol(parent);
            if (symbol is ParameterSymbol*)
            {
                return cast<ParameterSymbol*>(symbol);
            }
            else
            {
                throw Exception("internal error: parameter symbol expected");
            }
        }
        public nothrow inline SymbolTable* GetSymbolTable() const
        {
            return symbolTable;
        }
        public nothrow void SetSymbolTable(SymbolTable* symbolTable_)
        {
            symbolTable = symbolTable_;
        }
        public nothrow inline Module* GetModule() const
        {
            return module;
        }
        public nothrow void SetModule(Module* module_)
        {
            module = module_;
        }
        private AstReader astReader;
        private bool setProjectBit;
        private SymbolTable* symbolTable;
        private Module* module;
        private List<TypeOrConceptRequest>* typeAndConceptRequests;
        private List<FunctionRequest>* functionRequests;
        private List<FunctionSymbol*>* conversions;
    }
}
