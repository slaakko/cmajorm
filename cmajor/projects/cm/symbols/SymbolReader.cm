// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using Span = System.Lex.Span;
using Cm.Ast;

namespace Cm.Symbols
{
    public class SymbolReader
    {
        public SymbolReader(const string& filePath) : astReader(filePath), setProjectBit(false)
        {
        }
        public nothrow inline AstReader& GetAstReader()
        {
            return astReader;
        }
        public nothrow inline BinaryReader& GetBinaryReader()
        {
            return astReader.GetBinaryReader();
        }
        public nothrow inline bool SetProjectBit() const
        {
            return setProjectBit;
        }
        public nothrow void SetProjectBitForSymbols()
        {
            setProjectBit = true;
        }
        public Symbol* ReadSymbol(Symbol* parent)
        {
            SymbolType symbolType = cast<SymbolType>(GetBinaryReader().ReadByte());
            Span span = astReader.ReadSpan();
            Uuid sourceModuleId = GetBinaryReader().ReadUuid();
            ustring name = GetBinaryReader().ReadUString();
            Symbol* symbol = SymbolFactory.Instance().CreateSymbol(symbolType, span, sourceModuleId, name);
            symbol->SetModule(module);
            symbol->SetParent(parent);
            symbol->Read(*this);
            return symbol;
        }
        public nothrow inline Module* GetModule() const
        {
            return module;
        }
        public nothrow void SetModule(Module* module_)
        {
            module = module_;
        }
        private AstReader astReader;
        private bool setProjectBit;
        private Module* module;
    }
}
