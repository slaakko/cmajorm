// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using Cm.Ast;

namespace Cm.Symbols
{
    public class SymbolWriter
    {
        public SymbolWriter(const string& filePath) : astWriter(filePath)
        {
        }
        public nothrow inline AstWriter& GetAstWriter()
        {
            return astWriter;
        }
        public nothrow inline BinaryWriter& GetBinaryWriter()
        {
            return astWriter.GetBinaryWriter();
        }
        public void Write(Symbol* symbol)
        {
            GetBinaryWriter().Write(cast<byte>(symbol->GetSymbolType()));
            Module* sourceModule = GetModuleById(symbol->SourceModuleId());
            const Uuid& spanConversionModuleId = astWriter.SpanConversionModuleId();
            if (sourceModule != null && spanConversionModuleId != Uuid() && sourceModule->Id() == spanConversionModuleId && sourceModule->GetFlag(ModuleFlags.compiling))
            {
                astWriter.Write(symbol->GetSpan(), true);
            }
            else
            {
                astWriter.Write(symbol->GetSpan(), false);
            }
            astWriter.GetBinaryWriter().Write(symbol->SourceModuleId());
            astWriter.GetBinaryWriter().Write(symbol->Name());
            symbol->Write(*this);
        }
        public nothrow void SetLexers(List<System.Lex.Lexer*>* lexers)
        {
            astWriter.SetLexers(lexers);
        }
        public nothrow void SetSpanConversionModuleId(const Uuid& spanConversionModuleId)
        {
            astWriter.SetSpanConversionModuleId(spanConversionModuleId);
        }
        private AstWriter astWriter;
    }
}
