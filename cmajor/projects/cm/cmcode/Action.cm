// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows;
using Cm.Service.Build;

namespace cmcode
{
    public class AddNewProjectAction : ClickAction
    {
        public nothrow AddNewProjectAction(MainWindow* mainWindow_, Cm.Ast.Solution* solution_) : base(), mainWindow(mainWindow_), solution(solution_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddNewProject(solution);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Solution* solution;
    }

    public class AddExistingProjectAction : ClickAction
    {
        public nothrow AddExistingProjectAction(MainWindow* mainWindow_, Cm.Ast.Solution* solution_) : base(), mainWindow(mainWindow_), solution(solution_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddExistingProject(solution);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Solution* solution;
    }

    public class RemoveProjectAction : ClickAction
    {
        public nothrow RemoveProjectAction(MainWindow* mainWindow_, Cm.Ast.Solution* solution_, Cm.Ast.Project* project_) : base(), mainWindow(mainWindow_), solution(solution_), project(project_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->RemoveProject(solution, project);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Solution* solution;
        private Cm.Ast.Project* project;
    }

    public class BuildSolutionAction : ClickAction
    {
        public nothrow BuildSolutionAction(MainWindow* mainWindow_, Cm.Ast.Solution* solution_) : base(), mainWindow(mainWindow_), solution(solution_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            BuildRequest buildRequest = MakeBuildRequest(mainWindow->GetBackend(), mainWindow->GetConfig(), solution->FilePath(), BuildRequestKind.build);
            mainWindow->StartBuild(buildRequest);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Solution* solution;
    }

    public class RebuildSolutionAction : ClickAction
    {
        public nothrow RebuildSolutionAction(MainWindow* mainWindow_, Cm.Ast.Solution* solution_) : base(), mainWindow(mainWindow_), solution(solution_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            BuildRequest buildRequest = MakeBuildRequest(mainWindow->GetBackend(), mainWindow->GetConfig(), solution->FilePath(), BuildRequestKind.rebuild);
            mainWindow->StartBuild(buildRequest);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Solution* solution;
    }

    public class CleanSolutionAction : ClickAction
    {
        public nothrow CleanSolutionAction(MainWindow* mainWindow_, Cm.Ast.Solution* solution_) : base(), mainWindow(mainWindow_), solution(solution_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            BuildRequest buildRequest = MakeBuildRequest(mainWindow->GetBackend(), mainWindow->GetConfig(), solution->FilePath(), BuildRequestKind.clean);
            mainWindow->StartBuild(buildRequest);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Solution* solution;
    }

    public class BuildProjectAction : ClickAction
    {
        public nothrow BuildProjectAction(MainWindow* mainWindow_, Cm.Ast.Project* project_) : base(), mainWindow(mainWindow_), project(project_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            BuildRequest buildRequest = MakeBuildRequest(mainWindow->GetBackend(), mainWindow->GetConfig(), project->FilePath(),
                cast<BuildRequestKind>(BuildRequestKind.build | BuildRequestKind.buildDependencies));
            mainWindow->StartBuild(buildRequest);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
    }

    public class RebuildProjectAction : ClickAction
    {
        public nothrow RebuildProjectAction(MainWindow* mainWindow_, Cm.Ast.Project* project_) : base(), mainWindow(mainWindow_), project(project_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            BuildRequest buildRequest = MakeBuildRequest(mainWindow->GetBackend(), mainWindow->GetConfig(), project->FilePath(),
                cast<BuildRequestKind>(BuildRequestKind.rebuild | BuildRequestKind.buildDependencies));
            mainWindow->StartBuild(buildRequest);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
    }

    public class CleanProjectAction : ClickAction
    {
        public nothrow CleanProjectAction(MainWindow* mainWindow_, Cm.Ast.Project* project_) : base(), mainWindow(mainWindow_), project(project_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            BuildRequest buildRequest = MakeBuildRequest(mainWindow->GetBackend(), mainWindow->GetConfig(), project->FilePath(),
                cast<BuildRequestKind>(BuildRequestKind.clean | BuildRequestKind.buildDependencies));
            mainWindow->StartBuild(buildRequest);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
    }

    public class SetActiveProjectAction : ClickAction
    {
        public nothrow SetActiveProjectAction(MainWindow* mainWindow_, TreeView* treeView_, SolutionExplorerData* solutionExplorerData_, Cm.Ast.Solution* solution_,
            Cm.Ast.Project* project_, TreeViewNode* newActiveProjectNode_) :
            base(), mainWindow(mainWindow_), treeView(treeView_), solutionExplorerData(solutionExplorerData_), solution(solution_), project(project_),
            newActiveProjectNode(newActiveProjectNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->SaveBackendConfig();
            TreeViewNode* activeProjectNode = solutionExplorerData->GetActiveProjectNode();
            activeProjectNode->SetActive(false);
            newActiveProjectNode->SetActive(true);
            solutionExplorerData->SetActiveProjectNode(newActiveProjectNode);
            solution->SetActiveProject(project);
            cmcode.settings.LoadProjectSettings(project, solutionExplorerData);
            mainWindow->HideContextMenu();
            treeView->Invalidate();
            mainWindow->SetControlStatus(UserInterfaceAction.none);
            mainWindow->RestoreBackendConfig();
        }
        private MainWindow* mainWindow;
        private TreeView* treeView;
        private SolutionExplorerData* solutionExplorerData;
        private Cm.Ast.Solution* solution;
        private Cm.Ast.Project* project;
        private TreeViewNode* newActiveProjectNode;
    }

    public class AddNewSourceFileAction : ClickAction
    {
        public nothrow AddNewSourceFileAction(MainWindow* mainWindow_, Cm.Ast.Project* project_, TreeViewNode* projectNode_) :
            base(), mainWindow(mainWindow_), project(project_), projectNode(projectNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddNewSourceFile(project, projectNode);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
        private TreeViewNode* projectNode;
    }

    public class AddExistingSourceFileAction : ClickAction
    {
        public nothrow AddExistingSourceFileAction(MainWindow* mainWindow_, Cm.Ast.Project* project_, TreeViewNode* projectNode_) :
            base(), mainWindow(mainWindow_), project(project_), projectNode(projectNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddExistingSourceFile(project, projectNode);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
        private TreeViewNode* projectNode;
    }

    public class AddNewResourceFileAction : ClickAction
    {
        public nothrow AddNewResourceFileAction(MainWindow* mainWindow_, Cm.Ast.Project* project_, TreeViewNode* projectNode_) :
            base(), mainWindow(mainWindow_), project(project_), projectNode(projectNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddNewResourceFile(project, projectNode);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
        private TreeViewNode* projectNode;
    }

    public class AddExistingResourceFileAction : ClickAction
    {
        public nothrow AddExistingResourceFileAction(MainWindow* mainWindow_, Cm.Ast.Project* project_, TreeViewNode* projectNode_) :
            base(), mainWindow(mainWindow_), project(project_), projectNode(projectNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddExistingResourceFile(project, projectNode);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
        private TreeViewNode* projectNode;
    }

    public class AddNewTextFileAction : ClickAction
    {
        public nothrow AddNewTextFileAction(MainWindow* mainWindow_, Cm.Ast.Project* project_, TreeViewNode* projectNode_) :
            base(), mainWindow(mainWindow_), project(project_), projectNode(projectNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddNewTextFile(project, projectNode);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
        private TreeViewNode* projectNode;
    }

    public class AddExistingTextFileAction : ClickAction
    {
        public nothrow AddExistingTextFileAction(MainWindow* mainWindow_, Cm.Ast.Project* project_, TreeViewNode* projectNode_) :
            base(), mainWindow(mainWindow_), project(project_), projectNode(projectNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->AddExistingTextFile(project, projectNode);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
        private TreeViewNode* projectNode;
    }

    public class ProjectReferencesAction : ClickAction
    {
        public nothrow ProjectReferencesAction(MainWindow* mainWindow_, Cm.Ast.Project* project_) :
            base(), mainWindow(mainWindow_), project(project_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->SetProjectReferences(project);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
    }

    public class RemoveFileAction : ClickAction
    {
        public nothrow RemoveFileAction(MainWindow* mainWindow_, Cm.Ast.Project* project_, const string& filePath_, const string& fileName_, TreeViewNode* fileNode_) :
            base(), mainWindow(mainWindow_), project(project_), filePath(filePath_), fileName(fileName_), fileNode(fileNode_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->RemoveFile(project, filePath, fileName, fileNode);
        }
        private MainWindow* mainWindow;
        private Cm.Ast.Project* project;
        private string filePath;
        private string fileName;
        private TreeViewNode* fileNode;
    }

    public class OpenFileLocationAction : ClickAction
    {
        public nothrow OpenFileLocationAction(MainWindow* mainWindow_, const string& filePath_) : base(), mainWindow(mainWindow_), filePath(filePath_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->OpenFileLocation(filePath);
        }
        private MainWindow* mainWindow;
        private string filePath;
    }

    public class RunToCursorAction : ClickAction
    {
        public nothrow RunToCursorAction(MainWindow* mainWindow_, Cm.Views.CmajorSourceCodeView* sourceCodeView_) :
            mainWindow(mainWindow_), sourceCodeView(sourceCodeView_)
        {
        }
        public override void Execute()
        {
            mainWindow->HideContextMenu();
            mainWindow->RunToCursor(sourceCodeView);
        }
        private MainWindow* mainWindow;
        private Cm.Views.CmajorSourceCodeView* sourceCodeView;
    }

}
