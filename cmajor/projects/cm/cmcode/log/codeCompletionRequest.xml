<parseSourceRequest>
    <base>
        <created value="512632001753900"/>
        <received value="512633025736400"/>
    </base>
    <projectFilePath value="C:/work/cmajorm/cmajor/projects/cm/service/Cm.Service.cmp"/>
    <backend value="cpp"/>
    <config value="debug"/>
    <sourceFilePath value="C:/work/cmajorm/cmajor/projects/cm/service/PortMapService.cm"/>
    <sourceCode value="// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using Cm.Service;
using System;
using System.Collections;
using System.Dom;
using System.XPath;
using System.IO;
using System.Net.Sockets;
using System.Threading;
using System.Json;

namespace Cm.Service.PortMap
{
    string PortMapLogFilePath()
    {
        return Path.Combine(CmCodeLogDir(), &quot;portmap.service.log&quot;);
    }

    [xml]
    public class GetFreePortNumberRequest
    {
        public nothrow GetFreePortNumberRequest(const string&amp; processName_, int pid_) : processName(procesName_), pid(pid_)
        {
        }
        public string processName;
        public int pid;
    }

    [xml]
    public class GetFreePortNumberReply
    {
        public nothrow GetFreePortNumberReply() 
        {
        }
        public int portNumber;
    }

    [xml]
    public class StopPortMapServerRequest
    {
        public nothrow StopPortMapServerRequest()
        {
        }
    }

    [xml]
    public class PortLease
    {
        public int portNumber;
        public string processName;
        public int pid;
        public DateTime leaseStartTime;
        public DateTime leaseRenewalTime;
        public string leaseState;
    }

    [xml]
    public class ViewPortLeaseRequest
    {
        public nothrow ViewPortLeaseRequest()
        {
        }
    }

    [xml]
    public class ViewPortLeaseReply
    {
        public nothrow ViewPortLeaseReply() 
        {
        }
        public List&lt;PortLease> portLeases;
    }

    public string PortMapConfigFileName()
    {
        string cmajorRootDir = Cm.Ast.CmajorRootDir();
        string cmajorConfigDir = Path.Combine(cmajorRootDir, &quot;config&quot;);
        Directory.CreateDirectories(cmajorConfigDir);
        return Path.Combine(cmajorConfigDir, &quot;cmpm.config.xml&quot;);
    }

    public int GetPortMapServicePortNumber()
    {
        try
        {
            string portMapConfigFileName = PortMapConfigFileName();
            try
            {
                UniquePtr&lt;Document> portMapConfigDoc = ReadDocument(portMapConfigFileName);
                UniquePtr&lt;XPathObject> result = Evaluate(u&quot;/cmpm&quot;, portMapConfigDoc.Get());
                if (result.Get() is XPathNodeSet*)
                {
                    XPathNodeSet* nodeSet = cast&lt;XPathNodeSet*>(result.Get());
                    if (nodeSet->Length() == 1)
                    {
                        Node* node = (*nodeSet)[0];
                        if (node is Element*)
                        {
                            Element* element = cast&lt;Element*>(node);
                            ustring portMapServicePortAttribute = element->GetAttribute(u&quot;portMapServicePort&quot;);
                            if (!portMapServicePortAttribute.IsEmpty())
                            {
                                return ParseInt(ToUtf8(portMapServicePortAttribute));
                            }
                            else
                            {
                                throw Exception(&quot;'portMapServicePort' attribute not found from 'cmpm' element&quot;);
                            }
                        }
                        else
                        {
                            throw Exception(&quot;cmpm: element node expected&quot;);
                        }
                    }
                    else
                    {
                        throw Exception(&quot;single 'cmpm' node expected&quot;);
                    }
                }
                else
                {
                    throw Exception(&quot;cmpm: node set expected&quot;);
                }
            }
            catch (const Exception&amp; ex)
            {
                throw Exception(&quot;Cm.Service.PortMap.PortMapService: GetPortMapServicePortNumber: file=&quot; + portMapConfigFileName + &quot;: &quot; + ex.Message());
            }
        }
        catch (const Exception&amp; ex)
        {
            LogWriter logWriter(PortMapLogFilePath());
            logWriter &lt;&lt; ex.ToString() &lt;&lt; endl();
        }
        return -1;
    }

    string GetMessage(System.Dom.Element* element)
    {
$rn ToUtf8(messageStr->Value());
            }
        }
        return string();
    }

    public void StartPortMapServer()
    {
        try
        {
            Process* portMapServer = new Process(&quot;cmpms&quot;, cast&lt;Process.Redirections>(Process.Redirections.processStdIn | Process.Redirections.processStdOut | Process.Redirections.processStdErr));
            string line = portMapServer->ReadLine(Process.StdHandle.stdOut);
            if (line == &quot;port-map-server-ready&quot;)
            {
                Sleep(Duration.FromSeconds(1));
            }
            else if (line == &quot;port-map-server-error&quot;)
            {
                line = portMapServer->ReadLine(Process.StdHandle.stdOut);
                throw Exception(line);
            }
        }
        catch (const Exception&amp; ex)
        {
            throw Exception(&quot;Cm.Service.PortMap.PortMapService: StartPortMapServer: &quot; + ex.Message());
        }
    }

    public void StopPortMapServer()
    {
        int port = GetPortMapServicePortNumber();
        if (port == -1)
        {
            throw Exception(&quot;could not resolve port map service port number&quot;);
        }
        TcpSocket portMapServerConnection(&quot;localhost&quot;, ToString(port));
        StopPortMapServerRequest request;
        UniquePtr&lt;JsonValue> requestValue = request.ToJson();
        string requestStr = requestValue->ToString();
        Write(portMapServerConnection, requestStr);
        string replyStr = ReadStr(portMapServerConnection);
        UniquePtr&lt;JsonValue> replyValue = ParseJson(replyStr);
        string message = GetMessage(replyValue.Get());
    }

    public int GetFreePortNumber(const string&amp; programName, int pid, int&amp; portMapServicePortNumber)
    {
        portMapServicePortNumber = -1;
        try
        {
            bool portMapServerStarted = false;
            int port = GetPortMapServicePortNumber();
            if (port == -1)
            {
                StartPortMapServer();
                portMapServerStarted = true;
            }
            port = GetPortMapServicePortNumber();
            if (port == -1)
            {
                throw Exception(&quot;could not resolve port map service port number&quot;);
            }
            for (int connectionAttempt = 1; connectionAttempt &lt;= 2; ++connectionAttempt)
            {
                try
                {
                    TcpSocket portMapServerConnection(&quot;localhost&quot;, ToString(port));
                    GetFreePortNumberRequest request(programName, pid, GetCurrentDateTime().ToString());
                    UniquePtr&lt;JsonValue> requestValue = request.ToJson();
                    string requestStr = requestValue->ToString();
                    Write(portMapServerConnection, requestStr);
                    string replyStr = ReadStr(portMapServerConnection);
                    UniquePtr&lt;JsonValue> replyValue = ParseJson(replyStr);
                    string message = GetMessage(replyValue.Get());
                    if (message == &quot;GetFreePortNumberReply&quot;)
                    {
                        GetFreePortNumberReply reply(replyValue.Get());
                        string portNumberStr = reply.portNumber;
                        if (portNumberStr.IsEmpty())
                        {
                            throw Exception(&quot;portNumber field in 'GetFreePortNumberReply' is empty&quot;);
                        }
                        int freePortNumber = ParseInt(portNumberStr);
                        portMapServicePortNumber = port;
                        return freePortNumber;
                    }
                    else
                    {
                        throw Exception(&quot;'GetFreePortNumberReply' expected, message=&quot; + message);
                    }
                }
                catch (const Exception&amp; ex)
                {
                    if (connectionAttempt > 1)
                    {
                        throw ex;
                    }
                }
                if (connectionAttempt == 1 &amp;&amp; !portMapServerStarted)
                {
                    StartPortMapServer();
                }
                else
                {
                    break;
                }
            }
        }
        catch (const Exception&amp; ex)
        {
            LogWriter logWriter(PortMapLogFilePath());
            logWriter &lt;&lt; ex.ToString() &lt;&lt; endl();
        }
        return -1;
    }

    public List&lt;PortLease> GetPortLeases()
    {
        bool portMapServerStarted = false;
        int port = GetPortMapServicePortNumber();
        if (port == -1)
        {
            StartPortMapServer();
            portMapServerStarted = true;
        }
        port = GetPortMapServicePortNumber();
        if (port == -1)
        {
            throw Exception(&quot;could not resolve port map service port number&quot;);
        }
        for (int connectionAttempt = 1; connectionAttempt &lt;= 2; ++connectionAttempt)
        {
            try
            {
                TcpSocket portMapServerConnection(&quot;localhost&quot;, ToString(port));
                ViewPortLeaseRequest request;
                UniquePtr&lt;JsonValue> requestValue = request.ToJson();
                string requestStr = requestValue->ToString();
                Write(portMapServerConnection, requestStr);
                string replyStr = ReadStr(portMapServerConnection);
                UniquePtr&lt;JsonValue> replyValue = ParseJson(replyStr);
                string message = GetMessage(replyValue.Get());
                if (message == &quot;ViewPortLeaseReply&quot;)
                {
                    ViewPortLeaseReply reply(replyValue.Get());
                    return reply.portLeases;
                }
                else
                {
                    throw Exception(&quot;ViewPortLeaseReply expected&quot;);
                }
            }
            catch (const Exception&amp; ex)
            {
                if (connectionAttempt > 1)
                {
                    throw ex;
                }
            }
            if (connectionAttempt == 1 &amp;&amp; !portMapServerStarted)
            {
                StartPortMapServer();
            }
            else
            {
                break;
            }
        }
        return List&lt;PortLease>();
    }
}

"/>
</parseSourceRequest>
