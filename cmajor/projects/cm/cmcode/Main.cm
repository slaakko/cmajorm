// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Windows;
using Cm.Debug;
using cmcode;

namespace cmcode
{
    public void LogException(const Exception& ex)
    {
        try
        {
            StreamWriter errorWriter = File.CreateText("error.txt");
            errorWriter << ex.ToString() << endl();
        }
        catch (const Exception&)
        {
        }
    }

    public const uint defaultConfigSaveTimerPeriod = 3000u; // 3 seconds

    public System.Windows.WindowState MainWindowWindowState()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowWindowState();
            }
            else
            {
                return System.Windows.WindowState.normal;
            }
        }
        catch (const Exception& ex)
        {
        }
        return System.Windows.WindowState.normal;
    }

    public Point MainWindowLocation()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowLocation();
            }
            else
            {
                return Point.Default();
            }
        }
        catch (const Exception& ex)
        {
        }
        return Point.Default();
    }

    public Size MainWindowSize()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowSize();
            }
            else
            {
                return Size.Default();
            }
        }
        catch (const Exception& ex)
        {
        }
        return Size.Default();
    }

    int MainWindowVerticalSplitterDistance()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowVerticalSplitterDistance();
            }
            else
            {
                return 0;
            }
        }
        catch (const Exception& ex)
        {
        }
        return 0;
    }

    int MainWindowHorizontalSplitterDistance()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowHorizontalSplitterDistance();
            }
            else
            {
                return 0;
            }
        }
        catch (const Exception& ex)
        {
        }
        return 0;
    }

    nothrow System.Windows.Color TreeViewNormalBorderColor()
    {
        return System.Windows.Color(204u, 206u, 219u);
    }

    nothrow System.Windows.Color TreeViewSelectedBorderColor()
    {
        return System.Windows.Color.Blue();
    }

    nothrow System.Windows.Color TabControlSelectedBorderColor()
    {
        return System.Windows.Color.Blue();
    }

    nothrow System.Windows.Color SourceCodeViewNormalFrameColor()
    {
        return System.Windows.Color(204u, 206u, 219u);
    }

    nothrow System.Windows.Color SourceCodeViewSelectedFrameColor()
    {
        return System.Windows.Color.Blue();
    }

    nothrow System.Windows.Color ToolBarBorderColor()
    {
        return System.Windows.Color(204u, 206u, 219u);
    }

    string CmajorProjectDirectory()
    {
        string cmajorRootDir = GetFullPath(Cm.Ast.CmajorRootDir());
        return Path.Combine(cmajorRootDir, "projects");
    }

    UniquePtr<Cm.Ast.Project> ReadProject(const string& projectFilePath, List<UniquePtr<ustring>>& contents)
    {
        UniquePtr<ustring> content(new ustring(ToUtf32(File.ReadAllText(projectFilePath))));
        ContainerFileLexer lexer(content->Chars(), content->Chars() + content->Length(), projectFilePath, 0);
        UniquePtr<Cm.Ast.Project> project = ProjectFileParser.Parse(lexer, "debug", Cm.Ast.BackEnd.llvm);
        project->ResolveDeclarations();
        contents.Add(Rvalue(content));
        return project;
    }

    UniquePtr<Cm.Ast.Solution> ReadSolution(const string& solutionFilePath, List<UniquePtr<ustring>>& contents)
    {
        UniquePtr<ustring> content(new ustring(ToUtf32(File.ReadAllText(solutionFilePath))));
        LogView* logView = Application.GetLogView();
        logView->WriteLine(ToUtf8(*content));
        ContainerFileLexer lexer(content->Chars(), content->Chars() + content->Length(), solutionFilePath, 0);
        UniquePtr<Cm.Ast.Solution> solution(SolutionFileParser.Parse(lexer));
        solution->ResolveDeclarations();
        for (const string& projectFilePath : solution->ProjectFilePaths())
        {
            UniquePtr<Cm.Ast.Project> project = ReadProject(projectFilePath, contents);
            solution->AddProject(Rvalue(project));
        }
        contents.Add(Rvalue(content));
        return solution;
    }

    class TreeViewNodeData
    {
        public enum Kind
        {
            solution, project, file
        }
        public nothrow TreeViewNodeData(Kind kind_, Cm.Ast.Solution* solution_, Cm.Ast.Project* project_, const string& filePath_, const string& fileName_) :
            kind(kind_), solution(solution_), project(project_), filePath(filePath_), fileName(fileName_)
        {
            switch (kind)
            {
                case Kind.solution:
                {
                    key = System.Security.GetSha1MessageDigest("solution." + ToUtf8(solution->Name()));
                    break;
                }
                case Kind.project:
                {
                    key = System.Security.GetSha1MessageDigest("solution." + ToUtf8(solution->Name()) + ".project." + ToUtf8(project->Name()));
                    break;
                }
                case Kind.file:
                {
                    key = filePath;
                    break;
                }
            }
        }
        public Kind kind;
        public Cm.Ast.Solution* solution;
        public Cm.Ast.Project* project;
        public string filePath;
        public string fileName;
        public string key;
    }

    class ByFileName : Rel<UniquePtr<TreeViewNodeData>>
    {
        public nothrow bool operator()(const UniquePtr<TreeViewNodeData>& left, const UniquePtr<TreeViewNodeData>& right) const
        {
            return left->fileName < right->fileName;
        }
    }

    class SolutionExplorerData
    {
        public nothrow SolutionExplorerData()
        {
        }
        public nothrow inline TreeViewNode* GetActiveProjectNode() const
        {
            return activeProjectNode;
        }
        public nothrow void SetActiveProjectNode(TreeViewNode* activeProjectNode_)
        {
            activeProjectNode = activeProjectNode_;
        }
        public List<UniquePtr<TreeViewNodeData>> treeViewData;
        public HashMap<string, TreeViewNodeData*> treeViewDataMap;
        public BreakpointCollection breakpointCollection;
        private TreeViewNode* activeProjectNode;
    }

    void SetActiveProject(Cm.Ast.Solution* solution)
    {
        if (solution->ActiveProjectName().IsEmpty())
        {
            if (!solution->Projects().IsEmpty())
            {
                solution->SetActiveProject(solution->Projects()[0].Get());
            }
        }
        else
        {
            for (const UniquePtr<Cm.Ast.Project>& project : solution->Projects())
            {
                if (project->Name() == solution->ActiveProjectName())
                {
                    solution->SetActiveProject(project.Get());
                    break;
                }
            }
        }
        if (solution->ActiveProject() == null)
        {
            if (!solution->Projects().IsEmpty())
            {
                solution->SetActiveProject(solution->Projects()[0].Get());
            }
        }
    }

    UniquePtr<TreeViewNode> BuildSolutionTree(Cm.Ast.Solution* solution, UniquePtr<SolutionExplorerData>& solutionExplorerData, const List<UniquePtr<ustring>>& contents)
    {
        SetActiveProject(solution);
        UniquePtr<SolutionExplorerData> newSolutionExplorerData(new SolutionExplorerData());
        string solutionName = ToUtf8(solution->Name());
        UniquePtr<TreeViewNode> solutionNode(new TreeViewNode(solutionName));
        UniquePtr<TreeViewNodeData> solutionData(new TreeViewNodeData(TreeViewNodeData.Kind.solution, solution, null, string(), string()));
        solutionNode->SetData(solutionData.Get());
        newSolutionExplorerData->treeViewData.Add(Rvalue(solutionData));
        for (const UniquePtr<Cm.Ast.Project>& project : solution->Projects())
        {
            string projectName = ToUtf8(project->Name());
            UniquePtr<TreeViewNode> projectNode(new TreeViewNode(projectName));
            UniquePtr<TreeViewNodeData> projectData(new TreeViewNodeData(TreeViewNodeData.Kind.project, solution, project.Get(), string(), string()));
            projectNode->SetData(projectData.Get());
            if (project.Get() == solution->ActiveProject())
            {
                newSolutionExplorerData->SetActiveProjectNode(projectNode.Get());
                projectNode->SetActive(true);
            }
            newSolutionExplorerData->treeViewData.Add(Rvalue(projectData));
            List<UniquePtr<TreeViewNodeData>> fileData;
            for (const string& sourceFilePath : project->SourceFilePaths())
            {
                UniquePtr<TreeViewNodeData> file(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution, project.Get(), sourceFilePath, Path.GetFileName(sourceFilePath)));
                fileData.Add(Rvalue(file));
            }
            for (const string& resourceFilePath : project->ResourceFilePaths())
            {
                UniquePtr<TreeViewNodeData> file(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution, project.Get(), resourceFilePath, Path.GetFileName(resourceFilePath)));
                fileData.Add(Rvalue(file));
            }
            for (const string& textFilePath : project->TextFilePaths())
            {
                UniquePtr<TreeViewNodeData> file(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution, project.Get(), textFilePath, Path.GetFileName(textFilePath)));
                fileData.Add(Rvalue(file));
            }
            Sort(fileData.Begin(), fileData.End(), ByFileName());
            for (const UniquePtr<TreeViewNodeData>& file : fileData)
            {
                UniquePtr<TreeViewNode> fileNode(new TreeViewNode(file->fileName));
                fileNode->SetData(file.Get());
                projectNode->AddChild(fileNode.Release());
            }
            for (UniquePtr<TreeViewNodeData>& file : fileData)
            {
                newSolutionExplorerData->treeViewData.Add(Rvalue(file));
            }
            solutionNode->AddChild(projectNode.Release());
        }
        solutionNode->Expand();
        for (const UniquePtr<TreeViewNodeData>& nodeData : newSolutionExplorerData->treeViewData)
        {
            newSolutionExplorerData->treeViewDataMap[nodeData->key] = nodeData.Get();
        }
        solutionExplorerData.Reset(newSolutionExplorerData.Release());
        return solutionNode;
    }

    class MainWindow : Window
    {
        public MainWindow() : base("MainWindow", WindowStyle.WS_OVERLAPPEDWINDOW, DefaultExtendedWindowStyle(), "Cmajor Code", MainWindowLocation(), MainWindowSize(),
            Dock.none, Anchors.none, MainWindowWindowState())
        {
            Debug.SetPaint();
            UniquePtr<MenuBar> menuBar(new MenuBar());
            UniquePtr<MenuItem> fileMenuItem(new MenuItem("&File"));
            UniquePtr<MenuItem> newMenuItem(new MenuItem("&New Project..."));
            newMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.n));
            newMenuItem->ClickEvent().AddHandler(NewProjectClick);
            fileMenuItem->AddMenuItem(newMenuItem.Release());
            UniquePtr<MenuItem> openMenuItem(new MenuItem("&Open Project/Solution..."));
            openMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.o));
            openMenuItem->ClickEvent().AddHandler(OpenProjectClick);
            fileMenuItem->AddMenuItem(openMenuItem.Release());
            UniquePtr<MenuItem> closeSolutionMenuItemPtr(new MenuItem("&Close Solution"));
            closeSolutionMenuItem = closeSolutionMenuItemPtr.Get();
            closeSolutionMenuItem->ClickEvent().AddHandler(CloseSolutionClick);
            fileMenuItem->AddMenuItem(closeSolutionMenuItemPtr.Release());
            UniquePtr<MenuItem> saveMenuItemPtr(new MenuItem("&Save"));
            saveMenuItem = saveMenuItemPtr.Get();
            saveMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.s));
            saveMenuItem->ClickEvent().AddHandler(SaveClick);
            UniquePtr<MenuItem> saveAllMenuItemPtr(new MenuItem("Save A&ll"));
            saveAllMenuItem = saveAllMenuItemPtr.Get();
            saveAllMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.shiftModifier | Keys.s));
            saveAllMenuItem->ClickEvent().AddHandler(SaveAllClick);
            fileMenuItem->AddMenuItem(saveAllMenuItemPtr.Release());
            UniquePtr<MenuItem> exitMenuItem(new MenuItem("E&xit"));
            exitMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f4));
            exitMenuItem->ClickEvent().AddHandler(ExitClick);
            fileMenuItem->AddMenuItem(exitMenuItem.Release());
            menuBar->AddMenuItem(fileMenuItem.Release());
            UniquePtr<MenuItem> windowMenuItem(new MenuItem("&Window"));
            UniquePtr<MenuItem> closeAllTabsMenuItem(new MenuItem("&Close All Tabs"));
            closeAllTabsMenuItem->ClickEvent().AddHandler(CloseAllTabsClick);
            windowMenuItem->AddMenuItem(closeAllTabsMenuItem.Release());
            menuBar->AddMenuItem(windowMenuItem.Release());
            AddChild(menuBar.Release());
            UniquePtr<ToolBar> toolBarPtr(new ToolBar(30, Color.DefaultBitmapTransparent(), ToolBar.Style.regular, Padding(4, 4, 4, 4), Padding(2, 0, 2, 0)));
            toolBar = toolBarPtr.Get();
            UniquePtr<BorderedControl> borderedToolBar(new BorderedControl(
                toolBarPtr.Release(), BorderStyle.single, ToolBarBorderColor(), ToolBarBorderColor(), Point(), toolBar->GetSize(), Dock.top, Anchors.none));

            UniquePtr<ToolButton> saveToolButtonPtr(new ToolButton("cmcode.save.bitmap"));
            saveToolButton = saveToolButtonPtr.Get();
            saveToolButton->SetToolTip("Save (Ctrl+S)");
            saveToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(saveToolButtonPtr.Release());

            UniquePtr<ToolButton> saveAllToolButtonPtr(new ToolButton("cmcode.save.all.bitmap"));
            saveAllToolButton = saveAllToolButtonPtr.Get();
            saveAllToolButton->SetToolTip("Save all (Ctrl+Shift+S)");
            saveAllToolButton->SetPadding(Padding(6, 6, 6, 6));
            toolBar->AddToolButton(saveAllToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator1(new ToolButtonSeparator());
            toolBar->AddToolButton(separator1.Release());

            UniquePtr<ToolButton> llvmToolButtonPtr(new ToolButton("cmcode.build.llvm.bitmap", ToolButton.Style.manual));
            llvmToolButton = llvmToolButtonPtr.Get();
            llvmToolButton->SetToolTip("Compile using LLVM backend");
            llvmToolButton->SetPadding(Padding(8, 8, 8, 8));
            llvmToolButton->ClickEvent().AddHandler(LLVMButtonClick);
            toolBar->AddToolButton(llvmToolButtonPtr.Release());

            UniquePtr<ToolButton> cppToolButtonPtr(new ToolButton("cmcode.build.cpp.bitmap", ToolButton.Style.manual));
            cppToolButton = cppToolButtonPtr.Get();
            cppToolButton->SetToolTip("Compile using C++ backend");
            cppToolButton->SetPadding(Padding(8, 8, 8, 8));
            cppToolButton->ClickEvent().AddHandler(CppButtonClick);
            toolBar->AddToolButton(cppToolButtonPtr.Release());

            UniquePtr<ToolButton> buildSolutionToolButtonPtr(new ToolButton("cmcode.build.solution.bitmap"));
            buildSolutionToolButton = buildSolutionToolButtonPtr.Get();
            buildSolutionToolButton->SetToolTip("Build solution (F7)");
            buildSolutionToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(buildSolutionToolButtonPtr.Release());

            UniquePtr<ToolButton> buildProjectToolButtonPtr(new ToolButton("cmcode.build.project.bitmap"));
            buildProjectToolButton = buildProjectToolButtonPtr.Get();
            buildProjectToolButton->SetToolTip("Build active project (Ctrl+B)");
            buildProjectToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(buildProjectToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator2(new ToolButtonSeparator());
            toolBar->AddToolButton(separator2.Release());

            UniquePtr<ToolButton> startDebuggingToolButtonPtr(new ToolButton("cmcode.debug.start.bitmap"));
            startDebuggingToolButton = startDebuggingToolButtonPtr.Get();
            startDebuggingToolButton->SetToolTip("Start debugging (F5)");
            startDebuggingToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(startDebuggingToolButtonPtr.Release());

            UniquePtr<ToolButton> stopDebuggingToolButtonPtr(new ToolButton("cmcode.debug.stop.bitmap"));
            stopDebuggingToolButton = stopDebuggingToolButtonPtr.Get();
            stopDebuggingToolButton->SetToolTip("Stop debugging (Shift+F5)");
            stopDebuggingToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(stopDebuggingToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator3(new ToolButtonSeparator());
            toolBar->AddToolButton(separator3.Release());

            UniquePtr<ToolButton> showNextStatementToolButtonPtr(new ToolButton("cmcode.debug.show.next.statement.bitmap"));
            showNextStatementToolButton = showNextStatementToolButtonPtr.Get();
            showNextStatementToolButton->SetToolTip("Show next statement");
            showNextStatementToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(showNextStatementToolButtonPtr.Release());

            AddChild(borderedToolBar.Release());
            UniquePtr<SplitContainer> verticalSplitContainerPtr(new SplitContainer(Orientation.vertical, MainWindowVerticalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            verticalSplitContainer = verticalSplitContainerPtr.Get();
            verticalSplitContainer->SplitterDistanceChangedEvent().AddHandler(VerticalSplitterDistanceChanged);
            UniquePtr<SplitContainer> horizontalSplitContainerPtr(new SplitContainer(Orientation.horizontal, MainWindowHorizontalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            horizontalSplitContainer = horizontalSplitContainerPtr.Get();
            horizontalSplitContainer->SplitterDistanceChangedEvent().AddHandler(HorizontalSplitterDistanceChanged);
            UniquePtr<TabControl> codeTabControlPtr(new TabControl(Point(), Size(), Dock.fill, Anchors.none));
            codeTabControl = codeTabControlPtr.Get();
            codeTabControl->TabPageSelectedEvent().AddHandler(CodeTabPageSelected);
            codeTabControl->ControlRemovedEvent().AddHandler(CodeTabPageRemoved);
            UniquePtr<Control> paddedTabControl(new PaddedControl(codeTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTabControl(new BorderedControl(paddedTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(), TabControlSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TreeView> solutionExplorerTreeViewPtr(new TreeView(Point(), Size(), Dock.fill, Anchors.none));
            solutionExplorerTreeView = solutionExplorerTreeViewPtr.Get();
            solutionExplorerTreeView->NodeClickEvent().AddHandler(TreeViewNodeClick);
            solutionExplorerTreeView->NodeDoubleClickEvent().AddHandler(TreeViewNodeDoubleClick);
            UniquePtr<Control> paddedTreeView(new PaddedControl(solutionExplorerTreeViewPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTreeView(new BorderedControl(paddedTreeView.Release(), BorderStyle.single, TreeViewNormalBorderColor(), TreeViewSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> scrollableTreeView(new ScrollableControl(borderedTreeView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            horizontalSplitContainer->Pane1Container()->AddChild(borderedTabControl.Release());
            horizontalSplitContainer->Pane2Container()->AddChild(scrollableTreeView.Release());
            verticalSplitContainer->Pane1Container()->AddChild(horizontalSplitContainerPtr.Release());
            UniquePtr<TabControl> outputTabControlPtr(new TabControl(Point(), Size(), Dock.none, Anchors.none));
            outputTabControl = outputTabControlPtr.Get();
            outputTabControl->SetTabSelectedBackgroundColor(Color.White());
            UniquePtr<Control> paddedOutputTabControl(new PaddedControl(outputTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedOutputTabControl(new BorderedControl(paddedOutputTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(),
                TabControlSelectedBorderColor(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TabPage> logTabPage(new TabPage("Log", "log"));
            UniquePtr<LogView> logView(new LogView(Point(), Size(), Dock.none, Anchors.none));
            Application.SetLogView(logView.Get());
            UniquePtr<Control> borderedLogView(new BorderedControl(logView.Release(), BorderStyle.single, Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> scrollableLogView(new ScrollableControl(borderedLogView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            logTabPage->AddChild(scrollableLogView.Release());
            outputTabControl->AddTabPage(logTabPage.Release());
            verticalSplitContainer->Pane2Container()->AddChild(borderedOutputTabControl.Release());
            AddChild(verticalSplitContainerPtr.Release());
            StatusBar* statusBar = new StatusBar();
            sourceFilePathStatusBarItem = new StatusBarItem("", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(sourceFilePathStatusBarItem);
            AddChild(statusBar);
            SetControlStatus();
            MainConfiguration.Instance().SetMainWindowLocation(Location());
            MainConfiguration.Instance().SetMainWindowSize(GetSize());
            SetTimer(1u, defaultConfigSaveTimerPeriod);
        }
        protected override void OnWindowClosing(bool& cancelClose)
        {
            try
            {
                Application.SetLogView(null);
                Cm.Views.Bitmaps.Instance().Clear();
                base->OnWindowClosing(cancelClose);
                MainConfiguration.Instance().Save(true);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnTimer(TimerEventArgs& args)
        {
            try
            {
                MainConfiguration.Instance().Save(false);
            }
            catch (const Exception& ex)
            {
            }
        }
        protected override void OnSizeChanged(uint windowState)
        {
            try
            {
                base->OnSizeChanged(windowState);
                if (windowState == SIZE_MAXIMIZED)
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.maximized);
                }
                else
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.normal);
                    MainConfiguration.Instance().SetMainWindowSize(GetSize());
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnLocationChanged()
        {
            try
            {
                base->OnLocationChanged();
                MainConfiguration.Instance().SetMainWindowLocation(Location());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnKeyDown(KeyEventArgs& args)
        {
            try
            {
                base->OnKeyDown(args);
                if (!args.handled)
                {
                    switch (args.keyData)
                    {
                        case Keys.escape:
                        {
                            RemoveContextMenu();
                            args.handled = true;
                            break;
                        }
                    }

                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void MouseUpNotification(MouseEventArgs& args)
        {
            try
            {
                if (args.buttons == MouseButtons.lbutton)
                {
                    RemoveContextMenu();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void VerticalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowVerticalSplitterDistance(verticalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void HorizontalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowHorizontalSplitterDistance(horizontalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void CodeTabPageSelected()
        {
            TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
            Cm.Views.CmajorEditor* editor = GetEditorByTabPage(selectedTabPage);
            if (editor != null)
            {
                sourceFilePathStatusBarItem->SetText(editor->FilePath());
            }
        }
        private void CodeTabPageRemoved(ControlEventArgs& args)
        {
            Control* removedControl = args.control;
            if (removedControl is TabPage*)
            {
                TabPage* removedTabPage = cast<TabPage*>(removedControl);
                editorByTabPageMap.Remove(removedTabPage);
            }
            if (codeTabControl->TabPages().IsEmpty())
            {
                sourceFilePathStatusBarItem->SetText("");
            }
        }
        private void IdentifierHovered(Cm.Views.IdentifierHoverEventArgs& args)
        {
            TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
            Cm.Views.CmajorEditor* editor = GetEditorByTabPage(selectedTabPage);
            if (editor != null)
            {
                Cm.Views.CmajorSourceCodeView* sourceCodeView = editor->GetSourceCodeView();
                SourceSpan span(args.lineNumber, args.columnNumber, args.columnNumber + cast<short>(args.identifier.Length()));
                sourceCodeView->GetDebugStrip()->SetDebugLocation(span);
                sourceCodeView->GetDebugStrip()->Invalidate();
                sourceCodeView->Invalidate();
            }
        }
        private void TreeViewNodeClick(TreeViewNodeMouseClickEventArgs& args)
        {
            try
            {
                if (args.buttons == MouseButtons.rbutton)
                {
                    TreeViewNode* node = args.node;
                    TreeViewNodeData* data = cast<TreeViewNodeData*>(node->Data());
                    if (data->kind == TreeViewNodeData.Kind.project)
                    {
                        Cm.Ast.Project* project = data->project;
                        UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                        if (solution->ActiveProject() != project)
                        {
                            MenuItem* setActiveMenuItem = new MenuItem("Set Active");
                            contextMenu->AddMenuItemAction(setActiveMenuItem, new SetActiveProjectAction(this, solutionExplorerTreeView, solutionExplorerData.Get(),
                                solution.Get(), project, node)); 
                        }
                        if (contextMenu->HasMenuItems())
                        {
                            Point loc = args.location;
                            Point screenLoc = solutionExplorerTreeView->ClientToScreen(loc);
                            ShowContextMenu(contextMenu.Release(), screenLoc);
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void TreeViewNodeDoubleClick(TreeViewNodeMouseClickEventArgs& args)
        {
            try
            {
                TreeViewNode* node = args.node;
                TreeViewNodeData* data = cast<TreeViewNodeData*>(node->Data());
                if (data->kind == TreeViewNodeData.Kind.solution || data->kind == TreeViewNodeData.Kind.project)
                {
                    switch (node->GetState())
                    {
                        case TreeViewNode.State.collapsed: node->ExpandAll(); break;
                        case TreeViewNode.State.expanded: node->CollapseAll(); break;
                    }
                }
                else if (data->kind == TreeViewNodeData.Kind.file)
                {
                    string ext = Path.GetExtension(data->fileName);
                    if (ext == ".cm")
                    {
                        TabPage* prevTabPage = codeTabControl->GetTabPageByKey(data->key);
                        if (prevTabPage != null)
                        {
                            codeTabControl->SetSelectedTabPage(prevTabPage);
                        }
                        else
                        {
                            UniquePtr<TabPage> tabPage(new TabPage(data->fileName, data->key));
                            UniquePtr<Cm.Views.CmajorEditor> editorPtr(new Cm.Views.CmajorEditor(data->filePath,
                                solutionExplorerData->breakpointCollection.GetBreakpointList(data->filePath)));
                            Cm.Views.CmajorEditor* editor = editorPtr.Get();
                            editorByTabPageMap[tabPage.Get()] = editor;
                            tabPage->AddChild(editorPtr.Release());
                            codeTabControl->AddTabPage(tabPage.Release());
                            editor->GetSourceCodeView()->DoGenerateIdentifierHoverEvents();
                            editor->GetSourceCodeView()->IdentifierHoverEvent().AddHandler(IdentifierHovered);
                            editor->GetSourceCodeView()->SetFocus();
                        }
                    }
                    else
                    {
                        throw Exception("no editor for '" + ext + "' file implemented");
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void NewProjectClick()
        {
            try
            {
                MessageBox.Show("New project");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void OpenProjectClick()
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Solution Files (*.cms)", "*.cms"));
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Project Files (*.cmp)", "*.cmp"));
                string initialDirectory = CmajorProjectDirectory();
                string filePath;
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".cms",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    List<UniquePtr<ustring>> contents;
                    if (!fileNames.IsEmpty())
                    {
                        filePath = Path.Combine(currentDirectory, fileNames[0]);
                    }
                    if (!filePath.IsEmpty() && File.Exists(filePath))
                    {
                        string ext = Path.GetExtension(filePath);
                        if (ext == ".cms")
                        {
                            solution = ReadSolution(filePath, contents);
                        }
                        else if (ext == ".cmp")
                        {
                            UniquePtr<Cm.Ast.Project> project = ReadProject(filePath, contents);
                            solution.Reset(new Cm.Ast.Solution(project->Name(), Path.ChangeExtension(filePath, ".cms")));
                            solution->SetActiveProject(project.Get());
                            solution->AddProject(Rvalue(project));
                        }
                        else
                        {
                            throw Exception("invalid extension (not .cmp or .cms)");
                        }
                    }
                    else
                    {
                        throw Exception("file path is empty or does not exist");
                    }
                    codeTabControl->CloseAllTabPages();
                    UniquePtr<TreeViewNode> root = BuildSolutionTree(solution.Get(), solutionExplorerData, contents);
                    solutionExplorerTreeView->SetRoot(root.Release());
                    SetControlStatus();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CloseSolutionClick()
        {
            try
            {
                codeTabControl->CloseAllTabPages();
                solutionExplorerTreeView->SetRoot(null);
                solutionExplorerData.Reset();
                SetControlStatus();
                Invalidate();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void LLVMButtonClick()
        {
            try
            {
                cppToolButton->SetState(ToolButton.State.normal);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CppButtonClick()
        {
            try
            {
                llvmToolButton->SetState(ToolButton.State.normal);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SaveClick()
        {
            try
            {
                MessageBox.Show("Save");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SaveAllClick()
        {
            try
            {
                MessageBox.Show("Save all");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ExitClick()
        {
            Close();
        }
        private void CloseAllTabsClick()
        {
            try
            {
                codeTabControl->CloseAllTabPages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private nothrow Cm.Views.CmajorEditor* GetEditorByTabPage(TabPage* tabPage) const
        {
            HashMap<TabPage*, Cm.Views.CmajorEditor*>.ConstIterator it = editorByTabPageMap.CFind(tabPage);
            if (it != editorByTabPageMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }

        private void SetControlStatus()
        {
            saveToolButton->Disable();
            saveAllToolButton->Disable();
            llvmToolButton->Disable();
            cppToolButton->Disable();
            buildSolutionToolButton->Disable();
            buildProjectToolButton->Disable();
            startDebuggingToolButton->Disable();
            stopDebuggingToolButton->Disable();
            showNextStatementToolButton->Disable();

            closeSolutionMenuItem->Disable();
            saveAllMenuItem->Disable();

            bool solutionOpen = !solutionExplorerData.IsNull();
            if (solutionOpen)
            {
                saveAllToolButton->Enable();
                llvmToolButton->Enable();
                cppToolButton->Enable();
                llvmToolButton->SetState(ToolButton.State.pressed);
                buildSolutionToolButton->Enable();
                buildProjectToolButton->Enable();
                startDebuggingToolButton->Enable();
                closeSolutionMenuItem->Enable();
                saveAllMenuItem->Enable();
            }

            TabPage* selectedCodeTabPage = codeTabControl->SelectedTabPage();
            if (selectedCodeTabPage != null)
            {
                Cm.Views.CmajorEditor* editor = GetEditorByTabPage(selectedCodeTabPage);
                if (editor != null)
                {
                    if (editor->Dirty())
                    {
                        saveToolButton->Enable();
                        saveMenuItem->Enable();
                    }
                }
            }

            toolBar->Invalidate();
        }

        private SplitContainer* verticalSplitContainer;
        private SplitContainer* horizontalSplitContainer;
        private UniquePtr<Cm.Ast.Solution> solution;
        private TabControl* codeTabControl;
        private TabControl* outputTabControl;
        private ToolBar* toolBar;
        private TreeView* solutionExplorerTreeView;
        private UniquePtr<SolutionExplorerData> solutionExplorerData;
        private StatusBarItem* sourceFilePathStatusBarItem;
        private HashMap<TabPage*, Cm.Views.CmajorEditor*> editorByTabPageMap;

        private MenuItem* closeSolutionMenuItem;
        private MenuItem* saveMenuItem;
        private MenuItem* saveAllMenuItem;

        private ToolButton* saveToolButton;
        private ToolButton* saveAllToolButton;
        private ToolButton* llvmToolButton;
        private ToolButton* cppToolButton;
        private ToolButton* buildSolutionToolButton;
        private ToolButton* buildProjectToolButton;
        private ToolButton* startDebuggingToolButton;
        private ToolButton* stopDebuggingToolButton;
        private ToolButton* showNextStatementToolButton;
    }
}

int main()
{
    try
    {
        MainConfiguration.Instance().Load();
        MainWindow mainWindow;
        mainWindow.SetSmallIcon(Application.GetResourceManager().GetIcon("cmcode.small.icon"));
        int exitCode = Application.Run(mainWindow);
        return exitCode;
    }
    catch (const Exception& ex)
    {
        Application.SetLogView(null);
        Cm.Views.Bitmaps.Instance().Clear();
        MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
        LogException(ex);
        return 1;
    }
    return 0;
}
