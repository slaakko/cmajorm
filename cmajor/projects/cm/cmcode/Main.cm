// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Windows;
using cmcode;

namespace cmcode
{
    public const uint defaultConfigSaveTimerPeriod = 3000u; // 3 seconds

    public System.Windows.WindowState MainWindowWindowState()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowWindowState();
            }
            else
            {
                return System.Windows.WindowState.normal;
            }
        }
        catch (const Exception& ex)
        {
        }
        return System.Windows.WindowState.normal;
    }

    public Point MainWindowLocation()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowLocation();
            }
            else
            {
                return Point.Default();
            }
        }
        catch (const Exception& ex)
        {
        }
        return Point.Default();
    }

    public Size MainWindowSize()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowSize();
            }
            else
            {
                return Size.Default();
            }
        }
        catch (const Exception& ex)
        {
        }
        return Size.Default();
    }

    int MainWindowVerticalSplitterDistance()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowVerticalSplitterDistance();
            }
            else
            {
                return 0;
            }
        }
        catch (const Exception& ex)
        {
        }
        return 0;
    }

    int MainWindowHorizontalSplitterDistance()
    {
        try
        {
            if (MainConfiguration.Instance().Loaded())
            {
                return MainConfiguration.Instance().GetMainWindowHorizontalSplitterDistance();
            }
            else
            {
                return 0;
            }
        }
        catch (const Exception& ex)
        {
        }
        return 0;
    }

    nothrow System.Windows.Color TreeViewNormalBorderColor()
    {
        return System.Windows.Color(204u, 206u, 219u);
    }

    nothrow System.Windows.Color TreeViewSelectedBorderColor()
    {
        return System.Windows.Color.Blue();
    }

    nothrow System.Windows.Color TabControlSelectedBorderColor()
    {
        return System.Windows.Color.Blue();
    }

    nothrow System.Windows.Color SourceCodeViewNormalFrameColor()
    {
        return System.Windows.Color(204u, 206u, 219u);
    }

    nothrow System.Windows.Color SourceCodeViewSelectedFrameColor()
    {
        return System.Windows.Color.Blue();
    }

    string CmajorProjectDirectory()
    {
        string cmajorRootDir = GetFullPath(Cm.Ast.CmajorRootDir());
        return Path.Combine(cmajorRootDir, "projects");
    }

    UniquePtr<Cm.Ast.Project> ReadProject(const string& projectFilePath)
    {
        ustring content = ToUtf32(File.ReadAllText(projectFilePath));
        ContainerFileLexer lexer(content, projectFilePath, 0);
        UniquePtr<Cm.Ast.Project> project = ProjectFileParser.Parse(lexer, "debug", Cm.Ast.BackEnd.llvm);
        project->ResolveDeclarations();
        return project;
    }

    UniquePtr<Cm.Ast.Solution> ReadSolution(const string& solutionFilePath)
    {
        ustring content = ToUtf32(File.ReadAllText(solutionFilePath));
        ContainerFileLexer lexer(content, solutionFilePath, 0);
        UniquePtr<Cm.Ast.Solution> solution = SolutionFileParser.Parse(lexer);
        solution->ResolveDeclarations();
        for (const string& projectFilePath : solution->ProjectFilePaths())
        {
            UniquePtr<Cm.Ast.Project> project = ReadProject(projectFilePath);
            solution->AddProject(Rvalue(project));
        }
        return solution;
    }

    class TreeViewNodeData
    {
        public enum Kind
        {
            solution, project, file
        }
        public nothrow TreeViewNodeData(Kind kind_, Cm.Ast.Solution* solution_, Cm.Ast.Project* project_, const string& filePath_, const string& fileName_) :
            kind(kind_), solution(solution_), project(project_), filePath(filePath_), fileName(fileName_)
        {
            switch (kind)
            {
                case Kind.solution:
                {
                    key = System.Security.GetSha1MessageDigest("solution." + ToUtf8(solution->Name()));
                    break;
                }
                case Kind.project:
                {
                    key = System.Security.GetSha1MessageDigest("solution." + ToUtf8(solution->Name()) + ".project." + ToUtf8(project->Name()));
                    break;
                }
                case Kind.file:
                {
                    key = System.Security.GetSha1MessageDigest("solution." + ToUtf8(solution->Name()) + ".project." + ToUtf8(project->Name()) + ".file." + filePath);
                    break;
                }
            }
        }
        public Kind kind;
        public Cm.Ast.Solution* solution;
        public Cm.Ast.Project* project;
        public string filePath;
        public string fileName;
        public string key;
    }

    class ByFileName : Rel<UniquePtr<TreeViewNodeData>>
    {
        public nothrow bool operator()(const UniquePtr<TreeViewNodeData>& left, const UniquePtr<TreeViewNodeData>& right) const
        {
            return left->fileName < right->fileName;
        }
    }

    class SolutionExplorerData
    {
        public nothrow SolutionExplorerData()
        {
        }
        public List<UniquePtr<TreeViewNodeData>> treeViewData;
        public HashMap<string, TreeViewNodeData*> treeViewDataMap;
    }

    UniquePtr<TreeViewNode> BuildSolutionTree(Cm.Ast.Solution* solution, UniquePtr<SolutionExplorerData>& solutionExplorerData)
    {
        UniquePtr<SolutionExplorerData> newSolutionExplorerData(new SolutionExplorerData());
        string solutionName = ToUtf8(solution->Name());
        UniquePtr<TreeViewNode> solutionNode(new TreeViewNode(solutionName));
        UniquePtr<TreeViewNodeData> solutionData(new TreeViewNodeData(TreeViewNodeData.Kind.solution, solution, null, string(), string()));
        solutionNode->SetData(solutionData.Get());
        newSolutionExplorerData->treeViewData.Add(Rvalue(solutionData));
        for (const UniquePtr<Cm.Ast.Project>& project : solution->Projects())
        {
            string projectName = ToUtf8(project->Name());
            UniquePtr<TreeViewNode> projectNode(new TreeViewNode(projectName));
            UniquePtr<TreeViewNodeData> projectData(new TreeViewNodeData(TreeViewNodeData.Kind.project, solution, project.Get(), string(), string()));
            projectNode->SetData(projectData.Get());
            newSolutionExplorerData->treeViewData.Add(Rvalue(projectData));
            List<UniquePtr<TreeViewNodeData>> fileData;
            for (const string& sourceFilePath : project->SourceFilePaths())
            {
                UniquePtr<TreeViewNodeData> file(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution, project.Get(), sourceFilePath, Path.GetFileName(sourceFilePath)));
                fileData.Add(Rvalue(file));
            }
            for (const string& resourceFilePath : project->ResourceFilePaths())
            {
                UniquePtr<TreeViewNodeData> file(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution, project.Get(), resourceFilePath, Path.GetFileName(resourceFilePath)));
                fileData.Add(Rvalue(file));
            }
            for (const string& textFilePath : project->TextFilePaths())
            {
                UniquePtr<TreeViewNodeData> file(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution, project.Get(), textFilePath, Path.GetFileName(textFilePath)));
                fileData.Add(Rvalue(file));
            }
            Sort(fileData.Begin(), fileData.End(), ByFileName());
            for (const UniquePtr<TreeViewNodeData>& file : fileData)
            {
                UniquePtr<TreeViewNode> fileNode(new TreeViewNode(file->fileName));
                fileNode->SetData(file.Get());
                projectNode->AddChild(fileNode.Release());
            }
            for (UniquePtr<TreeViewNodeData>& file : fileData)
            {
                newSolutionExplorerData->treeViewData.Add(Rvalue(file));
            }
            solutionNode->AddChild(projectNode.Release());
        }
        solutionNode->Expand();
        for (const UniquePtr<TreeViewNodeData>& nodeData : newSolutionExplorerData->treeViewData)
        {
            newSolutionExplorerData->treeViewDataMap[nodeData->key] = nodeData.Get();
        }
        solutionExplorerData.Reset(newSolutionExplorerData.Release());
        return solutionNode;
    }

    class MainWindow : Window
    {
        public MainWindow() : base("MainWindow", WindowStyle.WS_OVERLAPPEDWINDOW, DefaultExtendedWindowStyle(), "Cmajor Code", MainWindowLocation(), MainWindowSize(),
            Dock.none, Anchors.none, MainWindowWindowState())
        {
            Debug.SetPaint();
            UniquePtr<MenuBar> menuBar(new MenuBar());
            UniquePtr<MenuItem> fileMenuItem(new MenuItem("&File"));
            UniquePtr<MenuItem> newMenuItem(new MenuItem("&New Project..."));
            newMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.n));
            newMenuItem->ClickEvent().AddHandler(NewProjectClick);
            fileMenuItem->AddMenuItem(newMenuItem.Release());
            UniquePtr<MenuItem> openMenuItem(new MenuItem("&Open Project/Solution..."));
            openMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.o));
            openMenuItem->ClickEvent().AddHandler(OpenProjectClick);
            fileMenuItem->AddMenuItem(openMenuItem.Release());
            UniquePtr<MenuItem> closeMenuItem(new MenuItem("&Close Solution"));
            closeMenuItem->ClickEvent().AddHandler(CloseSolutionClick);
            fileMenuItem->AddMenuItem(closeMenuItem.Release());
            UniquePtr<MenuItem> saveMenuItem(new MenuItem("&Save"));
            saveMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.s));
            saveMenuItem->ClickEvent().AddHandler(SaveClick);
            fileMenuItem->AddMenuItem(saveMenuItem.Release());
            UniquePtr<MenuItem> exitMenuItem(new MenuItem("E&xit"));
            exitMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f4));
            exitMenuItem->ClickEvent().AddHandler(ExitClick);
            fileMenuItem->AddMenuItem(exitMenuItem.Release());
            menuBar->AddMenuItem(fileMenuItem.Release());
            UniquePtr<MenuItem> windowMenuItem(new MenuItem("&Window"));
            UniquePtr<MenuItem> closeAllTabsMenuItem(new MenuItem("&Close All Tabs"));
            closeAllTabsMenuItem->ClickEvent().AddHandler(CloseAllTabsClick);
            windowMenuItem->AddMenuItem(closeAllTabsMenuItem.Release());
            menuBar->AddMenuItem(windowMenuItem.Release());
            AddChild(menuBar.Release());
            UniquePtr<SplitContainer> verticalSplitContainerPtr(new SplitContainer(Orientation.vertical, MainWindowVerticalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            verticalSplitContainer = verticalSplitContainerPtr.Get();
            verticalSplitContainer->SplitterDistanceChangedEvent().AddHandler(VerticalSplitterDistanceChanged);
            UniquePtr<SplitContainer> horizontalSplitContainerPtr(new SplitContainer(Orientation.horizontal, MainWindowHorizontalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            horizontalSplitContainer = horizontalSplitContainerPtr.Get();
            horizontalSplitContainer->SplitterDistanceChangedEvent().AddHandler(HorizontalSplitterDistanceChanged);
            UniquePtr<TabControl> codeTabControlPtr(new TabControl(Point(), Size(), Dock.fill, Anchors.none));
            codeTabControl = codeTabControlPtr.Get();
            UniquePtr<Control> paddedTabControl(new PaddedControl(codeTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTabControl(new BorderedControl(paddedTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(), TabControlSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TreeView> solutionExplorerTreeViewPtr(new TreeView(Point(), Size(), Dock.fill, Anchors.none));
            solutionExplorerTreeView = solutionExplorerTreeViewPtr.Get();
            solutionExplorerTreeView->NodeDoubleClickEvent().AddHandler(TreeViewNodeDoubleClick);
            UniquePtr<Control> paddedTreeView(new PaddedControl(solutionExplorerTreeViewPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTreeView(new BorderedControl(paddedTreeView.Release(), BorderStyle.single, TreeViewNormalBorderColor(), TreeViewSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> scrollableTreeView(new ScrollableControl(borderedTreeView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            horizontalSplitContainer->Pane1Container()->AddChild(borderedTabControl.Release());
            horizontalSplitContainer->Pane2Container()->AddChild(scrollableTreeView.Release());
            verticalSplitContainer->Pane1Container()->AddChild(horizontalSplitContainerPtr.Release());
            UniquePtr<TabControl> outputTabControlPtr(new TabControl(Point(), Size(), Dock.none, Anchors.none));
            outputTabControl = outputTabControlPtr.Get();
            outputTabControl->SetTabSelectedBackgroundColor(Color.White());
            UniquePtr<Control> paddedOutputTabControl(new PaddedControl(outputTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedOutputTabControl(new BorderedControl(paddedOutputTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(),
                TabControlSelectedBorderColor(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TabPage> logTabPage(new TabPage("Log", "log"));
            UniquePtr<LogView> logView(new LogView(Point(), Size(), Dock.none, Anchors.none));
            Application.SetLogView(logView.Get());
            UniquePtr<Control> borderedLogView(new BorderedControl(logView.Release(), BorderStyle.single, Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> scrollableLogView(new ScrollableControl(borderedLogView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            logTabPage->AddChild(scrollableLogView.Release());
            outputTabControl->AddTabPage(logTabPage.Release());
            verticalSplitContainer->Pane2Container()->AddChild(borderedOutputTabControl.Release());
            AddChild(verticalSplitContainerPtr.Release());
        }
        public override void OnShown()
        {
            try
            {
                base->OnShown();
                MainConfiguration.Instance().SetMainWindowLocation(Location());
                MainConfiguration.Instance().SetMainWindowSize(GetSize());
                SetTimer(1u, defaultConfigSaveTimerPeriod);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        protected override void OnWindowClosing(bool& cancelClose)
        {
            try
            {
                Application.SetLogView(null);
                base->OnWindowClosing(cancelClose);
                MainConfiguration.Instance().Save(true);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        protected override void OnTimer(TimerEventArgs& args)
        {
            try
            {
                MainConfiguration.Instance().Save(false);
            }
            catch (const Exception& ex)
            {
            }
        }
        public override void OnSizeChanged(uint windowState)
        {
            try
            {
                base->OnSizeChanged(windowState);
                if (windowState == SIZE_MAXIMIZED)
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.maximized);
                }
                else
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.normal);
                    MainConfiguration.Instance().SetMainWindowSize(GetSize());
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        public override void OnLocationChanged()
        {
            try
            {
                base->OnLocationChanged();
                MainConfiguration.Instance().SetMainWindowLocation(Location());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        private void VerticalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowVerticalSplitterDistance(verticalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        private void HorizontalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowHorizontalSplitterDistance(horizontalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        private void TreeViewNodeDoubleClick(TreeViewNodeMouseClickEventArgs& args)
        {
            try
            {
                TreeViewNode* node = args.node;
                TreeViewNodeData* data = cast<TreeViewNodeData*>(node->Data());
                if (data->kind == TreeViewNodeData.Kind.solution || data->kind == TreeViewNodeData.Kind.project)
                {
                    switch (node->GetState())
                    {
                        case TreeViewNode.State.collapsed: node->ExpandAll(); break;
                        case TreeViewNode.State.expanded: node->CollapseAll(); break;
                    }
                }
                else if (data->kind == TreeViewNodeData.Kind.file)
                {
                    string ext = Path.GetExtension(data->fileName);
                    if (ext == ".cm")
                    {
                        TabPage* prevTabPage = codeTabControl->GetTabPageByKey(data->key);
                        if (prevTabPage != null)
                        {
                            codeTabControl->SetSelectedTabPage(prevTabPage);
                        }
                        else
                        {
                            UniquePtr<TabPage> tabPage(new TabPage(data->fileName, data->key));
                            Cm.Views.CmajorSourceCodeView* sourceCodeView = new Cm.Views.CmajorSourceCodeView(Point(0, 0), Size(0, 0), Dock.none, Anchors.none);
                            UniquePtr<Control> paddedControl(new PaddedControl(sourceCodeView, Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
                            UniquePtr<Control> borderedControl(new BorderedControl(paddedControl.Release(), BorderStyle.style3D, DefaultTabControlFrameColor(),
                                TabControlSelectedBorderColor(), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
                            UniquePtr<Control> scrollableSourceCodeView(new ScrollableControl(borderedControl.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
                            tabPage->AddChild(scrollableSourceCodeView.Release());
                            codeTabControl->AddTabPage(tabPage.Release());
                            ustring content = ToUtf32(File.ReadAllText(data->filePath));
                            sourceCodeView->SetTextContent(content);
                            sourceCodeView->SetFocus();
                        }
                    }
                    else
                    {
                        throw Exception("no editor for '" + ext + "' file implemented");
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        private void NewProjectClick()
        {
            try
            {
                MessageBox.Show("New project");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        private void OpenProjectClick()
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Solution Files (*.cms)", "*.cms"));
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Project Files (*.cmp)", "*.cmp"));
                string initialDirectory = CmajorProjectDirectory();
                string filePath;
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".cms",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    if (!fileNames.IsEmpty())
                    {
                        filePath = Path.Combine(currentDirectory, fileNames[0]);
                    }
                    if (!filePath.IsEmpty() && File.Exists(filePath))
                    {
                        string ext = Path.GetExtension(filePath);
                        if (ext == ".cms")
                        {
                            solution = ReadSolution(filePath);
                        }
                        else if (ext == ".cmp")
                        {
                            UniquePtr<Cm.Ast.Project> project = ReadProject(filePath);
                            solution.Reset(new Cm.Ast.Solution(project->Name(), Path.ChangeExtension(filePath, ".cms")));
                            solution->AddProject(Rvalue(project));
                        }
                        else
                        {
                            throw Exception("invalid extension (not .cmp or .cms)");
                        }
                    }
                    else
                    {
                        throw Exception("file path is empty or does not exist");
                    }
                    UniquePtr<TreeViewNode> root = BuildSolutionTree(solution.Get(), solutionExplorerData);
                    solutionExplorerTreeView->SetRoot(root.Release());
                    codeTabControl->CloseAllTabPages();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }
        private void CloseSolutionClick()
        {
            try
            {
                codeTabControl->CloseAllTabPages();
                solutionExplorerTreeView->SetRoot(null);
                solutionExplorerData.Reset();
                Invalidate();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }
        private void SaveClick()
        {
            try
            {
                MessageBox.Show("Save");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }
        private void ExitClick()
        {
            Close();
        }
        private void CloseAllTabsClick()
        {
            try
            {
                codeTabControl->CloseAllTabPages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }
        private SplitContainer* verticalSplitContainer;
        private SplitContainer* horizontalSplitContainer;
        private UniquePtr<Cm.Ast.Solution> solution;
        private TabControl* codeTabControl;
        private TabControl* outputTabControl;
        private TreeView* solutionExplorerTreeView;
        private UniquePtr<SolutionExplorerData> solutionExplorerData;
    }
}

int main()
{
    try
    {
        MainConfiguration.Instance().Load();
        MainWindow mainWindow;
        mainWindow.SetSmallIcon(Application.GetResourceManager().GetIcon("cmcode.small.icon"));
        int exitCode = Application.Run(mainWindow);
        return exitCode;
    }
    catch (const Exception& ex)
    {
        MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
        try
        {
            StreamWriter errorWriter = File.CreateText("error.txt");
            errorWriter << ex.ToString() << endl();
        }
        catch (const Exception&)
        {
        }
        return 1;
    }
    return 0;
}
