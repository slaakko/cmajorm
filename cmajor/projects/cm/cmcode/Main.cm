// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Windows;
using Cm.Build;
using Cm.Debug;
using cmcode;

namespace cmcode
{
    enum UserInterfaceAction
    {
        none = 0, build = 1
    }

    class BuildGuard
    {
        public nothrow BuildGuard(MainWindow* mainWindow_) : mainWindow(mainWindow_)
        {
            mainWindow->SetControlStatus(UserInterfaceAction.build);
        }
        public ~BuildGuard()
        {
            mainWindow->SetControlStatus(UserInterfaceAction.none);
        }
        private MainWindow* mainWindow;
    }

    class MainWindow : Window
    {
        public MainWindow(const string& filePath) :
            base("MainWindow", WindowStyle.WS_OVERLAPPEDWINDOW, DefaultExtendedWindowStyle(), "Cmajor Code", MainWindowLocation(), MainWindowSize(),
            Dock.none, Anchors.none, MainWindowWindowState()), buildService()
        {
            Debug.SetPaint();
            UniquePtr<MenuBar> menuBar(new MenuBar());
            UniquePtr<MenuItem> fileMenuItem(new MenuItem("&File"));
            UniquePtr<MenuItem> newProjectMenuItemPtr(new MenuItem("&New Project..."));
            newProjectMenuItem = newProjectMenuItemPtr.Get();
            newProjectMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.n));
            newProjectMenuItem->ClickEvent().AddHandler(NewProjectClick);
            fileMenuItem->AddMenuItem(newProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> openProjectMenuItemPtr(new MenuItem("&Open Project/Solution..."));
            openProjectMenuItem = openProjectMenuItemPtr.Get();
            openProjectMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.o));
            openProjectMenuItem->ClickEvent().AddHandler(OpenProjectClick);
            fileMenuItem->AddMenuItem(openProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> closeSolutionMenuItemPtr(new MenuItem("&Close Solution"));
            closeSolutionMenuItem = closeSolutionMenuItemPtr.Get();
            closeSolutionMenuItem->ClickEvent().AddHandler(CloseSolutionClick);
            fileMenuItem->AddMenuItem(closeSolutionMenuItemPtr.Release());
            fileMenuItem->AddMenuItem(new MenuItemSeparator());
            UniquePtr<MenuItem> saveMenuItemPtr(new MenuItem("&Save"));
            saveMenuItem = saveMenuItemPtr.Get();
            saveMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.s));
            saveMenuItem->ClickEvent().AddHandler(SaveClick);
            UniquePtr<MenuItem> saveAllMenuItemPtr(new MenuItem("Save A&ll"));
            saveAllMenuItem = saveAllMenuItemPtr.Get();
            saveAllMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.shiftModifier | Keys.s));
            saveAllMenuItem->ClickEvent().AddHandler(SaveAllClick);
            fileMenuItem->AddMenuItem(saveAllMenuItemPtr.Release());
            fileMenuItem->AddMenuItem(new MenuItemSeparator());
            UniquePtr<MenuItem> exitMenuItem(new MenuItem("E&xit"));
            exitMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f4));
            exitMenuItem->ClickEvent().AddHandler(ExitClick);
            fileMenuItem->AddMenuItem(exitMenuItem.Release());
            menuBar->AddMenuItem(fileMenuItem.Release());

            UniquePtr<MenuItem> buildMenuItem(new MenuItem("&Build"));
            UniquePtr<MenuItem> buildSolutionMenuItemPtr(new MenuItem("&Build Solution"));
            buildSolutionMenuItem = buildSolutionMenuItemPtr.Get();
            buildSolutionMenuItem->ClickEvent().AddHandler(BuildSolutionClick);
            buildSolutionMenuItem->SetShortcut(Keys.f7);
            buildMenuItem->AddMenuItem(buildSolutionMenuItemPtr.Release());
            UniquePtr<MenuItem> rebuildSolutionMenuItemPtr(new MenuItem("&Rebuild Solution"));
            rebuildSolutionMenuItem = rebuildSolutionMenuItemPtr.Get();
            rebuildSolutionMenuItem->ClickEvent().AddHandler(RebuildSolutionClick);
            rebuildSolutionMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f7));
            buildMenuItem->AddMenuItem(rebuildSolutionMenuItemPtr.Release());
            UniquePtr<MenuItem> cleanSolutionMenuItemPtr(new MenuItem("&Clean Solution"));
            cleanSolutionMenuItem = cleanSolutionMenuItemPtr.Get();
            cleanSolutionMenuItem->ClickEvent().AddHandler(CleanSolutionClick);
            buildMenuItem->AddMenuItem(cleanSolutionMenuItemPtr.Release());
            buildMenuItem->AddMenuItem(new MenuItemSeparator());
            UniquePtr<MenuItem> buildActiveProjectMenuItemPtr(new MenuItem("Build &Active Project"));
            buildActiveProjectMenuItem = buildActiveProjectMenuItemPtr.Get();
            buildActiveProjectMenuItem->ClickEvent().AddHandler(BuildActiveProjectClick);
            buildActiveProjectMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.b));
            buildMenuItem->AddMenuItem(buildActiveProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> rebuildActiveProjectMenuItemPtr(new MenuItem("Reb&uild Active Project"));
            rebuildActiveProjectMenuItem = rebuildActiveProjectMenuItemPtr.Get();
            rebuildActiveProjectMenuItem->ClickEvent().AddHandler(RebuildActiveProjectClick);
            buildMenuItem->AddMenuItem(rebuildActiveProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> cleanActiveProjectMenuItemPtr(new MenuItem("C&lean Active Project"));
            cleanActiveProjectMenuItem = cleanActiveProjectMenuItemPtr.Get();
            cleanActiveProjectMenuItem->ClickEvent().AddHandler(CleanActiveProjectClick);
            buildMenuItem->AddMenuItem(cleanActiveProjectMenuItemPtr.Release());
            menuBar->AddMenuItem(buildMenuItem.Release());

            UniquePtr<MenuItem> debugMenuItem(new MenuItem("&Debug"));
            UniquePtr<MenuItem> startDebuggingMenuItemPtr(new MenuItem("&Start Debugging"));
            startDebuggingMenuItem = startDebuggingMenuItemPtr.Get();
            startDebuggingMenuItem->SetShortcut(Keys.f5);
            startDebuggingMenuItem->ClickEvent().AddHandler(StartDebuggingClick);
            debugMenuItem->AddMenuItem(startDebuggingMenuItemPtr.Release());
            UniquePtr<MenuItem> stopDebuggingMenuItemPtr(new MenuItem("Sto&p Debugging"));
            stopDebuggingMenuItem = stopDebuggingMenuItemPtr.Get();
            stopDebuggingMenuItem->SetShortcut(cast<Keys>(Keys.shiftModifier | Keys.f5));
            debugMenuItem->AddMenuItem(stopDebuggingMenuItemPtr.Release());

            debugMenuItem->AddMenuItem(new MenuItemSeparator());

            UniquePtr<MenuItem> showNextStatementMenuItemPtr(new MenuItem("S&how Next Statement"));
            showNextStatementMenuItem = showNextStatementMenuItemPtr.Get();
            showNextStatementMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.j));
            debugMenuItem->AddMenuItem(showNextStatementMenuItemPtr.Release());
            UniquePtr<MenuItem> stepOverMenuItemPtr(new MenuItem("Step &Over"));
            stepOverMenuItem = stepOverMenuItemPtr.Get();
            stepOverMenuItem->SetShortcut(Keys.f10);
            debugMenuItem->AddMenuItem(stepOverMenuItemPtr.Release());
            UniquePtr<MenuItem> stepIntoMenuItemPtr(new MenuItem("Step &Into"));
            stepIntoMenuItem = stepIntoMenuItemPtr.Get();
            stepIntoMenuItem->SetShortcut(Keys.f11);
            debugMenuItem->AddMenuItem(stepIntoMenuItemPtr.Release());
            UniquePtr<MenuItem> stepOutMenuItemPtr(new MenuItem("Step Ou&t"));
            stepOutMenuItem = stepOutMenuItemPtr.Get();
            stepOutMenuItemPtr->SetShortcut(Keys.f12);
            debugMenuItem->AddMenuItem(stepOutMenuItemPtr.Release());
            menuBar->AddMenuItem(debugMenuItem.Release());

            UniquePtr<MenuItem> windowMenuItem(new MenuItem("&Window"));
            UniquePtr<MenuItem> closeAllTabsMenuItem(new MenuItem("&Close All Tabs"));
            closeAllTabsMenuItem->ClickEvent().AddHandler(CloseAllTabsClick);
            windowMenuItem->AddMenuItem(closeAllTabsMenuItem.Release());
            menuBar->AddMenuItem(windowMenuItem.Release());
            AddChild(menuBar.Release());
            UniquePtr<ToolBar> toolBarPtr(new ToolBar(30, ToolButtonToolTipColor(), Color.DefaultBitmapTransparent(), ToolBar.Style.regular,
                Padding(4, 4, 4, 4), Padding(2, 0, 2, 0)));
            toolBar = toolBarPtr.Get();
            toolBar->SetTextToolButtonFont(Font(FontFamily("Segoe UI"), 9.0f));
            UniquePtr<BorderedControl> borderedToolBar(new BorderedControl(
                toolBarPtr.Release(), BorderStyle.single, ToolBarBorderColor(), ToolBarBorderColor(), Point(), toolBar->GetSize(), Dock.top, Anchors.none));

            UniquePtr<ToolButton> saveToolButtonPtr(new ToolButton("cmcode.save.bitmap"));
            saveToolButton = saveToolButtonPtr.Get();
            saveToolButton->SetToolTip("Save (Ctrl+S)");
            saveToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(saveToolButtonPtr.Release());

            UniquePtr<ToolButton> saveAllToolButtonPtr(new ToolButton("cmcode.save.all.bitmap"));
            saveAllToolButton = saveAllToolButtonPtr.Get();
            saveAllToolButton->SetToolTip("Save All (Ctrl+Shift+S)");
            saveAllToolButton->SetPadding(Padding(6, 6, 6, 6));
            toolBar->AddToolButton(saveAllToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator1(new ToolButtonSeparator());
            toolBar->AddToolButton(separator1.Release());

            Size textButtonSize(36, 12);

            UniquePtr<TextToolButton> cppToolButtonPtr(new TextToolButton("C++", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            cppToolButton = cppToolButtonPtr.Get();
            cppToolButton->SetToolTip("Compile using C++ Backend");
            cppToolButton->SetPadding(Padding(8, 8, 8, 8));
            cppToolButton->ClickEvent().AddHandler(CppButtonClick);
            toolBar->AddToolButton(cppToolButtonPtr.Release());

            UniquePtr<TextToolButton> llvmToolButtonPtr(new TextToolButton("LLVM", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            llvmToolButton = llvmToolButtonPtr.Get();
            llvmToolButton->SetToolTip("Compile using LLVM Backend");
            llvmToolButton->SetPadding(Padding(8, 8, 8, 8));
            llvmToolButton->ClickEvent().AddHandler(LLVMButtonClick);
            toolBar->AddToolButton(llvmToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator2(new ToolButtonSeparator());
            toolBar->AddToolButton(separator2.Release());

            UniquePtr<TextToolButton> debugToolButtonPtr(new TextToolButton("Debug", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            debugToolButton = debugToolButtonPtr.Get();
            debugToolButton->SetToolTip("Compile using Debug Configuration");
            debugToolButton->SetPadding(Padding(8, 8, 8, 8));
            debugToolButton->ClickEvent().AddHandler(DebugButtonClick);
            toolBar->AddToolButton(debugToolButtonPtr.Release());

            UniquePtr<TextToolButton> releaseToolButtonPtr(new TextToolButton("Release", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            releaseToolButton = releaseToolButtonPtr.Get();
            releaseToolButton->SetToolTip("Compile using Release Configuration");
            releaseToolButton->SetPadding(Padding(8, 8, 8, 8));
            releaseToolButton->ClickEvent().AddHandler(ReleaseButtonClick);
            toolBar->AddToolButton(releaseToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator3(new ToolButtonSeparator());
            toolBar->AddToolButton(separator3.Release());

            UniquePtr<ToolButton> buildSolutionToolButtonPtr(new ToolButton("cmcode.build.solution.bitmap"));
            buildSolutionToolButton = buildSolutionToolButtonPtr.Get();
            buildSolutionToolButton->ClickEvent().AddHandler(BuildSolutionClick);
            buildSolutionToolButton->SetToolTip("Build Solution (F7)");
            buildSolutionToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(buildSolutionToolButtonPtr.Release());

            UniquePtr<ToolButton> buildProjectToolButtonPtr(new ToolButton("cmcode.build.project.bitmap"));
            buildProjectToolButton = buildProjectToolButtonPtr.Get();
            buildProjectToolButton->ClickEvent().AddHandler(BuildActiveProjectClick);
            buildProjectToolButton->SetToolTip("Build Active Project (Ctrl+B)");
            buildProjectToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(buildProjectToolButtonPtr.Release());

            UniquePtr<ToolButton> cancelBuildToolButtonPtr(new ToolButton("cmcode.cancel.build.bitmap"));
            cancelBuildToolButton = cancelBuildToolButtonPtr.Get();
            cancelBuildToolButton->ClickEvent().AddHandler(CancelBuildClick);
            cancelBuildToolButton->SetToolTip("Cancel Build");
            cancelBuildToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(cancelBuildToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator4(new ToolButtonSeparator());
            toolBar->AddToolButton(separator4.Release());

            UniquePtr<ToolButton> startDebuggingToolButtonPtr(new ToolButton("cmcode.debug.start.bitmap"));
            startDebuggingToolButton = startDebuggingToolButtonPtr.Get();
            startDebuggingToolButton->SetToolTip("Start Debugging (F5)");
            startDebuggingToolButton->SetPadding(Padding(8, 8, 8, 8));
            startDebuggingToolButton->ClickEvent().AddHandler(StartDebuggingClick);
            toolBar->AddToolButton(startDebuggingToolButtonPtr.Release());

            UniquePtr<ToolButton> stopDebuggingToolButtonPtr(new ToolButton("cmcode.debug.stop.bitmap"));
            stopDebuggingToolButton = stopDebuggingToolButtonPtr.Get();
            stopDebuggingToolButton->SetToolTip("Stop Debugging (Shift+F5)");
            stopDebuggingToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(stopDebuggingToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator5(new ToolButtonSeparator());
            toolBar->AddToolButton(separator5.Release());

            UniquePtr<ToolButton> showNextStatementToolButtonPtr(new ToolButton("cmcode.debug.show.next.statement.bitmap"));
            showNextStatementToolButton = showNextStatementToolButtonPtr.Get();
            showNextStatementToolButton->SetToolTip("Show Next Statement (Ctrl+J)");
            showNextStatementToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(showNextStatementToolButtonPtr.Release());

            UniquePtr<ToolButton> stepOverToolButtonPtr(new ToolButton("cmcode.debug.step.over.bitmap"));
            stepOverToolButton = stepOverToolButtonPtr.Get();
            stepOverToolButton->SetToolTip("Step Over (F10)");
            stepOverToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(stepOverToolButtonPtr.Release());

            UniquePtr<ToolButton> stepIntoToolButtonPtr(new ToolButton("cmcode.debug.step.into.bitmap"));
            stepIntoToolButton = stepIntoToolButtonPtr.Get();
            stepIntoToolButton->SetToolTip("Step Into (F11)");
            stepIntoToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(stepIntoToolButtonPtr.Release());

            UniquePtr<ToolButton> stepOutToolButtonPtr(new ToolButton("cmcode.debug.step.out.bitmap"));
            stepOutToolButton = stepOutToolButtonPtr.Get();
            stepOutToolButton->SetToolTip("Step Out (F12)");
            stepOutToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(stepOutToolButtonPtr.Release());

            AddChild(borderedToolBar.Release());
            UniquePtr<SplitContainer> verticalSplitContainerPtr(new SplitContainer(Orientation.vertical, MainWindowVerticalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            verticalSplitContainer = verticalSplitContainerPtr.Get();
            verticalSplitContainer->SplitterDistanceChangedEvent().AddHandler(VerticalSplitterDistanceChanged);
            UniquePtr<SplitContainer> horizontalSplitContainerPtr(new SplitContainer(Orientation.horizontal, MainWindowHorizontalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            horizontalSplitContainer = horizontalSplitContainerPtr.Get();
            horizontalSplitContainer->SplitterDistanceChangedEvent().AddHandler(HorizontalSplitterDistanceChanged);
            UniquePtr<TabControl> codeTabControlPtr(new TabControl(Point(), Size(), Dock.fill, Anchors.none));
            codeTabControl = codeTabControlPtr.Get();
            codeTabControl->TabPageSelectedEvent().AddHandler(CodeTabPageSelected);
            codeTabControl->ControlRemovedEvent().AddHandler(CodeTabPageRemoved);
            UniquePtr<Control> paddedTabControl(new PaddedControl(codeTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTabControl(new BorderedControl(paddedTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(), TabControlSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TreeView> solutionExplorerTreeViewPtr(new TreeView(Point(), Size(), Dock.fill, Anchors.none));
            solutionExplorerTreeView = solutionExplorerTreeViewPtr.Get();
            solutionExplorerTreeView->NodeClickEvent().AddHandler(TreeViewNodeClick);
            solutionExplorerTreeView->NodeDoubleClickEvent().AddHandler(TreeViewNodeDoubleClick);
            UniquePtr<Control> paddedTreeView(new PaddedControl(solutionExplorerTreeViewPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTreeView(new BorderedControl(paddedTreeView.Release(), BorderStyle.single, TreeViewNormalBorderColor(), TreeViewSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> scrollableTreeView(new ScrollableControl(borderedTreeView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            horizontalSplitContainer->Pane1Container()->AddChild(borderedTabControl.Release());
            horizontalSplitContainer->Pane2Container()->AddChild(scrollableTreeView.Release());
            verticalSplitContainer->Pane1Container()->AddChild(horizontalSplitContainerPtr.Release());
            UniquePtr<TabControl> outputTabControlPtr(new TabControl(Point(), Size(), Dock.none, Anchors.none));
            outputTabControl = outputTabControlPtr.Get();
            outputTabControl->SetTabSelectedBackgroundColor(Color.White());
            UniquePtr<Control> paddedOutputTabControl(new PaddedControl(outputTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedOutputTabControl(new BorderedControl(paddedOutputTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(),
                TabControlSelectedBorderColor(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TabPage> outputTabPagePtr(new TabPage("Output", "output"));
            outputTabPage = outputTabPagePtr.Get();
            UniquePtr<LogView> outputLogViewPtr(new LogView(Point(), Size(), Dock.none, Anchors.none));
            outputLogView = outputLogViewPtr.Get();
            UniquePtr<Control> scrollableOutputLogView(new ScrollableControl(outputLogViewPtr.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            outputTabPage->AddChild(scrollableOutputLogView.Release());
            outputTabControl->AddTabPage(outputTabPagePtr.Release());
            UniquePtr<TabPage> logTabPage(new TabPage("Log", "log"));
            UniquePtr<LogView> logView(new LogView(Point(), Size(), Dock.none, Anchors.none));
            Application.SetLogView(logView.Get());
            UniquePtr<Control> scrollableLogView(new ScrollableControl(logView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            logTabPage->AddChild(scrollableLogView.Release());
            outputTabControl->AddTabPage(logTabPage.Release());
            verticalSplitContainer->Pane2Container()->AddChild(borderedOutputTabControl.Release());
            AddChild(verticalSplitContainerPtr.Release());
            StatusBar* statusBar = new StatusBar();
            sourceFilePathStatusBarItem = new StatusBarItem("", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(sourceFilePathStatusBarItem);
            AddChild(statusBar);
            SetControlStatus(UserInterfaceAction.none);
            MainConfiguration.Instance().SetMainWindowLocation(Location());
            MainConfiguration.Instance().SetMainWindowSize(GetSize());
            SetTimer(1u, defaultConfigSaveTimerPeriod);
            outputTabPage->Select();
            if (!filePath.IsEmpty())
            {
                OpenProject(GetFullPath(filePath));
            }
        }
        protected override void OnWindowClosing(bool& cancelClose)
        {
            try
            {
                if (!buildService.IsNull())
                {
                    buildService->Quit();
                    buildService.Reset();
                }
                Application.SetLogView(null);
                Cm.Views.Bitmaps.Instance().Clear();
                base->OnWindowClosing(cancelClose);
                MainConfiguration.Instance().Save(true);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnTimer(TimerEventArgs& args)
        {
            try
            {
                MainConfiguration.Instance().Save(false);
            }
            catch (const Exception& ex)
            {
            }
        }
        protected override void OnSizeChanged(uint windowState)
        {
            try
            {
                base->OnSizeChanged(windowState);
                if (windowState == SIZE_MAXIMIZED)
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.maximized);
                    MainConfiguration.Instance().SetMainWindowSize(GetSize());
                }
                else
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.normal);
                    MainConfiguration.Instance().SetMainWindowSize(GetSize());
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnLocationChanged()
        {
            try
            {
                base->OnLocationChanged();
/*
                if (MainConfiguration.Instance().GetMainWindowWindowState() == WindowState.normal)
                {
                    MainConfiguration.Instance().SetMainWindowLocation(Location());
                }
*/
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnKeyDown(KeyEventArgs& args)
        {
            try
            {
                base->OnKeyDown(args);
                if (!args.handled)
                {
                    switch (args.keyData)
                    {
                        case Keys.escape:
                        {
                            RemoveContextMenu();
                            args.handled = true;
                            break;
                        }
                    }

                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void MouseUpNotification(MouseEventArgs& args)
        {
            try
            {
                if (args.buttons == MouseButtons.lbutton)
                {
                    RemoveContextMenu();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void VerticalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowVerticalSplitterDistance(verticalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void HorizontalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowHorizontalSplitterDistance(horizontalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void CodeTabPageSelected()
        {
            TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
            Cm.Views.CmajorEditor* editor = GetEditorByTabPage(selectedTabPage);
            if (editor != null)
            {
                sourceFilePathStatusBarItem->SetText(editor->FilePath());
            }
        }
        private void CodeTabPageRemoved(ControlEventArgs& args)
        {
            Control* removedControl = args.control;
            if (removedControl is TabPage*)
            {
                TabPage* removedTabPage = cast<TabPage*>(removedControl);
                editorByTabPageMap.Remove(removedTabPage);
            }
            if (codeTabControl->TabPages().IsEmpty())
            {
                sourceFilePathStatusBarItem->SetText("");
            }
        }
        private void IdentifierHovered(Cm.Views.IdentifierHoverEventArgs& args)
        {
            TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
            Cm.Views.CmajorEditor* editor = GetEditorByTabPage(selectedTabPage);
            if (editor != null)
            {
                Cm.Views.CmajorSourceCodeView* sourceCodeView = editor->GetSourceCodeView();
                SourceSpan span(args.lineNumber, args.columnNumber, args.columnNumber + cast<short>(args.identifier.Length()));
                sourceCodeView->GetDebugStrip()->SetDebugLocation(span);
                sourceCodeView->GetDebugStrip()->Invalidate();
                sourceCodeView->Invalidate();
            }
        }
        private void TreeViewNodeClick(TreeViewNodeMouseClickEventArgs& args)
        {
            try
            {
                if (args.buttons == MouseButtons.rbutton)
                {
                    TreeViewNode* node = args.node;
                    TreeViewNodeData* data = cast<TreeViewNodeData*>(node->Data());
                    if (data->kind == TreeViewNodeData.Kind.solution)
                    {
                        UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                        MenuItem* buildMenuItem = new MenuItem("Build");
                        contextMenu->AddMenuItemAction(buildMenuItem, new BuildSolutionAction(this, solution.Get()));
                        MenuItem* rebuildMenuItem = new MenuItem("Rebuild");
                        contextMenu->AddMenuItemAction(rebuildMenuItem, new RebuildSolutionAction(this, solution.Get()));
                        MenuItem* cleanMenuItem = new MenuItem("Clean");
                        contextMenu->AddMenuItemAction(cleanMenuItem, new CleanSolutionAction(this, solution.Get()));
                        if (contextMenu->HasMenuItems())
                        {
                            Point loc = args.location;
                            Point screenLoc = solutionExplorerTreeView->ClientToScreen(loc);
                            ShowContextMenu(contextMenu.Release(), screenLoc);
                        }
                    }
                    else if (data->kind == TreeViewNodeData.Kind.project)
                    {
                        Cm.Ast.Project* project = data->project;
                        UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                        MenuItem* buildMenuItem = new MenuItem("Build");
                        contextMenu->AddMenuItemAction(buildMenuItem, new BuildProjectAction(this, project));
                        MenuItem* rebuildMenuItem = new MenuItem("Rebuild");
                        contextMenu->AddMenuItemAction(rebuildMenuItem, new RebuildProjectAction(this, project));
                        MenuItem* cleanMenuItem = new MenuItem("Clean");
                        contextMenu->AddMenuItemAction(cleanMenuItem, new CleanProjectAction(this, project));
                        if (solution->ActiveProject() != project)
                        {
                            MenuItem* setActiveMenuItem = new MenuItem("Set Active");
                            contextMenu->AddMenuItemAction(setActiveMenuItem, new SetActiveProjectAction(this, solutionExplorerTreeView, solutionExplorerData.Get(),
                                solution.Get(), project, node)); 
                        }
                        if (contextMenu->HasMenuItems())
                        {
                            Point loc = args.location;
                            Point screenLoc = solutionExplorerTreeView->ClientToScreen(loc);
                            ShowContextMenu(contextMenu.Release(), screenLoc);
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void TreeViewNodeDoubleClick(TreeViewNodeMouseClickEventArgs& args)
        {
            try
            {
                TreeViewNode* node = args.node;
                TreeViewNodeData* data = cast<TreeViewNodeData*>(node->Data());
                if (data->kind == TreeViewNodeData.Kind.solution || data->kind == TreeViewNodeData.Kind.project)
                {
                    switch (node->GetState())
                    {
                        case TreeViewNode.State.collapsed: node->ExpandAll(); break;
                        case TreeViewNode.State.expanded: node->CollapseAll(); break;
                    }
                }
                else if (data->kind == TreeViewNodeData.Kind.file)
                {
                    string ext = Path.GetExtension(data->fileName);
                    if (ext == ".cm")
                    {
                        TabPage* prevTabPage = codeTabControl->GetTabPageByKey(data->key);
                        if (prevTabPage != null)
                        {
                            codeTabControl->SetSelectedTabPage(prevTabPage);
                        }
                        else
                        {
                            UniquePtr<TabPage> tabPage(new TabPage(data->fileName, data->key));
                            UniquePtr<Cm.Views.CmajorEditor> editorPtr(new Cm.Views.CmajorEditor(data->filePath,
                                solutionExplorerData->breakpointCollection.GetBreakpointList(data->filePath)));
                            Cm.Views.CmajorEditor* editor = editorPtr.Get();
                            editorByTabPageMap[tabPage.Get()] = editor;
                            tabPage->AddChild(editorPtr.Release());
                            codeTabControl->AddTabPage(tabPage.Release());
                            editor->GetSourceCodeView()->DoGenerateIdentifierHoverEvents();
                            editor->GetSourceCodeView()->IdentifierHoverEvent().AddHandler(IdentifierHovered);
                            editor->GetSourceCodeView()->SetFocus();
                        }
                    }
                    else
                    {
                        throw Exception("no editor for '" + ext + "' file implemented");
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void NewProjectClick()
        {
            try
            {
                MessageBox.Show("New project");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void OpenProject(const string& filePath)
        {
            try
            {
                List<UniquePtr<ustring>> contents;
                if (!filePath.IsEmpty() && File.Exists(filePath))
                {
                    string ext = Path.GetExtension(filePath);
                    if (ext == ".cms")
                    {
                        solution = ReadSolution(filePath, contents);
                    }
                    else if (ext == ".cmp")
                    {
                        UniquePtr<Cm.Ast.Project> project = ReadProject(filePath, contents);
                        string solutionFilePath = Path.ChangeExtension(filePath, ".cms");
                        if (File.Exists(solutionFilePath))
                        {
                            solution = ReadSolution(filePath, contents);
                        }
                        else
                        {
                            solution.Reset(new Cm.Ast.Solution(project->Name(), solutionFilePath));
                            solution->SetActiveProject(project.Get());
                            solution->AddProject(Rvalue(project));
                            solution->Save();
                        }
                    }
                    else
                    {
                        throw Exception("file path '" + filePath + " has invalid extension (not .cmp or .cms)");
                    }
                }
                else
                {
                    throw Exception("file path '" + filePath + "' is empty or does not exist");
                }
                codeTabControl->CloseAllTabPages();
                UniquePtr<TreeViewNode> root = BuildSolutionTree(solution.Get(), solutionExplorerData, contents);
                solutionExplorerTreeView->SetRoot(root.Release());
                SetControlStatus(UserInterfaceAction.none);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void OpenProjectClick()
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Solution Files (*.cms)", "*.cms"));
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Project Files (*.cmp)", "*.cmp"));
                string initialDirectory = CmajorProjectDirectory();
                string filePath;
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".cms",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    if (!fileNames.IsEmpty())
                    {
                        filePath = Path.Combine(currentDirectory, fileNames[0]);
                    }
                    OpenProject(GetFullPath(filePath));
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CloseSolutionClick()
        {
            try
            {
                codeTabControl->CloseAllTabPages();
                solutionExplorerTreeView->SetRoot(null);
                solutionExplorerData.Reset();
                SetControlStatus(UserInterfaceAction.none);
                Invalidate();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void LLVMButtonClick()
        {
            try
            {
                cppToolButton->SetState(ToolButton.State.normal);
                startDebuggingToolButton->Disable();
                startDebuggingMenuItem->Disable();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CppButtonClick()
        {
            try
            {
                llvmToolButton->SetState(ToolButton.State.normal);
                if (debugToolButton->GetState() == ToolButton.State.pressed)
                {
                    startDebuggingToolButton->Enable();
                    startDebuggingMenuItem->Enable();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void DebugButtonClick()
        {
            try
            {
                releaseToolButton->SetState(ToolButton.State.normal);
                if (cppToolButton->GetState() == ToolButton.State.pressed)
                {
                    startDebuggingToolButton->Enable();
                    startDebuggingMenuItem->Enable();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ReleaseButtonClick()
        {
            try
            {
                debugToolButton->SetState(ToolButton.State.normal);
                startDebuggingToolButton->Disable();
                startDebuggingMenuItem->Disable();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal string GetBackend() const
        {
            if (cppToolButton->GetState() == ToolButton.State.pressed)
            {
                return "cpp";
            }
            else if (llvmToolButton->GetState() == ToolButton.State.pressed)
            {
                return "llvm";
            }
            else
            {
                throw Exception("Either C++ or LLVM backend must be selected");
            }
        }
        internal string GetConfig() const
        {
            if (debugToolButton->GetState() == ToolButton.State.pressed)
            {
                return "debug";
            }
            else if (releaseToolButton->GetState() == ToolButton.State.pressed)
            {
                return "release";
            }
            else
            {
                throw Exception("Either Debug or Release configuration must be selected");
            }
        }
        internal void StartBuild(const BuildRequest& buildRequest)
        {
            try
            {
                outputLogView->Clear();
                outputTabPage->Select();
                BuildGuard buildGuard(this);
                Application.ProcessMessages();
                GetBuildService().ProcessBuildRequest(buildRequest);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private BuildService& GetBuildService()
        {
            if (buildService.IsNull())
            {
                buildService.Reset(new BuildService(BuildServiceArgs().
                    Log(true).KeepAliveIntervalSeconds(5).ServerTimeoutSeconds(15).SaveRequestOnly(false).DebugServer(false)));
                buildService->SetLogMessageNotificationFunction(LogMessagesAvailable);
                buildService->SetProgressNotificationFunction(BuildServiceProgress);
            }
            return *buildService;
        }
        private void BuildSolutionClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), solution->FilePath(), BuildRequestKind.build);
                StartBuild(buildRequest);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void RebuildSolutionClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), solution->FilePath(), BuildRequestKind.rebuild);
                StartBuild(buildRequest);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CleanSolutionClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), solution->FilePath(), BuildRequestKind.clean);
                StartBuild(buildRequest);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BuildActiveProjectClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (activeProject != null)
                {
                    BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), activeProject->FilePath(),
                        cast<BuildRequestKind>(BuildRequestKind.build | BuildRequestKind.buildDependencies));
                    StartBuild(buildRequest);
                }
                else
                {
                    throw Exception("no active project set for the solution");
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void RebuildActiveProjectClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (activeProject != null)
                {
                    BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), activeProject->FilePath(),
                        cast<BuildRequestKind>(BuildRequestKind.buildDependencies | BuildRequestKind.rebuild));
                    StartBuild(buildRequest);
                }
                else
                {
                    throw Exception("no active project set for the solution");
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CleanActiveProjectClick()
        {
            try
            {
                if (solution.IsNull()) throw Exception("no solution is open");
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (activeProject != null)
                {
                    BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), activeProject->FilePath(),
                        cast<BuildRequestKind>(BuildRequestKind.clean | BuildRequestKind.buildDependencies));
                    StartBuild(buildRequest);
                }
                else
                {
                    throw Exception("no active project set for the solution");
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CancelBuildClick()
        {
            try
            {
                GetBuildService().TerminateServer(true);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void LogMessagesAvailable()
        {
            try
            {
                while (!GetBuildService().MessageLogEmpty())
                {
                    string logMessage = GetBuildService().FetchLogMessage();
                    if (!logMessage.IsEmpty())
                    {
                        outputLogView->WriteLine(logMessage);
                    }
                }
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BuildServiceProgress()
        {
            try
            {
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SaveClick()
        {
            try
            {
                MessageBox.Show("Save");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SaveAllClick()
        {
            try
            {
                MessageBox.Show("Save all");
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ExitClick()
        {
            Close();
        }
        private void CloseAllTabsClick()
        {
            try
            {
                codeTabControl->CloseAllTabPages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private nothrow Cm.Views.CmajorEditor* GetEditorByTabPage(TabPage* tabPage) const
        {
            HashMap<TabPage*, Cm.Views.CmajorEditor*>.ConstIterator it = editorByTabPageMap.CFind(tabPage);
            if (it != editorByTabPageMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        private void StartDebuggingClick()
        {
            try
            {
                if (solution != null)
                {
                    Cm.Ast.Project* project = solution->ActiveProject();
                    if (project != null)
                    {
                        Cm.Ast.Target target = project->GetTarget();
                        if (target != Cm.Ast.Target.program && target != Cm.Ast.Target.winapp && target != Cm.Ast.Target.winguiapp)
                        {
                            throw Exception("project '" + ToUtf8(project->Name()) + "' is a library project");
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }

        internal void SetControlStatus(UserInterfaceAction action)
        {
            saveToolButton->Disable();
            saveAllToolButton->Disable();
            cppToolButton->Disable();
            cppToolButton->SetState(ToolButton.State.disabled);
            llvmToolButton->Disable();
            llvmToolButton->SetState(ToolButton.State.disabled);
            debugToolButton->Disable();
            debugToolButton->SetState(ToolButton.State.disabled);
            releaseToolButton->Disable();
            releaseToolButton->SetState(ToolButton.State.disabled);
            buildSolutionToolButton->Disable();
            buildProjectToolButton->Disable();
            cancelBuildToolButton->Disable();
            startDebuggingToolButton->Disable();
            stopDebuggingToolButton->Disable();
            showNextStatementToolButton->Disable();
            stepOverToolButton->Disable();
            stepIntoToolButton->Disable();
            stepOutToolButton->Disable();

            closeSolutionMenuItem->Disable();
            buildSolutionMenuItem->Disable();
            rebuildSolutionMenuItem->Disable();
            cleanSolutionMenuItem->Disable();
            buildActiveProjectMenuItem->Disable();
            rebuildActiveProjectMenuItem->Disable();
            cleanActiveProjectMenuItem->Disable();

            startDebuggingMenuItem->Disable();
            stopDebuggingMenuItem->Disable();
            showNextStatementMenuItem->Disable();
            stepOverMenuItem->Disable();
            stepIntoMenuItem->Disable();
            stepOutMenuItem->Disable();

            if (action == UserInterfaceAction.build)
            {
                cancelBuildToolButton->Enable();
                return;
            }

            bool solutionOpen = !solutionExplorerData.IsNull();
            if (solutionOpen)
            {
                saveAllToolButton->Enable();
                cppToolButton->Enable();
                llvmToolButton->Enable();
                cppToolButton->SetState(ToolButton.State.pressed);
                debugToolButton->Enable();
                releaseToolButton->Enable();
                debugToolButton->SetState(ToolButton.State.pressed);
                buildSolutionToolButton->Enable();
                startDebuggingToolButton->Enable();
                closeSolutionMenuItem->Enable();
                saveAllMenuItem->Enable();

                buildSolutionMenuItem->Enable();
                rebuildSolutionMenuItem->Enable();
                cleanSolutionMenuItem->Enable();

                startDebuggingMenuItem->Enable();

                if (!solution->Projects().IsEmpty())
                {
                    buildProjectToolButton->Enable();
                    buildActiveProjectMenuItem->Enable();
                    rebuildActiveProjectMenuItem->Enable();
                    cleanActiveProjectMenuItem->Enable();
                }
            }

            TabPage* selectedCodeTabPage = codeTabControl->SelectedTabPage();
            if (selectedCodeTabPage != null)
            {
                Cm.Views.CmajorEditor* editor = GetEditorByTabPage(selectedCodeTabPage);
                if (editor != null)
                {
                    if (editor->Dirty())
                    {
                        saveToolButton->Enable();
                        saveMenuItem->Enable();
                    }
                }
            }

            toolBar->Invalidate();
        }

        private SplitContainer* verticalSplitContainer;
        private SplitContainer* horizontalSplitContainer;
        private UniquePtr<Cm.Ast.Solution> solution;
        private TabControl* codeTabControl;
        private TabControl* outputTabControl;
        private LogView* outputLogView;
        private TabPage* outputTabPage;
        private ToolBar* toolBar;
        private TreeView* solutionExplorerTreeView;
        private UniquePtr<SolutionExplorerData> solutionExplorerData;
        private StatusBarItem* sourceFilePathStatusBarItem;
        private HashMap<TabPage*, Cm.Views.CmajorEditor*> editorByTabPageMap;

        private MenuItem* newProjectMenuItem;
        private MenuItem* openProjectMenuItem;
        private MenuItem* closeSolutionMenuItem;
        private MenuItem* saveMenuItem;
        private MenuItem* saveAllMenuItem;
        private MenuItem* buildSolutionMenuItem;
        private MenuItem* rebuildSolutionMenuItem;
        private MenuItem* cleanSolutionMenuItem;
        private MenuItem* buildActiveProjectMenuItem;
        private MenuItem* rebuildActiveProjectMenuItem;
        private MenuItem* cleanActiveProjectMenuItem;

        private MenuItem* startDebuggingMenuItem;
        private MenuItem* stopDebuggingMenuItem;
        private MenuItem* showNextStatementMenuItem;
        private MenuItem* stepOverMenuItem;
        private MenuItem* stepIntoMenuItem;
        private MenuItem* stepOutMenuItem;

        private ToolButton* saveToolButton;
        private ToolButton* saveAllToolButton;
        private ToolButton* llvmToolButton;
        private ToolButton* cppToolButton;
        private ToolButton* debugToolButton;
        private ToolButton* releaseToolButton;
        private ToolButton* buildSolutionToolButton;
        private ToolButton* buildProjectToolButton;
        private ToolButton* cancelBuildToolButton;
        private ToolButton* startDebuggingToolButton;
        private ToolButton* stopDebuggingToolButton;
        private ToolButton* showNextStatementToolButton;
        private ToolButton* stepOverToolButton;
        private ToolButton* stepIntoToolButton;
        private ToolButton* stepOutToolButton;

        private UniquePtr<Cm.Build.BuildService> buildService;
        private bool notificationMessageInProgress;
    }
}

int main(int argc, const char** argv)
{
    try
    {
        string filePath;
        if (argc > 1)
        {
            filePath = GetFullPath(argv[1]);
        }
        MainConfiguration.Instance().Load();
        MainWindow mainWindow(filePath);
        mainWindow.SetSmallIcon(Application.GetResourceManager().GetIcon("cmcode.small.icon"));
        int exitCode = Application.Run(mainWindow);
        return exitCode;
    }
    catch (const Exception& ex)
    {
        Application.SetLogView(null);
        Cm.Views.Bitmaps.Instance().Clear();
        MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
        LogException(ex);
        return 1;
    }
    return 0;
}
