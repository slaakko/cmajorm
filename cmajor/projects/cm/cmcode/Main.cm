// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Windows;
using System.RegularExpressions;
using System.Threading;
using Cm.Service;
using Cm.Service.Build;
using Cm.Service.Debug;
using Cm.Service.Run;
using cmcode;

namespace cmcode
{
    public nothrow string Version()
    {
        return "3.7.0";
    }

    enum UserInterfaceAction
    {
        none = 0, build = 1, debug = 2, debugging = 3, run = 4
    }

    enum BackendConfig
    {
        none = 0, llvm = 1 << 0, cpp = 1 << 1, debug = 1 << 2, release = 1 << 3
    }

    class BuildGuard
    {
        public nothrow BuildGuard(MainWindow* mainWindow_) : mainWindow(mainWindow_)
        {
            mainWindow->SaveBackendConfig();
            mainWindow->SetControlStatus(UserInterfaceAction.build);
        }
        public ~BuildGuard()
        {
            mainWindow->SetControlStatus(UserInterfaceAction.none);
            mainWindow->RestoreBackendConfig();
        }
        private MainWindow* mainWindow;
    }

    class DebugGuard
    {
        public nothrow DebugGuard(MainWindow* mainWindow_) : mainWindow(mainWindow_), startFailed(false)
        {
            mainWindow->SaveBackendConfig();
            mainWindow->SetControlStatus(UserInterfaceAction.debug);
            mainWindow->ResetDebugLocation();
            mainWindow->SetTargetStopped(false);
        }
        public nothrow void SetStartFailed()
        {
            startFailed = true;
        }
        public ~DebugGuard()
        {
            if (startFailed)
            {
                mainWindow->SetControlStatus(UserInterfaceAction.none);
            }
            else
            {
                mainWindow->SetControlStatus(UserInterfaceAction.debugging);
            }
            mainWindow->RestoreBackendConfig();
            mainWindow->SetTargetStopped(true);
        }
        private MainWindow* mainWindow;
        private bool startFailed;
    }

    class RunGuard
    {
        public nothrow RunGuard(MainWindow* mainWindow_) : mainWindow(mainWindow_)
        {
            mainWindow->SaveBackendConfig();
            mainWindow->SetControlStatus(UserInterfaceAction.run);
        }
        public ~RunGuard()
        {
            mainWindow->SetControlStatus(UserInterfaceAction.none);
            mainWindow->RestoreBackendConfig();
        }
        private MainWindow* mainWindow;
    }

    class StopDebugGuard
    {
        public nothrow StopDebugGuard(MainWindow* mainWindow_) : mainWindow(mainWindow_)
        {
            mainWindow->SaveBackendConfig();
            mainWindow->SetControlStatus(UserInterfaceAction.debug);
            mainWindow->ResetDebugLocation();
        }
        public ~StopDebugGuard()
        {
            mainWindow->SetControlStatus(UserInterfaceAction.none);
            mainWindow->RestoreBackendConfig();
        }
        private MainWindow* mainWindow;
    }

    public SourceSpan GetSourceSpan(const Location& loc)
    {
        int line = 0;
        short scol = 0;
        short ecol = 0;
        if (!loc.line.IsEmpty())
        {
            line = ParseInt(loc.line);
        }
        if (!loc.scol.IsEmpty())
        {
            scol = ParseShort(loc.scol);
        }
        if (!loc.ecol.IsEmpty())
        {
            ecol = ParseShort(loc.ecol);
        }
        SourceSpan span(line, scol, ecol);
        return span;
    }

    public string GetCmajorProjectsDirectory()
    {
        const char* cmajorRootEnv = RtGetEnvironmentVariable("CMAJOR_ROOT");
        if (cmajorRootEnv != null)
        {
            string cmajorRoot = GetFullPath(cmajorRootEnv);
            return Path.Combine(cmajorRoot, "projects");
        }
        else
        {
            return string();
        }
    }

    public string Title()
    {
        return "Cmajor Code - " + System.ToString(WinGetCurrentProcessId());
    }

    class MainWindow : Window
    {
        public MainWindow(const string& filePath) :
            base("MainWindow", WindowStyle.WS_OVERLAPPEDWINDOW, DefaultExtendedWindowStyle(), Title(), MainWindowLocation(), MainWindowSize(),
            Dock.none, Anchors.none, MainWindowWindowState()), buildService(), debugService(), stopPending(false), targetStopped(true), toolTipWindow(new ToolTip()),
            clipboardListener(Handle()), cmajorCodeFormat("cmajor.code"), pid(WinGetCurrentProcessId()), disableBuildServerToolButton(false)
        {
            UniquePtr<MenuBar> menuBarPtr(new MenuBar());
            menuBar = menuBarPtr.Get();
            menuBar->DisableMenuKey();
            UniquePtr<MenuItem> fileMenuItem(new MenuItem("&File"));
            UniquePtr<MenuItem> newProjectMenuItemPtr(new MenuItem("&New Project..."));
            newProjectMenuItem = newProjectMenuItemPtr.Get();
            newProjectMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.n));
            newProjectMenuItem->ClickEvent().AddHandler(NewProjectClick);
            fileMenuItem->AddMenuItem(newProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> openProjectMenuItemPtr(new MenuItem("&Open Project/Solution..."));
            openProjectMenuItem = openProjectMenuItemPtr.Get();
            openProjectMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.o));
            openProjectMenuItem->ClickEvent().AddHandler(OpenProjectClick);
            fileMenuItem->AddMenuItem(openProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> closeSolutionMenuItemPtr(new MenuItem("&Close Solution"));
            closeSolutionMenuItem = closeSolutionMenuItemPtr.Get();
            closeSolutionMenuItem->ClickEvent().AddHandler(CloseSolutionClick);
            fileMenuItem->AddMenuItem(closeSolutionMenuItemPtr.Release());
            fileMenuItem->AddMenuItem(new MenuItemSeparator());
            UniquePtr<MenuItem> saveMenuItemPtr(new MenuItem("&Save"));
            saveMenuItem = saveMenuItemPtr.Get();
            saveMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.s));
            saveMenuItem->ClickEvent().AddHandler(SaveClick);
            fileMenuItem->AddMenuItem(saveMenuItemPtr.Release());
            UniquePtr<MenuItem> saveAllMenuItemPtr(new MenuItem("Save A&ll"));
            saveAllMenuItem = saveAllMenuItemPtr.Get();
            saveAllMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.shiftModifier | Keys.s));
            saveAllMenuItem->ClickEvent().AddHandler(SaveAllClick);
            fileMenuItem->AddMenuItem(saveAllMenuItemPtr.Release());
            fileMenuItem->AddMenuItem(new MenuItemSeparator());
            UniquePtr<MenuItem> exitMenuItem(new MenuItem("E&xit"));
            exitMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f4));
            exitMenuItem->ClickEvent().AddHandler(ExitClick);
            fileMenuItem->AddMenuItem(exitMenuItem.Release());
            menuBar->AddMenuItem(fileMenuItem.Release());

            UniquePtr<MenuItem> editMenuItem(new MenuItem("&Edit"));
            UniquePtr<MenuItem> copyMenuItemPtr(new MenuItem("&Copy"));
            copyMenuItem = copyMenuItemPtr.Get();
            copyMenuItem->Disable();
            copyMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.c));
            copyMenuItem->ClickEvent().AddHandler(CopyClick);
            editMenuItem->AddMenuItem(copyMenuItemPtr.Release());
            UniquePtr<MenuItem> cutMenuItemPtr(new MenuItem("C&ut"));
            cutMenuItem = cutMenuItemPtr.Get();
            cutMenuItem->Disable();
            cutMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.x));
            cutMenuItem->ClickEvent().AddHandler(CutClick);
            editMenuItem->AddMenuItem(cutMenuItemPtr.Release());
            UniquePtr<MenuItem> pasteMenuItemPtr(new MenuItem("&Paste"));
            pasteMenuItem = pasteMenuItemPtr.Get();
            pasteMenuItem->Disable();
            pasteMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.v));
            pasteMenuItem->ClickEvent().AddHandler(PasteClick);
            editMenuItem->AddMenuItem(pasteMenuItemPtr.Release());
            UniquePtr<MenuItem> undoMenuItemPtr(new MenuItem("U&ndo"));
            undoMenuItem = undoMenuItemPtr.Get();
            undoMenuItem->Disable();
            undoMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.z));
            undoMenuItem->ClickEvent().AddHandler(UndoClick);
            editMenuItem->AddMenuItem(undoMenuItemPtr.Release());
            UniquePtr<MenuItem> redoMenuItemPtr(new MenuItem("&Redo"));
            redoMenuItem = redoMenuItemPtr.Get();
            redoMenuItem->Disable();
            redoMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.y));
            redoMenuItem->ClickEvent().AddHandler(RedoClick);
            editMenuItem->AddMenuItem(redoMenuItemPtr.Release());
            UniquePtr<MenuItem> gotoLineMenuItemPtr(new MenuItem("&Goto Line..."));
            gotoLineMenuItem = gotoLineMenuItemPtr.Get();
            gotoLineMenuItem->Disable();
            gotoLineMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.g));
            gotoLineMenuItem->ClickEvent().AddHandler(GotoLineClick);
            editMenuItem->AddMenuItem(gotoLineMenuItemPtr.Release());
            UniquePtr<MenuItem> searchMenuItemPtr(new MenuItem("&Search..."));
            searchMenuItem = searchMenuItemPtr.Get();
            searchMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.f));
            searchMenuItem->ClickEvent().AddHandler(SearchClick);
            searchMenuItem->Disable();
            editMenuItem->AddMenuItem(searchMenuItemPtr.Release());
            menuBar->AddMenuItem(editMenuItem.Release());

            UniquePtr<MenuItem> viewMenuItem(new MenuItem("&View"));
            UniquePtr<MenuItem> debugWindowsMenuItem(new MenuItem("&Debug Windows"));
            UniquePtr<MenuItem> callStackMenuItemPtr(new MenuItem("&Call Stack"));
            callStackMenuItemPtr->ClickEvent().AddHandler(ViewCallStackClick);
            debugWindowsMenuItem->AddMenuItem(callStackMenuItemPtr.Release());
            UniquePtr<MenuItem> localsMenuItemPtr(new MenuItem("&Locals"));
            localsMenuItemPtr->ClickEvent().AddHandler(ViewLocalsClick);
            debugWindowsMenuItem->AddMenuItem(localsMenuItemPtr.Release());
            viewMenuItem->AddMenuItem(debugWindowsMenuItem.Release());
            UniquePtr<MenuItem> errorsMenuItemPtr(new MenuItem("&Errors"));
            errorsMenuItemPtr->ClickEvent().AddHandler(ViewErrorsClick);
            viewMenuItem->AddMenuItem(errorsMenuItemPtr.Release());
            UniquePtr<MenuItem> searchResultsMenuItemPtr(new MenuItem("&Search Results"));
            searchResultsMenuItemPtr->ClickEvent().AddHandler(ViewSearchResultsClick);
            viewMenuItem->AddMenuItem(searchResultsMenuItemPtr.Release());
            UniquePtr<MenuItem> portMapMenuItemPtr(new MenuItem("&Port Map"));
            portMapMenuItemPtr->ClickEvent().AddHandler(ViewPortMapClick);
            viewMenuItem->AddMenuItem(portMapMenuItemPtr.Release());
            menuBar->AddMenuItem(viewMenuItem.Release());

            UniquePtr<MenuItem> buildMenuItem(new MenuItem("&Build"));
            UniquePtr<MenuItem> buildSolutionMenuItemPtr(new MenuItem("&Build Solution"));
            buildSolutionMenuItem = buildSolutionMenuItemPtr.Get();
            buildSolutionMenuItem->ClickEvent().AddHandler(BuildSolutionClick);
            buildSolutionMenuItem->SetShortcut(Keys.f7);
            buildMenuItem->AddMenuItem(buildSolutionMenuItemPtr.Release());
            UniquePtr<MenuItem> rebuildSolutionMenuItemPtr(new MenuItem("&Rebuild Solution"));
            rebuildSolutionMenuItem = rebuildSolutionMenuItemPtr.Get();
            rebuildSolutionMenuItem->ClickEvent().AddHandler(RebuildSolutionClick);
            rebuildSolutionMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f7));
            buildMenuItem->AddMenuItem(rebuildSolutionMenuItemPtr.Release());
            UniquePtr<MenuItem> cleanSolutionMenuItemPtr(new MenuItem("&Clean Solution"));
            cleanSolutionMenuItem = cleanSolutionMenuItemPtr.Get();
            cleanSolutionMenuItem->ClickEvent().AddHandler(CleanSolutionClick);
            buildMenuItem->AddMenuItem(cleanSolutionMenuItemPtr.Release());
            buildMenuItem->AddMenuItem(new MenuItemSeparator());
            UniquePtr<MenuItem> buildActiveProjectMenuItemPtr(new MenuItem("Build &Active Project"));
            buildActiveProjectMenuItem = buildActiveProjectMenuItemPtr.Get();
            buildActiveProjectMenuItem->ClickEvent().AddHandler(BuildActiveProjectClick);
            buildActiveProjectMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.b));
            buildMenuItem->AddMenuItem(buildActiveProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> rebuildActiveProjectMenuItemPtr(new MenuItem("Reb&uild Active Project"));
            rebuildActiveProjectMenuItem = rebuildActiveProjectMenuItemPtr.Get();
            rebuildActiveProjectMenuItem->ClickEvent().AddHandler(RebuildActiveProjectClick);
            buildMenuItem->AddMenuItem(rebuildActiveProjectMenuItemPtr.Release());
            UniquePtr<MenuItem> cleanActiveProjectMenuItemPtr(new MenuItem("C&lean Active Project"));
            cleanActiveProjectMenuItem = cleanActiveProjectMenuItemPtr.Get();
            cleanActiveProjectMenuItem->ClickEvent().AddHandler(CleanActiveProjectClick);
            buildMenuItem->AddMenuItem(cleanActiveProjectMenuItemPtr.Release());
            menuBar->AddMenuItem(buildMenuItem.Release());

            UniquePtr<MenuItem> debugMenuItem(new MenuItem("&Debug"));
            UniquePtr<MenuItem> startDebuggingMenuItemPtr(new MenuItem("&Start Debugging"));
            startDebuggingMenuItem = startDebuggingMenuItemPtr.Get();
            startDebuggingMenuItem->SetShortcut(Keys.f5);
            startDebuggingMenuItem->ClickEvent().AddHandler(StartContinueDebuggingClick);
            debugMenuItem->AddMenuItem(startDebuggingMenuItemPtr.Release());
            UniquePtr<MenuItem> startWithoutDebuggingMenuItemPtr(new MenuItem("Start &Without Debugging"));
            startWithoutDebuggingMenuItem = startWithoutDebuggingMenuItemPtr.Get();
            startWithoutDebuggingMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.f5));
            startWithoutDebuggingMenuItem->ClickEvent().AddHandler(StartWithoutDebuggingClick);
            debugMenuItem->AddMenuItem(startWithoutDebuggingMenuItemPtr.Release());
            UniquePtr<MenuItem> terminateProcessMenuItemPtr(new MenuItem("&Terminate Process"));
            terminateProcessMenuItem = terminateProcessMenuItemPtr.Get();
            terminateProcessMenuItem->ClickEvent().AddHandler(TerminateProcessClick);
            debugMenuItem->AddMenuItem(terminateProcessMenuItemPtr.Release());
            UniquePtr<MenuItem> stopDebuggingMenuItemPtr(new MenuItem("Sto&p Debugging"));
            stopDebuggingMenuItem = stopDebuggingMenuItemPtr.Get();
            stopDebuggingMenuItem->SetShortcut(cast<Keys>(Keys.shiftModifier | Keys.f5));
            stopDebuggingMenuItem->ClickEvent().AddHandler(StopDebuggingClick);
            debugMenuItem->AddMenuItem(stopDebuggingMenuItemPtr.Release());

            debugMenuItem->AddMenuItem(new MenuItemSeparator());

            UniquePtr<MenuItem> showNextStatementMenuItemPtr(new MenuItem("S&how Next Statement"));
            showNextStatementMenuItem = showNextStatementMenuItemPtr.Get();
            showNextStatementMenuItem->ClickEvent().AddHandler(ShowNextStatementClick);
            showNextStatementMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.j));
            debugMenuItem->AddMenuItem(showNextStatementMenuItemPtr.Release());
            UniquePtr<MenuItem> stepOverMenuItemPtr(new MenuItem("Step &Over"));
            stepOverMenuItem = stepOverMenuItemPtr.Get();
            stepOverMenuItem->SetShortcut(Keys.f12);
            stepOverMenuItem->ClickEvent().AddHandler(StepOverClick);
            debugMenuItem->AddMenuItem(stepOverMenuItemPtr.Release());
            UniquePtr<MenuItem> stepIntoMenuItemPtr(new MenuItem("Step &Into"));
            stepIntoMenuItem = stepIntoMenuItemPtr.Get();
            stepIntoMenuItem->SetShortcut(Keys.f11);
            stepIntoMenuItem->ClickEvent().AddHandler(StepIntoClick);
            debugMenuItem->AddMenuItem(stepIntoMenuItemPtr.Release());
            UniquePtr<MenuItem> stepOutMenuItemPtr(new MenuItem("Step Ou&t"));
            stepOutMenuItem = stepOutMenuItemPtr.Get();
            stepOutMenuItemPtr->SetShortcut(cast<Keys>(Keys.shiftModifier | Keys.f11));
            debugMenuItem->AddMenuItem(stepOutMenuItemPtr.Release());
            stepOutMenuItem->ClickEvent().AddHandler(StepOutClick);

            debugMenuItem->AddMenuItem(new MenuItemSeparator());

            UniquePtr<MenuItem> toggleBreakpointMenuItemPtr(new MenuItem("&Toggle Breakpoint"));
            toggleBreakpointMenuItem = toggleBreakpointMenuItemPtr.Get();
            toggleBreakpointMenuItem->SetShortcut(Keys.f9);
            toggleBreakpointMenuItem->ClickEvent().AddHandler(ToggleBreakpointClick);
            debugMenuItem->AddMenuItem(toggleBreakpointMenuItemPtr.Release());

            debugMenuItem->AddMenuItem(new MenuItemSeparator());
            UniquePtr<MenuItem> programArgumentsMenuItemPtr(new MenuItem("&Program Arguments..."));
            programArgumentsMenuItem = programArgumentsMenuItemPtr.Get();
            programArgumentsMenuItem->ClickEvent().AddHandler(ProgramArgumentsClick);
            debugMenuItem->AddMenuItem(programArgumentsMenuItemPtr.Release());

            menuBar->AddMenuItem(debugMenuItem.Release());

            UniquePtr<MenuItem> windowMenuItem(new MenuItem("&Window"));
            UniquePtr<MenuItem> closeAllTabsMenuItem(new MenuItem("&Close All Tabs"));
            closeAllTabsMenuItem->ClickEvent().AddHandler(CloseAllTabsClick);
            windowMenuItem->AddMenuItem(closeAllTabsMenuItem.Release());
            UniquePtr<MenuItem> closeExternalTabsMenuItem(new MenuItem("Close &External Tabs"));
            closeExternalTabsMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.w));
            closeExternalTabsMenuItem->ClickEvent().AddHandler(CloseExternalTabsClick);
            windowMenuItem->AddMenuItem(closeExternalTabsMenuItem.Release());
            menuBar->AddMenuItem(windowMenuItem.Release());
            AddChild(menuBarPtr.Release());

            UniquePtr<MenuItem> helpMenuItem(new MenuItem("&Help"));
            UniquePtr<MenuItem> homePageMenuItem(new MenuItem("&Homepage"));
            homePageMenuItem->ClickEvent().AddHandler(HelpHomepageClick);
            helpMenuItem->AddMenuItem(homePageMenuItem.Release());
            UniquePtr<MenuItem> localDocumentationMenuItem(new MenuItem("&Local Documentation"));
            localDocumentationMenuItem->ClickEvent().AddHandler(HelpLocalDocumentationClick);
            helpMenuItem->AddMenuItem(localDocumentationMenuItem.Release());
            UniquePtr<MenuItem> aboutMenuItem(new MenuItem("&About..."));
            aboutMenuItem->ClickEvent().AddHandler(HelpAboutClick);
            helpMenuItem->AddMenuItem(aboutMenuItem.Release());
            menuBar->AddMenuItem(helpMenuItem.Release());

            UniquePtr<ToolBar> toolBarPtr(new ToolBar(30, ToolButtonToolTipColor(), Color.DefaultBitmapTransparent(), ToolBar.Style.regular,
                Padding(4, 4, 4, 4), Padding(2, 0, 2, 0)));
            toolBar = toolBarPtr.Get();
            toolBar->SetTextToolButtonFont(Font(FontFamily("Segoe UI"), 9.0f));
            UniquePtr<BorderedControl> borderedToolBar(new BorderedControl(
                toolBarPtr.Release(), BorderStyle.single, ToolBarBorderColor(), ToolBarBorderColor(), Point(), toolBar->GetSize(), Dock.top, Anchors.none));

            UniquePtr<ToolButton> saveToolButtonPtr(new ToolButton("cmcode.save.bitmap"));
            saveToolButton = saveToolButtonPtr.Get();
            saveToolButton->ClickEvent().AddHandler(SaveClick);
            saveToolButton->SetToolTip("Save (Ctrl+S)");
            saveToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(saveToolButtonPtr.Release());

            UniquePtr<ToolButton> saveAllToolButtonPtr(new ToolButton("cmcode.save.all.bitmap"));
            saveAllToolButton = saveAllToolButtonPtr.Get();
            saveAllToolButton->ClickEvent().AddHandler(SaveAllClick);
            saveAllToolButton->SetToolTip("Save All (Ctrl+Shift+S)");
            saveAllToolButton->SetPadding(Padding(6, 6, 6, 6));
            toolBar->AddToolButton(saveAllToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator1(new ToolButtonSeparator());
            toolBar->AddToolButton(separator1.Release());

            Size textButtonSize(36, 12);

            UniquePtr<TextToolButton> cppToolButtonPtr(new TextToolButton("C++", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            cppToolButton = cppToolButtonPtr.Get();
            cppToolButton->SetToolTip("Compile using C++ Backend");
            cppToolButton->SetPadding(Padding(8, 8, 8, 8));
            cppToolButton->ClickEvent().AddHandler(CppButtonClick);
            toolBar->AddToolButton(cppToolButtonPtr.Release());

            UniquePtr<TextToolButton> llvmToolButtonPtr(new TextToolButton("LLVM", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            llvmToolButton = llvmToolButtonPtr.Get();
            llvmToolButton->SetToolTip("Compile using LLVM Backend");
            llvmToolButton->SetPadding(Padding(8, 8, 8, 8));
            llvmToolButton->ClickEvent().AddHandler(LLVMButtonClick);
            toolBar->AddToolButton(llvmToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator2(new ToolButtonSeparator());
            toolBar->AddToolButton(separator2.Release());

            UniquePtr<TextToolButton> debugToolButtonPtr(new TextToolButton("Debug", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            debugToolButton = debugToolButtonPtr.Get();
            debugToolButton->SetToolTip("Compile using Debug Configuration");
            debugToolButton->SetPadding(Padding(8, 8, 8, 8));
            debugToolButton->ClickEvent().AddHandler(DebugButtonClick);
            toolBar->AddToolButton(debugToolButtonPtr.Release());

            UniquePtr<TextToolButton> releaseToolButtonPtr(new TextToolButton("Release", textButtonSize, TextButtonColor(), ToolButton.Style.manual));
            releaseToolButton = releaseToolButtonPtr.Get();
            releaseToolButton->SetToolTip("Compile using Release Configuration");
            releaseToolButton->SetPadding(Padding(8, 8, 8, 8));
            releaseToolButton->ClickEvent().AddHandler(ReleaseButtonClick);
            toolBar->AddToolButton(releaseToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator3(new ToolButtonSeparator());
            toolBar->AddToolButton(separator3.Release());

            UniquePtr<ToolButton> buildSolutionToolButtonPtr(new ToolButton("cmcode.build.solution.bitmap"));
            buildSolutionToolButton = buildSolutionToolButtonPtr.Get();
            buildSolutionToolButton->ClickEvent().AddHandler(BuildSolutionClick);
            buildSolutionToolButton->SetToolTip("Build Solution (F7)");
            buildSolutionToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(buildSolutionToolButtonPtr.Release());

            UniquePtr<ToolButton> buildProjectToolButtonPtr(new ToolButton("cmcode.build.project.bitmap"));
            buildProjectToolButton = buildProjectToolButtonPtr.Get();
            buildProjectToolButton->ClickEvent().AddHandler(BuildActiveProjectClick);
            buildProjectToolButton->SetToolTip("Build Active Project (Ctrl+B)");
            buildProjectToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(buildProjectToolButtonPtr.Release());

            UniquePtr<ToolButton> stopBuildServerToolButtonPtr(new ToolButton("cmcode.cancel.build.bitmap", ToolButton.Style.manual));
            stopBuildServerToolButton = stopBuildServerToolButtonPtr.Get();
            stopBuildServerToolButton->Disable();
            stopBuildServerToolButton->ClickEvent().AddHandler(StopBuildServerClick);
            stopBuildServerToolButton->SetToolTip("Stop Build Server");
            stopBuildServerToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(stopBuildServerToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator4(new ToolButtonSeparator());
            toolBar->AddToolButton(separator4.Release());

            UniquePtr<ToolButton> startDebuggingToolButtonPtr(new ToolButton("cmcode.debug.start.bitmap"));
            startDebuggingToolButton = startDebuggingToolButtonPtr.Get();
            startDebuggingToolButton->SetToolTip("Start Debugging (F5)");
            startDebuggingToolButton->SetPadding(Padding(8, 8, 8, 8));
            startDebuggingToolButton->ClickEvent().AddHandler(StartContinueDebuggingClick);
            toolBar->AddToolButton(startDebuggingToolButtonPtr.Release());

            UniquePtr<ToolButton> stopDebuggingToolButtonPtr(new ToolButton("cmcode.debug.stop.bitmap"));
            stopDebuggingToolButton = stopDebuggingToolButtonPtr.Get();
            stopDebuggingToolButton->SetToolTip("Stop Debugging (Shift+F5)");
            stopDebuggingToolButton->SetPadding(Padding(8, 8, 8, 8));
            stopDebuggingToolButton->ClickEvent().AddHandler(StopDebuggingClick);
            toolBar->AddToolButton(stopDebuggingToolButtonPtr.Release());

            UniquePtr<ToolButtonSeparator> separator5(new ToolButtonSeparator());
            toolBar->AddToolButton(separator5.Release());

            UniquePtr<ToolButton> showNextStatementToolButtonPtr(new ToolButton("cmcode.debug.show.next.statement.bitmap"));
            showNextStatementToolButton = showNextStatementToolButtonPtr.Get();
            showNextStatementToolButton->ClickEvent().AddHandler(ShowNextStatementClick);
            showNextStatementToolButton->SetToolTip("Show Next Statement (Ctrl+J)");
            showNextStatementToolButton->SetPadding(Padding(8, 8, 8, 8));
            toolBar->AddToolButton(showNextStatementToolButtonPtr.Release());

            UniquePtr<ToolButton> stepOverToolButtonPtr(new ToolButton("cmcode.debug.step.over.bitmap"));
            stepOverToolButton = stepOverToolButtonPtr.Get();
            stepOverToolButton->SetToolTip("Step Over (F10)");
            stepOverToolButton->SetPadding(Padding(8, 8, 8, 8));
            stepOverToolButton->ClickEvent().AddHandler(StepOverClick);
            toolBar->AddToolButton(stepOverToolButtonPtr.Release());

            UniquePtr<ToolButton> stepIntoToolButtonPtr(new ToolButton("cmcode.debug.step.into.bitmap"));
            stepIntoToolButton = stepIntoToolButtonPtr.Get();
            stepIntoToolButton->SetToolTip("Step Into (F11)");
            stepIntoToolButton->SetPadding(Padding(8, 8, 8, 8));
            stepIntoToolButton->ClickEvent().AddHandler(StepIntoClick);
            toolBar->AddToolButton(stepIntoToolButtonPtr.Release());

            UniquePtr<ToolButton> stepOutToolButtonPtr(new ToolButton("cmcode.debug.step.out.bitmap"));
            stepOutToolButton = stepOutToolButtonPtr.Get();
            stepOutToolButton->SetToolTip("Step Out (F12)");
            stepOutToolButton->SetPadding(Padding(8, 8, 8, 8));
            stepOutToolButton->ClickEvent().AddHandler(StepOutClick);
            toolBar->AddToolButton(stepOutToolButtonPtr.Release());

            AddChild(borderedToolBar.Release());
            UniquePtr<SplitContainer> verticalSplitContainerPtr(new SplitContainer(Orientation.vertical, MainWindowVerticalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            verticalSplitContainer = verticalSplitContainerPtr.Get();
            verticalSplitContainer->SplitterDistanceChangedEvent().AddHandler(VerticalSplitterDistanceChanged);
            UniquePtr<SplitContainer> horizontalSplitContainerPtr(new SplitContainer(Orientation.horizontal, MainWindowHorizontalSplitterDistance(),
                Point(), Size(), Dock.fill, Anchors.none));
            horizontalSplitContainer = horizontalSplitContainerPtr.Get();
            horizontalSplitContainer->SplitterDistanceChangedEvent().AddHandler(HorizontalSplitterDistanceChanged);
            UniquePtr<TabControl> codeTabControlPtr(new TabControl(Point(), Size(), Dock.fill, Anchors.none));
            codeTabControl = codeTabControlPtr.Get();
            codeTabControl->TabPageSelectedEvent().AddHandler(CodeTabPageSelected);
            codeTabControl->ControlRemovedEvent().AddHandler(CodeTabPageRemoved);
            UniquePtr<Control> paddedTabControl(new PaddedControl(codeTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTabControl(new BorderedControl(paddedTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(), TabControlSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TreeView> solutionExplorerTreeViewPtr(new TreeView(Point(), Size(), Dock.fill, Anchors.none));
            solutionExplorerTreeView = solutionExplorerTreeViewPtr.Get();
            solutionExplorerTreeView->NodeClickEvent().AddHandler(TreeViewNodeClick);
            solutionExplorerTreeView->NodeDoubleClickEvent().AddHandler(TreeViewNodeDoubleClick);
            UniquePtr<Control> paddedTreeView(new PaddedControl(solutionExplorerTreeViewPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedTreeView(new BorderedControl(paddedTreeView.Release(), BorderStyle.single, TreeViewNormalBorderColor(), TreeViewSelectedBorderColor(),
                Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> scrollableTreeView(new ScrollableControl(borderedTreeView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            horizontalSplitContainer->Pane1Container()->AddChild(borderedTabControl.Release());
            horizontalSplitContainer->Pane2Container()->AddChild(scrollableTreeView.Release());
            verticalSplitContainer->Pane1Container()->AddChild(horizontalSplitContainerPtr.Release());
            UniquePtr<TabControl> outputTabControlPtr(new TabControl(Point(), Size(), Dock.none, Anchors.none));
            outputTabControl = outputTabControlPtr.Get();
            outputTabControl->ControlRemovedEvent().AddHandler(OutputTabControlTabPageRemoved);
            outputTabControl->TabPageSelectedEvent().AddHandler(OutputTabControlTabPageSelected);
            UniquePtr<Control> paddedOutputTabControl(new PaddedControl(outputTabControlPtr.Release(), Padding(4, 4, 4, 4), Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
            UniquePtr<Control> borderedOutputTabControl(new BorderedControl(paddedOutputTabControl.Release(), BorderStyle.single, DefaultTabControlFrameColor(),
                TabControlSelectedBorderColor(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            UniquePtr<TabPage> outputTabPagePtr(new TabPage("Output", "output"));
            outputTabPage = outputTabPagePtr.Get();
            UniquePtr<LogView> outputLogViewPtr(new LogView(Point(), Size(), Dock.none, Anchors.none));
            outputLogView = outputLogViewPtr.Get();
            UniquePtr<Control> scrollableOutputLogView(new ScrollableControl(outputLogViewPtr.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            outputTabPage->AddChild(scrollableOutputLogView.Release());
            outputTabControl->AddTabPage(outputTabPagePtr.Release());
            UniquePtr<TabPage> consoleTabPagePtr(new TabPage("Console", "console"));
            consoleTabPage = consoleTabPagePtr.Get();
            UniquePtr<Console> consolePtr(new Console(Point(), Size(), Dock.none, Anchors.none));
            console = consolePtr.Get();
            console->ConsoleInputReadyEvent().AddHandler(ConsoleInputReady);
            UniquePtr<Control> scrollableConsole(new ScrollableControl(consolePtr.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            consoleTabPage->AddChild(scrollableConsole.Release());
            outputTabControl->AddTabPage(consoleTabPagePtr.Release());
#if (DEBUG)
            UniquePtr<TabPage> logTabPagePtr(new TabPage("Log", "log"));
            logTabPage = logTabPagePtr.Get();
            UniquePtr<LogView> logView(new LogView(Point(), Size(), Dock.none, Anchors.none));
            Application.SetLogView(logView.Get());
            UniquePtr<Control> scrollableLogView(new ScrollableControl(logView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
            logTabPage->AddChild(scrollableLogView.Release());
            outputTabControl->AddTabPage(logTabPagePtr.Release());
#endif
            verticalSplitContainer->Pane2Container()->AddChild(borderedOutputTabControl.Release());
            AddChild(verticalSplitContainerPtr.Release());
            StatusBar* statusBar = new StatusBar();
            sourceFilePathStatusBarItem = new StatusBarItem("", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(sourceFilePathStatusBarItem);
            dirtyStatusBarItem = new StatusBarItem("", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(dirtyStatusBarItem);
            caretLineStatusBarItem = new StatusBarItem("", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(caretLineStatusBarItem);
            caretColumnStatusBarItem = new StatusBarItem("", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(caretColumnStatusBarItem);
            AddChild(statusBar);
            SetControlStatus(UserInterfaceAction.none);
            MainConfiguration.Instance().SetMainWindowLocation(Location());
            MainConfiguration.Instance().SetMainWindowSize(GetSize());
            SetTimer(1u, defaultConfigSaveTimerPeriod);
            outputTabPage->Select();
            if (!filePath.IsEmpty())
            {
                OpenProject(GetFullPath(filePath));
            }

            AddChild(toolTipWindow);
        }
        protected override void OnWindowClosing(bool& cancelClose)
        {
            try
            {
                if (!buildService.IsNull())
                {
                    buildService->Quit();
                    buildService.Reset();
                }
                if (!debugService.IsNull())
                {
                    debugService->Stop();
                    debugService.Reset();
                }
                CloseSolutionClick();
                Application.SetLogView(null);
                Cm.Views.Bitmaps.Instance().Clear();
                base->OnWindowClosing(cancelClose);
                MainConfiguration.Instance().Save(true);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnTimer(TimerEventArgs& args)
        {
            try
            {
                MainConfiguration.Instance().Save(false);
            }
            catch (const Exception& ex)
            {
            }
        }
        protected override void OnSizeChanged(uint windowState)
        {
            try
            {
                base->OnSizeChanged(windowState);
                if (windowState == SIZE_MAXIMIZED)
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.maximized);
                    MainConfiguration.Instance().SetMainWindowSize(GetSize());
                }
                else
                {
                    MainConfiguration.Instance().SetMainWindowWindowState(WindowState.normal);
                    MainConfiguration.Instance().SetMainWindowSize(GetSize());
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnLocationChanged()
        {
            try
            {
                base->OnLocationChanged();
/*
                if (MainConfiguration.Instance().GetMainWindowWindowState() == WindowState.normal)
                {
                    MainConfiguration.Instance().SetMainWindowLocation(Location());
                }
*/
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void OnKeyDown(KeyEventArgs& args)
        {
            try
            {
                base->OnKeyDown(args);
                if (!args.handled)
                {
                    switch (args.keyData)
                    {
                        case Keys.escape:
                        {
                            RemoveContextMenu();
                            args.handled = true;
                            break;
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        protected override void MouseUpNotification(MouseEventArgs& args)
        {
            try
            {
                if (args.buttons == MouseButtons.lbutton)
                {
                    RemoveContextMenu();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void VerticalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowVerticalSplitterDistance(verticalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void HorizontalSplitterDistanceChanged()
        {
            try
            {
                MainConfiguration.Instance().SetMainWindowHorizontalSplitterDistance(horizontalSplitContainer->SplitterDistance());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void CodeTabPageSelected()
        {
            TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
            Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
            if (editor != null)
            {
                gotoLineMenuItem->Enable();
                sourceFilePathStatusBarItem->SetText(editor->FilePath());
                editor->Select();
                TextView* textView = editor->GetTextView();
                if (textView != null)
                {
                    if (!textView->IsSelectionEmpty())
                    {
                        copyMenuItem->Enable();
                        cutMenuItem->Enable();
                    }
                    else
                    {
                        copyMenuItem->Disable();
                        cutMenuItem->Disable();
                    }
                }
            }
        }
        private void CodeTabPageRemoved(ControlEventArgs& args)
        {
            Control* removedControl = args.control;
            if (removedControl is TabPage*)
            {
                TabPage* removedTabPage = cast<TabPage*>(removedControl);
                Cm.Views.Editor* editor = GetEditorByTabPage(removedTabPage);
                if (editor != null)
                {
                    if (editor->IsDirty())
                    {
                        MessageBoxResult result = MessageBox.Show(editor->FilePath() + " is modified. Save changes?", "Question", this, MessageBoxType.MB_YESNO);
                        if (result == MessageBoxResult.yes)
                        {
                            editor->Save();
                        }
                    }
                }
                editorByTabPageMap.Remove(removedTabPage);
                if (removedTabPage == debugTabPage)
                {
                    debugTabPage = null;
                }
            }
            if (codeTabControl->TabPages().IsEmpty())
            {
                sourceFilePathStatusBarItem->SetText("");
            }
        }
        private void OutputTabControlTabPageRemoved(ControlEventArgs& args)
        {
            Control* removedControl = args.control;
            if (removedControl is TabPage*)
            {
                TabPage* removedTabPage = cast<TabPage*>(removedControl);
                if (removedTabPage == outputTabPage)
                {
                    outputTabPage = null;
                    outputLogView = null;
                }
                else if (removedTabPage == errorTabPage)
                {
                    errorTabPage = null;
                    errorView = null;
                }
                else if (removedTabPage == consoleTabPage)
                {
                    consoleTabPage = null;
                    console = null;
                }
                else if (removedTabPage == callStackTabPage)
                {
                    callStackTabPage = null;
                    callStack = null;
                }
                else if (removedTabPage == localsTabPage)
                {
                    localsTabPage = null;
                    locals = null;
                }
                else if (removedTabPage == logTabPage)
                {
                    logTabPage = null;
                    Application.SetLogView(null);
                }
                else if (removedTabPage == searchResultsTabPage)
                {
                    searchResultsTabPage = null;
                    searchResults = null;
                }
            }
        }
        private void OutputTabControlTabPageSelected()
        {
            TabPage* tabPage = outputTabControl->SelectedTabPage();
            if (tabPage == callStackTabPage)
            {
                if (Debugging() && targetStopped)
                {
                    callStack->SetDebugService(debugService.Get());
                    callStack->Invalidate();
                }
            }
            else if (tabPage == localsTabPage)
            {
                if (Debugging() && targetStopped)
                {
                    locals->SetDebugService(debugService.Get());
                    locals->Invalidate();
                }
            }
        }
        private void TreeViewNodeClick(TreeViewNodeMouseClickEventArgs& args)
        {
            try
            {
                TreeViewNode* node = args.node;
                if (args.buttons == MouseButtons.rbutton)
                {
                    TreeViewNodeData* data = cast<TreeViewNodeData*>(node->Data());
                    if (data->kind == TreeViewNodeData.Kind.solution)
                    {
                        UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                        MenuItem* addNewProjectMenuItem = new MenuItem("Add New Project...");
                        contextMenu->AddMenuItemAction(addNewProjectMenuItem, new AddNewProjectAction(this, solution.Get()));
                        MenuItem* addExistingProjectMenuItem = new MenuItem("Add Existing Project...");
                        contextMenu->AddMenuItemAction(addExistingProjectMenuItem, new AddExistingProjectAction(this, solution.Get()));
                        MenuItem* buildMenuItem = new MenuItem("Build");
                        contextMenu->AddMenuItemAction(buildMenuItem, new BuildSolutionAction(this, solution.Get()));
                        MenuItem* rebuildMenuItem = new MenuItem("Rebuild");
                        contextMenu->AddMenuItemAction(rebuildMenuItem, new RebuildSolutionAction(this, solution.Get()));
                        MenuItem* cleanMenuItem = new MenuItem("Clean");
                        contextMenu->AddMenuItemAction(cleanMenuItem, new CleanSolutionAction(this, solution.Get()));
                        MenuItem* openFileLocationMenuItem = new MenuItem("Open File Location");
                        contextMenu->AddMenuItemAction(openFileLocationMenuItem, new OpenFileLocationAction(this, solution->FilePath()));
                        if (contextMenu->HasMenuItems())
                        {
                            Point loc = args.location;
                            Point screenLoc = solutionExplorerTreeView->ClientToScreen(loc);
                            ShowContextMenu(contextMenu.Release(), screenLoc);
                        }
                    }
                    else if (data->kind == TreeViewNodeData.Kind.project)
                    {
                        Cm.Ast.Project* project = data->project;
                        UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                        if (solution->ActiveProject() != project)
                        {
                            MenuItem* setActiveMenuItem = new MenuItem("Set Active");
                            contextMenu->AddMenuItemAction(setActiveMenuItem, new SetActiveProjectAction(this, solutionExplorerTreeView, solutionExplorerData.Get(),
                                solution.Get(), project, node));
                        }
                        MenuItem* addNewSourceFileMenuItem = new MenuItem("Add New Source File...");
                        contextMenu->AddMenuItemAction(addNewSourceFileMenuItem, new AddNewSourceFileAction(this, project, node));
                        MenuItem* addExistingSourceFileMenuItem = new MenuItem("Add Existing Source File...");
                        contextMenu->AddMenuItemAction(addExistingSourceFileMenuItem, new AddExistingSourceFileAction(this, project, node));
                        MenuItem* addNewResourceFileMenuItem = new MenuItem("Add New Resource File...");
                        contextMenu->AddMenuItemAction(addNewResourceFileMenuItem, new AddNewResourceFileAction(this, project, node));
                        MenuItem* addExistingResourceFileMenuItem = new MenuItem("Add Existing Resource File...");
                        contextMenu->AddMenuItemAction(addExistingResourceFileMenuItem, new AddExistingResourceFileAction(this, project, node));
                        MenuItem* addNewTextFileMenuItem = new MenuItem("Add New Text File...");
                        contextMenu->AddMenuItemAction(addNewTextFileMenuItem, new AddNewTextFileAction(this, project, node));
                        MenuItem* addExistingTextFileMenuItem = new MenuItem("Add Existing Text File...");
                        contextMenu->AddMenuItemAction(addExistingTextFileMenuItem, new AddExistingTextFileAction(this, project, node));
                        MenuItem* referencesMenuItem = new MenuItem("References...");
                        contextMenu->AddMenuItemAction(referencesMenuItem, new ProjectReferencesAction(this, project));
                        MenuItem* buildMenuItem = new MenuItem("Build");
                        contextMenu->AddMenuItemAction(buildMenuItem, new BuildProjectAction(this, project));
                        MenuItem* rebuildMenuItem = new MenuItem("Rebuild");
                        contextMenu->AddMenuItemAction(rebuildMenuItem, new RebuildProjectAction(this, project));
                        MenuItem* cleanMenuItem = new MenuItem("Clean");
                        contextMenu->AddMenuItemAction(cleanMenuItem, new CleanProjectAction(this, project));
                        MenuItem* openFileLocationMenuItem = new MenuItem("Open File Location");
                        contextMenu->AddMenuItemAction(openFileLocationMenuItem, new OpenFileLocationAction(this, project->FilePath()));
                        MenuItem* removeMenuItem = new MenuItem("Remove");
                        contextMenu->AddMenuItemAction(removeMenuItem, new RemoveProjectAction(this, solution.Get(), project));
                        if (contextMenu->HasMenuItems())
                        {
                            Point loc = args.location;
                            Point screenLoc = solutionExplorerTreeView->ClientToScreen(loc);
                            ShowContextMenu(contextMenu.Release(), screenLoc);
                        }
                    }
                    else if (data->kind == TreeViewNodeData.Kind.file)
                    {
                        UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                        MenuItem* removeFileMenuItem = new MenuItem("Remove");
                        contextMenu->AddMenuItemAction(removeFileMenuItem, new RemoveFileAction(this, data->project, data->filePath, data->fileName, node));
                        MenuItem* openFileLocationMenuItem = new MenuItem("Open File Location");
                        contextMenu->AddMenuItemAction(openFileLocationMenuItem, new OpenFileLocationAction(this, data->filePath));
                        Point loc = args.location;
                        Point screenLoc = solutionExplorerTreeView->ClientToScreen(loc);
                        ShowContextMenu(contextMenu.Release(), screenLoc);
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void TreeViewNodeDoubleClick(TreeViewNodeMouseClickEventArgs& args)
        {
            try
            {
                TreeViewNode* node = args.node;
                TreeViewNodeData* data = cast<TreeViewNodeData*>(node->Data());
                if (data->kind == TreeViewNodeData.Kind.solution || data->kind == TreeViewNodeData.Kind.project)
                {
                    switch (node->GetState())
                    {
                        case TreeViewNode.State.collapsed: node->ExpandAll(); break;
                        case TreeViewNode.State.expanded: node->CollapseAll(); break;
                    }
                }
                else if (data->kind == TreeViewNodeData.Kind.file)
                {
                    string ext = Path.GetExtension(data->fileName);
                    if (ext == ".cm")
                    {
                        TabPage* prevTabPage = codeTabControl->GetTabPageByKey(data->key);
                        if (prevTabPage != null)
                        {
                            codeTabControl->SetSelectedTabPage(prevTabPage);
                        }
                        else
                        {
                            AddCmajorEditor(data->fileName, data->key, data->filePath);
                        }
                    }
                    else if (ext == ".xml")
                    {
                        TabPage* prevTabPage = codeTabControl->GetTabPageByKey(data->key);
                        if (prevTabPage != null)
                        {
                            codeTabControl->SetSelectedTabPage(prevTabPage);
                        }
                        else
                        {
                            AddResourceFileEditor(data->fileName, data->key, data->filePath);
                        }
                    }
                    else
                    {
                        TabPage* prevTabPage = codeTabControl->GetTabPageByKey(data->key);
                        if (prevTabPage != null)
                        {
                            codeTabControl->SetSelectedTabPage(prevTabPage);
                        }
                        else
                        {
                            AddTextFileEditor(data->fileName, data->key, data->filePath);
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
                LogException(ex);
            }
        }
        private void OpenProject(const string& filePath)
        {
            try
            {
                List<UniquePtr<ustring>> contents;
                if (!filePath.IsEmpty() && File.Exists(filePath))
                {
                    string ext = Path.GetExtension(filePath);
                    if (ext == ".cms")
                    {
                        solution = ReadSolution(filePath, contents);
                    }
                    else if (ext == ".cmp")
                    {
                        UniquePtr<Cm.Ast.Project> project = ReadProject(filePath, contents);
                        string solutionFilePath = Path.ChangeExtension(filePath, ".cms");
                        if (File.Exists(solutionFilePath))
                        {
                            solution = ReadSolution(filePath, contents);
                        }
                        else
                        {
                            solution.Reset(new Cm.Ast.Solution(project->Name(), solutionFilePath));
                            solution->SetActiveProject(project.Get());
                            solution->AddProject(Rvalue(project));
                            solution->Save();
                        }
                    }
                    else
                    {
                        throw Exception("file path '" + filePath + " has invalid extension (not .cmp or .cms)");
                    }
                }
                else
                {
                    throw Exception("file path '" + filePath + "' is empty or does not exist");
                }
                codeTabControl->CloseAllTabPages();
                UniquePtr<TreeViewNode> root = BuildSolutionTree(solution.Get(), solutionExplorerData, contents);
                solutionExplorerTreeView->SetRoot(root.Release());
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (activeProject != null)
                {
                    cmcode.settings.LoadProjectSettings(activeProject, solutionExplorerData.Get());
                }
                SetControlStatus(UserInterfaceAction.none);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void NewProjectClick()
        {
            try
            {
                NewProjectDialog dialog;
                dialog.SetLocation(GetCmajorProjectsDirectory());
                if (dialog.ShowDialog(*this) == DialogResult.ok)
                {
                    bool sameDir = dialog.PlaceInTheSameDirectory();
                    string solutionFilePath;
                    string projectFilePath;
                    if (!sameDir)
                    {
                        solutionFilePath = Path.Combine(dialog.GetLocation(), Path.Combine(dialog.GetSolutionName(), dialog.GetSolutionName() + ".cms"));
                        projectFilePath = Path.Combine(dialog.GetLocation(), Path.Combine(dialog.GetSolutionName(), Path.Combine(dialog.GetProjectName(), dialog.GetProjectName() + ".cmp")));
                        string solutionDir = Path.GetDirectoryName(solutionFilePath);
                        Directory.CreateDirectories(solutionDir);
                        string projectDir = Path.GetDirectoryName(projectFilePath);
                        Directory.CreateDirectories(projectDir);
                    }
                    else
                    {
                        projectFilePath = Path.Combine(dialog.GetLocation(), Path.Combine(dialog.GetProjectName(), dialog.GetProjectName() + ".cmp"));
                        solutionFilePath = Path.ChangeExtension(projectFilePath, ".cms");
                        string projectDir = Path.GetDirectoryName(projectFilePath);
                        Directory.CreateDirectories(projectDir);
                    }
                    UniquePtr<Cm.Ast.Solution> solution(new Cm.Ast.Solution(ToUtf32(dialog.GetSolutionName()), solutionFilePath));
                    UniquePtr<Cm.Ast.Project> project(new Cm.Ast.Project(ToUtf32(dialog.GetProjectName()), projectFilePath, "debug", Cm.Ast.BackEnd.llvm));
                    project->SetTarget(dialog.GetProjectType());
                    solution->SetActiveProject(project.Get());
                    solution->AddProject(Rvalue(project));
                    solution->Save();
                    if (!CloseSolution())
                    {
                        return;
                    }
                    OpenProject(solutionFilePath);
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void AddNewProject(Cm.Ast.Solution* solution)
        {
            try
            {
                AddNewProjectDialog dialog;
                string solutionDir = Path.GetDirectoryName(solution->FilePath());
                dialog.SetLocation(solutionDir);
                if (dialog.ShowDialog(*this) == DialogResult.ok)
                {
                    string projectFilePath = Path.Combine(dialog.GetLocation(), Path.Combine(dialog.GetProjectName(), dialog.GetProjectName() + ".cmp"));
                    string projectDir = Path.GetDirectoryName(projectFilePath);
                    Directory.CreateDirectories(projectDir);
                    UniquePtr<Cm.Ast.Project> project(new Cm.Ast.Project(ToUtf32(dialog.GetProjectName()), projectFilePath, "debug", Cm.Ast.BackEnd.llvm));
                    project->SetTarget(dialog.GetProjectType());
                    solution->AddProject(Rvalue(project));
                    solution->SortByProjectName();
                    solution->Save();
                    string solutionFilePath = solution->FilePath();
                    if (!CloseSolution())
                    {
                        return;
                    }
                    OpenProject(solutionFilePath);
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void AddExistingProject(Cm.Ast.Solution* solution)
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Project Files (*.cmp)", "*.cmp"));
                string initialDirectory = CmajorProjectDirectory();
                string filePath;
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".cmp",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    if (!fileNames.IsEmpty())
                    {
                        filePath = Path.Combine(currentDirectory, fileNames[0]);
                    }
                    List<UniquePtr<ustring>> contents;
                    UniquePtr<Cm.Ast.Project> project = ReadProject(GetFullPath(filePath), contents);
                    if (solution->HasProject(project->Name()))
                    {
                        throw Exception("solution already has a project with name '" + ToUtf8(project->Name()) + "'");
                    }
                    solution->AddProject(Rvalue(project));
                    solution->SortByProjectName();
                    solution->Save();
                    string solutionFilePath = solution->FilePath();
                    if (!CloseSolution())
                    {
                        return;
                    }
                    OpenProject(solutionFilePath);
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void RemoveProject(Cm.Ast.Solution* solution, Cm.Ast.Project* project)
        {
            try
            {
                solution->RemoveProject(project);
                solution->Save();
                string solutionFilePath = solution->FilePath();
                if (!CloseSolution())
                {
                    return;
                }
                OpenProject(solutionFilePath);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void OpenProjectClick()
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Solution Files (*.cms)", "*.cms"));
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Project Files (*.cmp)", "*.cmp"));
                string initialDirectory = CmajorProjectDirectory();
                string filePath;
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".cms",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    if (!fileNames.IsEmpty())
                    {
                        filePath = Path.Combine(currentDirectory, fileNames[0]);
                    }
                    OpenProject(GetFullPath(filePath));
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private bool CloseSolution()
        {
            try
            {
                if (solution.IsNull()) return true;
                Component* component = codeTabControl->TabPages().FirstChild();
                while (component != null)
                {
                    if (component is TabPage*)
                    {
                        TabPage* tabPage = cast<TabPage*>(component);
                        Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                        if (editor != null)
                        {
                            if (editor->IsDirty())
                            {
                                MessageBoxResult result = MessageBox.Show(editor->FilePath() + " is modified. Save changes?", "Question", this, MessageBoxType.MB_YESNOCANCEL);
                                if (result == MessageBoxResult.cancel)
                                {
                                    return false;
                                }
                                else if (result == MessageBoxResult.yes)
                                {
                                    editor->Save();
                                }
                            }
                        }
                    }
                    component = component->NextSibling();
                }
                codeTabControl->CloseAllTabPages();
                solutionExplorerTreeView->SetRoot(null);
                solutionExplorerData.Reset();
                SetControlStatus(UserInterfaceAction.none);
                gotoLineMenuItem->Disable();
                return true;
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
            return false;
        }
        private void CloseSolutionClick()
        {
            CloseSolution();
        }
        private void AddFilePathsToProject(const string& newSourceFilePath, const string& newResourceFilePath, const string& newTextFilePath, Cm.Ast.Project* project, TreeViewNode* projectNode)
        {
            projectNode->RemoveChildren();
            for (const string& sourceFilePath : project->SourceFilePaths())
            {
                TreeViewNodeData* data = solutionExplorerData->GetTreeViewNodeDataByKey(sourceFilePath);
                if (data != null)
                {
                    UniquePtr<TreeViewNode> fileNode(new TreeViewNode(data->fileName));
                    fileNode->SetData(data);
                    projectNode->AddChild(fileNode.Release());
                }
                else
                {
                    UniquePtr<TreeViewNodeData> newData(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution.Get(), project, sourceFilePath, Path.GetFileName(sourceFilePath)));
                    data = newData.Get();
                    UniquePtr<TreeViewNode> fileNode(new TreeViewNode(newData->fileName));
                    fileNode->SetData(newData.Get());
                    projectNode->AddChild(fileNode.Release());
                    solutionExplorerData->treeViewDataMap[newData->key] = newData.Get();
                    solutionExplorerData->treeViewData.Add(Rvalue(newData));
                }
                if (sourceFilePath == newSourceFilePath)
                {
                    StreamWriter writer = File.CreateText(sourceFilePath);
                    AddCmajorEditor(data->fileName, data->key, data->filePath);
                }
            }
            for (const string& resourceFilePath : project->ResourceFilePaths())
            {
                TreeViewNodeData* data = solutionExplorerData->GetTreeViewNodeDataByKey(resourceFilePath);
                if (data != null)
                {
                    UniquePtr<TreeViewNode> fileNode(new TreeViewNode(data->fileName));
                    fileNode->SetData(data);
                    projectNode->AddChild(fileNode.Release());
                }
                else
                {
                    UniquePtr<TreeViewNodeData> newData(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution.Get(), project, resourceFilePath, Path.GetFileName(resourceFilePath)));
                    data = newData.Get();
                    UniquePtr<TreeViewNode> fileNode(new TreeViewNode(newData->fileName));
                    fileNode->SetData(newData.Get());
                    projectNode->AddChild(fileNode.Release());
                    solutionExplorerData->treeViewDataMap[newData->key] = newData.Get();
                    solutionExplorerData->treeViewData.Add(Rvalue(newData));
                }
                if (resourceFilePath == newResourceFilePath)
                {
                    StreamWriter writer = File.CreateText(resourceFilePath);
                    AddResourceFileEditor(data->fileName, data->key, data->filePath);
                }
            }
            for (const string& textFilePath : project->TextFilePaths())
            {
                TreeViewNodeData* data = solutionExplorerData->GetTreeViewNodeDataByKey(textFilePath);
                if (data != null)
                {
                    UniquePtr<TreeViewNode> fileNode(new TreeViewNode(data->fileName));
                    fileNode->SetData(data);
                    projectNode->AddChild(fileNode.Release());
                }
                else
                {
                    UniquePtr<TreeViewNodeData> newData(new TreeViewNodeData(TreeViewNodeData.Kind.file, solution.Get(), project, textFilePath, Path.GetFileName(textFilePath)));
                    data = newData.Get();
                    UniquePtr<TreeViewNode> fileNode(new TreeViewNode(newData->fileName));
                    fileNode->SetData(newData.Get());
                    projectNode->AddChild(fileNode.Release());
                    solutionExplorerData->treeViewDataMap[newData->key] = newData.Get();
                    solutionExplorerData->treeViewData.Add(Rvalue(newData));
                }
                if (textFilePath == newTextFilePath)
                {
                    StreamWriter writer = File.CreateText(textFilePath);
                    AddTextFileEditor(data->fileName, data->key, data->filePath);
                }
            }
            projectNode->Expand();
            solutionExplorerTreeView->SetChanged();
            solutionExplorerTreeView->Invalidate();
        }
        internal void AddNewSourceFile(Cm.Ast.Project* project, TreeViewNode* projectNode)
        {
            try
            {
                NewSourceFileDialog dialog;
                if (dialog.ShowDialog(*this) == DialogResult.ok)
                {
                    string sourceFileName = dialog.SourceFileName();
                    if (!sourceFileName.EndsWith(".cm"))
                    {
                        sourceFileName.Append(".cm");
                    }
                    string newSourceFilePath = Path.Combine(project->SourceBasePath(), sourceFileName);
                    for (const string& sourceFilePath : project->SourceFilePaths())
                    {
                        if (sourceFilePath == newSourceFilePath)
                        {
                            throw Exception("source file '" + newSourceFilePath + "' already exists in project '" + ToUtf8(project->Name()) + "'");
                        }
                    }
                    project->AddSourceFileName(sourceFileName, newSourceFilePath);
                    project->Save();
                    AddFilePathsToProject(newSourceFilePath, "", "", project, projectNode);
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void AddExistingSourceFile(Cm.Ast.Project* project, TreeViewNode* projectNode)
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Source Files (*.cm)", "*.cm"));
                string initialDirectory = Path.GetDirectoryName(project->FilePath());
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".cm",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    if (!fileNames.IsEmpty())
                    {
                        for (const string& fileName : fileNames)
                        {
                            bool skip = false;
                            string filePath = Path.Combine(currentDirectory, fileName);
                            for (const string& sourceFilePath : project->SourceFilePaths())
                            {
                                if (sourceFilePath == filePath)
                                {
                                    skip = true;
                                    break;
                                }
                            }
                            if (!skip)
                            {
                                project->AddSourceFileName(fileName, filePath);
                                project->Save();
                                AddFilePathsToProject("", "", "", project, projectNode);
                            }
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void AddNewResourceFile(Cm.Ast.Project* project, TreeViewNode* projectNode)
        {
            try
            {
                NewResourceFileDialog dialog;
                if (dialog.ShowDialog(*this) == DialogResult.ok)
                {
                    string resourceFileName = dialog.ResourceFileName();
                    if (!resourceFileName.EndsWith(".xml"))
                    {
                        resourceFileName.Append(".xml");
                    }
                    string newResourceFilePath = Path.Combine(project->SourceBasePath(), resourceFileName);
                    for (const string& resourceFilePath : project->ResourceFilePaths())
                    {
                        if (resourceFilePath == newResourceFilePath)
                        {
                            throw Exception("resource file '" + newResourceFilePath + "' already exists in project '" + ToUtf8(project->Name()) + "'");
                        }
                    }
                    project->AddResourceFileName(resourceFileName, newResourceFilePath);
                    project->Save();
                    AddFilePathsToProject("", newResourceFilePath, "", project, projectNode);
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void AddExistingResourceFile(Cm.Ast.Project* project, TreeViewNode* projectNode)
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Resource Files (*.xml)", "*.xml"));
                string initialDirectory = Path.GetDirectoryName(project->FilePath());
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".xml",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    if (!fileNames.IsEmpty())
                    {
                        for (const string& fileName : fileNames)
                        {
                            bool skip = false;
                            string filePath = Path.Combine(currentDirectory, fileName);
                            for (const string& resourceFilePath : project->ResourceFilePaths())
                            {
                                if (resourceFilePath == filePath)
                                {
                                    skip = true;
                                    break;
                                }
                            }
                            if (!skip)
                            {
                                project->AddResourceFileName(fileName, filePath);
                                project->Save();
                                AddFilePathsToProject("", "", "", project, projectNode);
                            }
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void AddNewTextFile(Cm.Ast.Project* project, TreeViewNode* projectNode)
        {
            try
            {
                NewTextFileDialog dialog;
                if (dialog.ShowDialog(*this) == DialogResult.ok)
                {
                    string textFileName = dialog.TextFileName();
                    string newTextFilePath = Path.Combine(project->SourceBasePath(), textFileName);
                    for (const string& textFilePath : project->TextFilePaths())
                    {
                        if (textFilePath == newTextFilePath)
                        {
                            throw Exception("text file '" + newTextFilePath + "' already exists in project '" + ToUtf8(project->Name()) + "'");
                        }
                    }
                    project->AddTextFileName(textFileName, newTextFilePath);
                    project->Save();
                    AddFilePathsToProject("", "", newTextFilePath, project, projectNode);
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void AddExistingTextFile(Cm.Ast.Project* project, TreeViewNode* projectNode)
        {
            try
            {
                List<Pair<string, string>> descriptionFilterPairs;
                descriptionFilterPairs.Add(Pair<string, string>("Cmajor Resource Files (*.*)", "*.*"));
                string initialDirectory = Path.GetDirectoryName(project->FilePath());
                string currentDirectory;
                List<string> fileNames;
                string defaultFilePath;
                bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, "",
                    OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
                if (selected)
                {
                    if (!fileNames.IsEmpty())
                    {
                        for (const string& fileName : fileNames)
                        {
                            bool skip = false;
                            string filePath = Path.Combine(currentDirectory, fileName);
                            for (const string& textFilePath : project->TextFilePaths())
                            {
                                if (textFilePath == filePath)
                                {
                                    skip = true;
                                    break;
                                }
                            }
                            if (!skip)
                            {
                                project->AddTextFileName(fileName, filePath);
                                project->Save();
                                AddFilePathsToProject("", "", "", project, projectNode);
                            }
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void SetProjectReferences(Cm.Ast.Project* project)
        {
            SetProjectReferencesDialog dialog(project, solution.Get());
            if (dialog.ShowDialog(*this) == DialogResult.ok)
            {
                List<Cm.Ast.Project*> referencedProjects = dialog.GetReferencedProjects();
                project->SetReferencedProjects(referencedProjects);
                project->Save();
            }
        }
        internal void RemoveFile(Cm.Ast.Project* project, const string& filePath, const string& fileName, TreeViewNode* fileNode)
        {
            try
            {
                TabPage* tabPage = codeTabControl->GetTabPageByKey(filePath);
                if (tabPage != null)
                {
                    Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                    if (editor != null)
                    {
                        if (editor->IsDirty())
                        {
                            editor->Save();
                        }
                    }
                    tabPage->Close();
                }
                TreeViewNode* projectNode = fileNode->Parent();
                project->RemoveFile(filePath, fileName);
                project->Save();
                projectNode->RemoveChild(fileNode);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal void OpenFileLocation(const string& filePath)
        {
            try
            {
                string directoryLocation = Path.GetDirectoryName(filePath);
                long errorCode = 0;
                if (!WinShellExecute(directoryLocation.Chars(), errorCode))
                {
                    throw Exception("could not open file location '" + directoryLocation + "'");
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void LLVMButtonClick()
        {
            try
            {
                cppToolButton->SetState(ToolButton.State.normal);
                startDebuggingToolButton->Disable();
                startDebuggingMenuItem->Disable();
                stepOverToolButton->Disable();
                stepOverMenuItem->Disable();
                stepIntoToolButton->Disable();
                stepIntoMenuItem->Disable();
                toggleBreakpointMenuItem->Disable();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CppButtonClick()
        {
            try
            {
                llvmToolButton->SetState(ToolButton.State.normal);
                if (debugToolButton->GetState() == ToolButton.State.pressed)
                {
                    startDebuggingToolButton->Enable();
                    startDebuggingMenuItem->Enable();
                    stepOverToolButton->Enable();
                    stepOverMenuItem->Enable();
                    stepIntoToolButton->Enable();
                    stepIntoMenuItem->Enable();
                    toggleBreakpointMenuItem->Enable();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void DebugButtonClick()
        {
            try
            {
                releaseToolButton->SetState(ToolButton.State.normal);
                if (cppToolButton->GetState() == ToolButton.State.pressed)
                {
                    startDebuggingToolButton->Enable();
                    startDebuggingMenuItem->Enable();
                    stepOverToolButton->Enable();
                    stepOverMenuItem->Enable();
                    stepIntoToolButton->Enable();
                    stepIntoMenuItem->Enable();
                    toggleBreakpointMenuItem->Enable();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ReleaseButtonClick()
        {
            try
            {
                debugToolButton->SetState(ToolButton.State.normal);
                startDebuggingToolButton->Disable();
                startDebuggingMenuItem->Disable();
                stepOverToolButton->Disable();
                stepOverMenuItem->Disable();
                stepIntoToolButton->Disable();
                stepIntoMenuItem->Disable();
                toggleBreakpointMenuItem->Disable();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        internal string GetBackend() const
        {
            if (cppToolButton->GetState() == ToolButton.State.pressed)
            {
                return "cpp";
            }
            else if (llvmToolButton->GetState() == ToolButton.State.pressed)
            {
                return "llvm";
            }
            else
            {
                throw Exception("Either C++ or LLVM backend must be selected");
            }
        }
        internal string GetConfig() const
        {
            if (debugToolButton->GetState() == ToolButton.State.pressed)
            {
                return "debug";
            }
            else if (releaseToolButton->GetState() == ToolButton.State.pressed)
            {
                return "release";
            }
            else
            {
                throw Exception("Either Debug or Release configuration must be selected");
            }
        }
        private LogView* GetOutputLogView()
        {
            if (outputLogView == null)
            {
                UniquePtr<TabPage> outputTabPagePtr(new TabPage("Output", "output"));
                outputTabPage = outputTabPagePtr.Get();
                UniquePtr<LogView> outputLogViewPtr(new LogView(Point(), Size(), Dock.none, Anchors.none));
                outputLogView = outputLogViewPtr.Get();
                UniquePtr<Control> scrollableOutputLogView(new ScrollableControl(outputLogViewPtr.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
                outputTabPage->AddChild(scrollableOutputLogView.Release());
                outputTabControl->AddTabPage(outputTabPagePtr.Release());
            }
            return outputLogView;
        }
        private TabPage* GetOutputTabPage()
        {
            LogView* logView = GetOutputLogView();
            return outputTabPage;
        }
        private Cm.Views.ErrorView* GetErrorView()
        {
            if (errorView == null)
            {
                UniquePtr<TabPage> errorTabPagePtr(new TabPage("Errors", "errors"));
                errorTabPage = errorTabPagePtr.Get();
                UniquePtr<Cm.Views.ErrorView> errorViewPtr(new Cm.Views.ErrorView());
                errorView = errorViewPtr.Get();
                errorView->ViewErrorEvent().AddHandler(ViewError);
                errorTabPagePtr->AddChild(errorViewPtr.Release());
                outputTabControl->AddTabPage(errorTabPagePtr.Release());
            }
            return errorView;
        }
        private TabPage* GetErrorTabPage()
        {
            GetErrorView();
            return errorTabPage;
        }
        private Console* GetConsole()
        {
            if (console == null)
            {
                UniquePtr<TabPage> consoleTabPagePtr(new TabPage("Console", "console"));
                consoleTabPage = consoleTabPagePtr.Get();
                UniquePtr<Console> consolePtr(new Console(Point(), Size(), Dock.none, Anchors.none));
                console = consolePtr.Get();
                UniquePtr<Control> scrollableConsole(new ScrollableControl(consolePtr.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
                consoleTabPage->AddChild(scrollableConsole.Release());
                outputTabControl->AddTabPage(consoleTabPagePtr.Release());
            }
            return console;
        }
        private TabPage* GetConsoleTabPage()
        {
            Console* con = GetConsole();
            return consoleTabPage;
        }
        internal bool StartBuild(const BuildRequest& buildRequest)
        {
            try
            {
                SaveAllClick();
                if (errorView != null)
                {
                    errorView->Clear();
                }
                GetOutputLogView()->Clear();
                GetOutputTabPage()->Select();
                BuildGuard buildGuard(this);
                Application.ProcessMessages();
                List<CompileError> errors = GetBuildService().ProcessBuildRequest(buildRequest);
                if (!errors.IsEmpty())
                {
                    GetErrorView()->Clear();
                    GetErrorView()->SetErrors(Rvalue(errors));
                    errorTabPage->Select();
                    return false;
                }
                return true;
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
            return false;
        }
        private BuildServiceArgs MakeBuildServiceArgs()
        {
        #if (DEBUG)
            BuildServiceArgs args = BuildServiceArgs().ProgramName("cmcode").Pid(pid).Log(true).Wait(false).SaveRequestOnly(false).DebugServer(true);
        #else
            BuildServiceArgs args = BuildServiceArgs().ProgramName("cmcode").Pid(pid).Log(false).SaveRequestOnly(false).DebugServer(false);
        #endif
            return args;
        }
        private BuildService& GetBuildService()
        {
            if (buildService.IsNull())
            {
                buildService.Reset(new BuildService(MakeBuildServiceArgs()));
                buildService->SetLogMessageNotificationFunction(BuildServiceLogMessagesAvailable);
                buildService->SetProgressNotificationFunction(BuildServiceProgress);
                buildService->SetBuildServerStartNotificationFunction(BuildServerStarted);
                buildService->SetBuildServerStopNotificationFunction(BuildServerStopped);
            }
            return *buildService;
        }
        private void BuildSolutionClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), solution->FilePath(), cast<BuildRequestKind>(BuildRequestKind.build | BuildRequestKind.buildDependencies));
                StartBuild(buildRequest);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void RebuildSolutionClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), solution->FilePath(), cast<BuildRequestKind>(BuildRequestKind.rebuild | BuildRequestKind.buildDependencies));
                StartBuild(buildRequest);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CleanSolutionClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), solution->FilePath(), BuildRequestKind.clean);
                StartBuild(buildRequest);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BuildActiveProjectClick()
        {
            try
            {
                buildSucceeded = false;
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (activeProject != null)
                {
                    BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), activeProject->FilePath(),
                        cast<BuildRequestKind>(BuildRequestKind.build | BuildRequestKind.buildDependencies));
                    if (StartBuild(buildRequest))
                    {
                        buildSucceeded = true;
                    }
                }
                else
                {
                    throw Exception("no active project set for the solution");
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void RebuildActiveProjectClick()
        {
            try
            {
                if (solution.IsNull())
                {
                    throw Exception("no solution is open");
                }
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (activeProject != null)
                {
                    BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), activeProject->FilePath(),
                        cast<BuildRequestKind>(BuildRequestKind.buildDependencies | BuildRequestKind.rebuild));
                    StartBuild(buildRequest);
                }
                else
                {
                    throw Exception("no active project set for the solution");
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CleanActiveProjectClick()
        {
            try
            {
                if (solution.IsNull()) throw Exception("no solution is open");
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (activeProject != null)
                {
                    BuildRequest buildRequest = MakeBuildRequest(GetBackend(), GetConfig(), activeProject->FilePath(),
                        cast<BuildRequestKind>(BuildRequestKind.clean | BuildRequestKind.buildDependencies));
                    StartBuild(buildRequest);
                }
                else
                {
                    throw Exception("no active project set for the solution");
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void StopBuildServerClick()
        {
            try
            {
                GetBuildService().TerminateServer(true);
                stopBuildServerToolButton->SetState(ToolButton.State.normal);
            }
            catch (const Exception& ex)
            {
                stopBuildServerToolButton->SetState(ToolButton.State.normal);
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BuildServiceLogMessagesAvailable()
        {
            try
            {
                while (!GetBuildService().MessageLogEmpty())
                {
                    string logMessage = GetBuildService().FetchLogMessage();
                    if (!logMessage.IsEmpty())
                    {
                        GetOutputTabPage()->Select();
                        GetOutputLogView()->WriteLine(logMessage);
                    }
                }
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void DebugServiceLogMessagesAvailable()
        {
            try
            {
                while (!debugService->MessageLogEmpty())
                {
                    string logMessage = debugService->FetchLogMessage();
                    if (!logMessage.IsEmpty())
                    {
                        GetOutputTabPage()->Select();
                        GetOutputLogView()->WriteLine(logMessage);
                    }
                }
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void RunServiceLogMessagesAvailable()
        {
            try
            {
                while (!runService->MessageLogEmpty())
                {
                    string logMessage = runService->FetchLogMessage();
                    if (!logMessage.IsEmpty())
                    {
                        GetOutputTabPage()->Select();
                        GetOutputLogView()->WriteLine(logMessage);
                    }
                }
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BuildServiceProgress()
        {
            try
            {
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BuildServerStarted()
        {
            try
            {
                stopBuildServerToolButton->Enable();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BuildServerStopped()
        {
            try
            {
                stopBuildServerToolButton->SetState(ToolButton.State.normal);
                stopBuildServerToolButton->Disable();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SaveClick()
        {
            try
            {
                TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
                if (selectedTabPage != null)
                {
                    Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
                    if (editor != null)
                    {
                        editor->Save();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SaveAllClick()
        {
            try
            {
                if (solution.IsNull()) return;
                solution->Save();
                Cm.Ast.Project* activeProject = solution->ActiveProject();
                if (!solutionExplorerData.IsNull() && activeProject != null)
                {
                    cmcode.settings.SaveProjectSettings(activeProject, solutionExplorerData.Get());
                }
                Component* child = codeTabControl->TabPages().FirstChild();
                while (child != null)
                {
                    if (child is TabPage*)
                    {
                        TabPage* tabPage = cast<TabPage*>(child);
                        Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                        if (editor != null)
                        {
                            editor->Save();
                        }
                    }
                    child = child->NextSibling();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        protected override void OnClipboardUpdate()
        {
            try
            {
                base->OnClipboardUpdate();
                Clipboard clipboard(Handle());
                if (clipboard.IsClipboardFormatAvailable(cmajorCodeFormat))
                {
                    clipboardData = clipboard.GetStringData(cmajorCodeFormat);
                    pasteMenuItem->Enable();
                }
                else
                {
                    ClipboardFormat unicodeText(ClipboardFormat.Format.unicodeText);
                    if (clipboard.IsClipboardFormatAvailable(unicodeText))
                    {
                        clipboardData = clipboard.GetStringData(unicodeText);
                        pasteMenuItem->Enable();
                    }
                    else
                    {
                        ClipboardFormat ansiText(ClipboardFormat.Format.text);
                        if (clipboard.IsClipboardFormatAvailable(ansiText))
                        {
                            clipboardData = clipboard.GetStringData(ansiText);
                            pasteMenuItem->Enable();
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {

   }
        }
        private void CopyClick()
        {
            try
            {
                TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
                Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
                if (editor != null)
                {
                    TextView* textView = editor->GetTextView();
                    if (textView!= null)
                    {
                        SelectionData selection = textView->GetSelection();
                        if (!selection.selectedText.IsEmpty())
                        {
                            Clipboard clipboard(Handle());
                            clipboard.SetStringData(cmajorCodeFormat, selection.selectedText);
                            ustring crlfText = selection.selectedText;
                            crlfText.Replace(u"\n", u"\r\n");
                            ClipboardFormat unicodeText(ClipboardFormat.Format.unicodeText);
                            clipboard.SetStringData(unicodeText, crlfText);
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CutClick()
        {
            try
            {
                TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
                Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
                if (editor != null)
                {
                    TextView* textView = editor->GetTextView();
                    if (textView!= null)
                    {
                        SelectionData selection = textView->GetSelection();
                        if (!selection.selectedText.IsEmpty())
                        {
                            Clipboard clipboard(Handle());
                            clipboard.SetStringData(cmajorCodeFormat, selection.selectedText);
                            ustring crlfText = selection.selectedText;
                            crlfText.Replace(u"\n", u"\r\n");
                            ClipboardFormat unicodeText(ClipboardFormat.Format.unicodeText);
                            clipboard.SetStringData(unicodeText, crlfText);
                            textView->RemoveSelection();
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void PasteClick()
        {
            try
            {
                if (!clipboardData.IsEmpty())
                {
                    TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
                    Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
                    if (editor != null)
                    {
                        TextView* textView = editor->GetTextView();
                        if (textView != null)
                        {
                            int lineIndex = textView->CaretLine() - 1;
                            int columnIndex = textView->CaretColumn() - 1;
                            textView->InsertText(lineIndex, columnIndex, clipboardData);
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ExitClick()
        {
            Close();
        }
        private void CloseAllTabsClick()
        {
            try
            {
                codeTabControl->CloseAllTabPages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void CloseExternalTabsClick()
        {
            try
            {
                List<TabPage*> tabPagesToClose;
                const Container& container = codeTabControl->TabPages();
                Component* child = container.FirstChild();
                while (child != null)
                {
                    if (child is TabPage*)
                    {
                        TabPage* tabPage = cast<TabPage*>(child);
                        Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                        if (editor != null)
                        {
                            const string& filePath = editor->FilePath();
                            TreeViewNodeData* nodeData = solutionExplorerData->GetTreeViewNodeDataByKey(filePath);
                            if (nodeData == null)
                            {
                                tabPagesToClose.Add(tabPage);
                            }
                        }
                    }
                    child = child->NextSibling();
                }
                for (TabPage* tabPage : tabPagesToClose)
                {
                    tabPage->Hide();
                    tabPage->Close();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private nothrow Cm.Views.Editor* GetEditorByTabPage(TabPage* tabPage) const
        {
            HashMap<TabPage*, Cm.Views.Editor*>.ConstIterator it = editorByTabPageMap.CFind(tabPage);
            if (it != editorByTabPageMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        private Cm.Views.CmajorEditor* AddCmajorEditor(const string& fileName, const string& key, const string& filePath)
        {
            UniquePtr<TabPage> tabPage(new TabPage(fileName, key));
            UniquePtr<Cm.Views.CmajorEditor> editorPtr(new Cm.Views.CmajorEditor(filePath,
                solutionExplorerData->breakpointCollection.GetBreakpointList(filePath)));
            Cm.Views.CmajorEditor* editor = editorPtr.Get();
            Cm.Views.CmajorSourceCodeView* sourceCodeView = editor->GetSourceCodeView();
            sourceCodeView->RightClickEvent().AddHandler(SourceCodeViewRightClick);
            sourceCodeView->GotoCaretLineEvent().AddHandler(SourceCodeViewRunToCursor);
            sourceCodeView->ExpressionHoverEvent().AddHandler(ExpressionHovered);
            sourceCodeView->ExpressionExitHoverEvent().AddHandler(ExpressionExitHover);
            sourceCodeView->SelectionChangedEvent().AddHandler(EditorSelectionChanged);
            sourceCodeView->DirtyChangedEvent().AddHandler(EditorDirtyChanged);
            sourceCodeView->CopyEvent().AddHandler(CopyClick);
            sourceCodeView->CutEvent().AddHandler(CutClick);
            sourceCodeView->PasteEvent().AddHandler(PasteClick);
            sourceCodeView->SetUndoRedoMenuItems(undoMenuItem, redoMenuItem);
            sourceCodeView->CaretPosChangedEvent().AddHandler(EditorCaretPosChanged);
            gotoLineMenuItem->Enable();
            Cm.Views.DebugStrip* debugStrip = sourceCodeView->GetDebugStrip();
            debugStrip->BreakpointAddedEvent().AddHandler(BreakpointAdded);
            debugStrip->BreakpointRemovedEvent().AddHandler(BreakpointRemoved);
            editorByTabPageMap[tabPage.Get()] = editor;
            tabPage->AddChild(editorPtr.Release());
            codeTabControl->AddTabPage(tabPage.Release());
            sourceCodeView->SetFocus();
            return editor;
        }
        private void AddResourceFileEditor(const string& fileName, const string& key, const string& filePath)
        {
            UniquePtr<TabPage> tabPage(new TabPage(fileName, key));
            UniquePtr<Cm.Views.ResourceFileEditor> editorPtr(new Cm.Views.ResourceFileEditor(filePath));
            Cm.Views.ResourceFileEditor* editor = editorPtr.Get();
            TextView* textView = editor->GetTextView();
            textView->SelectionChangedEvent().AddHandler(EditorSelectionChanged);
            textView->DirtyChangedEvent().AddHandler(EditorDirtyChanged);
            textView->CopyEvent().AddHandler(CopyClick);
            textView->CutEvent().AddHandler(CutClick);
            textView->PasteEvent().AddHandler(PasteClick);
            textView->SetUndoRedoMenuItems(undoMenuItem, redoMenuItem);
            textView->CaretPosChangedEvent().AddHandler(EditorCaretPosChanged);
            gotoLineMenuItem->Enable();
            editorByTabPageMap[tabPage.Get()] = editor;
            tabPage->AddChild(editorPtr.Release());
            codeTabControl->AddTabPage(tabPage.Release());
            textView->SetFocus();
        }
        private void AddTextFileEditor(const string& fileName, const string& key, const string& filePath)
        {
            UniquePtr<TabPage> tabPage(new TabPage(fileName, key));
            UniquePtr<Cm.Views.TextFileEditor> editorPtr(new Cm.Views.TextFileEditor(filePath));
            Cm.Views.TextFileEditor* editor = editorPtr.Get();
            TextView* textView = editor->GetTextView();
            textView->SelectionChangedEvent().AddHandler(EditorSelectionChanged);
            textView->DirtyChangedEvent().AddHandler(EditorDirtyChanged);
            textView->CopyEvent().AddHandler(CopyClick);
            textView->CutEvent().AddHandler(CutClick);
            textView->PasteEvent().AddHandler(PasteClick);
            textView->SetUndoRedoMenuItems(undoMenuItem, redoMenuItem);
            textView->CaretPosChangedEvent().AddHandler(EditorCaretPosChanged);
            gotoLineMenuItem->Enable();
            editorByTabPageMap[tabPage.Get()] = editor;
            tabPage->AddChild(editorPtr.Release());
            codeTabControl->AddTabPage(tabPage.Release());
            textView->SetFocus();
        }
        private nothrow bool Debugging() const
        {
            return !debugService.IsNull();
        }
        private nothrow void ClearDebuggingWindows()
        {
            if (callStack != null)
            {
                callStack->Clear();
            }
            else if (locals != null)
            {
                locals->Clear();
            }
        }
        private void UpdateDebuggingWindows()
        {
            if (callStack != null)
            {
                callStack->SetDebugService(debugService.Get());
                callStack->Invalidate();
            }
            else if (locals != null)
            {
                locals->SetDebugService(debugService.Get());
                locals->Invalidate();
            }
        }
        private void CloseDebuggingWindows()
        {
            if (callStackTabPage != null)
            {
                callStackTabPage->Close();
            }
            else if (localsTabPage != null)
            {
                localsTabPage->Close();
            }
        }
        private DebugServiceArgs MakeDebugServiceArgs(const string& backend, const string& config, Cm.Ast.Project* project, const string& programArguments)
        {
        #if (DEBUG)
            DebugServiceArgs args = DebugServiceArgs().ProgramName("cmcode").Pid(pid).Log(true).DebugServer(true).Verbose(true).Backend(backend).Config(config).
                ProjectFilePath(project->FilePath()).ExecutableName(ToUtf8(project->Name())).Arguments(programArguments);
        #else
            DebugServiceArgs args = DebugServiceArgs().ProgramName("cmcode").Pid(pid).Log(false).DebugServer(false).Verbose(true).Backend(backend).Config(config).
                ProjectFilePath(project->FilePath()).ExecutableName(ToUtf8(project->Name())).Arguments(programArguments);
        #endif
            return args;
        }
        private void StartDebugService(const string& backend, const string& config, DebugGuard& debugGuard)
        {
            try
            {
                GetConsole()->Clear();
                GetOutputLogView()->Clear();
                if (solution != null)
                {
                    Cm.Ast.Project* project = solution->ActiveProject();
                    if (project != null)
                    {
                        Cm.Ast.Target target = project->GetTarget();
                        if (target != Cm.Ast.Target.program && target != Cm.Ast.Target.winapp && target != Cm.Ast.Target.winguiapp)
                        {
                            throw Exception("project '" + ToUtf8(project->Name()) + "' is a library project");
                        }
                        string programArguments = solutionExplorerData->ActiveProjectSettings().programArguments;
                        debugService.Reset(new DebugService(MakeDebugServiceArgs(backend, config, project, programArguments)));
                        debugService->SetLogMessageNotificationFunction(DebugServiceLogMessagesAvailable);
                        debugService->SetWriteTargetOutputMethod(WriteTargetOutput);
                        debugService->SetReadTargetInputMethod(ReadTargetInput);
                        debugService->SetSetDebugLocationMethod(SetDebugLocation);
                        debugService->SetTargetRunningMethod(TargetRunning);
                        debugService->Start(solutionExplorerData->breakpointCollection);
                        debugTabPage = codeTabControl->SelectedTabPage();
                        startDebuggingToolButton->SetToolTip("Continue (F5)");
                        startDebuggingMenuItem->SetText("Continue", menuBar);
                        Cm.Views.Editor* editor = GetEditorByTabPage(debugTabPage);
                        if (editor != null)
                        {
                            if (editor is Cm.Views.CmajorEditor*)
                            {
                                Cm.Views.CmajorEditor* cmajorEditor = cast<Cm.Views.CmajorEditor*>(editor);
                                Cm.Views.CmajorSourceCodeView* sourceCodeView = cmajorEditor->GetSourceCodeView();
                                sourceCodeView->DoGenerateExpressionHoverEvents();
                            }
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                debugGuard.SetStartFailed();
                throw;
            }
        }
        private void StartContinueDebuggingClick()
        {
            try
            {
                if (debugService.IsNull())
                {
                    BuildActiveProjectClick();
                    if (!buildSucceeded) return;
                }
                string backend = GetBackend();
                string config = GetConfig();
                {
                    DebugGuard debugGuard(this);
                    if (debugService.IsNull())
                    {
                        StartDebugService(backend, config, debugGuard);
                    }
                    if (!debugService.IsNull())
                    {
                        ClearDebuggingWindows();
                        ResetDebugLocation();
                        debugService->Continue();
                        debugTabPage = codeTabControl->SelectedTabPage();
                        UpdateDebuggingWindows();
                    }
                }
                if (!debugService.IsNull())
                {
                    if (stopPending || debugService->GetState() == Cm.Service.Debug.DebugService.State.debuggingStopped)
                    {
                        StopDebuggingClick();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
            }
        }
        private void StopDebuggingClick()
        {
            try
            {
                if (!Debugging()) return;
                stopPending = false;
                if (Application.RunningModal())
                {
                    stopPending = true;
                    GetConsole()->SetEof();
                }
                else
                {
                    StopDebugGuard debugGuard(this);
                    if (!debugService.IsNull())
                    {
                        debugService->Stop();
                        debugService.Reset();
                        CloseDebuggingWindows();
                        startDebuggingToolButton->SetToolTip("Start Debugging (F5)");
                        startDebuggingMenuItem->SetText("&Start Debugging", menuBar);
                        const Container& container = codeTabControl->TabPages();
                        Component* child = container.FirstChild();
                        while (child != null)
                        {
                            if (child is TabPage*)
                            {
                                TabPage* tabPage = cast<TabPage*>(child);
                                Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                                if (editor != null)
                                {
                                    if (editor is Cm.Views.CmajorEditor*)
                                    {
                                        Cm.Views.CmajorEditor* cmajorEditor = cast<Cm.Views.CmajorEditor*>(editor);
                                        Cm.Views.CmajorSourceCodeView* sourceCodeView = cmajorEditor->GetSourceCodeView();
                                        sourceCodeView->DontGenerateExpressionHoverEvents();
                                    }
                                }
                            }
                            child = child->NextSibling();
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private RunServiceArgs MakeRunServiceArgs(int pid, const string& executableName, const string& programArguments)
        {
            RunServiceArgs args = RunServiceArgs().Pid(pid).ExecutableName(executableName).Arguments(programArguments);
            return args;
        }
        private void StartWithoutDebuggingClick()
        {
            try
            {
                BuildActiveProjectClick();
                if (!buildSucceeded) return;
                string backend = GetBackend();
                string config = GetConfig();
                GetConsole()->Clear();
                GetOutputLogView()->Clear();
                string executableFilePath;
                if (solution != null)
                {
                    Cm.Ast.Project* project = solution->ActiveProject();
                    if (project != null)
                    {
                        Cm.Ast.Target target = project->GetTarget();
                        if (target != Cm.Ast.Target.program && target != Cm.Ast.Target.winapp && target != Cm.Ast.Target.winguiapp)
                        {
                            throw Exception("project '" + ToUtf8(project->Name()) + "' is a library project");
                        }
                        if (backend == "llvm")
                        {
                            executableFilePath = Path.Combine(Path.Combine(Path.Combine(project->OutDirBasePath(), "bin"), config), Path.GetFileName(project->FilePath()));
                        }
                        else if (backend == "cpp")
                        {
                            executableFilePath = Path.Combine(Path.Combine(Path.Combine(Path.Combine(Path.Combine(project->OutDirBasePath(), "bin"), "cpp"), "gcc"), config),
                                Path.GetFileName(project->FilePath()));
                        }
                        executableFilePath = GetFullPath(Path.ChangeExtension(executableFilePath, ".exe"));
                        if (!File.Exists(executableFilePath))
                        {
                            throw Exception("Executable '" + executableFilePath + "' not found");
                        }
                        string programArguments = solutionExplorerData->ActiveProjectSettings().programArguments;
                        RunGuard runGuard(this);
                        runService.Reset(new RunService(MakeRunServiceArgs(pid, executableFilePath, programArguments)));
                        runService->SetLogMessageNotificationFunction(RunServiceLogMessagesAvailable);
                        runService->SetWriteTargetOutputMethod(WriteTargetOutput);
                        runService->SetReadTargetInputMethod(ReadTargetInput);
                        runService->SetTargetRunningMethod(TargetRunning);
                        runService->Execute();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void TerminateProcessClick()
        {
            try
            {
                if (runService.IsNull()) return;
                if (Application.RunningModal())
                {
                    GetConsole()->SetEof();
                }
                runService->TerminateProcess();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void StepOverClick()
        {
            try
            {
                if (debugService.IsNull())
                {
                    BuildActiveProjectClick();
                    if (!buildSucceeded) return;
                }
                string backend = GetBackend();
                string config = GetConfig();
                {
                    DebugGuard debugGuard(this);
                    if (debugService.IsNull())
                    {
                        StartDebugService(backend, config, debugGuard);
                    }
                    else
                    {
                        ClearDebuggingWindows();
                        debugService->Next();
                        debugTabPage = codeTabControl->SelectedTabPage();
                        UpdateDebuggingWindows();
                    }
                }
                if (!debugService.IsNull())
                {
                    if (stopPending || debugService->GetState() == Cm.Service.Debug.DebugService.State.debuggingStopped)
                    {
                        StopDebuggingClick();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private void StepIntoClick()
        {
            try
            {
                if (debugService.IsNull())
                {
                    BuildActiveProjectClick();
                    if (!buildSucceeded) return;
                }
                string backend = GetBackend();
                string config = GetConfig();
                {
                    DebugGuard debugGuard(this);
                    if (debugService.IsNull())
                    {
                        StartDebugService(backend, config, debugGuard);
                    }
                    else
                    {
                        ClearDebuggingWindows();
                        debugService->Step();
                        debugTabPage = codeTabControl->SelectedTabPage();
                        UpdateDebuggingWindows();
                    }
                }
                if (!debugService.IsNull())
                {
                    if (stopPending || debugService->GetState() == Cm.Service.Debug.DebugService.State.debuggingStopped)
                    {
                        StopDebuggingClick();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private void StepOutClick()
        {
            try
            {
                {
                    DebugGuard debugGuard(this);
                    if (!debugService.IsNull())
                    {
                        ClearDebuggingWindows();
                        debugService->Finish();
                        debugTabPage = codeTabControl->SelectedTabPage();
                        UpdateDebuggingWindows();
                    }
                }
                if (!debugService.IsNull())
                {
                    if (stopPending || debugService->GetState() == Cm.Service.Debug.DebugService.State.debuggingStopped)
                    {
                        StopDebuggingClick();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private void UndoClick()
        {
            try
            {
                TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
                Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
                if (editor != null)
                {
                    editor->Undo();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void RedoClick()
        {
            try
            {
                TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
                Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
                if (editor != null)
                {
                    editor->Redo();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void GotoLineClick()
        {
            try
            {
                TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
                if (selectedTabPage != null)
                {
                    Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
                    if (editor != null)
                    {
                        TextView* textView = editor->GetTextView();
                        if (textView != null)
                        {
                            GotoLineNumberDialog dialog;
                            if (dialog.ShowDialog(*this) == DialogResult.ok)
                            {
                                int lineNumber = dialog.LineNumber();
                                textView->SetCaretLineCol(Min(lineNumber, cast<int>(textView->Lines().Count())), 1 + textView->LineNumberFieldLength());
                                textView->ScrollToCaret();
                                textView->SetFocus();
                                textView->Invalidate();
                            }
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SearchClick()
        {
            try
            {
                if (solution.IsNull()) return;
                bool hasCurrentFile = false;
                TabPage* tabPage = codeTabControl->SelectedTabPage();
                Cm.Views.Editor* editor = null;
                if (tabPage != null)
                {
                    editor = GetEditorByTabPage(tabPage);
                    if (editor != null)
                    {
                        hasCurrentFile = true;
                    }
                }
                SearchDialog dialog(hasCurrentFile);
                if (dialog.ShowDialog(*this) == DialogResult.ok)
                {
                    List<string> files;
                    switch (dialog.GetSearchExtent())
                    {
                        case SearchExtent.currentFile:
                        {
                            files.Add(editor->FilePath());
                            Search(SearchExtent.currentFile, files, editor->GetTextView()->Lines(), dialog.SeachText(), dialog.WholeWords(), dialog.CaseInsensitive(), dialog.RegularExpression());
                            break;
                        }
                        case SearchExtent.activeProject:
                        {
                            Cm.Ast.Project* activeProject = solution->ActiveProject();
                            files = activeProject->SourceFilePaths();
                            Search(SearchExtent.activeProject, files, List<ustring>(), dialog.SeachText(), dialog.WholeWords(), dialog.CaseInsensitive(), dialog.RegularExpression());
                            break;
                        }
                        case SearchExtent.entireSolution:
                        {
                            for (const UniquePtr<Cm.Ast.Project>& project : solution->Projects())
                            {
                                for (const string& filePath : project->SourceFilePaths())
                                {
                                    files.Add(filePath);
                                }
                            }
                            Search(SearchExtent.entireSolution, files, List<ustring>(), dialog.SeachText(), dialog.WholeWords(), dialog.CaseInsensitive(), dialog.RegularExpression());
                            break;
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void Search(SearchExtent extent, const List<string>& files, const List<ustring>& lines, const string& searchText, bool wholeWords, bool caseInsensitive, bool regularExpression)
        {
            Cm.Views.SearchResults* searchResults = GetSearchResults();
            searchResults->Clear();
            ustring text = ToUtf32(searchText);
            if (caseInsensitive)
            {
                text = ToLower(text);
            }
            Nfa* re = null;
            Context context;
            Nfa nfa;
            if (regularExpression)
            {
                nfa = CompileRegularExpressionPattern(context, u".*(" + text + u").*");
                re = &nfa;
            }
            for (const string& fileName : files)
            {
                List<ustring> readLines;
                List<ustring>* lns = &readLines;
                if (extent == SearchExtent.currentFile)
                {
                    lns = &lines;
                }
                else
                {
                    List<string> utf8Lines = File.ReadAllLines(fileName);
                    for (const string& utf8Line : utf8Lines)
                    {
                        readLines.Add(ToUtf32(utf8Line));
                    }
                }
                long n = lns->Count();
                for (long i = 0; i < n; ++i)
                {
                    ustring* line = &(*lns)[i];
                    ustring lowerLine;
                    if (caseInsensitive)
                    {
                        lowerLine = ToLower(*line);
                        line = &lowerLine;
                    }
                    if (Search(*line, text, wholeWords, re))
                    {
                        searchResults->Add(new Cm.Views.SearchResult(fileName, i + 1, ToUtf8((*lns)[i])));
                    }
                }
            }
            searchResults->Invalidate();
        }
        private bool Search(const ustring& line, const ustring& text, bool wholeWords, Nfa* re)
        {
            if (re != null)
            {
                return Match(*re, line);
            }
            else
            {
                long pos = line.Find(text);
                while (pos != -1)
                {
                    bool match = true;
                    if (wholeWords)
                    {
                        if (pos > 0)
                        {
                            uchar prev = line[pos - 1];
                            if (IsAlphabetic(prev) || IsNumber(prev))
                            {
                                match = false;
                            }
                        }
                        if (pos + text.Length() < line.Length())
                        {
                            uchar next = line[pos + text.Length()];
                            if (IsAlphabetic(next) || IsNumber(next))
                            {
                                match = false;
                            }
                        }
                    }
                    if (match)
                    {
                        return true;
                    }
                    pos = line.Find(text, pos + 1);
                }
            }
            return false;
        }
        private void ToggleBreakpointClick()
        {
            try
            {
                TabPage* tabPage = codeTabControl->SelectedTabPage();
                if (tabPage != null)
                {
                    Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                    if (editor != null)
                    {
                        if (editor is Cm.Views.CmajorEditor*)
                        {
                            Cm.Views.CmajorEditor* cmajorEditor = cast<Cm.Views.CmajorEditor*>(editor);
                            Cm.Views.CmajorSourceCodeView* sourceCodeView = cmajorEditor->GetSourceCodeView();
                            if (sourceCodeView != null)
                            {
                                sourceCodeView->ToggleBreakpoint();
                            }
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private void ProgramArgumentsClick()
        {
            try
            {
                ProgramArgumentsDialog dialogWindow;
                dialogWindow.SetProgramArguments(solutionExplorerData->ActiveProjectSettings().programArguments);
                if (dialogWindow.ShowDialog(*this)  == DialogResult.ok)
                {
                    solutionExplorerData->ActiveProjectSettings().programArguments = dialogWindow.ProgramArguments();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private Cm.Views.CallStack* GetCallStack()
        {
            if (callStack == null)
            {
                UniquePtr<TabPage> callStackTabPagePtr(new TabPage("Call Stack", "callStack"));
                callStackTabPage = callStackTabPagePtr.Get();
                UniquePtr<Cm.Views.CallStack> callStackPtr(new Cm.Views.CallStack());
                callStack = callStackPtr.Get();
                callStack->UpdateCallStackEvent().AddHandler(UpdateCallStack);
                callStack->FrameSelectedEvent().AddHandler(CallStackFrameSelected);
                callStackTabPage->AddChild(callStackPtr.Release());
                outputTabControl->AddTabPage(callStackTabPagePtr.Release());
            }
            return callStack;
        }
        private TabPage* GetCallStackTabPage()
        {
            if (callStack == null)
            {
                GetCallStack();
            }
            return callStackTabPage;
        }
        private void UpdateCallStack(Cm.Views.UpdateCallStackEventArgs& args)
        {
            args.debugging = Debugging();
            args.targetStopped = targetStopped;
        }
        private void CallStackFrameSelected(Cm.Views.FrameSelectedEventArgs& args)
        {
            Cm.Service.Debug.Location* frame = args.frame;
            selectedFrameLocation = *frame;
            SetDebugLocation(selectedFrameLocation, false);
        }
        private void ViewCallStackClick()
        {
            try
            {
                TabPage* callStackTabPage = GetCallStackTabPage();
                callStackTabPage->Select();
                if (callStack != null)
                {
                    if (Debugging() && targetStopped)
                    {
                        callStack->SetDebugService(debugService.Get());
                        callStack->Invalidate();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private Cm.Views.Locals* GetLocals()
        {
            if (locals == null)
            {
                UniquePtr<TabPage> localsTabPagePtr(new TabPage("Locals", "locals"));
                localsTabPage = localsTabPagePtr.Get();
                UniquePtr<Cm.Views.Locals> localsPtr(new Cm.Views.Locals());
                locals = localsPtr.Get();
                locals->UpdateLocalsEvent().AddHandler(UpdateLocals);
                localsTabPage->AddChild(localsPtr.Release());
                outputTabControl->AddTabPage(localsTabPagePtr.Release());
            }
            return locals;
        }
        private TabPage* GetLocalsTabPage()
        {
            if (locals == null)
            {
                GetLocals();
            }
            return localsTabPage;
        }
        private Cm.Views.SearchResults* GetSearchResults()
        {
            if (searchResults == null)
            {
                UniquePtr<TabPage> searchResultsTabPagePtr(new TabPage("Search Results", "searchResults"));
                searchResultsTabPage = searchResultsTabPagePtr.Get();
                UniquePtr<Cm.Views.SearchResults> searchResultsPtr(new Cm.Views.SearchResults());
                searchResults = searchResultsPtr.Get();
                searchResults->ViewSearchResultEvent().AddHandler(ViewSearchResult);
                searchResultsTabPage->AddChild(searchResultsPtr.Release());
                outputTabControl->AddTabPage(searchResultsTabPagePtr.Release());
            }
            searchResultsTabPage->Select();
            return searchResults;
        }
        private TabPage* GetSearchResultsTabPage()
        {
            if (searchResults == null)
            {
                GetSearchResults();
            }
            return searchResultsTabPage;
        }
        private void UpdateLocals(Cm.Views.UpdateLocalsEventArgs& args)
        {
            args.debugging = Debugging();
            args.targetStopped = targetStopped;
            args.debugService = debugService.Get();
        }
        private void ViewLocalsClick()
        {
            try
            {
                TabPage* localsTabPage = GetLocalsTabPage();
                localsTabPage->Select();
                if (locals != null)
                {
                    if (Debugging() && targetStopped)
                    {
                        locals->SetDebugService(debugService.Get());
                        locals->Invalidate();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                debugService.Reset();
            }
        }
        private void ViewSearchResultsClick()
        {
            try
            {
                TabPage* searchResultsTabPage = GetSearchResultsTabPage();
                searchResultsTabPage->Select();
                if (searchResults != null)
                {
                    searchResults->Invalidate();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ViewPortMapClick()
        {
            try
            {
                Process* viewPortMap = new Process("cmpmm", Process.Redirections());
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message());
            }
        }
        private void ViewSearchResult(Cm.Views.ViewSearchResultEventArgs& args)
        {
            try
            {
                Cm.Views.SearchResult* searchResult = args.searchResult;
                if (searchResult != null)
                {
                    TabPage* tabPage = codeTabControl->GetTabPageByKey(searchResult->fileName);
                    Cm.Views.Editor* editor = null;
                    if (tabPage != null)
                    {
                        editor = GetEditorByTabPage(tabPage);
                        tabPage->Select();
                    }
                    if (editor == null)
                    {
                        HashMap<string, TreeViewNodeData*>.ConstIterator it = solutionExplorerData->treeViewDataMap.CFind(searchResult->fileName);
                        if (it != solutionExplorerData->treeViewDataMap.CEnd())
                        {
                            TreeViewNodeData* data = it->second;
                            editor = AddCmajorEditor(data->fileName, data->key, data->filePath);
                        }
                        else
                        {
                            editor = AddCmajorEditor(Path.GetFileName(searchResult->fileName), searchResult->fileName, searchResult->fileName);
                        }
                    }
                    TextView* textView = editor->GetTextView();
                    if (textView != null)
                    {
                        textView->EnsureLineVisible(cast<int>(searchResult->lineNumber));
                        textView->SetCaretLineCol(Min(cast<int>(searchResult->lineNumber), cast<int>(textView->Lines().Count())), 1 + textView->LineNumberFieldLength());
                        textView->ScrollToCaret();
                        textView->SetFocus();
                        textView->Invalidate();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ViewErrorsClick()
        {
            try
            {
                TabPage* errorTabPage = GetErrorTabPage();
                errorTabPage->Select();
                if (errorView != null)
                {
                    errorView->Invalidate();
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ViewError(Cm.Views.ViewErrorEventArgs& args)
        {
            try
            {
                Cm.Service.Build.CompileError* error = args.error;
                if (error != null)
                {
                    TabPage* tabPage = codeTabControl->GetTabPageByKey(error->file);
                    Cm.Views.Editor* editor = null;
                    if (tabPage != null)
                    {
                        editor = GetEditorByTabPage(tabPage);
                        tabPage->Select();
                    }
                    if (editor == null)
                    {
                        HashMap<string, TreeViewNodeData*>.ConstIterator it = solutionExplorerData->treeViewDataMap.CFind(error->file);
                        if (it != solutionExplorerData->treeViewDataMap.CEnd())
                        {
                            TreeViewNodeData* data = it->second;
                            editor = AddCmajorEditor(data->fileName, data->key, data->filePath);
                        }
                        else
                        {
                            editor = AddCmajorEditor(Path.GetFileName(error->file), error->file, error->file);
                        }
                    }
                    TextView* textView = editor->GetTextView();
                    if (textView != null)
                    {
                        int line = ParseInt(error->line);
                        int scol = ParseInt(error->scol);
                        int ecol = ParseInt(error->ecol);
                        textView->EnsureLineVisible(line);
                        textView->SetCaretLineCol(Min(line, cast<int>(textView->Lines().Count())), 1 + textView->LineNumberFieldLength());
                        textView->ScrollToCaret();
                        textView->SetFocus();
                        textView->Invalidate();
                        if (scol != 0 && ecol != 0 && scol != ecol)
                        {
                            textView->ResetSelection();
                            SourcePos start(line, scol);
                            SourcePos end(line, ecol);
                            textView->ExtendSelection(start, end);
                        }
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void BreakpointAdded(Cm.Views.AddBreakpointEventArgs& args)
        {
            if (!Debugging())
            {
                args.breakpoint->info.success = true;
                return;
            }
            debugService->Break(args.filePath, args.breakpoint);
        }
        private void BreakpointRemoved(Cm.Views.RemoveBreakpointEventArgs& args)
        {
            if (!Debugging())
            {
                return;
            }
            if (!args.breakpointId.IsEmpty())
            {
                debugService->Delete(args.breakpointId);
            }
        }
        private void HelpHomepageClick()
        {
            try
            {
                long errorCode = 0;
                WinShellExecute("http://slaakko.github.io/cmajor/", errorCode);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void HelpLocalDocumentationClick()
        {
            try
            {
                string cmajorRootDir = CmajorRootDir();
                string indexFilePath = Path.Combine(cmajorRootDir, "doc/index.html");
                long errorCode = 0;
                WinShellExecute(indexFilePath.Chars(), errorCode);
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void HelpAboutClick()
        {
            MessageBox.Show("Cmajor Code version " + Version(), "Info", null, MessageBoxType.MB_OK);
        }
        private void SourceCodeViewRightClick(RightClickEventArgs& args)
        {
            try
            {
                Control* control = args.control;
                if (control is Cm.Views.CmajorSourceCodeView*)
                {
                    Cm.Views.CmajorSourceCodeView* sourceCodeView = cast<Cm.Views.CmajorSourceCodeView*>(control);
                    UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                    if (Debugging())
                    {
                        MenuItem* runToCursorMenuItem = new MenuItem("Run To Cursor");
                        contextMenu->AddMenuItemAction(runToCursorMenuItem, new RunToCursorAction(this, sourceCodeView));
                        runToCursorMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.k));
                    }
                    if (contextMenu->HasMenuItems())
                    {
                        Point loc = args.location;
                        sourceCodeView->TranslateContentLocation(loc);
                        Point screenLoc = sourceCodeView->ClientToScreen(loc);
                        ShowContextMenu(contextMenu.Release(), screenLoc);
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void SourceCodeViewRunToCursor(ControlEventArgs& args)
        {
            try
            {
                Control* control = args.control;
                if (control is Cm.Views.CmajorSourceCodeView*)
                {
                    Cm.Views.CmajorSourceCodeView* sourceCodeView = cast<Cm.Views.CmajorSourceCodeView*>(control);
                    RunToCursor(sourceCodeView);
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        public void RunToCursor(Cm.Views.CmajorSourceCodeView* sourceCodeView)
        {
            try
            {
                if (!Debugging())
                {
                    return;
                }
                {
                    DebugGuard debugGuard(this);
                    Cm.Views.CmajorEditor* editor = sourceCodeView->GetEditor();
                    if (editor != null)
                    {
                        ClearDebuggingWindows();
                        debugService->Until(editor->FilePath(), sourceCodeView->CaretLine());
                        debugTabPage = codeTabControl->SelectedTabPage();
                        UpdateDebuggingWindows();
                    }
                }
                if (!debugService.IsNull())
                {
                    if (stopPending || debugService->GetState() == Cm.Service.Debug.DebugService.State.debuggingStopped)
                    {
                        StopDebuggingClick();
                    }
                }
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ExpressionHovered(Cm.Views.ExpressionHoverEventArgs& args)
        {
            if (Debugging() && targetStopped)
            {
                if (debugService->GetState() == Cm.Service.Debug.DebugService.State.requestInProgress)
                {
                    return;
                }
                toolTipWindow->Hide();
                Point loc = args.location;
                string expression = ToUtf8(args.expression);
                Pair<string, bool> valueSuccess = debugService->Evaluate(expression);
                if (valueSuccess.second)
                {
                    toolTipWindow->SetText(expression + " = " + valueSuccess.first);
                    toolTipWindow->MeasureExtent();
                    Size size = toolTipWindow->GetSize();
                    Point pt(loc.x, loc.y + size.h);
                    args.view->TranslateContentLocation(pt);
                    pt = args.view->ClientToScreen(pt);
                    pt = ScreenToClient(pt);
                    toolTipWindow->SetLocation(pt);
                    toolTipWindow->BringToFront();
                    toolTipWindow->Show();
                    toolTipWindow->Invalidate();
                    toolTipWindow->Update();
                }
            }
        }
        private void ExpressionExitHover()
        {
            toolTipWindow->Hide();
        }
        private void EditorSelectionChanged()
        {
            TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
            Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
            if (editor != null)
            {
                TextView* textView = editor->GetTextView();
                if (textView!= null)
                {
                    if (textView->IsSelectionEmpty())
                    {
                        copyMenuItem->Disable();
                        cutMenuItem->Disable();
                    }
                    else
                    {
                        copyMenuItem->Enable();
                        cutMenuItem->Enable();
                    }
                }
            }
        }
        private void EditorDirtyChanged()
        {
            TabPage* selectedTabPage = codeTabControl->SelectedTabPage();
            Cm.Views.Editor* editor = GetEditorByTabPage(selectedTabPage);
            if (editor != null)
            {
                if (editor->IsDirty())
                {
                    saveToolButton->Enable();
                    saveMenuItem->Enable();
                    dirtyStatusBarItem->SetText("*");
                }
                else
                {
                    saveToolButton->Disable();
                    saveMenuItem->Disable();
                    dirtyStatusBarItem->SetText("");
                }
            }
        }
        private void ReadTargetInput(string& inputLine, bool& eof)
        {
            inputLine.Clear();
            eof = false;
            GetConsoleTabPage()->Select();
            Console* console = GetConsole();
            console->SetFocus();
            console->StartReadLine();
            Application.RunModal();
            inputLine = ToUtf8(console->InputLine());
            eof = console->Eof();
        }
        private void ConsoleInputReady()
        {
            Application.EndModal();
        }
        private void WriteTargetOutput(int handle, const string& targetOutput)
        {
            try
            {
                GetConsoleTabPage()->Select();
                GetConsole()->Write(handle, targetOutput);
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        private void ShowNextStatementClick()
        {
            Cm.Service.Debug.Location loc = latestDebugLocation;
            SetDebugLocation(loc, false);
        }
        private void SetDebugLocation(const Cm.Service.Debug.Location& location, bool saveLatest)
        {
            try
            {
                string filePath = location.file;
                if (filePath.IsEmpty())
                {
                    return;
                }
                if (saveLatest)
                {
                    if (latestDebugLocation != location)
                    {
                        latestDebugLocation = location;
                    }
                }
                TabPage* tabPage = codeTabControl->GetTabPageByKey(filePath);
                Cm.Views.CmajorEditor* cmajorEditor = null;
                if (tabPage != null)
                {
                    Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                    if (editor is Cm.Views.CmajorEditor*)
                    {
                        cmajorEditor = cast<Cm.Views.CmajorEditor*>(editor);
                    }
                    tabPage->Select();
                }
                if (cmajorEditor == null)
                {
                    HashMap<string, TreeViewNodeData*>.ConstIterator it = solutionExplorerData->treeViewDataMap.CFind(filePath);
                    if (it != solutionExplorerData->treeViewDataMap.CEnd())
                    {
                        TreeViewNodeData* data = it->second;
                        cmajorEditor = AddCmajorEditor(data->fileName, data->key, data->filePath);
                    }
                    else
                    {
                        cmajorEditor = AddCmajorEditor(Path.GetFileName(filePath), filePath, filePath);
                    }
                }
                SourceSpan debugLocation = GetSourceSpan(location);
                if (cmajorEditor != null && !debugLocation.IsEmpty())
                {
                    Cm.Views.CmajorSourceCodeView* sourceCodeView = cmajorEditor->GetSourceCodeView();
                    if (sourceCodeView != null)
                    {
                        Cm.Views.DebugStrip* debugStrip = sourceCodeView->GetDebugStrip();
                        if (debugStrip != null)
                        {
                            debugStrip->SetDebugLocation(debugLocation);
                            debugStrip->Invalidate();
                        }
                        sourceCodeView->EnsureLineVisible(debugLocation.line);
                        sourceCodeView->SetCaretLineCol(debugLocation.line, 1);
                        sourceCodeView->DoGenerateExpressionHoverEvents();
                    }
                }
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        public void ResetDebugLocation()
        {
            if (debugTabPage != null)
            {
                Cm.Views.Editor* editor = GetEditorByTabPage(debugTabPage);
                if (editor != null)
                {
                    if (editor is Cm.Views.CmajorEditor*)
                    {
                        Cm.Views.CmajorEditor* cmajorEditor = cast<Cm.Views.CmajorEditor*>(editor);
                        Cm.Views.CmajorSourceCodeView* sourceCodeView = cmajorEditor->GetSourceCodeView();
                        if (sourceCodeView != null)
                        {
                            Cm.Views.DebugStrip* debugStrip = sourceCodeView->GetDebugStrip();
                            if (debugStrip != null)
                            {
                                debugStrip->ResetDebugLocation();
                                editor->Invalidate();
                                debugStrip->Invalidate();
                            }
                        }
                    }
                }
            }
        }
        private void EditorCaretPosChanged()
        {
            TabPage* tabPage = codeTabControl->SelectedTabPage();
            if (tabPage != null)
            {
                Cm.Views.Editor* editor = GetEditorByTabPage(tabPage);
                if (editor != null)
                {
                    TextView* textView = editor->GetTextView();
                    if (textView != null)
                    {
                        int caretLine = textView->CaretLine();
                        int caretCol = textView->CaretColumn();
                        caretLineStatusBarItem->SetText(ToString(caretLine));
                        caretColumnStatusBarItem->SetText(ToString(caretCol));
                    }
                }
            }
        }
        private void TargetRunning()
        {
            try
            {
                Application.ProcessMessages();
            }
            catch (const Exception& ex)
            {
                MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
                LogException(ex);
            }
        }
        public nothrow void SetTargetStopped(bool targetStopped_)
        {
            targetStopped = targetStopped_;
        }
        internal void SaveBackendConfig()
        {
            backendConfig = BackendConfig.none;
            if (cppToolButton->GetState() == ToolButton.State.pressed)
            {
                backendConfig = cast<BackendConfig>(backendConfig | BackendConfig.cpp);
            }
            if (llvmToolButton->GetState() == ToolButton.State.pressed)
            {
                backendConfig = cast<BackendConfig>(backendConfig | BackendConfig.llvm);
            }
            if (debugToolButton->GetState() == ToolButton.State.pressed)
            {
                backendConfig = cast<BackendConfig>(backendConfig | BackendConfig.debug);
            }
            if (releaseToolButton->GetState() == ToolButton.State.pressed)
            {
                backendConfig = cast<BackendConfig>(backendConfig | BackendConfig.release);
            }
        }

        internal void RestoreBackendConfig()
        {
            cppToolButton->SetState(ToolButton.State.normal);
            llvmToolButton->SetState(ToolButton.State.normal);
            debugToolButton->SetState(ToolButton.State.normal);
            releaseToolButton->SetState(ToolButton.State.normal);
            if ((backendConfig & BackendConfig.cpp) != BackendConfig.none)
            {
                cppToolButton->SetState(ToolButton.State.pressed);
            }
            if ((backendConfig & BackendConfig.llvm) != BackendConfig.none)
            {
                llvmToolButton->SetState(ToolButton.State.pressed);
            }
            if ((backendConfig & BackendConfig.debug) != BackendConfig.none)
            {
                debugToolButton->SetState(ToolButton.State.pressed);
            }
            if ((backendConfig & BackendConfig.release) != BackendConfig.none)
            {
                releaseToolButton->SetState(ToolButton.State.pressed);
            }
            if (GetBackend() == "cpp" && GetConfig() == "debug")
            {
                startDebuggingToolButton->Enable();
                stepOverToolButton->Enable();
                stepIntoToolButton->Enable();
                startDebuggingMenuItem->Enable();
                stepOverMenuItem->Enable();
                stepIntoMenuItem->Enable();
            }
            else
            {
                startDebuggingToolButton->Disable();
                stepOverToolButton->Disable();
                stepIntoToolButton->Disable();
                startDebuggingMenuItem->Disable();
                stepOverMenuItem->Disable();
                stepIntoMenuItem->Disable();
            }
        }

        internal void SetControlStatus(UserInterfaceAction action)
        {
            saveToolButton->Disable();
            saveAllToolButton->Disable();
            searchMenuItem->Disable();
            cppToolButton->Disable();
            cppToolButton->SetState(ToolButton.State.disabled);
            llvmToolButton->Disable();
            llvmToolButton->SetState(ToolButton.State.disabled);
            debugToolButton->Disable();
            debugToolButton->SetState(ToolButton.State.disabled);
            releaseToolButton->Disable();
            releaseToolButton->SetState(ToolButton.State.disabled);
            buildSolutionToolButton->Disable();
            buildProjectToolButton->Disable();
            startDebuggingToolButton->Disable();
            stopDebuggingToolButton->Disable();
            showNextStatementToolButton->Disable();
            stepOverToolButton->Disable();
            stepIntoToolButton->Disable();
            stepOutToolButton->Disable();
            programArgumentsMenuItem->Disable();

            closeSolutionMenuItem->Disable();
            buildSolutionMenuItem->Disable();
            rebuildSolutionMenuItem->Disable();
            cleanSolutionMenuItem->Disable();
            buildActiveProjectMenuItem->Disable();
            rebuildActiveProjectMenuItem->Disable();
            cleanActiveProjectMenuItem->Disable();

            startDebuggingMenuItem->Disable();
            stopDebuggingMenuItem->Disable();
            startWithoutDebuggingMenuItem->Disable();
            terminateProcessMenuItem->Disable();
            showNextStatementMenuItem->Disable();
            stepOverMenuItem->Disable();
            stepIntoMenuItem->Disable();
            stepOutMenuItem->Disable();
            toggleBreakpointMenuItem->Disable();

            if (action == UserInterfaceAction.build)
            {
                return;
            }
            else if (action == UserInterfaceAction.debug)
            {
                stopDebuggingToolButton->Enable();
                stopDebuggingMenuItem->Enable();
                return;
            }
            else if (action == UserInterfaceAction.debugging)
            {
                startDebuggingToolButton->Enable();
                stopDebuggingToolButton->Enable();
                showNextStatementToolButton->Enable();
                stepOverToolButton->Enable();
                stepIntoToolButton->Enable();
                stepOutToolButton->Enable();
                startDebuggingMenuItem->Enable();
                stopDebuggingMenuItem->Enable();
                showNextStatementMenuItem->Enable();
                stepOverMenuItem->Enable();
                stepIntoMenuItem->Enable();
                stepOutMenuItem->Enable();
                toggleBreakpointMenuItem->Enable();
                return;
            }
            else if (action == UserInterfaceAction.run)
            {
                terminateProcessMenuItem->Enable();
                return;
            }

            bool solutionOpen = !solutionExplorerData.IsNull();
            if (solutionOpen)
            {
                saveAllToolButton->Enable();
                cppToolButton->Enable();
                llvmToolButton->Enable();
                cppToolButton->SetState(ToolButton.State.pressed);
                debugToolButton->Enable();
                releaseToolButton->Enable();
                debugToolButton->SetState(ToolButton.State.pressed);
                buildSolutionToolButton->Enable();
                startDebuggingToolButton->Enable();
                stepOverToolButton->Enable();
                stepIntoToolButton->Enable();
                closeSolutionMenuItem->Enable();
                saveAllMenuItem->Enable();
                searchMenuItem->Enable();

                buildSolutionMenuItem->Enable();
                rebuildSolutionMenuItem->Enable();
                cleanSolutionMenuItem->Enable();
                startWithoutDebuggingMenuItem->Enable();

                startDebuggingMenuItem->Enable();
                stepOverMenuItem->Enable();
                stepIntoMenuItem->Enable();
                toggleBreakpointMenuItem->Enable();

                if (!solution->Projects().IsEmpty())
                {
                    buildProjectToolButton->Enable();
                    buildActiveProjectMenuItem->Enable();
                    rebuildActiveProjectMenuItem->Enable();
                    cleanActiveProjectMenuItem->Enable();
                }

                if (solution->ActiveProject() != null)
                {
                    Cm.Ast.Project* activeProject = solution->ActiveProject();
                    if (activeProject->GetTarget() == Cm.Ast.Target.program ||
                        activeProject->GetTarget() == Cm.Ast.Target.winapp ||
                        activeProject->GetTarget() == Cm.Ast.Target.winguiapp)
                    {
                        programArgumentsMenuItem->Enable();
                    }
                }
            }
            toolBar->Invalidate();
        }

        private BackendConfig backendConfig;
        private SplitContainer* verticalSplitContainer;
        private SplitContainer* horizontalSplitContainer;
        private UniquePtr<Cm.Ast.Solution> solution;
        private TabControl* codeTabControl;
        private TabControl* outputTabControl;
        private LogView* outputLogView;
        private TabPage* logTabPage;
        private TabPage* outputTabPage;
        private Cm.Views.ErrorView* errorView;
        private TabPage* errorTabPage;
        private Console* console;
        private TabPage* consoleTabPage;
        private Cm.Views.CallStack* callStack;
        private TabPage* callStackTabPage;
        private Cm.Views.Locals* locals;
        private TabPage* localsTabPage;
        private TabPage* debugTabPage;
        private ToolBar* toolBar;
        private Cm.Views.SearchResults* searchResults;
        private TabPage* searchResultsTabPage;
        private TreeView* solutionExplorerTreeView;
        private UniquePtr<SolutionExplorerData> solutionExplorerData;
        private StatusBarItem* sourceFilePathStatusBarItem;
        private StatusBarItem* dirtyStatusBarItem;
        private StatusBarItem* caretLineStatusBarItem;
        private StatusBarItem* caretColumnStatusBarItem;
        private HashMap<TabPage*, Cm.Views.Editor*> editorByTabPageMap;

        private MenuBar* menuBar;
        private MenuItem* newProjectMenuItem;
        private MenuItem* openProjectMenuItem;
        private MenuItem* closeSolutionMenuItem;
        private MenuItem* saveMenuItem;
        private MenuItem* saveAllMenuItem;
        private MenuItem* buildSolutionMenuItem;
        private MenuItem* rebuildSolutionMenuItem;
        private MenuItem* cleanSolutionMenuItem;
        private MenuItem* buildActiveProjectMenuItem;
        private MenuItem* rebuildActiveProjectMenuItem;
        private MenuItem* cleanActiveProjectMenuItem;

        private MenuItem* startDebuggingMenuItem;
        private MenuItem* stopDebuggingMenuItem;
        private MenuItem* startWithoutDebuggingMenuItem;
        private MenuItem* terminateProcessMenuItem;
        private MenuItem* showNextStatementMenuItem;
        private MenuItem* stepOverMenuItem;
        private MenuItem* stepIntoMenuItem;
        private MenuItem* stepOutMenuItem;
        private MenuItem* toggleBreakpointMenuItem;
        private MenuItem* programArgumentsMenuItem;
        private MenuItem* copyMenuItem;
        private MenuItem* cutMenuItem;
        private MenuItem* pasteMenuItem;
        private MenuItem* undoMenuItem;
        private MenuItem* redoMenuItem;
        private MenuItem* gotoLineMenuItem;
        private MenuItem* searchMenuItem;

        private ToolButton* saveToolButton;
        private ToolButton* saveAllToolButton;
        private ToolButton* llvmToolButton;
        private ToolButton* cppToolButton;
        private ToolButton* debugToolButton;
        private ToolButton* releaseToolButton;
        private ToolButton* buildSolutionToolButton;
        private ToolButton* buildProjectToolButton;
        private ToolButton* stopBuildServerToolButton;
        private ToolButton* startDebuggingToolButton;
        private ToolButton* stopDebuggingToolButton;
        private ToolButton* showNextStatementToolButton;
        private ToolButton* stepOverToolButton;
        private ToolButton* stepIntoToolButton;
        private ToolButton* stepOutToolButton;

        private ToolTip* toolTipWindow;

        private UniquePtr<BuildService> buildService;
        private UniquePtr<DebugService> debugService;
        private UniquePtr<RunService> runService;
        private Cm.Service.Debug.Location latestDebugLocation;
        private Cm.Service.Debug.Location selectedFrameLocation;
        private bool stopPending;
        private bool targetStopped;
        private bool buildSucceeded;
        private ClipboardListener clipboardListener;
        private ClipboardFormat cmajorCodeFormat;
        private ustring clipboardData;
        private int pid;
        private bool disableBuildServerToolButton;
    }
}

int main(int argc, const char** argv)
{
    try
    {
        string filePath;
        if (argc > 1)
        {
            filePath = GetFullPath(argv[1]);
        }
        MainConfiguration.Instance().Load();
        MainWindow mainWindow(filePath);
        mainWindow.SetSmallIcon(Application.GetResourceManager().GetIcon("cmcode.small.icon"));
        int exitCode = Application.Run(mainWindow);
        return exitCode;
    }
    catch (const Exception& ex)
    {
        Application.SetLogView(null);
        Cm.Views.Bitmaps.Instance().Clear();
        MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
        LogException(ex);
        return 1;
    }
    return 0;
}
