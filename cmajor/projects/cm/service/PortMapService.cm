// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using Cm.Service;
using System;
using System.Text;
using System.Collections;
using System.Dom;
using System.XPath;
using System.IO;
using System.Net.Sockets;
using System.Threading;
using System.Xml.Serialization;

namespace Cm.Service.PortMap
{
    string PortMapLogFilePath()
    {
        return Path.Combine(CmCodeLogDir(), "portmap.service.log");
    }

    [xml]
    public class GetFreePortNumberRequest
    {
        public nothrow GetFreePortNumberRequest()
        {
        }
        public nothrow GetFreePortNumberRequest(const string& processName_, int pid_) : processName(processName_), pid(pid_)
        {
        }
        public string processName;
        public int pid;
    }

    [xml]
    public class GetFreePortNumberReply
    {
        public nothrow GetFreePortNumberReply()
        {
        }
        public int portNumber;
    }

    [xml]
    public class StopPortMapServerRequest
    {
        public nothrow StopPortMapServerRequest()
        {
        }
    }

    [xml]
    public class StopPortMapServerReply
    {
        public nothrow StopPortMapServerReply()
        {
        }
    }

    [xml]
    public class PortLease
    {
        public int portNumber;
        public string processName;
        public int pid;
        public DateTime leaseStartTime;
        public DateTime leaseRenewalTime;
        public string leaseState;
    }

    [xml]
    public class ViewPortLeaseRequest
    {
        public nothrow ViewPortLeaseRequest()
        {
        }
    }

    [xml]
    public class ViewPortLeaseReply
    {
        public nothrow ViewPortLeaseReply()
        {
        }
        public List<PortLease> portLeases;
    }

    public string PortMapConfigFileName()
    {
        string cmajorRootDir = Cm.Ast.CmajorRootDir();
        string cmajorConfigDir = Path.Combine(cmajorRootDir, "config");
        Directory.CreateDirectories(cmajorConfigDir);
        return Path.Combine(cmajorConfigDir, "cmpm.config.xml");
    }

    public int GetPortMapServicePortNumber()
    {
        try
        {
            string portMapConfigFileName = PortMapConfigFileName();
            try
            {
                UniquePtr<Document> portMapConfigDoc = ReadDocument(portMapConfigFileName);
                UniquePtr<XPathObject> result = Evaluate(u"/cmpm", portMapConfigDoc.Get());
                if (result.Get() is XPathNodeSet*)
                {
                    XPathNodeSet* nodeSet = cast<XPathNodeSet*>(result.Get());
                    if (nodeSet->Length() == 1)
                    {
                        Node* node = (*nodeSet)[0];
                        if (node is Element*)
                        {
                            Element* element = cast<Element*>(node);
                            ustring portMapServicePortAttribute = element->GetAttribute(u"portMapServicePort");
                            if (!portMapServicePortAttribute.IsEmpty())
                            {
                                return ParseInt(ToUtf8(portMapServicePortAttribute));
                            }
                            else
                            {
                                throw Exception("'portMapServicePort' attribute not found from 'cmpm' element");
                            }
                        }
                        else
                        {
                            throw Exception("cmpm: element node expected");
                        }
                    }
                    else
                    {
                        throw Exception("single 'cmpm' node expected");
                    }
                }
                else
                {
                    throw Exception("cmpm: node set expected");
                }
            }
            catch (const Exception& ex)
            {
                throw Exception("Cm.Service.PortMap.PortMapService: GetPortMapServicePortNumber: file=" + portMapConfigFileName + ": " + ex.Message());
            }
        }
        catch (const Exception& ex)
        {
            LogWriter logWriter(PortMapLogFilePath());
            logWriter << ex.ToString() << endl();
        }
        return -1;
    }

    string GetMessage(Element* element)
    {
        return ToUtf8(element->Name());
    }

    public void StartPortMapServer()
    {
        try
        {
            Process* portMapServer = new Process("cmpms", cast<Process.Redirections>(Process.Redirections.processStdIn | Process.Redirections.processStdOut | Process.Redirections.processStdErr));
            string line = portMapServer->ReadLine(Process.StdHandle.stdOut);
            if (line == "port-map-server-ready")
            {
                Sleep(Duration.FromSeconds(1));
            }
            else if (line == "port-map-server-error")
            {
                line = portMapServer->ReadLine(Process.StdHandle.stdOut);
                throw Exception(line);
            }
        }
        catch (const Exception& ex)
        {
            throw Exception("Cm.Service.PortMap.PortMapService: StartPortMapServer: " + ex.Message());
        }
    }

    public void StopPortMapServer()
    {
        int port = GetPortMapServicePortNumber();
        if (port == -1)
        {
            throw Exception("could not resolve port map service port number");
        }
        TcpSocket portMapServerConnection("localhost", ToString(port));
        StopPortMapServerRequest request;
        UniquePtr<Element> requestElement = request.ToXml("stopPortMapServerRequest");
        Document requestDoc;
        requestDoc.AppendChild(UniquePtr<Node>(requestElement.Release()));
        StringWriter writer;
        CodeFormatter formatter(writer);
        requestDoc.Write(formatter);
        string requestStr = writer.GetString();
        Write(portMapServerConnection, requestStr);
        string replyStr = ReadStr(portMapServerConnection);
        UniquePtr<Document> replyDoc = ParseDocument(ToUtf32(replyStr), "socket");
        string message = GetMessage(replyDoc->DocumentElement());
        if (message == "stopPortMapServerReply")
        {
            StopPortMapServerReply reply;
            reply.FromXml(replyDoc->DocumentElement());
        }
    }

    public int GetFreePortNumber(const string& processName, int pid, int& portMapServicePortNumber)
    {
        portMapServicePortNumber = -1;
        try
        {
            bool portMapServerStarted = false;
            int port = GetPortMapServicePortNumber();
            if (port == -1)
            {
                StartPortMapServer();
                portMapServerStarted = true;
            }
            port = GetPortMapServicePortNumber();
            if (port == -1)
            {
                throw Exception("could not resolve port map service port number");
            }
            for (int connectionAttempt = 1; connectionAttempt <= 2; ++connectionAttempt)
            {
                try
                {
                    TcpSocket portMapServerConnection("localhost", ToString(port));
                    GetFreePortNumberRequest request(processName, pid);
                    UniquePtr<Element> requestElement = request.ToXml("getFreePortNumberRequest");
                    Document requestDoc;
                    requestDoc.AppendChild(UniquePtr<Node>(requestElement.Release()));
                    StringWriter writer;
                    CodeFormatter formatter(writer);
                    requestDoc.Write(formatter);
                    string requestStr = writer.GetString();
                    Write(portMapServerConnection, requestStr);
                    string replyStr = ReadStr(portMapServerConnection);
                    UniquePtr<Document> replyDoc = ParseDocument(ToUtf32(replyStr), "socket");
                    string message = GetMessage(replyDoc->DocumentElement());
                    if (message == "getFreePortNumberReply")
                    {
                        GetFreePortNumberReply reply;
                        reply.FromXml(replyDoc->DocumentElement());
                        int freePortNumber = reply.portNumber;
                        portMapServicePortNumber = port;
                        return freePortNumber;
                    }
                    else
                    {
                        throw Exception("'getFreePortNumberReply' expected, message=" + message);
                    }
                }
                catch (const Exception& ex)
                {
                    if (connectionAttempt > 1)
                    {
                        throw ex;
                    }
                }
                if (connectionAttempt == 1 && !portMapServerStarted)
                {
                    StartPortMapServer();
                }
                else
                {
                    break;
                }
            }
        }
        catch (const Exception& ex)
        {
            LogWriter logWriter(PortMapLogFilePath());
            logWriter << ex.ToString() << endl();
        }
        return -1;
    }

    public List<PortLease> GetPortLeases()
    {
        bool portMapServerStarted = false;
        int port = GetPortMapServicePortNumber();
        if (port == -1)
        {
            StartPortMapServer();
            portMapServerStarted = true;
        }
        port = GetPortMapServicePortNumber();
        if (port == -1)
        {
            throw Exception("could not resolve port map service port number");
        }
        for (int connectionAttempt = 1; connectionAttempt <= 2; ++connectionAttempt)
        {
            try
            {
                TcpSocket portMapServerConnection("localhost", ToString(port));
                ViewPortLeaseRequest request;
                UniquePtr<Element> requestElement = request.ToXml("viewPortLeaseRequest");
                Document requestDoc;
                requestDoc.AppendChild(UniquePtr<Node>(requestElement.Release()));
                StringWriter writer;
                CodeFormatter formatter(writer);
                requestDoc.Write(formatter);
                string requestStr = writer.GetString();
                Write(portMapServerConnection, requestStr);
                string replyStr = ReadStr(portMapServerConnection);
                UniquePtr<Document> replyDoc = ParseDocument(ToUtf32(replyStr), "socket");
                string message = GetMessage(replyDoc->DocumentElement());
                if (message == "viewPortLeaseReply")
                {
                    ViewPortLeaseReply reply;
                    reply.FromXml(replyDoc->DocumentElement());
                    return reply.portLeases;
                }
                else
                {
                    throw Exception("viewPortLeaseReply expected, message=" + message);
                }
            }
            catch (const Exception& ex)
            {
                if (connectionAttempt > 1)
                {
                    throw ex;
                }
            }
            if (connectionAttempt == 1 && !portMapServerStarted)
            {
                StartPortMapServer();
            }
            else
            {
                break;
            }
        }
        return List<PortLease>();
    }
}

