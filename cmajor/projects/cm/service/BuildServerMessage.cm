// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Xml.Serialization;

namespace Cm.Service.Build
{
    [xml]
    public class StopRequest
    {
        public nothrow StopRequest()
        {
        }
    }

    [xml]
    public class StopReply
    {
        public nothrow StopReply()
        {
        }
    }

    [xml]
    public class KeepAliveRequest
    {
        public nothrow KeepAliveRequest()
        {
        }
    }

    [xml]
    public class KeepAliveReply
    {
        public nothrow KeepAliveReply() 
        {
        }
    }

    [xml]
    public class BuildRequest
    {
        public nothrow BuildRequest() 
        {
        }
        public string backend;
        public string config;
        public string optimizationLevel;
        public string filePath;
        public List<string> defines;
        public string numBuildThreads;
        public string toolChain;
        public bool verbose;
        public bool quiet;
        public bool clean;
        public bool strictNothrow;
        public bool emitIR;
        public bool emitOptIR;
        public bool linkWithDebugRuntime;
        public bool linkUsingMsLink;
        public bool rebuild;
        public bool buildAllDependencies;
        public bool forceDebugInfo;
        public bool forceNoDebugInfo;
        public bool disableModuleCache;
        public bool singleThreadedCompile;
        public bool disableCodeGen;
        public bool justMyCode;
    }

    [xml]
    public class CompileError
    {
        public string message;
        public string project;
        public string file;
        public int line;
        public int scol;
        public int ecol;
    }

    [xml]
    public class BuildReply
    {
        public nothrow BuildReply() 
        {
        }
        public bool requestValid;
        public string requestErrorMessage;
        public string logException;
        public string time;
        public bool success;
        public List<CompileError> errors;
    }

    [xml]
    public class LogMessageRequest
    {
        public nothrow LogMessageRequest() 
        {
        }
        public string message;
    }

    [xml]
    public class LogMessageReply
    {
        public nothrow LogMessageReply() 
        {
        }
        public string messageKind;
        public bool ok;
    }

    [xml]
    public class ProgressMessage
    {
        public nothrow ProgressMessage() 
        {
        }
    }

    [xml]
    public class GenericErrorReply
    {
        public nothrow GenericErrorReply() 
        {
        }
        public string error;
    }

    [xml]
    public class SourceLocation
    {
        public nothrow SourceLocation()
        {
        }
        public nothrow SourceLocation(const string& file_, int line_, int scol_, int ecol_) : file(file_), line(line_), scol(scol_), ecol(ecol_)
        {
        }
        public string file;
        public int line;
        public int scol;
        public int ecol;
    }

    public nothrow bool operator==(const SourceLocation& left, const SourceLocation& right)
    {
        return left.file == right.file && left.line == right.line;
    }

    [xml]
    public class GetDefinitionRequest
    {
        public nothrow GetDefinitionRequest() 
        {
        }
        public string projectName;
        public string projectFilePath;
        public string backend;
        public string config;
        public string identifier;
        public SourceLocation identifierLocation;
    }

    [xml]
    public class GetDefinitionReply
    {
        public nothrow GetDefinitionReply() 
        {
        }
        public SourceLocation definitionLocation;
        public bool ok;
        public string error;
    }

    [xml]
    public class CacheModuleRequest
    {
        public nothrow CacheModuleRequest() 
        {
        }
        public string projectName;
        public string projectFilePath;
        public string backend;
        public string config;
    }

    [xml]
    public class CacheModuleReply
    {
        public nothrow CacheModuleReply() 
        {
        }
        public string error;
    }
}
