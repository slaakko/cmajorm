using System;
using System.Collections;
using System.IO;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/AstWriter.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/AstWriter.cpp' using cpp2cm version 1.0.0

namespace Cm.Ast
{
    public class AstWriter
    {
        public nothrow AstWriter(const string& fileName_) :
            binaryWriter(File.CreateBinary(fileName_)), lexers(null)
        {
        }
        public nothrow BinaryWriter& GetBinaryWriter()
        {
            return binaryWriter;
        }
        public nothrow void Write(Node* node)
        {
            binaryWriter.Write(cast<byte>(node->GetNodeType()));
            Write(node->GetSpan());
            node->Write(*this);
        }
        public nothrow void Write(Specifiers specifiers)
        {
            binaryWriter.Write(cast<uint>(cast<int>(specifiers)));
        }
        public nothrow void Write(const System.Lex.Span& span)
        {
            if (!span.Valid())
            {
                binaryWriter.Write(false);
            }
            else
            {
                System.Lex.Span s = span;
                if (span.fileIndex >= 0 && span.fileIndex < lexers->Count())
                {
                    System.Lex.Lexer* lexer = (*lexers)[span.fileIndex];
                    lexer->ConvertExternal(s);
                }
                binaryWriter.Write(true);
                binaryWriter.WriteULEB128UInt(cast<uint>(s.fileIndex));
                binaryWriter.WriteULEB128UInt(cast<uint>(s.line));
                binaryWriter.WriteULEB128UInt(cast<uint>(s.start));
                binaryWriter.WriteULEB128UInt(cast<uint>(s.end));
            }
        }
        public nothrow void SetLexers(List<System.Lex.Lexer*>* lexers_)
        {
            lexers = lexers_;
        }
        private BinaryWriter binaryWriter;
        private List<System.Lex.Lexer*>* lexers;
    }
} // namespace Cm.Ast
