using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Function.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Function.cpp' using cpp2cm version 1.0.0

namespace Cm.Ast
{
    public class FunctionNode : Node
    {
        public suppress nothrow FunctionNode(const FunctionNode& );
        public nothrow FunctionNode(const System.Lex.Span& span_, const Uuid& moduleId_) :
            base(NodeType.functionNode, span_, moduleId_), specifiers(Specifiers.none), returnTypeExpr(), groupId(), parameters(), body(), bodySource(), programMain(false)
        {
        }
        public nothrow FunctionNode(NodeType nodeType_, const System.Lex.Span& span_, const Uuid& moduleId_) :
            base(nodeType_, span_, moduleId_), specifiers(Specifiers.none), returnTypeExpr(), groupId(), parameters(), body(), bodySource(), programMain(false)
        {
        }
        public nothrow FunctionNode(const System.Lex.Span& span_, const Uuid& moduleId_, Specifiers specifiers_, Node* returnTypeExpr_, const ustring& groupId_, AttributesNode* attributes_) :
            base(NodeType.functionNode, span_, moduleId_), specifiers(specifiers_), returnTypeExpr(returnTypeExpr_), groupId(groupId_), templateParameters(), parameters(), body(), bodySource(), attributes(attributes_), programMain(false)
        {
            if (!returnTypeExpr.IsNull())
            {
                returnTypeExpr->SetParent(this);
            }
        }
        public nothrow FunctionNode(NodeType nodeType_, const System.Lex.Span& span_, const Uuid& moduleId_, Specifiers specifiers_, Node* returnTypeExpr_, const ustring& groupId_, AttributesNode* attributes_) :
            base(nodeType_, span_, moduleId_), specifiers(specifiers_), returnTypeExpr(returnTypeExpr_), groupId(groupId_), templateParameters(), parameters(), body(), bodySource(), attributes(attributes_), programMain(false)
        {
            if (!returnTypeExpr.IsNull())
            {
                returnTypeExpr->SetParent(this);
            }
        }
        public suppress nothrow FunctionNode& operator=(const FunctionNode& );
        public nothrow const Node* ReturnTypeExpr() const
        {
            return returnTypeExpr.Get();
        }
        public nothrow Node* ReturnTypeExpr()
        {
            return returnTypeExpr.Get();
        }
        public nothrow const ustring& GroupId() const
        {
            return groupId;
        }
        public nothrow const NodeList<TemplateParameterNode>& TemplateParameters() const
        {
            return templateParameters;
        }
        public nothrow const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public nothrow const WhereConstraintNode* WhereConstraint() const
        {
            return whereConstraint.Get();
        }
        public nothrow WhereConstraintNode* WhereConstraint()
        {
            return whereConstraint.Get();
        }
        public nothrow const CompoundStatementNode* Body() const
        {
            return body.Get();
        }
        public nothrow CompoundStatementNode* Body()
        {
            return body.Get();
        }
        public nothrow const CompoundStatementNode* BodySource() const
        {
            return bodySource.Get();
        }
        public nothrow bool IsProgramMain() const
        {
            return programMain;
        }
        public nothrow void SetProgramMain()
        {
            programMain = true;
        }
        public nothrow AttributesNode* GetAttributes() const
        {
            return attributes.Get();
        }
        public nothrow void SetSpecifierSpan(const System.Lex.Span& specifierSpan_)
        {
            specifierSpan = specifierSpan_;
        }
        public nothrow const System.Lex.Span& SpecifierSpan() const
        {
            return specifierSpan;
        }
        public nothrow void SetGroupIdSpan(const System.Lex.Span& groupIdSpan_)
        {
            groupIdSpan = groupIdSpan_;
        }
        public nothrow const System.Lex.Span& GroupIdSpan() const
        {
            return groupIdSpan;
        }
        public nothrow void CloneContent(FunctionNode* clone, CloneContext& cloneContext) const
        {
            if (!attributes.IsNull())
            {
                clone->attributes.Reset(cast<AttributesNode*>(attributes->Clone(cloneContext)));
            }
            clone->specifiers = specifiers;
            Node* clonedReturnTypeExpr = null;
            if (!returnTypeExpr.IsNull())
            {
                clone->SetReturnTypeExpr(returnTypeExpr->Clone(cloneContext));
            }
            clone->groupId = groupId;
            int nt = templateParameters.Count();
            for (int i = 0; i < nt; ++i)
            {
                clone->AddTemplateParameter(cast<TemplateParameterNode*>(templateParameters[i]->Clone(cloneContext)));
            }
            int np = parameters.Count();
            for (int i = 0; i < np; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            if (!body.IsNull())
            {
                if (cloneContext.InstantiateClassNode())
                {
                    CloneContext bodyCloneContext;
                    clone->SetBodySource(cast<CompoundStatementNode*>(body->Clone(bodyCloneContext)));
                }
                else
                {
                    clone->SetBody(cast<CompoundStatementNode*>(body->Clone(cloneContext)));
                }
            }
            if (!whereConstraint.IsNull())
            {
                clone->SetConstraint(cast<WhereConstraintNode*>(whereConstraint->Clone(cloneContext)));
            }
            clone->SetGroupIdSpan(groupIdSpan);
            clone->SetSpecifierSpan(specifierSpan);
        }
        public nothrow void SwitchToBody()
        {
            if (!bodySource.IsNull() && !!body.IsNull())
            {
                SetBody(bodySource.Release());
            }
        }
        public nothrow void SetReturnTypeExpr(Node* returnTypeExpr_)
        {
            returnTypeExpr.Reset(returnTypeExpr_);
            returnTypeExpr->SetParent(returnTypeExpr_);
        }
        public nothrow void SetSpecifiers(Specifiers specifiers_)
        {
            specifiers = specifiers_;
        }
        public nothrow void SetConstraint(WhereConstraintNode* whereConstraint_)
        {
            whereConstraint.Reset(whereConstraint_);
            whereConstraint->SetParent(this);
        }
        public nothrow void SetBody(CompoundStatementNode* body_)
        {
            body.Reset(body_);
            body->SetParent(this);
        }
        public nothrow void SetBodySource(CompoundStatementNode* bodySource_)
        {
            bodySource.Reset(bodySource_);
            bodySource->SetParent(this);
        }
        public override nothrow bool IsFunctionNode() const
        {
            return true;
        }
        public override nothrow Specifiers GetSpecifiers() const
        {
            return specifiers;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            AttributesNode* clonedAttributes = null;
            if (!attributes.IsNull())
            {
                clonedAttributes = cast<AttributesNode*>(attributes->Clone(cloneContext));
            }
            Node* clonedReturnTypeExpr = null;
            if (!returnTypeExpr.IsNull())
            {
                clonedReturnTypeExpr = returnTypeExpr->Clone(cloneContext);
            }
            FunctionNode* clone = new FunctionNode(GetSpan(), ModuleId(), specifiers, clonedReturnTypeExpr, groupId, clonedAttributes);
            if (!cloneContext.InstantiateFunctionNode())
            {
                int nt = templateParameters.Count();
                for (int i = 0; i < nt; ++i)
                {
                    clone->AddTemplateParameter(cast<TemplateParameterNode*>(templateParameters[i]->Clone(cloneContext)));
                }
            }
            int np = parameters.Count();
            for (int i = 0; i < np; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            if (!body.IsNull())
            {
                if (cloneContext.InstantiateClassNode())
                {
                    CloneContext bodyCloneContext;
                    clone->SetBodySource(cast<CompoundStatementNode*>(body->Clone(bodyCloneContext)));
                }
                else
                {
                    clone->SetBody(cast<CompoundStatementNode*>(body->Clone(cloneContext)));
                }
            }
            if (!whereConstraint.IsNull())
            {
                clone->SetConstraint(cast<WhereConstraintNode*>(whereConstraint->Clone(cloneContext)));
            }
            clone->SetGroupIdSpan(groupIdSpan);
            clone->SetSpecifierSpan(specifierSpan);
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            bool hasAttributes = attributes != null;
            writer.GetBinaryWriter().Write(hasAttributes);
            if (hasAttributes)
            {
                attributes->Write(writer);
            }
            writer.Write(specifiers);
            bool hasReturnTypeExpr = returnTypeExpr != null;
            writer.GetBinaryWriter().Write(hasReturnTypeExpr);
            if (hasReturnTypeExpr)
            {
                writer.Write(returnTypeExpr.Get());
            }
            writer.GetBinaryWriter().Write(groupId);
            templateParameters.Write(writer);
            parameters.Write(writer);
            bool hasConstraint = whereConstraint != null;
            writer.GetBinaryWriter().Write(hasConstraint);
            if (hasConstraint)
            {
                writer.Write(whereConstraint.Get());
            }
            bool hasBody = body != null;
            writer.GetBinaryWriter().Write(hasBody);
            if (hasBody)
            {
                writer.Write(body.Get());
            }
            bool hasBodySource = bodySource != null;
            writer.GetBinaryWriter().Write(hasBodySource);
            if (hasBodySource)
            {
                writer.Write(bodySource.Get());
            }
            bool convertExternal = ModuleId() == writer.SpanConversionModuleId();
            writer.Write(groupIdSpan, convertExternal);
            writer.Write(specifierSpan, convertExternal);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            bool hasAttributes = reader.GetBinaryReader().ReadBool();
            if (hasAttributes)
            {
                attributes.Reset(new AttributesNode());
                attributes->Read(reader);
            }
            specifiers = reader.ReadSpecifiers();
            bool hasReturnTypeExpr = reader.GetBinaryReader().ReadBool();
            if (hasReturnTypeExpr)
            {
                returnTypeExpr.Reset(reader.ReadNode());
                returnTypeExpr->SetParent(this);
            }
            groupId = reader.GetBinaryReader().ReadUString();
            templateParameters.Read(reader);
            templateParameters.SetParent(this);
            parameters.Read(reader);
            parameters.SetParent(this);
            bool hasConstraint = reader.GetBinaryReader().ReadBool();
            if (hasConstraint)
            {
                whereConstraint.Reset(reader.ReadWhereConstraintNode());
            }
            bool hasBody = reader.GetBinaryReader().ReadBool();
            if (hasBody)
            {
                body.Reset(reader.ReadCompoundStatementNode());
                body->SetParent(this);
            }
            bool hasBodySource = reader.GetBinaryReader().ReadBool();
            if (hasBodySource)
            {
                bodySource.Reset(reader.ReadCompoundStatementNode());
                bodySource->SetParent(this);
            }
            groupIdSpan = reader.ReadSpan();
            specifierSpan = reader.ReadSpan();
        }
        public override void AddTemplateParameter(TemplateParameterNode* templateParameter)
        {
            templateParameter->SetParent(this);
            templateParameters.Add(templateParameter);
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        private Specifiers specifiers;
        private System.Lex.Span specifierSpan;
        private UniquePtr<Node> returnTypeExpr;
        private ustring groupId;
        private System.Lex.Span groupIdSpan;
        private NodeList<TemplateParameterNode> templateParameters;
        private NodeList<ParameterNode> parameters;
        private UniquePtr<WhereConstraintNode> whereConstraint;
        private UniquePtr<CompoundStatementNode> body;
        private UniquePtr<CompoundStatementNode> bodySource;
        private UniquePtr<AttributesNode> attributes;
        private bool programMain;
    }
} // namespace Cm.Ast
