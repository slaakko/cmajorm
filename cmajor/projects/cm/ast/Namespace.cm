using System;
using System.Collections;

namespace Cm.Ast
{
    public enum NsFlags : sbyte
    {
        none = 0, isUnnamedNs = 1 << 0, hasUnnamedNs = 1 << 1
    }
    public inline constexpr nothrow NsFlags operator|(NsFlags left, NsFlags right)
    {
        return cast<NsFlags>(cast<sbyte>(left) | cast<sbyte>(right));
    }
    public inline constexpr nothrow NsFlags operator&(NsFlags left, NsFlags right)
    {
        return cast<NsFlags>(cast<sbyte>(left) & cast<sbyte>(right));
    }
    public class NamespaceNode : Node
    {
        public nothrow NamespaceNode(const System.Lex.Span& span_, const Uuid& moduleId_) :
            base(NodeType.namespaceNode, span_, moduleId_), id(), flags()
        {
        }
        public nothrow NamespaceNode(const System.Lex.Span& span_, const Uuid& moduleId_, IdentifierNode* id_) :
            base(NodeType.namespaceNode, span_, moduleId_), id(id_), flags()
        {
            if (id.IsNull())
            {
                SetUnnamedNs();
                System.Security.Sha1 sha1;
                Uuid randomUuid = Uuid.Random();
                for (byte x : randomUuid)
                {
                    sha1.Process(x);
                }
                id.Reset(new IdentifierNode(span_, moduleId_, u"unnamed_ns_" + ToUtf32(sha1.GetDigest())));
            }
            id->SetParent(this);
        }
        public nothrow NodeList<Node>& Members()
        {
            return members;
        }
        public nothrow const NodeList<Node>& Members() const
        {
            return members;
        }
        public nothrow bool IsUnnamedNs() const
        {
            return (flags & NsFlags.isUnnamedNs) != NsFlags.none;
        }
        public nothrow void SetUnnamedNs()
        {
            flags = flags | NsFlags.isUnnamedNs;
        }
        public nothrow bool HasUnnamedNs() const
        {
            return (flags & NsFlags.hasUnnamedNs) != NsFlags.none;
        }
        public nothrow void SetHasUnnamedNs()
        {
            flags = flags | NsFlags.hasUnnamedNs;
        }
        public nothrow IdentifierNode* Id() const
        {
            return id.Get();
        }
        public nothrow void AddMember(Node* member)
        {
            member->SetParent(this);
            members.Add(member);
            if (member->GetNodeType() == NodeType.namespaceNode)
            {
                NamespaceNode* ns = cast<NamespaceNode*>(member);
                if (ns->IsUnnamedNs() || ns->HasUnnamedNs())
                {
                    SetHasUnnamedNs();
                }
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(id.Get());
            writer.GetBinaryWriter().Write(cast<sbyte>(flags));
            members.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            flags = cast<NsFlags>(reader.GetBinaryReader().ReadSByte());
            members.Read(reader);
            members.SetParent(this);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            NamespaceNode* clone = new NamespaceNode(GetSpan(), ModuleId(), cast<IdentifierNode*>(id->Clone(cloneContext)));
            int n = members.Count();
            for (int i = 0; i < n; ++i)
            {
                Node* member = members[i];
                if (cloneContext.MakeTestUnits() && member->GetNodeType() == NodeType.functionNode && (cast<FunctionNode*>(member)->GetSpecifiers() & Specifiers.unit_test_) != Specifiers.none)
                {
                    FunctionNode* unitTestFunction = cast<FunctionNode*>(member->Clone(cloneContext));
                    unitTestFunction->SetParent(this);
                    cloneContext.AddUnitTestFunction(unitTestFunction);
                }
                else
                {
                    clone->AddMember(member->Clone(cloneContext));
                }
            }
            return clone;
        }
        private UniquePtr<IdentifierNode> id;
        private NodeList<Node> members;
        private NsFlags flags;
    }
    public class AliasNode : Node
    {
        public nothrow AliasNode(const System.Lex.Span& span_, const Uuid& moduleId_) :
            base(NodeType.aliasNode, span_, moduleId_), id(), qid()
        {
        }
        public nothrow AliasNode(const System.Lex.Span& span_, const Uuid& moduleId_, IdentifierNode* id_, IdentifierNode* qid_) :
            base(NodeType.aliasNode, span_, moduleId_), id(id_), qid(qid_)
        {
            id->SetParent(this);
            qid->SetParent(this);
        }
        public nothrow IdentifierNode* Id() const
        {
            return id.Get();
        }
        public nothrow IdentifierNode* Qid() const
        {
            return qid.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new AliasNode(GetSpan(), ModuleId(), cast<IdentifierNode*>(id->Clone(cloneContext)), cast<IdentifierNode*>(qid->Clone(cloneContext)));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(id.Get());
            writer.Write(qid.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            qid.Reset(reader.ReadIdentifierNode());
            qid->SetParent(this);
        }
        private UniquePtr<IdentifierNode> id;
        private UniquePtr<IdentifierNode> qid;
    }
    public class NamespaceImportNode : Node
    {
        public nothrow NamespaceImportNode(const System.Lex.Span& span_, const Uuid& moduleId_) :
            base(NodeType.namespaceImportNode, span_, moduleId_), ns()
        {
        }
        public nothrow NamespaceImportNode(const System.Lex.Span& span_, const Uuid& moduleId_, IdentifierNode* ns_) :
            base(NodeType.namespaceImportNode, span_, moduleId_), ns(ns_)
        {
            ns->SetParent(this);
        }
        public nothrow IdentifierNode* Ns() const
        {
            return ns.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new NamespaceImportNode(GetSpan(), ModuleId(), cast<IdentifierNode*>(ns->Clone(cloneContext)));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(ns.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            ns.Reset(reader.ReadIdentifierNode());
            ns->SetParent(this);
        }
        private UniquePtr<IdentifierNode> ns;
    }
} // namespace Cm.Ast
