using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Concept.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Concept.cpp' using cpp2cm version 1.0.0

namespace Cm.Ast
{
    public abstract class ConstraintNode : Node
    {
        public nothrow ConstraintNode(NodeType nodeType_, const System.Lex.Span& span_) :
            base(nodeType_, span_)
        {
        }
        public override nothrow bool NodeIsConstraintNode() const
        {
            return true;
        }
        public virtual nothrow bool IsHeaderConstraint() const
        {
            return false;
        }
    }
    public class ParenthesizedConstraintNode : ConstraintNode
    {
        public nothrow ParenthesizedConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.parenthesizedConstraintNode, span_)
        {
        }
        public nothrow ParenthesizedConstraintNode(const System.Lex.Span& span_, ConstraintNode* constraint_) :
            base(NodeType.parenthesizedConstraintNode, span_), constraint(constraint_)
        {
        }
        public nothrow const ConstraintNode* Constraint() const
        {
            return constraint.Get();
        }
        public nothrow ConstraintNode* Constraint()
        {
            return constraint.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new ParenthesizedConstraintNode(GetSpan(), cast<ConstraintNode*>(constraint->Clone(cloneContext)));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(constraint.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            constraint.Reset(reader.ReadConstraintNode());
        }
        public override nothrow string ToString() const
        {
            return "(" + constraint->ToString() + ")";
        }
        private UniquePtr<ConstraintNode> constraint;
    }
    public abstract class BinaryConstraintNode : ConstraintNode
    {
        public nothrow BinaryConstraintNode(NodeType nodeType_, const System.Lex.Span& span_) :
            base(nodeType_, span_), left(), right()
        {
        }
        public nothrow BinaryConstraintNode(NodeType nodeType_, const System.Lex.Span& span_, ConstraintNode* left_, ConstraintNode* right_) :
            base(nodeType_, span_), left(left_), right(right_)
        {
            left->SetParent(this);
            right->SetParent(this);
        }
        public nothrow const ConstraintNode* Left() const
        {
            return left.Get();
        }
        public nothrow ConstraintNode* Left()
        {
            return left.Get();
        }
        public nothrow const ConstraintNode* Right() const
        {
            return right.Get();
        }
        public nothrow ConstraintNode* Right()
        {
            return right.Get();
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(left.Get());
            writer.Write(right.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            left.Reset(reader.ReadConstraintNode());
            left->SetParent(this);
            right.Reset(reader.ReadConstraintNode());
            right->SetParent(this);
        }
        private UniquePtr<ConstraintNode> left;
        private UniquePtr<ConstraintNode> right;
    }
    public class DisjunctiveConstraintNode : BinaryConstraintNode
    {
        public nothrow DisjunctiveConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.disjunctiveConstraintNode, span_)
        {
        }
        public nothrow DisjunctiveConstraintNode(const System.Lex.Span& span_, ConstraintNode* left_, ConstraintNode* right_) :
            base(NodeType.disjunctiveConstraintNode, span_, left_, right_)
        {
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new DisjunctiveConstraintNode(GetSpan(), cast<ConstraintNode*>(Left()->Clone(cloneContext)), cast<ConstraintNode*>(Right()->Clone(cloneContext)));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow string ToString() const
        {
            return Left()->ToString() + " or " + Right()->ToString();
        }
    }
    public class ConjunctiveConstraintNode : BinaryConstraintNode
    {
        public nothrow ConjunctiveConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.conjunctiveConstraintNode, span_)
        {
        }
        public nothrow ConjunctiveConstraintNode(const System.Lex.Span& span_, ConstraintNode* left_, ConstraintNode* right_) :
            base(NodeType.conjunctiveConstraintNode, span_, left_, right_)
        {
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new ConjunctiveConstraintNode(GetSpan(), cast<ConstraintNode*>(Left()->Clone(cloneContext)), cast<ConstraintNode*>(Right()->Clone(cloneContext)));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow string ToString() const
        {
            return Left()->ToString() + " and " + Right()->ToString();
        }
    }
    public class WhereConstraintNode : ConstraintNode
    {
        public nothrow WhereConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.whereConstraintNode, span_), constraint(), headerConstraint(false), semicolon(false)
        {
        }
        public nothrow WhereConstraintNode(const System.Lex.Span& span_, ConstraintNode* constraint_) :
            base(NodeType.whereConstraintNode, span_), constraint(constraint_), headerConstraint(false), semicolon(false)
        {
            constraint->SetParent(this);
        }
        public nothrow const ConstraintNode* Constraint() const
        {
            return constraint.Get();
        }
        public nothrow ConstraintNode* Constraint()
        {
            return constraint.Get();
        }
        public nothrow void SetHeaderConstraint()
        {
            headerConstraint = true;
        }
        public nothrow void SetSemicolon()
        {
            semicolon = true;
        }
        public nothrow bool Semicolon() const
        {
            return semicolon;
        }
        public override nothrow bool IsHeaderConstraint() const
        {
            return headerConstraint;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            WhereConstraintNode* clone = new WhereConstraintNode(GetSpan(), cast<ConstraintNode*>(constraint->Clone(cloneContext)));
            if (headerConstraint)
            {
                clone->SetHeaderConstraint();
            }
            if (semicolon)
            {
                clone->SetSemicolon();
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(constraint.Get());
            writer.GetBinaryWriter().Write(headerConstraint);
            writer.GetBinaryWriter().Write(semicolon);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            constraint.Reset(reader.ReadConstraintNode());
            constraint->SetParent(this);
            headerConstraint = reader.GetBinaryReader().ReadBool();
            semicolon = reader.GetBinaryReader().ReadBool();
        }
        public override nothrow string ToString() const
        {
            return "where " + constraint->ToString();
        }
        private UniquePtr<ConstraintNode> constraint;
        private bool headerConstraint;
        private bool semicolon;
    }
    public class PredicateConstraintNode : ConstraintNode
    {
        public nothrow PredicateConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.predicateConstraintNode, span_), invokeExpr()
        {
        }
        public nothrow PredicateConstraintNode(const System.Lex.Span& span_, Node* invokeExpr_) :
            base(NodeType.predicateConstraintNode, span_), invokeExpr(invokeExpr_)
        {
            invokeExpr->SetParent(this);
        }
        public nothrow const Node* InvokeExpr() const
        {
            return invokeExpr.Get();
        }
        public nothrow Node* InvokeExpr()
        {
            return invokeExpr.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new PredicateConstraintNode(GetSpan(), invokeExpr->Clone(cloneContext));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(invokeExpr.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            invokeExpr.Reset(reader.ReadNode());
            invokeExpr->SetParent(this);
        }
        public override nothrow string ToString() const
        {
            return invokeExpr->ToString();
        }
        private UniquePtr<Node> invokeExpr;
    }
    public class IsConstraintNode : ConstraintNode
    {
        public nothrow IsConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.isConstraintNode, span_), typeExpr(), conceptOrTypeName()
        {
        }
        public nothrow IsConstraintNode(const System.Lex.Span& span_, Node* typeExpr_, Node* conceptOrTypeName_) :
            base(NodeType.isConstraintNode, span_), typeExpr(typeExpr_), conceptOrTypeName(conceptOrTypeName_)
        {
            typeExpr->SetParent(this);
            conceptOrTypeName->SetParent(this);
        }
        public nothrow const Node* TypeExpr() const
        {
            return typeExpr.Get();
        }
        public nothrow Node* TypeExpr()
        {
            return typeExpr.Get();
        }
        public nothrow const Node* ConceptOrTypeName() const
        {
            return conceptOrTypeName.Get();
        }
        public nothrow Node* ConceptOrTypeName()
        {
            return conceptOrTypeName.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new IsConstraintNode(GetSpan(), typeExpr->Clone(cloneContext), conceptOrTypeName->Clone(cloneContext));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(typeExpr.Get());
            writer.Write(conceptOrTypeName.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            typeExpr.Reset(reader.ReadNode());
            typeExpr->SetParent(this);
            conceptOrTypeName.Reset(reader.ReadNode());
            conceptOrTypeName->SetParent(this);
        }
        public override nothrow string ToString() const
        {
            return typeExpr->ToString() + " is " + conceptOrTypeName->ToString();
        }
        private UniquePtr<Node> typeExpr;
        private UniquePtr<Node> conceptOrTypeName;
    }
    public class MultiParamConstraintNode : ConstraintNode
    {
        public nothrow MultiParamConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.multiParamConstraintNode, span_), conceptId(), typeExprs()
        {
        }
        public nothrow MultiParamConstraintNode(const System.Lex.Span& span_, IdentifierNode* conceptId_) :
            base(NodeType.multiParamConstraintNode, span_), conceptId(conceptId_), typeExprs()
        {
            conceptId->SetParent(this);
        }
        public nothrow const IdentifierNode* ConceptId() const
        {
            return conceptId.Get();
        }
        public nothrow IdentifierNode* ConceptId()
        {
            return conceptId.Get();
        }
        public nothrow const NodeList<Node>& TypeExprs() const
        {
            return typeExprs;
        }
        public nothrow void AddTypeExpr(Node* typeExpr)
        {
            typeExpr->SetParent(this);
            typeExprs.Add(typeExpr);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            MultiParamConstraintNode* clone = new MultiParamConstraintNode(GetSpan(), cast<IdentifierNode*>(conceptId->Clone(cloneContext)));
            int n = typeExprs.Count();
            for (int i = 0; i < n; ++i)
            {
                clone->AddTypeExpr(typeExprs[i]->Clone(cloneContext));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(conceptId.Get());
            typeExprs.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            conceptId.Reset(reader.ReadIdentifierNode());
            conceptId->SetParent(this);
            typeExprs.Read(reader);
            typeExprs.SetParent(this);
        }
        public override nothrow string ToString() const
        {
            string s = conceptId->ToString();
            s.Append('<', 1);
            int n = typeExprs.Count();
            for (int i = 0; i < n; ++i)
            {
                if (i > 0)
                {
                    s.Append(", ");
                }
                s.Append(typeExprs[i]->ToString());
            }
            s.Append('>', 1);
            return s;
        }
        private UniquePtr<IdentifierNode> conceptId;
        private NodeList<Node> typeExprs;
    }
    public class TypeNameConstraintNode : ConstraintNode
    {
        public nothrow TypeNameConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.typeNameConstraintNode, span_), typeId()
        {
        }
        public nothrow TypeNameConstraintNode(const System.Lex.Span& span_, Node* typeId_) :
            base(NodeType.typeNameConstraintNode, span_), typeId(typeId_)
        {
            typeId->SetParent(this);
        }
        public nothrow const Node* TypeId() const
        {
            return typeId.Get();
        }
        public nothrow Node* TypeId()
        {
            return typeId.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new TypeNameConstraintNode(GetSpan(), typeId->Clone(cloneContext));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(typeId.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            typeId.Reset(reader.ReadNode());
        }
        public override nothrow string ToString() const
        {
            return "typename " + typeId->ToString();
        }
        private UniquePtr<Node> typeId;
    }
    public abstract class SignatureConstraintNode : ConstraintNode
    {
        public nothrow SignatureConstraintNode(NodeType nodeType_, const System.Lex.Span& span_) :
            base(nodeType_, span_)
        {
        }
    }
    public class ConstructorConstraintNode : SignatureConstraintNode
    {
        public nothrow ConstructorConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.constructorConstraintNode, span_), typeParamId(), parameters()
        {
        }
        public nothrow ConstructorConstraintNode(const System.Lex.Span& span_, IdentifierNode* typeParamId_) :
            base(NodeType.constructorConstraintNode, span_), typeParamId(typeParamId_), parameters()
        {
            typeParamId->SetParent(this);
        }
        public nothrow const IdentifierNode* TypeParamId() const
        {
            return typeParamId.Get();
        }
        public nothrow IdentifierNode* TypeParamId()
        {
            return typeParamId.Get();
        }
        public nothrow const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            ConstructorConstraintNode* clone = new ConstructorConstraintNode(GetSpan(), cast<IdentifierNode*>(typeParamId->Clone(cloneContext)));
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(typeParamId.Get());
            parameters.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            typeParamId.Reset(cast<IdentifierNode*>(reader.ReadNode()));
            typeParamId->SetParent(this);
            parameters.Read(reader);
            parameters.SetParent(this);
        }
        public override nothrow string ToString() const
        {
            string s = typeParamId->ToString();
            s.Append('(', 1);
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                if (i > 0)
                {
                    s.Append(", ");
                }
                ParameterNode* p = parameters[i];
                s.Append(p->TypeExpr()->ToString());
            }
            s.Append(')', 1);
            return s;
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        private UniquePtr<IdentifierNode> typeParamId;
        private NodeList<ParameterNode> parameters;
    }
    public class DestructorConstraintNode : SignatureConstraintNode
    {
        public nothrow DestructorConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.destructorConstraintNode, span_), typeParamId()
        {
        }
        public nothrow DestructorConstraintNode(const System.Lex.Span& span_, IdentifierNode* typeParamId_) :
            base(NodeType.destructorConstraintNode, span_), typeParamId(typeParamId_)
        {
            typeParamId->SetParent(this);
        }
        public nothrow IdentifierNode* TypeParamId()
        {
            return typeParamId.Get();
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new DestructorConstraintNode(GetSpan(), cast<IdentifierNode*>(typeParamId->Clone(cloneContext)));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(typeParamId.Get());
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            typeParamId.Reset(reader.ReadIdentifierNode());
            typeParamId->SetParent(this);
        }
        public override nothrow string ToString() const
        {
            string s = "~" + typeParamId->ToString();
            s.Append("()");
            return s;
        }
        private UniquePtr<IdentifierNode> typeParamId;
    }
    public class MemberFunctionConstraintNode : SignatureConstraintNode
    {
        public nothrow MemberFunctionConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.memberFunctionConstraintNode, span_), returnTypeExpr(), typeParamId(), groupId(), parameters()
        {
        }
        public nothrow MemberFunctionConstraintNode(const System.Lex.Span& span_, Node* returnTypeExpr_, IdentifierNode* typeParamId_, const ustring& groupId_) :
            base(NodeType.memberFunctionConstraintNode, span_), returnTypeExpr(returnTypeExpr_), typeParamId(typeParamId_), groupId(groupId_), parameters()
        {
            returnTypeExpr->SetParent(this);
            typeParamId->SetParent(this);
        }
        public nothrow const Node* ReturnTypeExpr() const
        {
            return returnTypeExpr.Get();
        }
        public nothrow Node* ReturnTypeExpr()
        {
            return returnTypeExpr.Get();
        }
        public nothrow const IdentifierNode* TypeParamId() const
        {
            return typeParamId.Get();
        }
        public nothrow IdentifierNode* TypeParamId()
        {
            return typeParamId.Get();
        }
        public nothrow const ustring& GroupId() const
        {
            return groupId;
        }
        public nothrow const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            MemberFunctionConstraintNode* clone = new MemberFunctionConstraintNode(GetSpan(), returnTypeExpr->Clone(cloneContext), cast<IdentifierNode*>(typeParamId->Clone(cloneContext)), groupId);
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(returnTypeExpr.Get());
            writer.Write(typeParamId.Get());
            writer.GetBinaryWriter().Write(groupId);
            parameters.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            returnTypeExpr.Reset(reader.ReadNode());
            returnTypeExpr->SetParent(this);
            typeParamId.Reset(reader.ReadIdentifierNode());
            typeParamId->SetParent(this);
            groupId = reader.GetBinaryReader().ReadUString();
            parameters.Read(reader);
            parameters.SetParent(this);
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        public override nothrow string ToString() const
        {
            string s;
            if (!returnTypeExpr.IsNull())
            {
                s.Append(returnTypeExpr->ToString()).Append(" ");
            }
            s.Append(typeParamId->ToString());
            s.Append(".").Append(ToUtf8(groupId));
            s.Append('(', 1);
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                if (i > 0)
                {
                    s.Append(", ");
                }
                ParameterNode* p = parameters[i];
                s.Append(p->TypeExpr()->ToString());
            }
            s.Append(')', 1);
            return s;
        }
        private UniquePtr<Node> returnTypeExpr;
        private UniquePtr<IdentifierNode> typeParamId;
        private ustring groupId;
        private NodeList<ParameterNode> parameters;
    }
    public class FunctionConstraintNode : SignatureConstraintNode
    {
        public nothrow FunctionConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.functionConstraintNode, span_), returnTypeExpr(), groupId(), parameters()
        {
        }
        public nothrow FunctionConstraintNode(const System.Lex.Span& span_, Node* returnTypeExpr_, const ustring& groupId_) :
            base(NodeType.functionConstraintNode, span_), returnTypeExpr(returnTypeExpr_), groupId(groupId_), parameters()
        {
            returnTypeExpr->SetParent(this);
        }
        public nothrow const Node* ReturnTypeExpr() const
        {
            return returnTypeExpr.Get();
        }
        public nothrow Node* ReturnTypeExpr()
        {
            return returnTypeExpr.Get();
        }
        public nothrow const ustring& GroupId() const
        {
            return groupId;
        }
        public nothrow const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            FunctionConstraintNode* clone = new FunctionConstraintNode(GetSpan(), returnTypeExpr->Clone(cloneContext), groupId);
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(returnTypeExpr.Get());
            writer.GetBinaryWriter().Write(groupId);
            parameters.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            returnTypeExpr.Reset(reader.ReadNode());
            returnTypeExpr->SetParent(this);
            groupId = reader.GetBinaryReader().ReadUString();
            parameters.Read(reader);
            parameters.SetParent(this);
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        public override nothrow string ToString() const
        {
            string s;
            if (!returnTypeExpr.IsNull())
            {
                s.Append(returnTypeExpr->ToString()).Append(" ");
            }
            s.Append(ToUtf8(groupId));
            s.Append('(', 1);
            int n = parameters.Count();
            for (int i = 0; i < n; ++i)
            {
                if (i > 0)
                {
                    s.Append(", ");
                }
                ParameterNode* p = parameters[i];
                s.Append(p->TypeExpr()->ToString());
            }
            s.Append(')', 1);
            return s;
        }
        private UniquePtr<Node> returnTypeExpr;
        private ustring groupId;
        private NodeList<ParameterNode> parameters;
    }
    public class AxiomStatementNode : Node
    {
        public nothrow AxiomStatementNode(const System.Lex.Span& span_) :
            base(NodeType.axiomStatementNode, span_), expression(), text()
        {
        }
        public nothrow AxiomStatementNode(const System.Lex.Span& span_, Node* expression_, const ustring& text_) :
            base(NodeType.axiomStatementNode, span_), expression(expression_), text(text_)
        {
            expression->SetParent(this);
        }
        public nothrow const Node* Expression() const
        {
            return expression.Get();
        }
        public nothrow Node* Expression()
        {
            return expression.Get();
        }
        public nothrow const ustring& Text() const
        {
            return text;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new AxiomStatementNode(GetSpan(), expression->Clone(cloneContext), text);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(expression.Get());
            writer.GetBinaryWriter().Write(text);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            expression.Reset(reader.ReadNode());
            expression->SetParent(this);
            text = reader.GetBinaryReader().ReadUString();
        }
        public override nothrow string ToString() const
        {
            return ToUtf8(text);
        }
        private UniquePtr<Node> expression;
        private ustring text;
    }
    public class AxiomNode : Node
    {
        public nothrow AxiomNode(const System.Lex.Span& span_) :
            base(NodeType.axiomNode, span_), id(), parameters(), statements()
        {
        }
        public nothrow AxiomNode(const System.Lex.Span& span_, IdentifierNode* id_) :
            base(NodeType.axiomNode, span_), id(id_), parameters(), statements()
        {
            id->SetParent(this);
        }
        public nothrow const IdentifierNode* Id() const
        {
            return id.Get();
        }
        public nothrow IdentifierNode* Id()
        {
            return id.Get();
        }
        public nothrow const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public nothrow const NodeList<AxiomStatementNode>& Statements() const
        {
            return statements;
        }
        public nothrow void SetBeginBraceSpan(const System.Lex.Span& beginBraceSpan_)
        {
            beginBraceSpan = beginBraceSpan_;
        }
        public nothrow const System.Lex.Span& BeginBraceSpan() const
        {
            return beginBraceSpan;
        }
        public nothrow void SetEndBraceSpan(const System.Lex.Span& endBraceSpan_)
        {
            endBraceSpan = endBraceSpan_;
        }
        public nothrow const System.Lex.Span& EndBraceSpan() const
        {
            return endBraceSpan;
        }
        public nothrow void AddStatement(AxiomStatementNode* statement)
        {
            statement->SetParent(this);
            statements.Add(statement);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            AxiomNode* clone = new AxiomNode(GetSpan(), cast<IdentifierNode*>(id->Clone(cloneContext)));
            int np = parameters.Count();
            for (int i = 0; i < np; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            int ns = statements.Count();
            for (int i = 0; i < ns; ++i)
            {
                clone->AddStatement(cast<AxiomStatementNode*>(statements[i]->Clone(cloneContext)));
            }
            clone->SetBeginBraceSpan(beginBraceSpan);
            clone->SetEndBraceSpan(endBraceSpan);
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(id.Get());
            parameters.Write(writer);
            statements.Write(writer);
            writer.Write(beginBraceSpan);
            writer.Write(endBraceSpan);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            parameters.Read(reader);
            parameters.SetParent(this);
            statements.Read(reader);
            statements.SetParent(this);
            beginBraceSpan = reader.ReadSpan();
            endBraceSpan = reader.ReadSpan();
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        private System.Lex.Span beginBraceSpan;
        private System.Lex.Span endBraceSpan;
        private UniquePtr<IdentifierNode> id;
        private NodeList<ParameterNode> parameters;
        private NodeList<AxiomStatementNode> statements;
    }
    public class ConceptIdNode : Node
    {
        public nothrow ConceptIdNode(const System.Lex.Span& span_) :
            base(NodeType.conceptIdNode, span_), id(), typeParameters()
        {
        }
        public nothrow ConceptIdNode(const System.Lex.Span& span_, IdentifierNode* id_) :
            base(NodeType.conceptIdNode, span_), id(id_), typeParameters()
        {
            id->SetParent(this);
        }
        public nothrow const IdentifierNode* Id() const
        {
            return id.Get();
        }
        public nothrow IdentifierNode* Id()
        {
            return id.Get();
        }
        public nothrow const NodeList<Node>& TypeParameters() const
        {
            return typeParameters;
        }
        public nothrow int Arity() const
        {
            return typeParameters.Count();
        }
        public nothrow void AddTypeParameter(Node* typeParameter)
        {
            typeParameter->SetParent(this);
            typeParameters.Add(typeParameter);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            ConceptIdNode* clone = new ConceptIdNode(GetSpan(), cast<IdentifierNode*>(id->Clone(cloneContext)));
            int n = typeParameters.Count();
            for (int i = 0; i < n; ++i)
            {
                clone->AddTypeParameter(typeParameters[i]->Clone(cloneContext));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(id.Get());
            typeParameters.Write(writer);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            typeParameters.Read(reader);
            typeParameters.SetParent(this);
        }
        public override nothrow string ToString() const
        {
            string s = id->ToString();
            s.Append('<', 1);
            int n = typeParameters.Count();
            for (int i = 0; i < n; ++i)
            {
                if (i > 0)
                {
                    s.Append(", ");
                }
                s.Append(typeParameters[i]->ToString());
            }
            s.Append('>', 1);
            return s;
        }
        private UniquePtr<IdentifierNode> id;
        private NodeList<Node> typeParameters;
    }
    public class ConceptNode : Node
    {
        public nothrow ConceptNode(const System.Lex.Span& span_) :
            base(NodeType.conceptNode, span_), specifiers(Specifiers.none), id(), typeParameters(), refinement(), constraints(), axioms()
        {
        }
        public nothrow ConceptNode(NodeType nodeType_, const System.Lex.Span& span_) :
            base(nodeType_, span_), specifiers(Specifiers.none), id(), typeParameters(), refinement(), constraints(), axioms()
        {
        }
        public nothrow ConceptNode(const System.Lex.Span& span_, Specifiers specifiers_, IdentifierNode* id_) :
            base(NodeType.conceptNode, span_), specifiers(specifiers_), id(id_), typeParameters(), refinement(), constraints(), axioms()
        {
            id->SetParent(this);
        }
        public nothrow ConceptNode(NodeType nodeType_, const System.Lex.Span& span_, Specifiers specifiers_, IdentifierNode* id_) :
            base(nodeType_, span_), specifiers(specifiers_), id(id_), typeParameters(), refinement(), constraints(), axioms()
        {
            id->SetParent(this);
        }
        public nothrow const IdentifierNode* Id() const
        {
            return id.Get();
        }
        public nothrow IdentifierNode* Id()
        {
            return id.Get();
        }
        public nothrow int Arity() const
        {
            return typeParameters.Count();
        }
        public nothrow const NodeList<IdentifierNode>& TypeParameters() const
        {
            return typeParameters;
        }
        public nothrow ConceptIdNode* Refinement()
        {
            return refinement.Get();
        }
        public nothrow const NodeList<ConstraintNode>& Constraints() const
        {
            return constraints;
        }
        public nothrow const NodeList<AxiomNode>& Axioms() const
        {
            return axioms;
        }
        public nothrow void SetBeginBraceSpan(const System.Lex.Span& beginBraceSpan_)
        {
            beginBraceSpan = beginBraceSpan_;
        }
        public nothrow const System.Lex.Span& BeginBraceSpan() const
        {
            return beginBraceSpan;
        }
        public nothrow void SetEndBraceSpan(const System.Lex.Span& endBraceSpan_)
        {
            endBraceSpan = endBraceSpan_;
        }
        public nothrow const System.Lex.Span& EndBraceSpan() const
        {
            return endBraceSpan;
        }
        public nothrow void AddTypeParameter(IdentifierNode* typeParameter)
        {
            typeParameter->SetParent(this);
            typeParameters.Add(typeParameter);
        }
        public nothrow void SetRefinement(ConceptIdNode* refinement_)
        {
            refinement.Reset(refinement_);
            refinement->SetParent(this);
        }
        public nothrow void AddConstraint(ConstraintNode* constraint)
        {
            constraint->SetParent(this);
            constraints.Add(constraint);
        }
        public nothrow void AddAxiom(AxiomNode* axiom_)
        {
            axiom_->SetParent(this);
            axioms.Add(axiom_);
        }
        public override nothrow bool IsConceptNode() const
        {
            return true;
        }
        public virtual nothrow bool IsCommonConceptNode() const
        {
            return false;
        }
        public override nothrow Specifiers GetSpecifiers() const
        {
            return specifiers;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            ConceptNode* clone = new ConceptNode(GetSpan(), specifiers, cast<IdentifierNode*>(id->Clone(cloneContext)));
            int nt = typeParameters.Count();
            for (int i = 0; i < nt; ++i)
            {
                clone->AddTypeParameter(cast<IdentifierNode*>(typeParameters[i]->Clone(cloneContext)));
            }
            if (!refinement.IsNull())
            {
                clone->SetRefinement(cast<ConceptIdNode*>(refinement->Clone(cloneContext)));
            }
            int nc = constraints.Count();
            for (int i = 0; i < nc; ++i)
            {
                clone->AddConstraint(cast<ConstraintNode*>(constraints[i]->Clone(cloneContext)));
            }
            int na = axioms.Count();
            for (int i = 0; i < na; ++i)
            {
                clone->AddAxiom(cast<AxiomNode*>(axioms[i]->Clone(cloneContext)));
            }
            clone->SetBeginBraceSpan(beginBraceSpan);
            clone->SetEndBraceSpan(endBraceSpan);
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow void Write(AstWriter& writer)
        {
            base->Write(writer);
            writer.Write(specifiers);
            writer.Write(id.Get());
            typeParameters.Write(writer);
            bool hasRefinement = refinement != null;
            writer.GetBinaryWriter().Write(hasRefinement);
            if (hasRefinement)
            {
                writer.Write(refinement.Get());
            }
            constraints.Write(writer);
            axioms.Write(writer);
            writer.Write(beginBraceSpan);
            writer.Write(endBraceSpan);
        }
        public override void Read(AstReader& reader)
        {
            base->Read(reader);
            specifiers = reader.ReadSpecifiers();
            id.Reset(reader.ReadIdentifierNode());
            id->SetParent(this);
            typeParameters.Read(reader);
            typeParameters.SetParent(this);
            bool hasRefinement = reader.GetBinaryReader().ReadBool();
            if (hasRefinement)
            {
                refinement.Reset(reader.ReadConceptIdNode());
                refinement->SetParent(this);
            }
            constraints.Read(reader);
            constraints.SetParent(this);
            axioms.Read(reader);
            axioms.SetParent(this);
            beginBraceSpan = reader.ReadSpan();
            endBraceSpan = reader.ReadSpan();
        }
        private Specifiers specifiers;
        private System.Lex.Span beginBraceSpan;
        private System.Lex.Span endBraceSpan;
        private UniquePtr<IdentifierNode> id;
        private NodeList<IdentifierNode> typeParameters;
        private UniquePtr<ConceptIdNode> refinement;
        private NodeList<ConstraintNode> constraints;
        private NodeList<AxiomNode> axioms;
    }
    public abstract class IntrinsicConstraintNode : ConstraintNode
    {
        public nothrow IntrinsicConstraintNode(NodeType nodeType_) :
            base(nodeType_, System.Lex.Span())
        {
        }
    }
    public class SameConstraintNode : IntrinsicConstraintNode
    {
        public nothrow SameConstraintNode() :
            base(NodeType.sameConstraintNode)
        {
        }
        public nothrow SameConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.sameConstraintNode)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new SameConstraintNode();
        }
    }
    public class DerivedConstraintNode : IntrinsicConstraintNode
    {
        public nothrow DerivedConstraintNode() :
            base(NodeType.derivedConstraintNode)
        {
        }
        public nothrow DerivedConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.derivedConstraintNode)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new DerivedConstraintNode();
        }
    }
    public class ConvertibleConstraintNode : IntrinsicConstraintNode
    {
        public nothrow ConvertibleConstraintNode() :
            base(NodeType.convertibleConstraintNode)
        {
        }
        public nothrow ConvertibleConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.convertibleConstraintNode)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new ConvertibleConstraintNode();
        }
    }
    public class ExplicitlyConvertibleConstraintNode : IntrinsicConstraintNode
    {
        public nothrow ExplicitlyConvertibleConstraintNode() :
            base(NodeType.explicitlyConvertibleConstraintNode)
        {
        }
        public nothrow ExplicitlyConvertibleConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.explicitlyConvertibleConstraintNode)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new ExplicitlyConvertibleConstraintNode();
        }
    }
    public class CommonConstraintNode : IntrinsicConstraintNode
    {
        public nothrow CommonConstraintNode() :
            base(NodeType.commonConstraintNode)
        {
        }
        public nothrow CommonConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.commonConstraintNode)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new CommonConstraintNode();
        }
    }
    public class NonreferenceTypeConstraintNode : IntrinsicConstraintNode
    {
        public nothrow NonreferenceTypeConstraintNode() :
            base(NodeType.nonreferenceTypeConstraintNode)
        {
        }
        public nothrow NonreferenceTypeConstraintNode(const System.Lex.Span& span_) :
            base(NodeType.nonreferenceTypeConstraintNode)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new NonreferenceTypeConstraintNode();
        }
    }
    public class SameConceptNode : ConceptNode
    {
        public nothrow SameConceptNode() :
            base(NodeType.sameConceptNode, System.Lex.Span(), Specifiers.public_, new IdentifierNode(System.Lex.Span(), u"Same"))
        {
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"T"));
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"U"));
            AddConstraint(new SameConstraintNode());
        }
        public nothrow SameConceptNode(const System.Lex.Span& span_) :
            base(NodeType.sameConceptNode, span_)
        {
        }
        public override nothrow bool IsIntrinsicConceptNode() const
        {
            return true;
        }
    }
    public class DerivedConceptNode : ConceptNode
    {
        public nothrow DerivedConceptNode() :
            base(NodeType.derivedConceptNode, System.Lex.Span(), Specifiers.public_, new IdentifierNode(System.Lex.Span(), u"Derived"))
        {
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"T"));
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"U"));
            AddConstraint(new DerivedConstraintNode());
        }
        public nothrow DerivedConceptNode(const System.Lex.Span& span_) :
            base(NodeType.derivedConceptNode, span_)
        {
        }
        public override nothrow bool IsIntrinsicConceptNode() const
        {
            return true;
        }
    }
    public class ConvertibleConceptNode : ConceptNode
    {
        public nothrow ConvertibleConceptNode() :
            base(NodeType.convertibleConceptNode, System.Lex.Span(), Specifiers.public_, new IdentifierNode(System.Lex.Span(), u"Convertible"))
        {
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"T"));
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"U"));
            AddConstraint(new ConvertibleConstraintNode());
        }
        public nothrow ConvertibleConceptNode(const System.Lex.Span& span_) :
            base(NodeType.convertibleConceptNode, span_)
        {
        }
        public override nothrow bool IsIntrinsicConceptNode() const
        {
            return true;
        }
    }
    public class ExplicitlyConvertibleConceptNode : ConceptNode
    {
        public nothrow ExplicitlyConvertibleConceptNode() :
            base(NodeType.explicitlyConvertibleConceptNode, System.Lex.Span(), Specifiers.public_, new IdentifierNode(System.Lex.Span(), u"ExplicitlyConvertible"))
        {
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"T"));
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"U"));
            AddConstraint(new ExplicitlyConvertibleConstraintNode());
        }
        public nothrow ExplicitlyConvertibleConceptNode(const System.Lex.Span& span_) :
            base(NodeType.explicitlyConvertibleConceptNode, span_)
        {
        }
        public override nothrow bool IsIntrinsicConceptNode() const
        {
            return true;
        }
    }
    public class CommonConceptNode : ConceptNode
    {
        public nothrow CommonConceptNode() :
            base(NodeType.commonConceptNode, System.Lex.Span(), Specifiers.public_, new IdentifierNode(System.Lex.Span(), u"Common"))
        {
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"T"));
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"U"));
            AddConstraint(new CommonConstraintNode());
        }
        public nothrow CommonConceptNode(const System.Lex.Span& span_) :
            base(NodeType.commonConceptNode, span_)
        {
        }
        public override nothrow bool IsCommonConceptNode() const
        {
            return true;
        }
        public override nothrow bool IsIntrinsicConceptNode() const
        {
            return true;
        }
    }
    public class NonreferenceTypeConceptNode : ConceptNode
    {
        public nothrow NonreferenceTypeConceptNode() :
            base(NodeType.nonreferenceTypeConceptNode, System.Lex.Span(), Specifiers.public_, new IdentifierNode(System.Lex.Span(), u"NonreferenceType"))
        {
            AddTypeParameter(new IdentifierNode(System.Lex.Span(), u"T"));
            AddConstraint(new NonreferenceTypeConstraintNode());
        }
        public nothrow NonreferenceTypeConceptNode(const System.Lex.Span& span_) :
            base(NodeType.nonreferenceTypeConceptNode, span_)
        {
        }
        public override nothrow bool IsIntrinsicConceptNode() const
        {
            return true;
        }
    }
} // namespace Cm.Ast
