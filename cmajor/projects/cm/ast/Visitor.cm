using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Visitor.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulng-project/sngcm/ast/Visitor.cpp' using cpp2cm version 1.0.0

namespace Cm.Ast
{
    public class Visitor
    {
        public virtual ~Visitor()
        {
        }
        public virtual void Visit(BoolNode& boolNode)
        {
        }
        public virtual void Visit(SByteNode& sbyteNode)
        {
        }
        public virtual void Visit(ByteNode& byteNode)
        {
        }
        public virtual void Visit(ShortNode& shortNode)
        {
        }
        public virtual void Visit(UShortNode& ushortNode)
        {
        }
        public virtual void Visit(IntNode& intNode)
        {
        }
        public virtual void Visit(UIntNode& uintNode)
        {
        }
        public virtual void Visit(LongNode& longNode)
        {
        }
        public virtual void Visit(ULongNode& ulongNode)
        {
        }
        public virtual void Visit(FloatNode& floatNode)
        {
        }
        public virtual void Visit(DoubleNode& doubleNode)
        {
        }
        public virtual void Visit(CharNode& charNode)
        {
        }
        public virtual void Visit(WCharNode& wcharNode)
        {
        }
        public virtual void Visit(UCharNode& ucharNode)
        {
        }
        public virtual void Visit(VoidNode& voidNode)
        {
        }
        public virtual void Visit(BooleanLiteralNode& booleanLiteralNode)
        {
        }
        public virtual void Visit(SByteLiteralNode& sbyteLiteralNode)
        {
        }
        public virtual void Visit(ByteLiteralNode& byteLiteralNode)
        {
        }
        public virtual void Visit(ShortLiteralNode& shortLiteralNode)
        {
        }
        public virtual void Visit(UShortLiteralNode& ushortLiteralNode)
        {
        }
        public virtual void Visit(IntLiteralNode& intLiteralNode)
        {
        }
        public virtual void Visit(UIntLiteralNode& uintLiteralNode)
        {
        }
        public virtual void Visit(LongLiteralNode& longLiteralNode)
        {
        }
        public virtual void Visit(ULongLiteralNode& ulongLiteralNode)
        {
        }
        public virtual void Visit(FloatLiteralNode& floatLiteralNode)
        {
        }
        public virtual void Visit(DoubleLiteralNode& doubleLiteralNode)
        {
        }
        public virtual void Visit(CharLiteralNode& charLiteralNode)
        {
        }
        public virtual void Visit(WCharLiteralNode& wcharLiteralNode)
        {
        }
        public virtual void Visit(UCharLiteralNode& ucharLiteralNode)
        {
        }
        public virtual void Visit(StringLiteralNode& stringLiteralNode)
        {
        }
        public virtual void Visit(WStringLiteralNode& wstringLiteralNode)
        {
        }
        public virtual void Visit(UStringLiteralNode& ustringLiteralNode)
        {
        }
        public virtual void Visit(NullLiteralNode& nullLiteralNode)
        {
        }
        public virtual void Visit(ArrayLiteralNode& arrayLiteralNode)
        {
        }
        public virtual void Visit(StructuredLiteralNode& structuredLiteralNode)
        {
        }
        public virtual void Visit(UuidLiteralNode& uuidLiteralNode)
        {
        }
        public virtual void Visit(CompileUnitNode& compileUnitNode)
        {
        }
        public virtual void Visit(NamespaceNode& namespaceNode)
        {
        }
        public virtual void Visit(AliasNode& aliasNode)
        {
        }
        public virtual void Visit(NamespaceImportNode& namespaceImportNode)
        {
        }
        public virtual void Visit(IdentifierNode& identifierNode)
        {
        }
        public virtual void Visit(CursorIdNode& cursorIdNode)
        {
        }
        public virtual void Visit(TemplateIdNode& templateIdNode)
        {
        }
        public virtual void Visit(FunctionNode& functionNode)
        {
        }
        public virtual void Visit(ClassNode& classNode)
        {
        }
        public virtual void Visit(ThisInitializerNode& thisInitializerNode)
        {
        }
        public virtual void Visit(BaseInitializerNode& baseInitializerNode)
        {
        }
        public virtual void Visit(MemberInitializerNode& memberInitializerNode)
        {
        }
        public virtual void Visit(StaticConstructorNode& staticConstructorNode)
        {
        }
        public virtual void Visit(ConstructorNode& constructorNode)
        {
        }
        public virtual void Visit(DestructorNode& destructorNode)
        {
        }
        public virtual void Visit(MemberFunctionNode& memberFunctionNode)
        {
        }
        public virtual void Visit(ConversionFunctionNode& conversionFunctionNode)
        {
        }
        public virtual void Visit(MemberVariableNode& memberVariableNode)
        {
        }
        public virtual void Visit(InterfaceNode& interfaceNode)
        {
        }
        public virtual void Visit(DelegateNode& delegateNode)
        {
        }
        public virtual void Visit(ClassDelegateNode& classDelegateNode)
        {
        }
        public virtual void Visit(ParenthesizedConstraintNode& parenthesizedConstraintNode)
        {
        }
        public virtual void Visit(DisjunctiveConstraintNode& disjunctiveConstraintNode)
        {
        }
        public virtual void Visit(ConjunctiveConstraintNode& conjunctiveConstraintNode)
        {
        }
        public virtual void Visit(WhereConstraintNode& whereConstraintNode)
        {
        }
        public virtual void Visit(PredicateConstraintNode& predicateConstraintNode)
        {
        }
        public virtual void Visit(IsConstraintNode& isConstraintNode)
        {
        }
        public virtual void Visit(MultiParamConstraintNode& multiParamConstraintNode)
        {
        }
        public virtual void Visit(TypeNameConstraintNode& typeNameConstraintNode)
        {
        }
        public virtual void Visit(ConstructorConstraintNode& constructorConstraintNode)
        {
        }
        public virtual void Visit(DestructorConstraintNode& destructorConstraintNode)
        {
        }
        public virtual void Visit(MemberFunctionConstraintNode& memberFunctionConstraintNode)
        {
        }
        public virtual void Visit(FunctionConstraintNode& functionConstraintNode)
        {
        }
        public virtual void Visit(AxiomStatementNode& axiomStatementNode)
        {
        }
        public virtual void Visit(AxiomNode& axiomNode)
        {
        }
        public virtual void Visit(ConceptIdNode& conceptIdNode)
        {
        }
        public virtual void Visit(ConceptNode& conceptNode)
        {
        }
        public virtual void Visit(SameConstraintNode& sameConstraintNode)
        {
        }
        public virtual void Visit(DerivedConstraintNode& derivedConstraintNode)
        {
        }
        public virtual void Visit(ConvertibleConstraintNode& convertibleConstraintNode)
        {
        }
        public virtual void Visit(ExplicitlyConvertibleConstraintNode& explicitlyConvertibleConstraintNode)
        {
        }
        public virtual void Visit(CommonConstraintNode& commonConstraintNode)
        {
        }
        public virtual void Visit(NonreferenceTypeConstraintNode& nonreferenceTypeConstraintNode)
        {
        }
        public virtual void Visit(LabelNode& labelNode)
        {
        }
        public virtual void Visit(LabeledStatementNode& labeledStatementNode)
        {
        }
        public virtual void Visit(CompoundStatementNode& compoundStatementNode)
        {
        }
        public virtual void Visit(ReturnStatementNode& returnStatementNode)
        {
        }
        public virtual void Visit(IfStatementNode& ifStatementNode)
        {
        }
        public virtual void Visit(WhileStatementNode& whileStatementNode)
        {
        }
        public virtual void Visit(DoStatementNode& doStatementNode)
        {
        }
        public virtual void Visit(ForStatementNode& forStatementNode)
        {
        }
        public virtual void Visit(BreakStatementNode& breakStatementNode)
        {
        }
        public virtual void Visit(ContinueStatementNode& continueStatementNode)
        {
        }
        public virtual void Visit(GotoStatementNode& gotoStatementNode)
        {
        }
        public virtual void Visit(ConstructionStatementNode& constructionStatementNode)
        {
        }
        public virtual void Visit(DeleteStatementNode& deleteStatementNode)
        {
        }
        public virtual void Visit(DestroyStatementNode& destroyStatementNode)
        {
        }
        public virtual void Visit(AssignmentStatementNode& assignmentStatementNode)
        {
        }
        public virtual void Visit(ExpressionStatementNode& expressionStatementNode)
        {
        }
        public virtual void Visit(EmptyStatementNode& emptyStatementNode)
        {
        }
        public virtual void Visit(RangeForStatementNode& rangeForStatementNode)
        {
        }
        public virtual void Visit(SwitchStatementNode& switchStatementNode)
        {
        }
        public virtual void Visit(CaseStatementNode& caseStatementNode)
        {
        }
        public virtual void Visit(DefaultStatementNode& defaultStatementNode)
        {
        }
        public virtual void Visit(GotoCaseStatementNode& gotoCaseStatementNode)
        {
        }
        public virtual void Visit(GotoDefaultStatementNode& gotoDefaultStatementNode)
        {
        }
        public virtual void Visit(ThrowStatementNode& throwStatementNode)
        {
        }
        public virtual void Visit(TryStatementNode& tryStatementNode)
        {
        }
        public virtual void Visit(CatchNode& catchNode)
        {
        }
        public virtual void Visit(AssertStatementNode& assertStatementNode)
        {
        }
        public virtual void Visit(ConditionalCompilationPartNode& conditionalCompilationPartNode)
        {
        }
        public virtual void Visit(ConditionalCompilationDisjunctionNode& conditionalCompilationDisjunctionNode)
        {
        }
        public virtual void Visit(ConditionalCompilationConjunctionNode& conditionalCompilationConjunctionNode)
        {
        }
        public virtual void Visit(ConditionalCompilationNotNode& conditionalCompilationNotNode)
        {
        }
        public virtual void Visit(ConditionalCompilationPrimaryNode& conditionalCompilationPrimaryNode)
        {
        }
        public virtual void Visit(ParenthesizedConditionalCompilationExpressionNode& parenthesizeCondCompExprNode)
        {
        }
        public virtual void Visit(ConditionalCompilationStatementNode& conditionalCompilationStatementNode)
        {
        }
        public virtual void Visit(TypedefNode& typedefNode)
        {
        }
        public virtual void Visit(ConstantNode& constantNode)
        {
        }
        public virtual void Visit(EnumTypeNode& enumTypeNode)
        {
        }
        public virtual void Visit(EnumConstantNode& enumConstantNode)
        {
        }
        public virtual void Visit(ParameterNode& parameterNode)
        {
        }
        public virtual void Visit(TemplateParameterNode& templateParameterNode)
        {
        }
        public virtual void Visit(ConstNode& constNode)
        {
        }
        public virtual void Visit(LValueRefNode& lvalueRefNode)
        {
        }
        public virtual void Visit(RValueRefNode& rvalueRefNode)
        {
        }
        public virtual void Visit(PointerNode& pointerNode)
        {
        }
        public virtual void Visit(ArrayNode& arrayNode)
        {
        }
        public virtual void Visit(DotNode& dotNode)
        {
        }
        public virtual void Visit(ArrowNode& arrowNode)
        {
        }
        public virtual void Visit(EquivalenceNode& equivalenceNode)
        {
        }
        public virtual void Visit(ImplicationNode& implicationNode)
        {
        }
        public virtual void Visit(DisjunctionNode& disjunctionNode)
        {
        }
        public virtual void Visit(ConjunctionNode& conjunctionNode)
        {
        }
        public virtual void Visit(BitOrNode& bitOrNode)
        {
        }
        public virtual void Visit(BitXorNode& bitXorNode)
        {
        }
        public virtual void Visit(BitAndNode& bitAndNode)
        {
        }
        public virtual void Visit(EqualNode& equalNode)
        {
        }
        public virtual void Visit(NotEqualNode& notEqualNode)
        {
        }
        public virtual void Visit(LessNode& lessNode)
        {
        }
        public virtual void Visit(GreaterNode& greaterNode)
        {
        }
        public virtual void Visit(LessOrEqualNode& lessOrEqualNode)
        {
        }
        public virtual void Visit(GreaterOrEqualNode& greaterOrEqualNode)
        {
        }
        public virtual void Visit(ShiftLeftNode& shiftLeftNode)
        {
        }
        public virtual void Visit(ShiftRightNode& shiftRightNode)
        {
        }
        public virtual void Visit(AddNode& addNode)
        {
        }
        public virtual void Visit(SubNode& subNode)
        {
        }
        public virtual void Visit(MulNode& mulNode)
        {
        }
        public virtual void Visit(DivNode& divNode)
        {
        }
        public virtual void Visit(RemNode& remNode)
        {
        }
        public virtual void Visit(NotNode& notNode)
        {
        }
        public virtual void Visit(UnaryPlusNode& unaryPlusNode)
        {
        }
        public virtual void Visit(UnaryMinusNode& unaryMinusNode)
        {
        }
        public virtual void Visit(PrefixIncrementNode& prefixIncrementNode)
        {
        }
        public virtual void Visit(PrefixDecrementNode& prefixDecrementNode)
        {
        }
        public virtual void Visit(DerefNode& derefNode)
        {
        }
        public virtual void Visit(AddrOfNode& addrOfNode)
        {
        }
        public virtual void Visit(ComplementNode& complementNode)
        {
        }
        public virtual void Visit(IsNode& isNode)
        {
        }
        public virtual void Visit(AsNode& asNode)
        {
        }
        public virtual void Visit(IndexingNode& indexingNode)
        {
        }
        public virtual void Visit(InvokeNode& invokeNode)
        {
        }
        public virtual void Visit(PostfixIncrementNode& postfixIncrementNode)
        {
        }
        public virtual void Visit(PostfixDecrementNode& postfixDecrementNode)
        {
        }
        public virtual void Visit(SizeOfNode& sizeOfNode)
        {
        }
        public virtual void Visit(TypeNameNode& typeNameNode)
        {
        }
        public virtual void Visit(TypeIdNode& typeIdNode)
        {
        }
        public virtual void Visit(CastNode& castNode)
        {
        }
        public virtual void Visit(ConstructNode& constructNode)
        {
        }
        public virtual void Visit(NewNode& newNode)
        {
        }
        public virtual void Visit(ThisNode& thisNode)
        {
        }
        public virtual void Visit(BaseNode& baseNode)
        {
        }
        public virtual void Visit(ParenthesizedExpressionNode& parenthesizedExpressionNode)
        {
        }
        public virtual void Visit(GlobalVariableNode& globalVariableNode)
        {
        }
        public virtual void Visit(Attribute& attribute)
        {
        }
        public virtual void Visit(Attributes& attributes)
        {
        }
        public virtual void Visit(CommentNode& commentNode)
        {
        }
    }
} // namespace Cm.Ast
