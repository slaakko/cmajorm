// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using System.Collections;
using Cm.Ast;
using Cm.Parser;

void PrintHelp()
{
    Console.Out() << "Usage: cmcmparser [options] { file.cm | file.cmp | file.cms }" << endl();
    Console.Out() << "Parse Cmajor source file file.cm, project file.cmp or solution file.cms" << endl();
    Console.Out() << "Options:" << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl();
    Console.Out() << "--verbose | -v" << endl();
    Console.Out() << "  Be verbose." << endl();
}

void ParseSourceFile(const string& fileName, int index, bool verbose)
{
    if (verbose)
    {
        Console.Out() << ">>> " << fileName << endl();
    }
    CmajorLexer lexer(ToUtf32(File.ReadAllText(fileName)), fileName, index);
    ParsingContext ctx;
    UniquePtr<CompileUnitNode> compileUnit = CompileUnitParser.Parse(lexer, &ctx);
}

void ParseProject(const string& projectFileName, int index, bool verbose)
{
    if (verbose)
    {
        Console.Out() << ">> " << projectFileName << endl();
    }
    ContainerFileLexer lexer(ToUtf32(File.ReadAllText(projectFileName)), projectFileName, index);
    UniquePtr<Project> project = ProjectFileParser.Parse(lexer, "debug", BackEnd.llvm, "gcc");
    project->ResolveDeclarations();
    long n = project->SourceFilePaths().Count();
    for (long i = 0; i < n; ++i)
    {
        ParseSourceFile(project->SourceFilePaths()[i], cast<int>(i), verbose);
    }
}

void ParseSolution(const string& solutionFileName, int index, bool verbose)
{
    if (verbose)
    {
        Console.Out() << "> " << solutionFileName << endl();
    }
    ContainerFileLexer lexer(ToUtf32(File.ReadAllText(solutionFileName)), solutionFileName, index);
    UniquePtr<Solution> solution = SolutionFileParser.Parse(lexer);
    solution->ResolveDeclarations();
    long n = solution->ProjectFilePaths().Count();
    for (long i = 0; i < n; ++i)
    {
        ParseProject(solution->ProjectFilePaths()[i], cast<int>(i), verbose);
    }
}

int main(int argc, const char** argv)
{
    try
    {
        List<string> files;
        bool verbose = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                string unknownOption;
                for (char o : options)
                {
                    switch (o)
                    {
                        case 'h': PrintHelp(); return 1;
                        case 'v': verbose = true; break;
                        default:
                        {
                            unknownOption = string(o);
                            break;
                        }
                    }
                    if (!unknownOption.IsEmpty())
                    {
                        throw Exception("unknown option '-" + unknownOption + "'");
                    }
                }
            }
            else
            {
                files.Add(arg);
            }
        }
        long n = files.Count();
        if (n == 0)
        {
            throw Exception("no files given");
        }
        for (long i = 0; i < n; ++i)
        {
            string fileName = GetFullPath(files[i]);
            string extension = Path.GetExtension(fileName);
            if (extension == ".cm")
            {
                ParseSourceFile(fileName, cast<int>(i), verbose);
            }
            else if (extension == ".cmp")
            {
                ParseProject(fileName, cast<int>(i), verbose);
            }
            else if (extension == ".cms")
            {
                ParseSolution(fileName, cast<int>(i), verbose);
            }
            else
            {
                throw Exception("unknown extension '" + extension + "'");
            }
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
