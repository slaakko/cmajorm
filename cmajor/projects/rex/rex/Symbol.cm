using System;
using System.Collections;

namespace rex
{
    public const char eps = '\0';

    public abstract class Symbol
    {
        public default virtual ~Symbol();
        public abstract nothrow bool Match(char c) const;
        public abstract nothrow string ToString() const;
    }

    public class Char : Symbol
    {
        public nothrow Char(char c_) : chr(c_)
        {
        }
        public override nothrow bool Match(char c) const
        {
            return chr == c;
        }
        public override nothrow string ToString() const
        {
            if (chr == eps)
            {
                return "<eps>";
            }
            else
            {
                return string(chr);
            }
        }
        private char chr;
    }

    public class Any : Symbol
    {
        public override nothrow bool Match(char c) const
        {
            return true;
        }
        public override nothrow string ToString() const
        {
            return "<any>";
        }
    }

    public class Range : Symbol
    {
        public nothrow Range(char start_, char end_) : start(start_), end(end_)
        {
        }
        public override nothrow bool Match(char c) const
        {
            return c >= start && c <= end;
        }
        public nothrow inline char Start() const
        {
            return start;
        }
        public nothrow inline char End() const
        {
            return end;
        }
        public override nothrow string ToString() const
        {
            string s;
            s.Append(start).Append('-').Append(end);
            return s;
        }
        private char start;
        private char end;
    }

    public nothrow inline bool operator==(const Range& left, const Range& right)
    {
        return left.Start() == right.Start() && left.End() == right.End();
    }

    public nothrow ulong GetHashCode(const Range& range)
    {
        return (cast<ulong>(range.Start()) << 8u) | cast<ulong>(range.End());
    }

    public class Class : Symbol
    {
        public nothrow Class() : inverse(false)
        {
        }
        public nothrow void SetInverse()
        {
            inverse = true;
        }
        public nothrow void AddSymbol(Symbol* symbol)
        {
            symbols.Add(symbol);
        }
        public override nothrow bool Match(char c) const
        {
            bool match = false;
            for (Symbol* symbol : symbols)
            {
                if (symbol->Match(c))
                {
                    match = true;
                    break;
                }
            }
            return match != inverse;
        }
        public override nothrow string ToString() const
        {
            string s = "[";
            if (inverse)
            {
                s.Append('^');
            }
            for (Symbol* symbol : symbols)
            {
                s.Append(symbol->ToString());
            }
            s.Append(']');
            return s;
        }
        private bool inverse;
        private List<Symbol*> symbols;
    }
}
