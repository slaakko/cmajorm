using System;
using System.Collections;

namespace rex
{
    public class Context
    {
        public nothrow Context() : nextStateId(0), any(), epsilon(eps)
        {
        }
        public ~Context()
        {
            for (State* state: states)
            {
                delete state;
            }
            states.Clear();
            for (Symbol* symbol : symbols)
            {
                delete symbol;
            }
            symbols.Clear();
        }
        public nothrow State* MakeState()
        {
            State* state = new State(nextStateId++);
            states.Add(state);
            return state;
        }
        public nothrow Symbol* MakeChar(char c)
        {
            HashMap<char, Symbol*>.ConstIterator it = charSymbols.CFind(c);
            if (it != charSymbols.CEnd())
            {
                return it->second;
            }
            Symbol* symbol = new Char(c);
            symbols.Add(symbol);
            charSymbols[c] = symbol;
            return symbol;
        }
        public nothrow Symbol* MakeEpsilon()
        {
            return &epsilon;
        }
        public nothrow Symbol* MakeAny()
        {
            return &any;
        }
        public nothrow Symbol* MakeRange(char start, char end)
        {
            Range range(start, end);
            HashMap<Range, Symbol*>.ConstIterator it = rangeSymbols.CFind(range);
            if (it != rangeSymbols.CEnd())
            {
                return it->second;
            }
            Symbol* symbol = new Range(start, end);
            symbols.Add(symbol);
            rangeSymbols[range] = symbol;
            return symbol;
        }
        public nothrow Class* MakeClass()
        {
            Class* cls = new Class();
            symbols.Add(cast<Symbol*>(cls));
            return cls;
        }
        public nothrow const List<State*>& States() const
        {
            return states;
        }
        private int nextStateId;
        private List<State*> states;
        private List<Symbol*> symbols;
        private HashMap<char, Symbol*> charSymbols;
        private HashMap<Range, Symbol*> rangeSymbols;
        private Any any;
        private Char epsilon;
    }
}
