using System;
using System.Windows;
using System.IO;
using System.Collections;

class MainWindow : Window
{
    public MainWindow() : base("Abstract Syntax Tree Viewer")
    {
        SetBackgroundColor(Color.FloralWhite());
        UniquePtr<MenuBar> menuBar(new MenuBar());
        UniquePtr<MenuItem> fileItem(new MenuItem("&File"));
        UniquePtr<MenuItem> newItem(new MenuItem("&New"));
        newItem->AddMenuItem(new MenuItem("&Item"));
        newItem->AddMenuItem(new MenuItem("&Project"));
        fileItem->AddMenuItem(newItem.Release());
        UniquePtr<MenuItem> openItem(new MenuItem("&Open..."));
        openItem->SetShortcut(Keys.f3);
        openItem->ClickEvent().AddHandler(OpenClick);
        fileItem->AddMenuItem(openItem.Release());
        fileItem->AddMenuItem(new MenuItemSeparator());
        UniquePtr<MenuItem> exitMenuItem(new MenuItem("E&xit"));
        exitMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f4));
        exitMenuItem->ClickEvent().AddHandler(ExitClick);
        fileItem->AddMenuItem(exitMenuItem.Release());
        menuBar->AddMenuItem(fileItem.Release());
        UniquePtr<MenuItem> windowItem(new MenuItem("&Window"));
        windowItem->AddMenuItem(new MenuItem("&Close all"));
        menuBar->AddMenuItem(windowItem.Release());
        UniquePtr<MenuItem> helpItem(new MenuItem("&Help"));
        helpItem->AddMenuItem(new MenuItem("&About"));
        menuBar->AddMenuItem(helpItem.Release());
        AddChild(menuBar.Release());
        UniquePtr<SplitContainer> splitContainer(new SplitContainer(Orientation.horizontal, 400, Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
        AddChild(splitContainer.Release());
        UniquePtr<LogView> logView(new LogView(Size(0, 200)));
        Application.SetLogView(logView.Get());
        AddChild(logView.Release());
    }
    protected override void OnPaint(PaintEventArgs& args)
    {
        base->OnPaint(args);
    }
    protected override bool ProcessMessage(Message& message)
    {
        return base->ProcessMessage(message);
    }
    protected override void OnKeyDown(KeyEventArgs& args)
    {
        base->OnKeyDown(args);
        if (!args.handled && args.keyData == cast<Keys>(Keys.altModifier | Keys.c))
        {
            LogView* logView = Application.GetLogView();
            if (logView != null)
            {
                logView->Clear();
            }
        }
    }
    private void ExitClick()
    {
        Close();
    }
    private void OpenClick()
    {
        try
        {
            List<Pair<string, string>> descriptionFilterPairs;
            descriptionFilterPairs.Add(Pair<string, string>("Cmajor source files (*.cm)", "*.cm"));
            string initialDirectory;
            const char* cmajorRoot = RtGetEnvironmentVariable("CMAJOR_ROOT");
            string defaultFilePath;
            if (cmajorRoot != null && *cmajorRoot != '\0')
            {
                initialDirectory = cmajorRoot;
            }
            string filePath;
            string currentDirectory;
            List<string> fileNames;
            bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".cm",
                OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
            if (selected)
            {
                if (!fileNames.IsEmpty())
                {
                    filePath = Path.Combine(currentDirectory, fileNames[0]);
                }
                if (!filePath.IsEmpty() && File.Exists(filePath))
                {
                    
                }
                else
                {
                    throw Exception("file path is empty or does not exist");
                }
            }
        }
        catch (const Exception& ex)
        {
            MessageBox.Show(ex.Message());
        }
    }
}

int main()
{
    try
    {
        MainWindow mainWindow;
        int exitCode = Application.Run(mainWindow);
        return exitCode;
    }
    catch (const Exception& ex)
    {
        MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
        try
        {
            StreamWriter errorWriter = File.CreateText("error.txt");
            errorWriter << ex.ToString() << endl();
        }
        catch (const Exception&)
        {
        }
        return 1;
    }
    return 0;
}
