using System;
using System.Numerics.Multiprecision;

namespace BigNumCalc
{
    grammar BigNumExpressionGrammar
    {
        skip Spaces;
        
        Expr(EvaluationStack* s, var uchar op)
            ::= Term(s):left
            (
                ('+' | '-'){ op = *matchBegin; }
                Term(s):right
                {
                    BigValue* r = s->Pop();
                    BigValue* l = s->Pop();
                    s->Push(Evaluate(l, r, op));
                }
            )*
            ;
            
        Term(EvaluationStack* s, var uchar op)
            ::= Factor(s):left
            (
                ('*' | '/'){ op = *matchBegin; }
                Factor(s):right
                {
                    BigValue* r = s->Pop();
                    BigValue* l = s->Pop();
                    s->Push(Evaluate(l, r, op));
                }
            )*
            ;
            
        Factor(EvaluationStack* s)
            ::= ('-' Factor(s):f1){ s->Push(Evaluate(s->Pop(), '-')); }
            |   ('+' Factor(s):f2){ s->Push(Evaluate(s->Pop(), '+')); }
            |   Number(s)
            |   '(' Expr(s) ')'
            ;
            
        Number(EvaluationStack* s)
            ::= BigFloatLiteral:f{ s->Push(f); }
            |   BigRationalLiteral:r{ s->Push(r); }
            |   BigIntLiteral:i{ s->Push(i); }
            ;
            
        ExponentPart
            ::= token([eE]('+' | '-')? digit+)
            ;
            
        BigFloatLiteral : BigValue*
            ::= token(digit+ '.' digit+ ExponentPart? | digit+ ExponentPart){ BigFloat val(ToUtf8(ustring(matchBegin, matchEnd))); value = new BigFloatValue(val); }
            ;
            
        BigRationalLiteral : BigValue*
            ::= token('[' (digit+ ('/' digit+)?){ BigRational val(ToUtf8(ustring(matchBegin, matchEnd))); value = new BigRationalValue(val); } ']')
            ;
            
        BigIntLiteral : BigValue*
            ::= token(digit+){ BigInt val(ToUtf8(ustring(matchBegin, matchEnd))); value = new BigIntValue(val); }
            ;
        
        Spaces
            ::= space+
            ;
    }
}
