using System;
using System.Collections;
using System.Text.Parsing;
using System.Numerics.Multiprecision;

// this source file has been automatically generated from 'BigNumExpressionGrammar.parser' using cmparsergen version 2.0.0.

namespace BigNumCalc
{
    public class BigNumExpressionGrammar : System.Text.Parsing.Grammar
    {
        public BigNumExpressionGrammar() : this(new ParsingDomain())
        {
        }
        public BigNumExpressionGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("BigNumExpressionGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("BigNumCalc")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public void Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, EvaluationStack* s)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(s)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
        }

        public class ExprRule : System.Text.Parsing.RuleParser
        {
            public ExprRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("EvaluationStack*"), ToUtf32("s")));
                AddLocalVariable(AttrOrVar(ToUtf32("uchar"), ToUtf32("op")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> s_value = stack.Pop();
                context->s = *cast<ValueObject<EvaluationStack*>*>(s_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* leftNonterminalParser = GetNonterminal(ToUtf32("left"));
                leftNonterminalParser->SetPre(Preleft);
                NonterminalParser* rightNonterminalParser = GetNonterminal(ToUtf32("right"));
                rightNonterminalParser->SetPre(Preright);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->op = *matchBegin;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                BigValue* r = context->s->Pop();
                BigValue* l = context->s->Pop();
                context->s->Push(Evaluate(l, r, context->op));
            }
            public void Preleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public void Preright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : s(), op()
                {
                }
                public EvaluationStack* s;
                public uchar op;
            }
        }

        public class TermRule : System.Text.Parsing.RuleParser
        {
            public TermRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("EvaluationStack*"), ToUtf32("s")));
                AddLocalVariable(AttrOrVar(ToUtf32("uchar"), ToUtf32("op")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> s_value = stack.Pop();
                context->s = *cast<ValueObject<EvaluationStack*>*>(s_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* leftNonterminalParser = GetNonterminal(ToUtf32("left"));
                leftNonterminalParser->SetPre(Preleft);
                NonterminalParser* rightNonterminalParser = GetNonterminal(ToUtf32("right"));
                rightNonterminalParser->SetPre(Preright);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->op = *matchBegin;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                BigValue* r = context->s->Pop();
                BigValue* l = context->s->Pop();
                context->s->Push(Evaluate(l, r, context->op));
            }
            public void Preleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public void Preright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : s(), op()
                {
                }
                public EvaluationStack* s;
                public uchar op;
            }
        }

        public class FactorRule : System.Text.Parsing.RuleParser
        {
            public FactorRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("EvaluationStack*"), ToUtf32("s")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> s_value = stack.Pop();
                context->s = *cast<ValueObject<EvaluationStack*>*>(s_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* f1NonterminalParser = GetNonterminal(ToUtf32("f1"));
                f1NonterminalParser->SetPre(Pref1);
                NonterminalParser* f2NonterminalParser = GetNonterminal(ToUtf32("f2"));
                f2NonterminalParser->SetPre(Pref2);
                NonterminalParser* numberNonterminalParser = GetNonterminal(ToUtf32("Number"));
                numberNonterminalParser->SetPre(PreNumber);
                NonterminalParser* exprNonterminalParser = GetNonterminal(ToUtf32("Expr"));
                exprNonterminalParser->SetPre(PreExpr);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s->Push(Evaluate(context->s->Pop(), '-'));
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s->Push(Evaluate(context->s->Pop(), '+'));
            }
            public void Pref1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public void Pref2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public void PreNumber(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public void PreExpr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<EvaluationStack*>(context->s)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : s()
                {
                }
                public EvaluationStack* s;
            }
        }

        public class NumberRule : System.Text.Parsing.RuleParser
        {
            public NumberRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("EvaluationStack*"), ToUtf32("s")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> s_value = stack.Pop();
                context->s = *cast<ValueObject<EvaluationStack*>*>(s_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                NonterminalParser* fNonterminalParser = GetNonterminal(ToUtf32("f"));
                fNonterminalParser->SetPost(Postf);
                NonterminalParser* rNonterminalParser = GetNonterminal(ToUtf32("r"));
                rNonterminalParser->SetPost(Postr);
                NonterminalParser* iNonterminalParser = GetNonterminal(ToUtf32("i"));
                iNonterminalParser->SetPost(Posti);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s->Push(context->fromf);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s->Push(context->fromr);
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s->Push(context->fromi);
            }
            public void Postf(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromf_value = stack.Pop();
                    context->fromf = *cast<ValueObject<BigValue*>*>(fromf_value.Get());
                }
            }
            public void Postr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromr_value = stack.Pop();
                    context->fromr = *cast<ValueObject<BigValue*>*>(fromr_value.Get());
                }
            }
            public void Posti(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromi_value = stack.Pop();
                    context->fromi = *cast<ValueObject<BigValue*>*>(fromi_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : s(), fromf(), fromr(), fromi()
                {
                }
                public EvaluationStack* s;
                public BigValue* fromf;
                public BigValue* fromr;
                public BigValue* fromi;
            }
        }

        public class BigFloatLiteralRule : System.Text.Parsing.RuleParser
        {
            public BigFloatLiteralRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("BigValue*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<BigValue*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                BigFloat val(ToUtf8(ustring(matchBegin, matchEnd)));
                context->value = new BigFloatValue(val);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public BigValue* value;
            }
        }

        public class BigRationalLiteralRule : System.Text.Parsing.RuleParser
        {
            public BigRationalLiteralRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("BigValue*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<BigValue*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                BigRational val(ToUtf8(ustring(matchBegin, matchEnd)));
                context->value = new BigRationalValue(val);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public BigValue* value;
            }
        }

        public class BigIntLiteralRule : System.Text.Parsing.RuleParser
        {
            public BigIntLiteralRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("BigValue*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<BigValue*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                BigInt val(ToUtf8(ustring(matchBegin, matchEnd)));
                context->value = new BigIntValue(val);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public BigValue* value;
            }
        }

        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRule(new ExprRule(ToUtf32("Expr"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("left"), ToUtf32("Term"), 1),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.CharParser('+'),
                                            new System.Text.Parsing.CharParser('-')))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("right"), ToUtf32("Term"), 1))))))));
            AddRule(new TermRule(ToUtf32("Term"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("left"), ToUtf32("Factor"), 1),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.CharParser('*'),
                                            new System.Text.Parsing.CharParser('/')))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("right"), ToUtf32("Factor"), 1))))))));
            AddRule(new FactorRule(ToUtf32("Factor"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.CharParser('-'),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("f1"), ToUtf32("Factor"), 1)))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.CharParser('+'),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("f2"), ToUtf32("Factor"), 1))))),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Number"), ToUtf32("Number"), 1)),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('('),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Expr"), ToUtf32("Expr"), 1)),
                        new System.Text.Parsing.CharParser(')')))));
            AddRule(new NumberRule(ToUtf32("Number"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("f"), ToUtf32("BigFloatLiteral"), 0)),
                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("r"), ToUtf32("BigRationalLiteral"), 0))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("i"), ToUtf32("BigIntLiteral"), 0)))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("ExponentPart"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.TokenParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharSetParser(ToUtf32("eE")),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.CharParser('+'),
                                        new System.Text.Parsing.CharParser('-'))))),
                        new System.Text.Parsing.PositiveParser(
                            new System.Text.Parsing.DigitParser())))));
            AddRule(new BigFloatLiteralRule(ToUtf32("BigFloatLiteral"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.TokenParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.PositiveParser(
                                            new System.Text.Parsing.DigitParser()),
                                        new System.Text.Parsing.CharParser('.')),
                                    new System.Text.Parsing.PositiveParser(
                                        new System.Text.Parsing.DigitParser())),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("ExponentPart"), ToUtf32("ExponentPart"), 0))),
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.PositiveParser(
                                    new System.Text.Parsing.DigitParser()),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("ExponentPart"), ToUtf32("ExponentPart"), 0)))))));
            AddRule(new BigRationalLiteralRule(ToUtf32("BigRationalLiteral"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.TokenParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('['),
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.PositiveParser(
                                            new System.Text.Parsing.DigitParser()),
                                        new System.Text.Parsing.OptionalParser(
                                            new System.Text.Parsing.GroupingParser(
                                                new System.Text.Parsing.SequenceParser(
                                                    new System.Text.Parsing.CharParser('/'),
                                                    new System.Text.Parsing.PositiveParser(
                                                        new System.Text.Parsing.DigitParser())))))))),
                        new System.Text.Parsing.CharParser(']')))));
            AddRule(new BigIntLiteralRule(ToUtf32("BigIntLiteral"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.TokenParser(
                        new System.Text.Parsing.PositiveParser(
                            new System.Text.Parsing.DigitParser())))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Spaces"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.PositiveParser(
                    new System.Text.Parsing.SpaceParser())));
            SetSkipRuleName(ToUtf32("Spaces"));
        }
    }
} // BigNumCalc
