using System;
using System.Collections;
using System.Lex;
using System.Parsing;
using System;
using System.Numerics.Multiprecision;
using BigNumTokens;
using BigNumCalc;

// this file has been automatically generated from 'D:/work/cmajorm/cmajor/projects/examples/BigNumCalc/BigNumExpressionParser.parser' using soulcm parser generator scmpg version 3.0.0

public static class BigNumExpressionParser
{
    public static void Parse(BigNumLexer& lexer, EvaluationStack* s)
    {
        #if (DEBUG)
            if (lexer.Log() != null)
            {
                lexer.Log()->WriteBeginRule(u"parse");
                lexer.Log()->IncIndent();
            }
        #endif
        ++lexer;
        System.Lex.Span span = lexer.GetSpan();
        Match match = Expr(lexer, s);
        if (match.hit)
        {
            if (*lexer == System.Lex.END_TOKEN)
            {
                return;
            }
            else
            {
                lexer.ThrowExpectationFailure(lexer.GetSpan(), GetEndTokenInfo());
            }
        }
        else
        {
            lexer.ThrowExpectationFailure(span, u"Expr");
        }
        return;
    }
    public static Match Expr(BigNumLexer& lexer, EvaluationStack* s)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Expr");
            }
        #endif
        uchar op;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match = BigNumExpressionParser.Term(lexer, s);
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(true);
                Match* parentMatch2 = &match;
                {
                    while (true)
                    {
                        long save = lexer.GetPos();
                        {
                            Match match(false);
                            Match* parentMatch3 = &match;
                            {
                                Match match(false);
                                Match* parentMatch4 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch5 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Match match(false);
                                        Match* parentMatch6 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch7 = &match;
                                            {
                                                long save = lexer.GetPos();
                                                Match match(false);
                                                if (*lexer == PLUS)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                *parentMatch7 = match;
                                                if (!match.hit)
                                                {
                                                    Match match(false);
                                                    Match* parentMatch8 = &match;
                                                    lexer.SetPos(save);
                                                    {
                                                        Match match(false);
                                                        if (*lexer == MINUS)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        *parentMatch8 = match;
                                                    }
                                                    *parentMatch7 = match;
                                                }
                                            }
                                            *parentMatch6 = match;
                                        }
                                        if (match.hit)
                                        {
                                            op = lexer.GetUChar(pos);
                                        }
                                        *parentMatch5 = match;
                                    }
                                    *parentMatch4 = match;
                                }
                                if (match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch9 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch10 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Match match = BigNumExpressionParser.Term(lexer, s);
                                            if (match.hit)
                                            {
                                                BigValue* r = s->Pop();
                                                BigValue* l = s->Pop();
                                                s->Push(Evaluate(l, r, op));
                                            }
                                            *parentMatch10 = match;
                                        }
                                        *parentMatch9 = match;
                                    }
                                    *parentMatch4 = match;
                                }
                                *parentMatch3 = match;
                            }
                            if (match.hit)
                            {
                                *parentMatch2 = match;
                            }
                            else
                            {
                                lexer.SetPos(save);
                                break;
                            }
                        }
                    }
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Expr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Expr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Term(BigNumLexer& lexer, EvaluationStack* s)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Term");
            }
        #endif
        uchar op;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match = BigNumExpressionParser.Factor(lexer, s);
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(true);
                Match* parentMatch2 = &match;
                {
                    while (true)
                    {
                        long save = lexer.GetPos();
                        {
                            Match match(false);
                            Match* parentMatch3 = &match;
                            {
                                Match match(false);
                                Match* parentMatch4 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch5 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Match match(false);
                                        Match* parentMatch6 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch7 = &match;
                                            {
                                                long save = lexer.GetPos();
                                                Match match(false);
                                                if (*lexer == MUL)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                *parentMatch7 = match;
                                                if (!match.hit)
                                                {
                                                    Match match(false);
                                                    Match* parentMatch8 = &match;
                                                    lexer.SetPos(save);
                                                    {
                                                        Match match(false);
                                                        if (*lexer == DIV)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        *parentMatch8 = match;
                                                    }
                                                    *parentMatch7 = match;
                                                }
                                            }
                                            *parentMatch6 = match;
                                        }
                                        if (match.hit)
                                        {
                                            op = lexer.GetUChar(pos);
                                        }
                                        *parentMatch5 = match;
                                    }
                                    *parentMatch4 = match;
                                }
                                if (match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch9 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch10 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Match match = BigNumExpressionParser.Factor(lexer, s);
                                            if (match.hit)
                                            {
                                                BigValue* r = s->Pop();
                                                BigValue* l = s->Pop();
                                                s->Push(Evaluate(l, r, op));
                                            }
                                            *parentMatch10 = match;
                                        }
                                        *parentMatch9 = match;
                                    }
                                    *parentMatch4 = match;
                                }
                                *parentMatch3 = match;
                            }
                            if (match.hit)
                            {
                                *parentMatch2 = match;
                            }
                            else
                            {
                                lexer.SetPos(save);
                                break;
                            }
                        }
                    }
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Term");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Term");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Factor(BigNumLexer& lexer, EvaluationStack* s)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Factor");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long save = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long save = lexer.GetPos();
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        if (*lexer == MINUS)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                long pos = lexer.GetPos();
                                Match match = BigNumExpressionParser.Factor(lexer, s);
                                if (match.hit)
                                {
                                    s->Push(Evaluate(s->Pop(), '-'));
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                    if (!match.hit)
                    {
                        Match match(false);
                        Match* parentMatch6 = &match;
                        lexer.SetPos(save);
                        {
                            Match match(false);
                            Match* parentMatch7 = &match;
                            {
                                Match match(false);
                                if (*lexer == PLUS)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                *parentMatch7 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch8 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch9 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Match match = BigNumExpressionParser.Factor(lexer, s);
                                        if (match.hit)
                                        {
                                            s->Push(Evaluate(s->Pop(), '+'));
                                        }
                                        *parentMatch9 = match;
                                    }
                                    *parentMatch8 = match;
                                }
                                *parentMatch7 = match;
                            }
                            *parentMatch6 = match;
                        }
                        *parentMatch2 = match;
                    }
                }
                *parentMatch1 = match;
                if (!match.hit)
                {
                    Match match(false);
                    Match* parentMatch10 = &match;
                    lexer.SetPos(save);
                    {
                        Match match = BigNumExpressionParser.Number(lexer, s);
                        *parentMatch10 = match;
                    }
                    *parentMatch1 = match;
                }
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch11 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch12 = &match;
                    {
                        Match match(false);
                        Match* parentMatch13 = &match;
                        {
                            Match match(false);
                            if (*lexer == LPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            *parentMatch13 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch14 = &match;
                            {
                                Match match = BigNumExpressionParser.Expr(lexer, s);
                                *parentMatch14 = match;
                            }
                            *parentMatch13 = match;
                        }
                        *parentMatch12 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch15 = &match;
                        {
                            Match match(false);
                            if (*lexer == RPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            *parentMatch15 = match;
                        }
                        *parentMatch12 = match;
                    }
                    *parentMatch11 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Factor");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Factor");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Number(BigNumLexer& lexer, EvaluationStack* s)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Number");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long save = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long pos = lexer.GetPos();
                    Match match(false);
                    if (*lexer == FLOAT)
                    {
                        ++lexer;
                        match.hit = true;
                    }
                    if (match.hit)
                    {
                        s->Push(ParseBigFloat(lexer.GetToken(pos)));
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
                if (!match.hit)
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    lexer.SetPos(save);
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            long pos = lexer.GetPos();
                            Match match(false);
                            if (*lexer == RATIONAL)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                s->Push(ParseBigRational(lexer.GetToken(pos)));
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch1 = match;
                }
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch5 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch6 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match(false);
                        if (*lexer == INTEGER)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        if (match.hit)
                        {
                            s->Push(ParseBigInteger(lexer.GetToken(pos)));
                        }
                        *parentMatch6 = match;
                    }
                    *parentMatch5 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Number");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Number");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
}
