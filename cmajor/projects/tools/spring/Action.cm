// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;

namespace spring
{
    public class ExecuteGuard
    {
        public nothrow ExecuteGuard(Diagram& diagram_) : diagram(diagram_)
        {
        }
        public ~ExecuteGuard()
        {
            diagram.HideContextMenu();
            diagram.SetChanged();
            diagram.Invalidate();
        }
        private Diagram& diagram;
    }

    public abstract class DiagramAction : ClickAction
    {
        public nothrow DiagramAction(Diagram& diagram_) : base(), diagram(diagram_)
        {
        }
        public override void Execute()
        {
            ExecuteGuard guard(diagram);
            Execute(diagram);
        }
        protected abstract void Execute(Diagram& diagram);
        private Diagram& diagram;
    }

    public abstract class DiagramElementAction : ClickAction
    {
        public nothrow DiagramElementAction(Diagram& diagram_, int elementIndex_) : base(), diagram(diagram_), elementIndex(elementIndex_)
        {
        }
        public override void Execute()
        {
            ExecuteGuard guard(diagram);
            Execute(diagram, elementIndex);
        }
        protected abstract void Execute(Diagram& diagram, int elementIndex);
        private Diagram& diagram;
        private int elementIndex;
    }

    public class DeleteSelectionAction : DiagramAction
    {
        public nothrow DeleteSelectionAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            diagram.GetSelection()->Delete();
            diagram.ResetSelection();
            diagram.SetChanged();
            diagram.Invalidate();
        }
    }

    public class SaveSelectionAsImageAction : DiagramAction
    {
        public nothrow SaveSelectionAsImageAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            diagram.HideContextMenu();
            SaveImageDialog dialog("", diagram.GetLayout());
            if (dialog.ShowDialog(*diagram.GetCanvas()->GetWindow()) == DialogResult.ok)
            {
                diagram.GetSelection()->SaveImage(dialog.fileName, dialog.margins, dialog.format);
            }
        }
    }

    public class AlignTopAction : DiagramAction
    {
        public nothrow AlignTopAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortHorizontally();
            containerElementSelection.AlignTop();
        }
    }

    public class AlignBottomAction : DiagramAction
    {
        public nothrow AlignBottomAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortHorizontally();
            containerElementSelection.AlignBottom();
        }
    }

    public class AlignVerticalCenterAction : DiagramAction
    {
        public nothrow AlignVerticalCenterAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortHorizontally();
            containerElementSelection.AlignVerticalCenter();
        }
    }

    public class AlignLeftSideAction : DiagramAction
    {
        public nothrow AlignLeftSideAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortVertically();
            containerElementSelection.AlignLeftSide();
        }
    }

    public class AlignRightSideAction : DiagramAction
    {
        public nothrow AlignRightSideAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortVertically();
            containerElementSelection.AlignRightSide();
        }
    }

    public class AlignHorizontalCenterAction : DiagramAction
    {
        public nothrow AlignHorizontalCenterAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortVertically();
            containerElementSelection.AlignHorizontalCenter();
        }
    }

    public class SpaceEvenlyVerticallyAction : DiagramAction
    {
        public nothrow SpaceEvenlyVerticallyAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortVertically();
            containerElementSelection.SpaceEvenlyVertically();
        }
    }

    public class SpaceEvenlyHorizontallyAction : DiagramAction
    {
        public nothrow SpaceEvenlyHorizontallyAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            ElementSelection containerElementSelection = ElementSelection(diagram, selection->GetContainerElementIndeces());
            containerElementSelection.SortHorizontally();
            containerElementSelection.SpaceEvenlyHorizontally();
        }
    }

    public class CombineInheritancesAction : DiagramAction
    {
        public nothrow CombineInheritancesAction(Diagram& diagram) : base(diagram)
        {
        }
        protected override void Execute(Diagram& diagram)
        {
            Selection* selection = diagram.GetSelection();
            if (selection is ElementSelection*)
            {
                ElementSelection* inheritanceElementSelection = cast<ElementSelection*>(selection);
                inheritanceElementSelection->CombineInheritanceRelationships();
            }
        }
    }

    public class DeleteDiagramElementAction : DiagramElementAction
    {
        public nothrow DeleteDiagramElementAction(Diagram& diagram, int elementIndex) : base(diagram, elementIndex)
        {
        }
        protected override void Execute(Diagram& diagram, int elementIndex)
        {
            UniquePtr<DeleteElementsCommand> deleteElementsCommand(new DeleteElementsCommand(diagram));
            UniquePtr<DiagramElement> element = diagram.RemoveElementByIndex(elementIndex);
            if (element.Get() is ContainerElement*)
            {
                ContainerElement* containerElement = cast<ContainerElement*>(element.Get());
                List<RelationshipElement*> containerElementRelationships = containerElement->GetAllRelationships();
                List<RelationshipElement*> relationships;
                for (RelationshipElement* relationship : containerElementRelationships)
                {
                    if (Find(relationships.CBegin(), relationships.CEnd(), relationship) == relationships.CEnd())
                    {
                        relationships.Add(relationship);
                    }
                }
                List<int> relationshipIndeces;
                for (RelationshipElement* relationship : relationships)
                {
                    int index = diagram.GetIndexOfElement(relationship);
                    if (index != -1)
                    {
                        if (Find(relationshipIndeces.CBegin(), relationshipIndeces.CEnd(), index) == relationshipIndeces.CEnd())
                        {
                            relationshipIndeces.Add(index);
                        }
                    }
                }
                Sort(relationshipIndeces.Begin(), relationshipIndeces.End());
                int m = cast<int>(relationshipIndeces.Count());
                for (int i = m - 1; i >= 0; --i)
                {
                    int index = relationshipIndeces[i];
                    UniquePtr<DiagramElement> element = diagram.RemoveElementByIndex(index);
                    deleteElementsCommand->AddDeletedElement(element.Release(), index);
                }
            }
            deleteElementsCommand->AddDeletedElement(element.Release(), elementIndex);
            diagram.GetCommandList().AddCommand(deleteElementsCommand.Release());
        }
    }

    public class StraightenRelationshipElementAction : DiagramElementAction
    {
        public nothrow StraightenRelationshipElementAction(Diagram& diagram, int elementIndex) : base(diagram, elementIndex)
        {
        }
        protected override void Execute(Diagram& diagram, int elementIndex)
        {
            DiagramElement* diagramElement = diagram.GetElementByIndex(elementIndex);
            if (diagramElement is RelationshipElement*)
            {
                RelationshipElement* relationship = cast<RelationshipElement*>(diagramElement);
                relationship->Straighten();
            }
        }
    }

    public class SplitRelationshipElementAction : DiagramElementAction
    {
        public nothrow SplitRelationshipElementAction(Diagram& diagram, int elementIndex) : base(diagram, elementIndex)
        {
        }
        protected override void Execute(Diagram& diagram, int elementIndex)
        {
            DiagramElement* diagramElement = diagram.GetElementByIndex(elementIndex);
            if (diagramElement is RelationshipElement*)
            {
                RelationshipElement* relationship = cast<RelationshipElement*>(diagramElement);
                if (relationship->kind == RelationshipElement.Kind.inheritance && !relationship->sourceEndpoints.IsEmpty())
                {
                    List<UniquePtr<RelationshipElement>> relationships = SplitCombinedInheritanceRelationship(relationship);
                    UniquePtr<DeleteElementsCommand> deleteCommand(new DeleteElementsCommand(diagram));
                    UniquePtr<DiagramElement> element(diagram.RemoveElementByIndex(elementIndex));
                    deleteCommand->AddDeletedElement(element.Release(), elementIndex);
                    diagram.GetCommandList().AddCommand(deleteCommand.Release());
                    UniquePtr<AddElementsCommand> addElementsCommand(new AddElementsCommand(diagram));
                    for (UniquePtr<RelationshipElement>& relationship : relationships)
                    {
                        int addIndex = diagram.NextIndex();
                        addElementsCommand->AddIndex(addIndex);
                        diagram.AddElement(relationship.Release());
                    }
                    diagram.GetCommandList().AddCommand(addElementsCommand.Release());
                }
            }
        }
    }

    public class ClassElementPropertiesAction : DiagramElementAction
    {
        public nothrow ClassElementPropertiesAction(Diagram& diagram, int elementIndex) : base(diagram, elementIndex)
        {
        }
        protected override void Execute(Diagram& diagram, int elementIndex)
        {
            DiagramElement* element = diagram.GetElementByIndex(elementIndex);
            if (element is ClassElement*)
            {
                ClassElement* classElement = cast<ClassElement*>(element);
                UniquePtr<ClassElement> clone = cast<ClassElement*>(classElement->Clone());
                UniquePtr<ClassPropertiesDialog> classPropertiesDialog = new ClassPropertiesDialog(clone.Get());
                Canvas* canvas = diagram.GetCanvas();
                Window* window = canvas->GetWindow();
                if (window != null)
                {
                    diagram.HideContextMenu();
                    DialogResult result = classPropertiesDialog->ShowDialog(*window);
                    if (result == DialogResult.ok)
                    {
                        if (!clone->IsAbstract())
                        {
                            clone->ResetAbstractOperations();
                        }
                        clone->SetDiagram(&diagram);
                        UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                        HashMap<DiagramElement*, DiagramElement*> cloneMap;
                        cloneMap[classElement] = clone.Get();
                        clone->MapChildObjects(classElement, cloneMap);
                        List<RelationshipElement*> relationships = classElement->GetAllRelationships();
                        for (RelationshipElement* relationship : relationships)
                        {
                            relationship->MapContainerElements(cloneMap);
                            relationship->AddToElements();
                        }
                        diagram.SetElementByIndex(clone.Release(), elementIndex);
                        diagram.SetChanged();
                        diagram.Invalidate();
                        diagram.GetCommandList().AddCommand(replaceElementCommand.Release());
                    }
                }
            }
        }
    }

    public class ObjectElementPropertiesAction : DiagramElementAction
    {
        public nothrow ObjectElementPropertiesAction(Diagram& diagram, int elementIndex) : base(diagram, elementIndex)
        {
        }
        protected override void Execute(Diagram& diagram, int elementIndex)
        {
            DiagramElement* element = diagram.GetElementByIndex(elementIndex);
            if (element is ObjectElement*)
            {
                ObjectElement* objectElement = cast<ObjectElement*>(element);
                UniquePtr<ObjectElement> clone = cast<ObjectElement*>(objectElement->Clone());
                UniquePtr<ObjectPropertiesDialog> objectPropertiesDialog = new ObjectPropertiesDialog(clone.Get());
                Canvas* canvas = diagram.GetCanvas();
                Window* window = canvas->GetWindow();
                if (window != null)
                {
                    diagram.HideContextMenu();
                    DialogResult result = objectPropertiesDialog->ShowDialog(*window);
                    if (result == DialogResult.ok)
                    {
                        clone->SetDiagram(&diagram);
                        UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                        HashMap<DiagramElement*, DiagramElement*> cloneMap;
                        cloneMap[objectElement] = clone.Get();
                        clone->MapChildObjects(objectElement, cloneMap);
                        List<RelationshipElement*> relationships = objectElement->GetAllRelationships();
                        for (RelationshipElement* relationship : relationships)
                        {
                            relationship->MapContainerElements(cloneMap);
                            relationship->AddToElements();
                        }
                        diagram.SetElementByIndex(clone.Release(), elementIndex);
                        diagram.SetChanged();
                        diagram.Invalidate();
                        diagram.GetCommandList().AddCommand(replaceElementCommand.Release());
                    }
                }
            }
        }
    }

    public class RelationshipElementPropertiesAction : DiagramElementAction
    {
        public nothrow RelationshipElementPropertiesAction(Diagram& diagram, int elementIndex) : base(diagram, elementIndex)
        {
        }
        protected override void Execute(Diagram& diagram, int elementIndex)
        {
            DiagramElement* element = diagram.GetElementByIndex(elementIndex);
            if (element is RelationshipElement*)
            {
                RelationshipElement* relationshipElement = cast<RelationshipElement*>(element);
                DiagramElement* sourceElement = relationshipElement->source.element;
                Snap sourceSnap = relationshipElement->source.snap;
                DiagramElement* targetElement = relationshipElement->target.element;
                Snap targetSnap = relationshipElement->target.snap;
                UniquePtr<RelationshipElement> clone = cast<RelationshipElement*>(relationshipElement->Clone());
                UniquePtr<RelationshipPropertiesDialog> relationshipPropertiesDialog = new RelationshipPropertiesDialog(clone.Get());
                Canvas* canvas = diagram.GetCanvas();
                Window* window = canvas->GetWindow();
                if (window != null)
                {
                    diagram.HideContextMenu();
                    DialogResult result = relationshipPropertiesDialog->ShowDialog(*window);
                    if (result == DialogResult.ok)
                    {
                        UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                        if (relationshipElement->source.element != null)
                        {
                            relationshipElement->source.element->RemoveRelationship(relationshipElement);
                            relationshipElement->source.element->AddRelationship(clone.Get());
                            Endpoint endpoint = relationshipElement->source.element->GetEndpoint(relationshipElement->source.snap);
                            clone->source.snap = endpoint.snap;
                            clone->source.point = endpoint.point;
                        }
                        for (Endpoint& sourceEndpoint : relationshipElement->sourceEndpoints)
                        {
                            if (sourceEndpoint.element != null)
                            {
                                sourceEndpoint.element->RemoveRelationship(relationshipElement);
                                sourceEndpoint.element->AddRelationship(clone.Get());
                                Endpoint endpoint = sourceEndpoint.element->GetEndpoint(relationshipElement->source.snap);
                                clone->source.snap = endpoint.snap;
                                clone->source.point = endpoint.point;
                            }
                        }
                        if (relationshipElement->target.element != null)
                        {
                            relationshipElement->target.element->RemoveRelationship(relationshipElement);
                            relationshipElement->target.element->AddRelationship(clone.Get());
                            Endpoint endpoint = relationshipElement->target.element->GetEndpoint(relationshipElement->target.snap);
                            clone->target.snap = endpoint.snap;
                            clone->target.point = endpoint.point;
                        }
                        diagram.SetElementByIndex(clone.Release(), elementIndex);
                        diagram.SetChanged();
                        diagram.Invalidate();
                        diagram.GetCommandList().AddCommand(replaceElementCommand.Release());
                    }
                }
            }
        }
    }

    public class NoteElementPropertiesAction : DiagramElementAction
    {
        public nothrow NoteElementPropertiesAction(Diagram& diagram, int elementIndex) : base(diagram, elementIndex)
        {
        }
        protected override void Execute(Diagram& diagram, int elementIndex)
        {
            DiagramElement* element = diagram.GetElementByIndex(elementIndex);
            if (element is NoteElement*)
            {
                NoteElement* noteElement = cast<NoteElement*>(element);
                UniquePtr<NoteElement> clone = cast<NoteElement*>(noteElement->Clone());
                UniquePtr<NotePropertiesDialog> notePropertiesDialog = new NotePropertiesDialog(clone.Get());
                Canvas* canvas = diagram.GetCanvas();
                Window* window = canvas->GetWindow();
                if (window != null)
                {
                    diagram.HideContextMenu();
                    DialogResult result = notePropertiesDialog->ShowDialog(*window);
                    if (result == DialogResult.ok)
                    {
                        clone->SetDiagram(&diagram);
                        UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                        HashMap<DiagramElement*, DiagramElement*> cloneMap;
                        cloneMap[noteElement] = clone.Get();
                        clone->MapChildObjects(noteElement, cloneMap);
                        List<RelationshipElement*> relationships = noteElement->GetAllRelationships();
                        for (RelationshipElement* relationship : relationships)
                        {
                            relationship->MapContainerElements(cloneMap);
                            relationship->AddToElements();
                        }
                        diagram.SetElementByIndex(clone.Release(), elementIndex);
                        diagram.SetChanged();
                        diagram.Invalidate();
                        diagram.GetCommandList().AddCommand(replaceElementCommand.Release());
                    }
                }
            }
        }
    }
}
