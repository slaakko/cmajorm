// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;

namespace spring
{
    public class CompoundLocation
    {
        public nothrow CompoundLocation(const PointF& location_) : location(location_)
        {
        }
        public nothrow CompoundLocation(const PointF& location_, const List<PointF>& points_) : location(location_), points(points_)
        {
        }
        public nothrow inline const PointF& Location() const
        {
            return location;
        }
        public nothrow inline const List<PointF>& Points() const
        {
            return points;
        }
        public nothrow void SetTargetPoint(const PointF& targetPoint_)
        {
            hasTargetPoint = true;
            targetPoint = targetPoint_;
        }
        public nothrow inline const PointF& TargetPoint() const
        {
            return targetPoint;
        }
        public nothrow void Offset(float dx, float dy)
        {
            location.Offset(dx, dy);
            for (PointF& point : points)
            {
                point.Offset(dx, dy);
            }
            if (hasTargetPoint)
            {
                targetPoint.Offset(dx, dy);
            }
        }
        private PointF location;
        private List<PointF> points;
        private bool hasTargetPoint;
        private PointF targetPoint;
    }

    public abstract class Operation
    {
        public nothrow Operation(Diagram* diagram_) : diagram(diagram_), startLocation()
        {
        }
        public nothrow Operation(Diagram* diagram_, const PointF& startLocation_) : diagram(diagram_), startLocation(startLocation_)
        {
        }
        public default virtual ~Operation();
        public abstract nothrow bool IsEmpty() const;
        public abstract void AdvanceTo(MouseArgs& args);
        public abstract void Cancel();
        public abstract void Commit(MouseArgs& args);
        public abstract void Draw(Graphics& graphics, Layout& layout);
        public nothrow inline const PointF& StartLocation() const
        {
            return startLocation;
        }
        public nothrow inline Diagram* GetDiagram() const
        {
            return diagram;
        }
        private Diagram* diagram;
        private PointF startLocation;
    }

    public class EmptyOperation : Operation
    {
        public nothrow override bool IsEmpty() const
        {
            return true;
        }
        public override void AdvanceTo(MouseArgs& args)
        {
        }
        public override void Cancel()
        {
        }
        public override void Commit(MouseArgs& args)
        {
        }
        public override void Draw(Graphics& graphics, Layout& layout)
        {
        }
    }

    public class MoveContainerElementsOperation : Operation
    {
        public nothrow MoveContainerElementsOperation(Diagram* diagram, const PointF& startLocation) : base(diagram, startLocation), resetSelection(false)
        {
        }
        public void ResetSelection()
        {
            resetSelection = true;
        }
        public nothrow void AddElementIndex(int index)
        {
            elementIndeces.Add(index);
        }
        public nothrow void SetElementIndeces(List<int>&& elementIndeces_)
        {
            elementIndeces = elementIndeces_;
        }
        public override void AdvanceTo(MouseArgs& args)
        {
            int n = cast<int>(elementIndeces.Count());
            #assert(n == cast<int>(originalLocations.Count()));
            PointF startLocation = StartLocation();
            PointF nextLocation = args.location;
            if (args.control)
            {
                Line line(startLocation, nextLocation);
                Vector v(line.ToVector());
                switch (MainDirection(v))
                {
                    case 0:
                    case 180:
                    {
                        nextLocation.y = startLocation.y;
                        break;
                    }
                    case 90:
                    case 270:
                    {
                        nextLocation.x = startLocation.x;
                        break;
                    }
                }
            }
            float dx = nextLocation.x - startLocation.x;
            float dy = nextLocation.y - startLocation.y;
            for (int i = 0; i < n; ++i)
            {
                int elementIndex = elementIndeces[i];
                CompoundLocation newLocation = originalLocations[i];
                newLocation.Offset(dx, dy);
                DiagramElement* element = GetDiagram()->GetElementByIndex(elementIndex);
                element->SetCompoundLocation(newLocation);
            }
        }
        public override void Draw(Graphics& graphics, Layout& layout)
        {
        }
        public override void Cancel()
        {
            int n = cast<int>(elementIndeces.Count());
            #assert(n == cast<int>(originalLocations.Count()));
            for (int i = 0; i < n; ++i)
            {
                int elementIndex = elementIndeces[i];
                const CompoundLocation& originalLocation = originalLocations[i];
                DiagramElement* element = GetDiagram()->GetElementByIndex(elementIndex);
                element->SetCompoundLocation(originalLocation);
            }
        }
        public override void Commit(MouseArgs& args)
        {
            AdvanceTo(args);
            if (resetSelection)
            {
                GetDiagram()->ResetSelection();
            }
        }
        public void FetchOriginalLocations()
        {
            for (int elementIndex : elementIndeces)
            {
                DiagramElement* element = GetDiagram()->GetElementByIndex(elementIndex);
                originalLocations.Add(element->GetCompoundLocation());
            }
        }
        public nothrow override bool IsEmpty() const
        {
            return elementIndeces.IsEmpty();
        }
        private List<int> elementIndeces;
        private List<CompoundLocation> originalLocations;
        private bool resetSelection;
    }

    public class AddRelationshipOperation : Operation
    {
        public nothrow AddRelationshipOperation(Diagram* diagram, RelationshipElement* relationshipElement_) : base(diagram), relationshipElement(relationshipElement_)
        {
        }
        public override nothrow bool IsEmpty() const
        {
            return false;
        }
        public override void AdvanceTo(MouseArgs& args)
        {
            PointF lastPoint = relationshipElement->LastPoint();
            PointF targetPoint = args.location;
            if (args.control)
            {
                Line line(lastPoint, targetPoint);
                Vector v(line.ToVector());
                switch (MainDirection(v))
                {
                    case 0:
                    case 180:
                    {
                        targetPoint.y = lastPoint.y;
                        break;
                    }
                    case 90:
                    case 270:
                    {
                        targetPoint.x = lastPoint.x;
                        break;
                    }
                }
            }
            relationshipElement->target.point = targetPoint;
        }
        public override void Draw(Graphics& graphics, Layout& layout)
        {
            relationshipElement->Draw(graphics, layout);
        }
        public override void Cancel()
        {
            relationshipElement->RemoveFromElements();
        }
        public override void Commit(MouseArgs& args)
        {
            relationshipElement->AddToElements();
            Diagram* diagram = GetDiagram();
            diagram->AddElement(relationshipElement.Release());
            Tools.SetCurrent(Tools.GetSelectTool());
        }
        public nothrow RelationshipElement& GetRelationshipElement()
        {
            return *relationshipElement;
        }
        private UniquePtr<RelationshipElement> relationshipElement;
    }
}
