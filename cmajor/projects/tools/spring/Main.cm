// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using System.Windows;
using spring;

public class MainWindow : Window
{
    public MainWindow() : base("Spring Software Diagram Designer"),
        arrowCursor(LoadStandardCursor(StandardCursorId.IDC_ARROW)), classToolCursor(Application.GetResourceManager().GetCursor("class.tool.cursor"))
    {
        UniquePtr<MenuBar> menuBar(new MenuBar());
        UniquePtr<MenuItem> fileItem(new MenuItem("&File"));
        UniquePtr<MenuItem> testMenuItem(new MenuItem("&Test"));
        testMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.t));
        testMenuItem->ClickEvent().AddHandler(TestClick);
        fileItem->AddMenuItem(testMenuItem.Release());
        UniquePtr<MenuItem> exitMenuItem(new MenuItem("E&xit"));
        exitMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f4));
        exitMenuItem->ClickEvent().AddHandler(ExitClick);
        fileItem->AddMenuItem(exitMenuItem.Release());
        menuBar->AddMenuItem(fileItem.Release());
        AddChild(menuBar.Release());
        UniquePtr<ToolBar> toolBar(new ToolBar(ToolBar.Style.radioButtonGroup));
        ToolButton* selectToolButton = new ToolButton("arrow.system.windows.bitmap");
        selectToolButton->SetToolTip("Select");
        Tools.GetSelectTool().SetToolButton(selectToolButton);
        Tools.GetSelectTool().SetCursor(&arrowCursor);
        toolBar->AddToolButton(selectToolButton);
        ToolButton* classToolButton = new ToolButton("class.tool.bitmap");
        classToolButton->SetToolTip("Place new class");
        Tools.GetClassTool().SetToolButton(classToolButton);
        Tools.GetClassTool().SetCursor(&classToolCursor);
        toolBar->AddToolButton(classToolButton);
        AddChild(toolBar.Release());
        UniquePtr<SplitContainer> verticalSplitContainer(new SplitContainer(Orientation.vertical, 400, Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
        UniquePtr<Canvas> canvasPtr(new Canvas());
        canvas = canvasPtr.Get();
        canvas->MouseEnterEvent().AddHandler(CanvasMouseEnter);
        canvas->MouseLeaveEvent().AddHandler(CanvasMouseLeave);
        canvas->MouseMoveEvent().AddHandler(CanvasMouseMove);
        UniquePtr<Control> borderedCanvas(new BorderedControl(canvasPtr.Release(), BorderStyle.style3D, Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
        verticalSplitContainer->Pane1Container()->AddChild(borderedCanvas.Release());
        UniquePtr<LogView> logView(new LogView());
        Application.SetLogView(logView.Get());
        UniquePtr<Control> borderedLogView(new BorderedControl(logView.Release(), BorderStyle.style3D, Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
        UniquePtr<Control> scrollableLogView(new ScrollableControl(borderedLogView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
        verticalSplitContainer->Pane2Container()->AddChild(scrollableLogView.Release());
        AddChild(verticalSplitContainer.Release());
        UniquePtr<StatusBar> statusBar(new StatusBar());
        string empty;
        UniquePtr<StatusBarItem> springItem(new StatusBarItem(empty, StatusBarItem.BorderStyle.flat, true));
        statusBar->AddItem(springItem.Release());
        UniquePtr<StatusBarItem> xItem(new StatusBarItem("x:"));
        statusBar->AddItem(xItem.Release());
        string spaces(' ', 6);
        UniquePtr<StatusBarItem> xCoordItem(new StatusBarItem(spaces, StatusBarItem.BorderStyle.sunken));
        xCoordStatusBarItem = xCoordItem.Get();
        statusBar->AddItem(xCoordItem.Release());
        UniquePtr<StatusBarItem> yItem(new StatusBarItem("y:"));
        statusBar->AddItem(yItem.Release());
        UniquePtr<StatusBarItem> yCoordItem(new StatusBarItem(spaces, StatusBarItem.BorderStyle.sunken));
        yCoordStatusBarItem = yCoordItem.Get();
        statusBar->AddItem(yCoordItem.Release());
        AddChild(statusBar.Release());
        ScreenMetrics.Get().PrintToLog();
    }
    private void ExitClick()
    {
        Close();
    }
    private void TestClick()
    {
/*
        AbstractClassElement classElement("AbstractClass");
        classElement.Operations().Add(new OperationElement("Foo", true));
        classElement.Operations().Add(new OperationElement("Bar"));
        classElement.Operations().Add(new OperationElement("Baz"));
        classElement.Fields().Add(new FieldElement("Field1"));
        classElement.Fields().Add(new FieldElement("Field2"));
        classElement.Fields().Add(new FieldElement("Field3"));
        UniquePtr<ClassPropertiesDialog> classPropertiesDialog = new ClassPropertiesDialog(&classElement);
        DialogResult result = classPropertiesDialog->ShowDialog(*this);
*/
        UniquePtr<ShapeDialog> shapeDialog = new ShapeDialog();
        DialogResult result = shapeDialog->ShowDialog(*this);
        LogView* logView = Application.GetLogView();
        if (logView != null)
        {
            logView->WriteLine("dialog result=" + ToString(result));
        }
    }
    private void CanvasMouseEnter()
    {
        xCoordStatusBarItem->SetText(string(' ', 6));
        yCoordStatusBarItem->SetText(string(' ', 6));
    }
    private void CanvasMouseLeave()
    {
        xCoordStatusBarItem->SetText(string(' ', 6));
        yCoordStatusBarItem->SetText(string(' ', 6));
    }
    private void CanvasMouseMove(MouseEventArgs& args)
    {
        string xCoordText = Format(ToString(PixelsToMM(args.location.x, ScreenMetrics.Get().DpiX()), 2, 2), 6, FormatJustify.right);
        xCoordStatusBarItem->SetText(xCoordText);
        string yCoordText = Format(ToString(PixelsToMM(args.location.y, ScreenMetrics.Get().DpiY()), 2, 2), 6, FormatJustify.right);
        yCoordStatusBarItem->SetText(yCoordText);
    }
    private Canvas* canvas;
    private StatusBarItem* xCoordStatusBarItem;
    private StatusBarItem* yCoordStatusBarItem;
    private Cursor arrowCursor;
    private Cursor& classToolCursor;
}

int main()
{
    try
    {
       MainWindow mainWindow;
       ScreenMetrics.Save(false);
       Graphics graphics = Graphics.FromWindowHandle(mainWindow.Handle());
       Layout defaultLayout(graphics);
       string defaultLayoutFileName = Path.Combine(DefaultLayoutDirectory(), "default.spring.layout.xml");
       defaultLayout.Save(defaultLayoutFileName);
       float dpiX = graphics.GetDpiX();
       float dpiY = graphics.GetDpiY();
       StreamWriter writer = File.CreateText("d:\\work\\measure.txt");
       writer << "DPIX=" << dpiX << ", DPIY=" << dpiY << endl();
       writer << "frameWidth=" << DefaultFrameWidth(graphics) << endl();
/*
       int x = MMToPixels(20.0f, dpiX);
       int y = MMToPixels(10.0f, dpiY);
       writer << "X=" << x << ", Y=" << y << endl();
       Bitmap bm(x, y, graphics);
       Graphics g = Graphics.FromImage(bm);
       g.Clear(Color.White());
       Uuid clsid;
       bm.SaveChecked("d:\\work\\test.png", GetEncoderClsIdChecked(GetImageFormat(ImageFormat.png)));
*/
       int exitCode = Application.Run(mainWindow);
       return exitCode;
    }
    catch (const Exception& ex)
    {
        MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
        try
        {
            StreamWriter errorWriter = File.CreateText("error.txt");
            errorWriter << ex.ToString() << endl();
        }
        catch (const Exception&)
        {
        }
        return 1;
    }
    return 0;
}
