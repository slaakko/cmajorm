// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.Windows;
using spring;

public class MainWindow : Window
{
    public MainWindow() : base("Spring Software Diagram Designer"),
        springDiagramElementsFormat("spring.diagram.elements"),
        clipboardListener(Handle()),
        arrowCursor(LoadStandardCursor(StandardCursorId.IDC_ARROW)), classToolCursor(Application.GetResourceManager().GetCursor("class.tool.spring.cursor"))
    {
        UniquePtr<MenuBar> menuBar(new MenuBar());
        UniquePtr<MenuItem> fileMenuItem(new MenuItem("&File"));
        UniquePtr<MenuItem> openMenuItem(new MenuItem("&Open..."));
        openMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.o));
        openMenuItem->ClickEvent().AddHandler(OpenClick);
        fileMenuItem->AddMenuItem(openMenuItem.Release());
        UniquePtr<MenuItem> saveMenuItem(new MenuItem("&Save"));
        saveMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.s));
        saveMenuItem->ClickEvent().AddHandler(SaveClick);
        fileMenuItem->AddMenuItem(saveMenuItem.Release());
        UniquePtr<MenuItem> saveAsMenuItem(new MenuItem("Save &As..."));
        saveAsMenuItem->ClickEvent().AddHandler(SaveAsClick);
        fileMenuItem->AddMenuItem(saveAsMenuItem.Release());
        fileMenuItem->AddMenuItem(new MenuItemSeparator());
        /*
        UniquePtr<MenuItem> testMenuItem(new MenuItem("&Test"));
        testMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.t));
        testMenuItem->ClickEvent().AddHandler(TestClick);
        fileMenuItem->AddMenuItem(testMenuItem.Release());
        */
        UniquePtr<MenuItem> exitMenuItem(new MenuItem("E&xit"));
        exitMenuItem->SetShortcut(cast<Keys>(Keys.altModifier | Keys.f4));
        exitMenuItem->ClickEvent().AddHandler(ExitClick);
        fileMenuItem->AddMenuItem(exitMenuItem.Release());
        menuBar->AddMenuItem(fileMenuItem.Release());
        UniquePtr<MenuItem> editMenuItem(new MenuItem("&Edit"));
        UniquePtr<MenuItem> cutMenuItemPtr(new MenuItem("Cu&t"));
        cutMenuItem = cutMenuItemPtr.Get();
        cutMenuItem->Disable();
        cutMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.x));
        cutMenuItem->ClickEvent().AddHandler(EditCut);
        editMenuItem->AddMenuItem(cutMenuItemPtr.Release());
        UniquePtr<MenuItem> copyMenuItemPtr(new MenuItem("&Copy"));
        copyMenuItem = copyMenuItemPtr.Get();
        copyMenuItem->Disable();
        copyMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.c));
        copyMenuItem->ClickEvent().AddHandler(EditCopy);
        editMenuItem->AddMenuItem(copyMenuItemPtr.Release());
        UniquePtr<MenuItem> pasteMenuItemPtr(new MenuItem("&Paste"));
        pasteMenuItem = pasteMenuItemPtr.Get();
        pasteMenuItem->Disable();
        pasteMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.v));
        pasteMenuItem->ClickEvent().AddHandler(EditPaste);
        editMenuItem->AddMenuItem(pasteMenuItemPtr.Release());
        menuBar->AddMenuItem(editMenuItem.Release());
        AddChild(menuBar.Release());
        UniquePtr<ToolBar> toolBar(new ToolBar(ToolBar.Style.radioButtonGroup));
        ToolButton* selectToolButton = new ToolButton("arrow.system.windows.bitmap");
        selectToolButton->SetToolTip("Select");
        Tools.GetSelectTool()->SetToolButton(selectToolButton);
        Tools.GetSelectTool()->SetCursor(&arrowCursor);
        toolBar->AddToolButton(selectToolButton);
        ToolButton* classToolButton = new ToolButton("class.tool.spring.bitmap");
        classToolButton->SetToolTip("Place new class");
        Tools.GetClassTool()->SetToolButton(classToolButton);
        Tools.GetClassTool()->SetCursor(&classToolCursor);
        toolBar->AddToolButton(classToolButton);
        AddChild(toolBar.Release());
        UniquePtr<SplitContainer> verticalSplitContainer(new SplitContainer(Orientation.vertical, 400, Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
        UniquePtr<Canvas> canvasPtr(new Canvas());
        canvas = canvasPtr.Get();
        canvas->MouseEnterEvent().AddHandler(CanvasMouseEnter);
        canvas->MouseLeaveEvent().AddHandler(CanvasMouseLeave);
        canvas->MouseMoveEvent().AddHandler(CanvasMouseMove);
        canvas->SetCopyMenuItem(copyMenuItem);
        canvas->SetCutMenuItem(cutMenuItem);
        canvas->SetPasteMenuItem(pasteMenuItem);
        UniquePtr<Control> borderedCanvas(new BorderedControl(canvasPtr.Release(), BorderStyle.style3D, Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
        verticalSplitContainer->Pane1Container()->AddChild(borderedCanvas.Release());
        UniquePtr<LogView> logView(new LogView());
        Application.SetLogView(logView.Get());
        UniquePtr<Control> borderedLogView(new BorderedControl(logView.Release(), BorderStyle.style3D, Point(0, 0), Size(0, 0), Dock.none, Anchors.none));
        UniquePtr<Control> scrollableLogView(new ScrollableControl(borderedLogView.Release(), Point(0, 0), Size(0, 0), Dock.fill, Anchors.none));
        verticalSplitContainer->Pane2Container()->AddChild(scrollableLogView.Release());
        AddChild(verticalSplitContainer.Release());
        UniquePtr<StatusBar> statusBar(new StatusBar());
        string empty;
        UniquePtr<StatusBarItem> filePathItemPtr(new StatusBarItem(empty, StatusBarItem.BorderStyle.sunken));
        filePathStatusBarItem = filePathItemPtr.Get();
        statusBar->AddItem(filePathItemPtr.Release());
        UniquePtr<StatusBarItem> modifiedStatusBarItemPtr(new StatusBarItem(empty, StatusBarItem.BorderStyle.sunken));
        modifiedStatusBarItem = modifiedStatusBarItemPtr.Get();
        canvas->SetModifiedStatusBarItem(modifiedStatusBarItem);
        modifiedStatusBarItem->SetText(" ");
        statusBar->AddItem(modifiedStatusBarItemPtr.Release());
        UniquePtr<StatusBarItem> springItem(new StatusBarItem(empty, StatusBarItem.BorderStyle.flat, true));
        statusBar->AddItem(springItem.Release());
        UniquePtr<StatusBarItem> xItem(new StatusBarItem("x:"));
        statusBar->AddItem(xItem.Release());
        string spaces(' ', 6);
        UniquePtr<StatusBarItem> xCoordItem(new StatusBarItem(spaces, StatusBarItem.BorderStyle.sunken));
        xCoordStatusBarItem = xCoordItem.Get();
        statusBar->AddItem(xCoordItem.Release());
        UniquePtr<StatusBarItem> yItem(new StatusBarItem("y:"));
        statusBar->AddItem(yItem.Release());
        UniquePtr<StatusBarItem> yCoordItem(new StatusBarItem(spaces, StatusBarItem.BorderStyle.sunken));
        yCoordStatusBarItem = yCoordItem.Get();
        statusBar->AddItem(yCoordItem.Release());
        AddChild(statusBar.Release());
        ScreenMetrics.Get().PrintToLog();
    }
    protected override void OnClipboardUpdate()
    {
        base->OnClipboardUpdate();
        Clipboard clipboard(Handle());
        if (clipboard.IsClipboardFormatAvailable(springDiagramElementsFormat))
        {
            clipboardData = clipboard.GetStringData(springDiagramElementsFormat);
            pasteMenuItem->Enable();
        }
    }
    protected override void OnWindowClosing(bool& cancelClose)
    {
        if (canvas->GetDiagram().Modified())
        {
            MessageBoxResult result = MessageBox.Show("Current diagram is modified. Do you want to save changes?", "Diagram modified", this, MessageBoxType.MB_YESNOCANCEL);
            if (result == MessageBoxResult.yes)
            {
                SaveClick();
            }
            else if (result == MessageBoxResult.cancel)
            {
                cancelClose = true;
            }
        }
    }
    private void ExitClick()
    {
        Close();
    }
    private void OpenClick()
    {
        try
        {
            if (canvas->GetDiagram().Modified())
            {
                MessageBoxResult result = MessageBox.Show("Current diagram is modified. Do you want to save changes?", "Diagram modified", this, MessageBoxType.MB_YESNOCANCEL);
                if (result == MessageBoxResult.yes)
                {
                    SaveClick();
                }
                else if (result == MessageBoxResult.cancel)
                {
                    return;
                }
            }
            List<Pair<string, string>> descriptionFilterPairs;
            descriptionFilterPairs.Add(Pair<string, string>("Spring diagram files (*.spring.xml)", "*.spring.xml"));
            string initialDirectory = DefaultDiagramDirectory();
            string filePath;
            string currentDirectory;
            List<string> fileNames;
            string defaultFilePath;
            bool selected = System.Windows.API.GetOpenFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".spring.xml",
                OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST, currentDirectory, fileNames);
            if (selected)
            {
                if (!fileNames.IsEmpty())
                {
                    filePath = Path.Combine(currentDirectory, fileNames[0]);
                }
                if (!filePath.IsEmpty() && File.Exists(filePath))
                {
                    UniquePtr<Diagram> diagram(new Diagram());
                    diagram->Load(filePath);
                    diagramFilePath = filePath;
                    filePathStatusBarItem->SetText(diagramFilePath);
                    modifiedStatusBarItem->SetText(" ");
                    canvas->SetDiagram(diagram.Release());
                    canvas->GetDiagram().ResetModified();
                }
                else
                {
                    throw Exception("file path is empty or does not exist");
                }
            }
        }
        catch (const Exception& ex)
        {
            MessageBox.Show(ex.Message());
        }
    }
    private void SaveClick()
    {
        try
        {
            if (diagramFilePath.IsEmpty())
            {
                SaveAsClick();
            }
            else
            {
                canvas->GetDiagram().Save(diagramFilePath);
                canvas->GetDiagram().ResetModified();
            }
        }
        catch (const Exception& ex)
        {
            MessageBox.Show(ex.Message());
        }
    }
    private void SaveAsClick()
    {
        try
        {
            List<Pair<string, string>> descriptionFilterPairs;
            descriptionFilterPairs.Add(Pair<string, string>("Spring diagram files (*.spring.xml)", "*.spring.xml"));
            string initialDirectory = DefaultDiagramDirectory();
            string currentDirectory;
            List<string> fileNames;
            string defaultFilePath;
            string filePath;
            bool selected = System.Windows.API.GetSaveFileName(Handle(), descriptionFilterPairs, initialDirectory, defaultFilePath, ".spring.xml", 0u, currentDirectory, filePath);
            if (selected)
            {
                if (File.Exists(filePath))
                {
                    if (MessageBox.Show("File '" + filePath + "' already exists. Do you want to replace it?", "File Exists", this, MessageBoxType.MB_YESNO) != MessageBoxResult.yes)
                    {
                        return;
                    }
                }
                canvas->GetDiagram().Save(filePath);
                diagramFilePath = filePath;
                filePathStatusBarItem->SetText(diagramFilePath);
                canvas->GetDiagram().ResetModified();
            }
        }
        catch (const Exception& ex)
        {
            MessageBox.Show(ex.Message());
        }
    }
    private void EditCopy()
    {
        Selection& selection = canvas->GetDiagram().GetSelection();
        ustring copy = selection.Copy();
        if (!copy.IsEmpty())
        {
            Clipboard clipboard(Handle());
            clipboard.SetStringData(springDiagramElementsFormat, copy);
        }
    }
    private void EditCut()
    {
        LogView* logView = Application.GetLogView();
        if (logView != null)
        {
            logView->WriteLine("cut");
        }
    }
    private void EditPaste()
    {
        if (!clipboardData.IsEmpty())
        {
            canvas->GetDiagram().Paste(clipboardData);
        }
    }
    private void TestClick()
    {
/*
        AbstractClassElement classElement("AbstractClass");
        classElement.Operations().Add(new OperationElement("Foo", true));
        classElement.Operations().Add(new OperationElement("Bar"));
        classElement.Operations().Add(new OperationElement("Baz"));
        classElement.Fields().Add(new FieldElement("Field1"));
        classElement.Fields().Add(new FieldElement("Field2"));
        classElement.Fields().Add(new FieldElement("Field3"));
        UniquePtr<ClassPropertiesDialog> classPropertiesDialog = new ClassPropertiesDialog(&classElement);
        DialogResult result = classPropertiesDialog->ShowDialog(*this);
*/
        UniquePtr<ShapeDialog> shapeDialog = new ShapeDialog();
        DialogResult result = shapeDialog->ShowDialog(*this);
        LogView* logView = Application.GetLogView();
        if (logView != null)
        {
            logView->WriteLine("dialog result=" + ToString(result));
        }
    }
    protected override void OnKeyDown(KeyEventArgs& args)
    {
        base->OnKeyDown(args);
        switch (args.keyData)
        {
            case cast<Keys>(Keys.controlModifier | Keys.insert):
            {
                if (copyMenuItem->IsEnabled())
                {
                    EditCopy();
                }
                args.handled = true;
                break;
            }
            case cast<Keys>(Keys.shiftModifier | Keys.insert):
            {
                if (pasteMenuItem->IsEnabled())
                {
                    EditPaste();
                }
                args.handled = true;
                break;
            }
            case cast<Keys>(Keys.shiftModifier | Keys.delete_):
            {
                if (cutMenuItem->IsEnabled())
                {
                    EditCut();
                }
                args.handled = true;
                break;
            }
        }
        if (!args.handled)
        {
            canvas->KeyDown(args);
        }
    }
    private void CanvasMouseEnter()
    {
        xCoordStatusBarItem->SetText(string(' ', 6));
        yCoordStatusBarItem->SetText(string(' ', 6));
    }
    private void CanvasMouseLeave()
    {
        xCoordStatusBarItem->SetText(string(' ', 6));
        yCoordStatusBarItem->SetText(string(' ', 6));
    }
    private void CanvasMouseMove(MouseEventArgs& args)
    {
        string xCoordText = Format(ToString(PixelsToMM(args.location.x, ScreenMetrics.Get().DpiX()), 2, 2), 6, FormatJustify.right);
        xCoordStatusBarItem->SetText(xCoordText);
        string yCoordText = Format(ToString(PixelsToMM(args.location.y, ScreenMetrics.Get().DpiY()), 2, 2), 6, FormatJustify.right);
        yCoordStatusBarItem->SetText(yCoordText);
    }
    private ClipboardFormat springDiagramElementsFormat;
    private ClipboardListener clipboardListener;
    private Canvas* canvas;
    private StatusBarItem* filePathStatusBarItem;
    private StatusBarItem* modifiedStatusBarItem;
    private StatusBarItem* xCoordStatusBarItem;
    private StatusBarItem* yCoordStatusBarItem;
    private Cursor arrowCursor;
    private Cursor& classToolCursor;
    private string diagramFilePath;
    private ustring clipboardData;
    private MenuItem* cutMenuItem;
    private MenuItem* copyMenuItem;
    private MenuItem* pasteMenuItem;
}

int main()
{
    try
    {
       Debug.SetPaint();
       MainWindow mainWindow;
       ScreenMetrics.Save(false);
       Graphics graphics = Graphics.FromWindowHandle(mainWindow.Handle());
       Layout defaultLayout(graphics);
       string defaultLayoutFileName = Path.Combine(DefaultLayoutDirectory(), "default.spring.layout.xml");
       defaultLayout.Save(defaultLayoutFileName);
       float dpiX = graphics.GetDpiX();
       float dpiY = graphics.GetDpiY();
       StreamWriter writer = File.CreateText("d:\\work\\measure.txt");
       writer << "DPIX=" << dpiX << ", DPIY=" << dpiY << endl();
       writer << "frameWidth=" << DefaultFrameWidth(graphics) << endl();
/*
       int x = MMToPixels(20.0f, dpiX);
       int y = MMToPixels(10.0f, dpiY);
       writer << "X=" << x << ", Y=" << y << endl();
       Bitmap bm(x, y, graphics);
       Graphics g = Graphics.FromImage(bm);
       g.Clear(Color.White());
       Uuid clsid;
       bm.SaveChecked("d:\\work\\test.png", GetEncoderClsIdChecked(GetImageFormat(ImageFormat.png)));
*/
       int exitCode = Application.Run(mainWindow);
       return exitCode;
    }
    catch (const Exception& ex)
    {
        MessageBox.Show(ex.Message(), "Error", null, cast<MessageBoxType>(MessageBoxType.MB_OK | MessageBoxType.MB_ICONSTOP));
        try
        {
            StreamWriter errorWriter = File.CreateText("error.txt");
            errorWriter << ex.ToString() << endl();
        }
        catch (const Exception&)
        {
        }
        return 1;
    }
    return 0;
}
