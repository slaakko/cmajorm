using System;
using System.Collections;
using System.Lex;
using System.Parsing;
using Cm.Ast;
using ParserFileTokens;

// this file has been automatically generated from 'D:/work/soulng-project/tools/cpp2cm/projects/soulcm/scm2html/parser/ParExpression.parser' using soulcm parser generator scmpg version 3.0.0

public static class ParExpressionParser
{
    public static Match Expression(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Expression");
            }
        #endif
        UniquePtr<Node> equivalence;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match = ParExpressionParser.Equivalence(lexer, ctx);
            equivalence.Reset(cast<Node*>(match.value));
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Expression");
                    #endif
                    return Match(true, equivalence.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Expression");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Expression");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Equivalence(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Equivalence");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Implication(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == EQUIVALENCE)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    if (!ctx->parsingConcept || ctx->parsingTemplateId) pass = false;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.Implication(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch11 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"implication expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        s.end = span.end;
                                                        expr.Reset(new EquivalenceNode(s, expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Equivalence");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Equivalence");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Equivalence");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Implication(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Implication");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Disjunction(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        long save = lexer.GetPos();
                        Match* parentMatch5 = &match;
                        {
                            Match match(false);
                            Match* parentMatch6 = &match;
                            {
                                Match match(false);
                                Match* parentMatch7 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch8 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        bool pass = true;
                                        Match match(false);
                                        if (*lexer == IMPLICATION)
                                        {
                                            ++lexer;
                                            match.hit = true;
                                        }
                                        if (match.hit)
                                        {
                                            if (!ctx->parsingConcept || ctx->parsingTemplateId) pass = false;
                                        }
                                        if (match.hit && !pass)
                                        {
                                            match = Match(false);
                                        }
                                        *parentMatch8 = match;
                                    }
                                    *parentMatch7 = match;
                                }
                                if (match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch9 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch10 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Span span = lexer.GetSpan();
                                            Match match(true);
                                            Match* parentMatch11 = &match;
                                            {
                                                System.Lex.Span span = lexer.GetSpan();
                                                Match match = ParExpressionParser.Implication(lexer, ctx);
                                                right.Reset(cast<Node*>(match.value));
                                                if (match.hit)
                                                {
                                                    *parentMatch11 = match;
                                                }
                                                else
                                                {
                                                    lexer.ThrowExpectationFailure(span, u"implication expression");
                                                }
                                            }
                                            if (match.hit)
                                            {
                                                s.end = span.end;
                                                expr.Reset(new ImplicationNode(s, expr.Release(), right.Release()));
                                            }
                                            *parentMatch10 = match;
                                        }
                                        *parentMatch9 = match;
                                    }
                                    *parentMatch7 = match;
                                }
                                *parentMatch6 = match;
                            }
                            if (match.hit)
                            {
                                *parentMatch5 = match;
                            }
                            else
                            {
                                lexer.SetPos(save);
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Implication");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Implication");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Implication");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Disjunction(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Disjunction");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Conjunction(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == DISJUNCTION)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.Conjunction(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch11 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"conjunctive expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        s.end = span.end;
                                                        expr.Reset(new DisjunctionNode(s, expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Disjunction");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Disjunction");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Disjunction");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Conjunction(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Conjunction");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.BitOr(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == AMPAMP)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.BitOr(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch11 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"bitwise or expression ");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        s.end = span.end;
                                                        expr.Reset(new ConjunctionNode(s, expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Conjunction");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Conjunction");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Conjunction");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match BitOr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"BitOr");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.BitXor(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == BITOR)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.BitXor(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch11 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"bitwise exclusive or expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        s.end = span.end;
                                                        expr.Reset(new BitOrNode(s, expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BitOr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BitOr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"BitOr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match BitXor(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"BitXor");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.BitAnd(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == BITXOR)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.BitAnd(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch11 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"bitwise and expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        s.end = span.end;
                                                        expr.Reset(new BitXorNode(s, expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BitXor");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BitXor");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"BitXor");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match BitAnd(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"BitAnd");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Equality(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == AMP)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.Equality(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch11 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"equality expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        s.end = span.end;
                                                        expr.Reset(new BitAndNode(s, expr.Release(), right.Release()));
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BitAnd");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BitAnd");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"BitAnd");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Equality(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Equality");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        Operator op;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Relational(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        bool pass = true;
                                                        Match match(false);
                                                        if (*lexer == EQ)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                            else op = Operator.eq;
                                                        }
                                                        if (match.hit && !pass)
                                                        {
                                                            match = Match(false);
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                bool pass = true;
                                                                Match match(false);
                                                                if (*lexer == NEQ)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                    else op = Operator.neq;
                                                                }
                                                                if (match.hit && !pass)
                                                                {
                                                                    match = Match(false);
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch13 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch15 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.Relational(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch15 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"relational expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case Operator.eq: s.end = span.end;
                                                            expr.Reset(new EqualNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.neq: s.end = span.end;
                                                            expr.Reset(new NotEqualNode(s, expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Equality");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Equality");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Equality");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Relational(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Relational");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        Operator op;
        UniquePtr<Node> left;
        UniquePtr<Node> isType;
        UniquePtr<Node> asType;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Shift(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long save = lexer.GetPos();
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        {
                                                            long save = lexer.GetPos();
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long save = lexer.GetPos();
                                                                Match match(false);
                                                                Match* parentMatch13 = &match;
                                                                {
                                                                    long save = lexer.GetPos();
                                                                    Match match(false);
                                                                    Match* parentMatch14 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        bool pass = true;
                                                                        Match match(false);
                                                                        if (*lexer == LEQ)
                                                                        {
                                                                            ++lexer;
                                                                            match.hit = true;
                                                                        }
                                                                        if (match.hit)
                                                                        {
                                                                            if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                            else
                                                                            {
                                                                                op = Operator.lessOrEq;
                                                                                ctx->PushParsingIsOrAs(false);
                                                                            }
                                                                        }
                                                                        if (match.hit && !pass)
                                                                        {
                                                                            match = Match(false);
                                                                        }
                                                                        *parentMatch14 = match;
                                                                    }
                                                                    *parentMatch13 = match;
                                                                    if (!match.hit)
                                                                    {
                                                                        Match match(false);
                                                                        Match* parentMatch15 = &match;
                                                                        lexer.SetPos(save);
                                                                        {
                                                                            Match match(false);
                                                                            Match* parentMatch16 = &match;
                                                                            {
                                                                                long pos = lexer.GetPos();
                                                                                bool pass = true;
                                                                                Match match(false);
                                                                                if (*lexer == GEQ)
                                                                                {
                                                                                    ++lexer;
                                                                                    match.hit = true;
                                                                                }
                                                                                if (match.hit)
                                                                                {
                                                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                                    else
                                                                                    {
                                                                                        op = Operator.greaterOrEq;
                                                                                        ctx->PushParsingIsOrAs(false);
                                                                                    }
                                                                                }
                                                                                if (match.hit && !pass)
                                                                                {
                                                                                    match = Match(false);
                                                                                }
                                                                                *parentMatch16 = match;
                                                                            }
                                                                            *parentMatch15 = match;
                                                                        }
                                                                        *parentMatch13 = match;
                                                                    }
                                                                }
                                                                *parentMatch12 = match;
                                                                if (!match.hit)
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch17 = &match;
                                                                    lexer.SetPos(save);
                                                                    {
                                                                        Match match(false);
                                                                        Match* parentMatch18 = &match;
                                                                        {
                                                                            long pos = lexer.GetPos();
                                                                            bool pass = true;
                                                                            Match match(false);
                                                                            if (*lexer == LANGLE)
                                                                            {
                                                                                ++lexer;
                                                                                match.hit = true;
                                                                            }
                                                                            if (match.hit)
                                                                            {
                                                                                if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                                else
                                                                                {
                                                                                    op = Operator.less;
                                                                                    ctx->PushParsingIsOrAs(false);
                                                                                }
                                                                            }
                                                                            if (match.hit && !pass)
                                                                            {
                                                                                match = Match(false);
                                                                            }
                                                                            *parentMatch18 = match;
                                                                        }
                                                                        *parentMatch17 = match;
                                                                    }
                                                                    *parentMatch12 = match;
                                                                }
                                                            }
                                                            *parentMatch11 = match;
                                                            if (!match.hit)
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch19 = &match;
                                                                lexer.SetPos(save);
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch20 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        bool pass = true;
                                                                        Match match(false);
                                                                        if (*lexer == RANGLE)
                                                                        {
                                                                            ++lexer;
                                                                            match.hit = true;
                                                                        }
                                                                        if (match.hit)
                                                                        {
                                                                            if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                            else
                                                                            {
                                                                                op = Operator.greater;
                                                                                ctx->PushParsingIsOrAs(false);
                                                                            }
                                                                        }
                                                                        if (match.hit && !pass)
                                                                        {
                                                                            match = Match(false);
                                                                        }
                                                                        *parentMatch20 = match;
                                                                    }
                                                                    *parentMatch19 = match;
                                                                }
                                                                *parentMatch11 = match;
                                                            }
                                                        }
                                                        *parentMatch10 = match;
                                                        if (!match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch21 = &match;
                                                            lexer.SetPos(save);
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch22 = &match;
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch23 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        bool pass = true;
                                                                        Match match(false);
                                                                        if (*lexer == IS)
                                                                        {
                                                                            ++lexer;
                                                                            match.hit = true;
                                                                        }
                                                                        if (match.hit)
                                                                        {
                                                                            if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                            else
                                                                            {
                                                                                op = Operator.is_;
                                                                                ctx->PushParsingIsOrAs(true);
                                                                            }
                                                                        }
                                                                        if (match.hit && !pass)
                                                                        {
                                                                            match = Match(false);
                                                                        }
                                                                        *parentMatch23 = match;
                                                                    }
                                                                    *parentMatch22 = match;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch24 = &match;
                                                                    {
                                                                        Match match = ParTypeExprParser.TypeExpr(lexer, ctx);
                                                                        isType.Reset(cast<Node*>(match.value));
                                                                        *parentMatch24 = match;
                                                                    }
                                                                    *parentMatch22 = match;
                                                                }
                                                                *parentMatch21 = match;
                                                            }
                                                            *parentMatch10 = match;
                                                        }
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch25 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch26 = &match;
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch27 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    bool pass = true;
                                                                    Match match(false);
                                                                    if (*lexer == AS)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                        else
                                                                        {
                                                                            op = Operator.as_;
                                                                            ctx->PushParsingIsOrAs(true);
                                                                        }
                                                                    }
                                                                    if (match.hit && !pass)
                                                                    {
                                                                        match = Match(false);
                                                                    }
                                                                    *parentMatch27 = match;
                                                                }
                                                                *parentMatch26 = match;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch28 = &match;
                                                                {
                                                                    Match match = ParTypeExprParser.TypeExpr(lexer, ctx);
                                                                    asType.Reset(cast<Node*>(match.value));
                                                                    *parentMatch28 = match;
                                                                }
                                                                *parentMatch26 = match;
                                                            }
                                                            *parentMatch25 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch29 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch30 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(false);
                                                    Match* parentMatch31 = &match;
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch32 = &match;
                                                        {
                                                            long save = lexer.GetPos();
                                                            Match match = ParExpressionParser.Shift(lexer, ctx);
                                                            right.Reset(cast<Node*>(match.value));
                                                            *parentMatch32 = match;
                                                            if (!match.hit)
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch33 = &match;
                                                                lexer.SetPos(save);
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch34 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        bool pass = true;
                                                                        Match match(true);
                                                                        if (match.hit)
                                                                        {
                                                                            if (!ctx->parsingIsOrAs) pass = false;
                                                                        }
                                                                        if (match.hit && !pass)
                                                                        {
                                                                            match = Match(false);
                                                                        }
                                                                        *parentMatch34 = match;
                                                                    }
                                                                    *parentMatch33 = match;
                                                                }
                                                                *parentMatch32 = match;
                                                            }
                                                        }
                                                        *parentMatch31 = match;
                                                    }
                                                    if (match.hit)
                                                    {
                                                        ctx->PopParsingIsOrAs();
                                                        switch (op)
                                                        {
                                                            case Operator.lessOrEq: s.end = span.end;
                                                            expr.Reset(new LessOrEqualNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.greaterOrEq: s.end = span.end;
                                                            expr.Reset(new GreaterOrEqualNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.less: s.end = span.end;
                                                            expr.Reset(new LessNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.greater: s.end = span.end;
                                                            expr.Reset(new GreaterNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.is_: s.end = span.end;
                                                            expr.Reset(new IsNode(s, expr.Release(), isType.Release()));
                                                            break;
                                                            case Operator.as_: s.end = span.end;
                                                            expr.Reset(new AsNode(s, expr.Release(), asType.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch30 = match;
                                                }
                                                *parentMatch29 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Relational");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Relational");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Relational");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Shift(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Shift");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        Operator op;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Additive(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long save = lexer.GetPos();
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        {
                                                            long pos = lexer.GetPos();
                                                            bool pass = true;
                                                            Match match(false);
                                                            if (*lexer == SHIFTLEFT)
                                                            {
                                                                ++lexer;
                                                                match.hit = true;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                if (ctx->parsingLvalue) pass = false;
                                                                else op = Operator.shiftLeft;
                                                            }
                                                            if (match.hit && !pass)
                                                            {
                                                                match = Match(false);
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch10 = match;
                                                        if (!match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            lexer.SetPos(save);
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch13 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    bool pass = true;
                                                                    Match match(false);
                                                                    if (*lexer == SHIFTRIGHT)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        if (ctx->parsingLvalue) pass = false;
                                                                        else op = Operator.shiftRight;
                                                                    }
                                                                    if (match.hit && !pass)
                                                                    {
                                                                        match = Match(false);
                                                                    }
                                                                    *parentMatch13 = match;
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch10 = match;
                                                        }
                                                    }
                                                    *parentMatch9 = match;
                                                }
                                                *parentMatch8 = match;
                                            }
                                            if (match.hit)
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    Match match(false);
                                                    Match* parentMatch15 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Match match(true);
                                                        if (match.hit)
                                                        {
                                                            ctx->BeginParsingArguments();
                                                        }
                                                        *parentMatch15 = match;
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch16 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch17 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch18 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.Additive(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch18 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"additive expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case Operator.shiftLeft: s.end = span.end;
                                                            expr.Reset(new ShiftLeftNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.shiftRight: s.end = span.end;
                                                            expr.Reset(new ShiftRightNode(s, expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                        ctx->EndParsingArguments();
                                                    }
                                                    else
                                                    {
                                                        ctx->EndParsingArguments();
                                                    }
                                                    *parentMatch17 = match;
                                                }
                                                *parentMatch16 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Shift");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Shift");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Shift");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Additive(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Additive");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        Operator op;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Multiplicative(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        bool pass = true;
                                                        Match match(false);
                                                        if (*lexer == PLUS)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                            else op = Operator.plus;
                                                        }
                                                        if (match.hit && !pass)
                                                        {
                                                            match = Match(false);
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                bool pass = true;
                                                                Match match(false);
                                                                if (*lexer == MINUS)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                    else op = Operator.minus;
                                                                }
                                                                if (match.hit && !pass)
                                                                {
                                                                    match = Match(false);
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch13 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch14 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch15 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.Multiplicative(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch15 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"multiplicative expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case Operator.plus: s.end = span.end;
                                                            expr.Reset(new AddNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.minus: s.end = span.end;
                                                            expr.Reset(new SubNode(s, expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch14 = match;
                                                }
                                                *parentMatch13 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Additive");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Additive");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Additive");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Multiplicative(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Multiplicative");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        Operator op;
        UniquePtr<Node> left;
        UniquePtr<Node> right;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Prefix(lexer, ctx);
                        left.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(left.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long save = lexer.GetPos();
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        {
                                                            long pos = lexer.GetPos();
                                                            bool pass = true;
                                                            Match match(false);
                                                            if (*lexer == STAR)
                                                            {
                                                                ++lexer;
                                                                match.hit = true;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                else op = Operator.mul;
                                                            }
                                                            if (match.hit && !pass)
                                                            {
                                                                match = Match(false);
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                        *parentMatch10 = match;
                                                        if (!match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            lexer.SetPos(save);
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch13 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    bool pass = true;
                                                                    Match match(false);
                                                                    if (*lexer == DIV)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                        else op = Operator.div;
                                                                    }
                                                                    if (match.hit && !pass)
                                                                    {
                                                                        match = Match(false);
                                                                    }
                                                                    *parentMatch13 = match;
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch10 = match;
                                                        }
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch14 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch15 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                bool pass = true;
                                                                Match match(false);
                                                                if (*lexer == REM)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    if (ctx->parsingLvalue || ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                    else op = Operator.rem;
                                                                }
                                                                if (match.hit && !pass)
                                                                {
                                                                    match = Match(false);
                                                                }
                                                                *parentMatch15 = match;
                                                            }
                                                            *parentMatch14 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch16 = &match;
                                            {
                                                Match match(false);
                                                Match* parentMatch17 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(true);
                                                    Match* parentMatch18 = &match;
                                                    {
                                                        System.Lex.Span span = lexer.GetSpan();
                                                        Match match = ParExpressionParser.Prefix(lexer, ctx);
                                                        right.Reset(cast<Node*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            *parentMatch18 = match;
                                                        }
                                                        else
                                                        {
                                                            lexer.ThrowExpectationFailure(span, u"prefix expression");
                                                        }
                                                    }
                                                    if (match.hit)
                                                    {
                                                        switch (op)
                                                        {
                                                            case Operator.mul: s.end = span.end;
                                                            expr.Reset(new MulNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.div: s.end = span.end;
                                                            expr.Reset(new DivNode(s, expr.Release(), right.Release()));
                                                            break;
                                                            case Operator.rem: s.end = span.end;
                                                            expr.Reset(new RemNode(s, expr.Release(), right.Release()));
                                                            break;
                                                        }
                                                    }
                                                    *parentMatch17 = match;
                                                }
                                                *parentMatch16 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Multiplicative");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Multiplicative");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Multiplicative");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Prefix(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Prefix");
            }
        #endif
        UniquePtr<Node> prefix;
        Span s;
        Operator op;
        UniquePtr<Node> p;
        UniquePtr<Node> postfix;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long save = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            long save = lexer.GetPos();
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                long save = lexer.GetPos();
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    long save = lexer.GetPos();
                                    Match match(false);
                                    Match* parentMatch7 = &match;
                                    {
                                        long save = lexer.GetPos();
                                        Match match(false);
                                        Match* parentMatch8 = &match;
                                        {
                                            long save = lexer.GetPos();
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                long save = lexer.GetPos();
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Span span = lexer.GetSpan();
                                                        Match match(false);
                                                        if (*lexer == PLUSPLUS)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            s = span;
                                                            op = Operator.plusplus;
                                                        }
                                                        *parentMatch11 = match;
                                                    }
                                                    *parentMatch10 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch12 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch13 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Span span = lexer.GetSpan();
                                                                Match match(false);
                                                                if (*lexer == MINUSMINUS)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    s = span;
                                                                    op = Operator.minusminus;
                                                                }
                                                                *parentMatch13 = match;
                                                            }
                                                            *parentMatch12 = match;
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                }
                                                *parentMatch9 = match;
                                                if (!match.hit)
                                                {
                                                    Match match(false);
                                                    Match* parentMatch14 = &match;
                                                    lexer.SetPos(save);
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch15 = &match;
                                                        {
                                                            long pos = lexer.GetPos();
                                                            Span span = lexer.GetSpan();
                                                            bool pass = true;
                                                            Match match(false);
                                                            if (*lexer == PLUS)
                                                            {
                                                                ++lexer;
                                                                match.hit = true;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                if (ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                                else
                                                                {
                                                                    s = span;
                                                                    op = Operator.plus;
                                                                }
                                                            }
                                                            if (match.hit && !pass)
                                                            {
                                                                match = Match(false);
                                                            }
                                                            *parentMatch15 = match;
                                                        }
                                                        *parentMatch14 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                }
                                            }
                                            *parentMatch8 = match;
                                            if (!match.hit)
                                            {
                                                Match match(false);
                                                Match* parentMatch16 = &match;
                                                lexer.SetPos(save);
                                                {
                                                    Match match(false);
                                                    Match* parentMatch17 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Span span = lexer.GetSpan();
                                                        bool pass = true;
                                                        Match match(false);
                                                        if (*lexer == MINUS)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            if (ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                            else
                                                            {
                                                                s = span;
                                                                op = Operator.minus;
                                                            }
                                                        }
                                                        if (match.hit && !pass)
                                                        {
                                                            match = Match(false);
                                                        }
                                                        *parentMatch17 = match;
                                                    }
                                                    *parentMatch16 = match;
                                                }
                                                *parentMatch8 = match;
                                            }
                                        }
                                        *parentMatch7 = match;
                                        if (!match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch18 = &match;
                                            lexer.SetPos(save);
                                            {
                                                Match match(false);
                                                Match* parentMatch19 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    bool pass = true;
                                                    Match match(false);
                                                    if (*lexer == EXCLAMATION)
                                                    {
                                                        ++lexer;
                                                        match.hit = true;
                                                    }
                                                    if (match.hit)
                                                    {
                                                        if (ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                        else
                                                        {
                                                            s = span;
                                                            op = Operator.not_;
                                                        }
                                                    }
                                                    if (match.hit && !pass)
                                                    {
                                                        match = Match(false);
                                                    }
                                                    *parentMatch19 = match;
                                                }
                                                *parentMatch18 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                    }
                                    *parentMatch6 = match;
                                    if (!match.hit)
                                    {
                                        Match match(false);
                                        Match* parentMatch20 = &match;
                                        lexer.SetPos(save);
                                        {
                                            Match match(false);
                                            Match* parentMatch21 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                Span span = lexer.GetSpan();
                                                bool pass = true;
                                                Match match(false);
                                                if (*lexer == CPL)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    if (ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                    else
                                                    {
                                                        s = span;
                                                        op = Operator.complement;
                                                    }
                                                }
                                                if (match.hit && !pass)
                                                {
                                                    match = Match(false);
                                                }
                                                *parentMatch21 = match;
                                            }
                                            *parentMatch20 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                }
                                *parentMatch5 = match;
                                if (!match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch22 = &match;
                                    lexer.SetPos(save);
                                    {
                                        Match match(false);
                                        Match* parentMatch23 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Span span = lexer.GetSpan();
                                            bool pass = true;
                                            Match match(false);
                                            if (*lexer == STAR)
                                            {
                                                ++lexer;
                                                match.hit = true;
                                            }
                                            if (match.hit)
                                            {
                                                if (ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                                else
                                                {
                                                    s = span;
                                                    op = Operator.deref;
                                                }
                                            }
                                            if (match.hit && !pass)
                                            {
                                                match = Match(false);
                                            }
                                            *parentMatch23 = match;
                                        }
                                        *parentMatch22 = match;
                                    }
                                    *parentMatch5 = match;
                                }
                            }
                            *parentMatch4 = match;
                            if (!match.hit)
                            {
                                Match match(false);
                                Match* parentMatch24 = &match;
                                lexer.SetPos(save);
                                {
                                    Match match(false);
                                    Match* parentMatch25 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Span span = lexer.GetSpan();
                                        bool pass = true;
                                        Match match(false);
                                        if (*lexer == AMP)
                                        {
                                            ++lexer;
                                            match.hit = true;
                                        }
                                        if (match.hit)
                                        {
                                            if (ctx->parsingExpressionStatement && !ctx->parsingArguments) pass = false;
                                            else
                                            {
                                                s = span;
                                                op = Operator.addrOf;
                                            }
                                        }
                                        if (match.hit && !pass)
                                        {
                                            match = Match(false);
                                        }
                                        *parentMatch25 = match;
                                    }
                                    *parentMatch24 = match;
                                }
                                *parentMatch4 = match;
                            }
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch26 = &match;
                    {
                        Match match(false);
                        Match* parentMatch27 = &match;
                        {
                            long pos = lexer.GetPos();
                            Span span = lexer.GetSpan();
                            Match match = ParExpressionParser.Prefix(lexer, ctx);
                            p.Reset(cast<Node*>(match.value));
                            if (match.hit)
                            {
                                prefix.Reset(p.Release());
                                s.end = span.end;
                                switch (op)
                                {
                                    case Operator.plusplus: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new PrefixIncrementNode(s, prefix.Release()));
                                    }
                                    case Operator.minusminus: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new PrefixDecrementNode(s, prefix.Release()));
                                    }
                                    case Operator.plus: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new UnaryPlusNode(s, prefix.Release()));
                                    }
                                    case Operator.minus: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new UnaryMinusNode(s, prefix.Release()));
                                    }
                                    case Operator.not_: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new NotNode(s, prefix.Release()));
                                    }
                                    case Operator.complement: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new ComplementNode(s, prefix.Release()));
                                    }
                                    case Operator.deref: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new DerefNode(s, prefix.Release()));
                                    }
                                    case Operator.addrOf: 
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                        #endif
                                        return Match(true, new AddrOfNode(s, prefix.Release()));
                                    }
                                }
                            }
                            *parentMatch27 = match;
                        }
                        *parentMatch26 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
                if (!match.hit)
                {
                    Match match(false);
                    Match* parentMatch28 = &match;
                    lexer.SetPos(save);
                    {
                        Match match(false);
                        Match* parentMatch29 = &match;
                        {
                            long pos = lexer.GetPos();
                            Match match = ParExpressionParser.Postfix(lexer, ctx);
                            postfix.Reset(cast<Node*>(match.value));
                            if (match.hit)
                            {
                                {
                                    #if (DEBUG)
                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                                    #endif
                                    return Match(true, postfix.Release());
                                }
                            }
                            *parentMatch29 = match;
                        }
                        *parentMatch28 = match;
                    }
                    *parentMatch1 = match;
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Prefix");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Prefix");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Postfix(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Postfix");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> primary;
        UniquePtr<IdentifierNode> dotMember;
        UniquePtr<IdentifierNode> arrowMember;
        UniquePtr<Node> index;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.Primary(lexer, ctx);
                        primary.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            s = span;
                            expr.Reset(primary.Release());
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(true);
                        Match* parentMatch5 = &match;
                        {
                            while (true)
                            {
                                long save = lexer.GetPos();
                                {
                                    Match match(false);
                                    Match* parentMatch6 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch7 = &match;
                                        {
                                            long save = lexer.GetPos();
                                            Match match(false);
                                            Match* parentMatch8 = &match;
                                            {
                                                long save = lexer.GetPos();
                                                Match match(false);
                                                Match* parentMatch9 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch10 = &match;
                                                    {
                                                        long save = lexer.GetPos();
                                                        Match match(false);
                                                        Match* parentMatch11 = &match;
                                                        {
                                                            long save = lexer.GetPos();
                                                            Match match(false);
                                                            Match* parentMatch12 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Span span = lexer.GetSpan();
                                                                Match match(false);
                                                                if (*lexer == PLUSPLUS)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    s.end = span.end;
                                                                    expr.Reset(new PostfixIncrementNode(s, expr.Release()));
                                                                }
                                                                *parentMatch12 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                            if (!match.hit)
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch13 = &match;
                                                                lexer.SetPos(save);
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch14 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        Span span = lexer.GetSpan();
                                                                        Match match(false);
                                                                        if (*lexer == MINUSMINUS)
                                                                        {
                                                                            ++lexer;
                                                                            match.hit = true;
                                                                        }
                                                                        if (match.hit)
                                                                        {
                                                                            s.end = span.end;
                                                                            expr.Reset(new PostfixDecrementNode(s, expr.Release()));
                                                                        }
                                                                        *parentMatch14 = match;
                                                                    }
                                                                    *parentMatch13 = match;
                                                                }
                                                                *parentMatch11 = match;
                                                            }
                                                        }
                                                        *parentMatch10 = match;
                                                        if (!match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch15 = &match;
                                                            lexer.SetPos(save);
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch16 = &match;
                                                                {
                                                                    Match match(false);
                                                                    if (*lexer == DOT)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    *parentMatch16 = match;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch17 = &match;
                                                                    {
                                                                        Match match(false);
                                                                        Match* parentMatch18 = &match;
                                                                        {
                                                                            long pos = lexer.GetPos();
                                                                            Span span = lexer.GetSpan();
                                                                            Match match = ParIdentifierParser.Identifier(lexer);
                                                                            dotMember.Reset(cast<IdentifierNode*>(match.value));
                                                                            if (match.hit)
                                                                            {
                                                                                s.end = span.end;
                                                                                expr.Reset(new DotNode(s, expr.Release(), dotMember.Release()));
                                                                            }
                                                                            *parentMatch18 = match;
                                                                        }
                                                                        *parentMatch17 = match;
                                                                    }
                                                                    *parentMatch16 = match;
                                                                }
                                                                *parentMatch15 = match;
                                                            }
                                                            *parentMatch10 = match;
                                                        }
                                                    }
                                                    *parentMatch9 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch19 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch20 = &match;
                                                            {
                                                                Match match(false);
                                                                if (*lexer == ARROW)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                *parentMatch20 = match;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch21 = &match;
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch22 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        Span span = lexer.GetSpan();
                                                                        Match match = ParIdentifierParser.Identifier(lexer);
                                                                        arrowMember.Reset(cast<IdentifierNode*>(match.value));
                                                                        if (match.hit)
                                                                        {
                                                                            s.end = span.end;
                                                                            expr.Reset(new ArrowNode(s, expr.Release(), arrowMember.Release()));
                                                                        }
                                                                        *parentMatch22 = match;
                                                                    }
                                                                    *parentMatch21 = match;
                                                                }
                                                                *parentMatch20 = match;
                                                            }
                                                            *parentMatch19 = match;
                                                        }
                                                        *parentMatch9 = match;
                                                    }
                                                }
                                                *parentMatch8 = match;
                                                if (!match.hit)
                                                {
                                                    Match match(false);
                                                    Match* parentMatch23 = &match;
                                                    lexer.SetPos(save);
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch24 = &match;
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch25 = &match;
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch26 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    Match match(false);
                                                                    if (*lexer == LBRACKET)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        ctx->PushParsingLvalue(false);
                                                                        ctx->PushParsingExpressionStatement(false);
                                                                    }
                                                                    *parentMatch26 = match;
                                                                }
                                                                *parentMatch25 = match;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch27 = &match;
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch28 = &match;
                                                                    {
                                                                        long pos = lexer.GetPos();
                                                                        Match match = ParExpressionParser.Expression(lexer, ctx);
                                                                        index.Reset(cast<Node*>(match.value));
                                                                        if (match.hit)
                                                                        {
                                                                            ctx->PopParsingExpressionStatement();
                                                                            ctx->PopParsingLvalue();
                                                                        }
                                                                        *parentMatch28 = match;
                                                                    }
                                                                    *parentMatch27 = match;
                                                                }
                                                                *parentMatch25 = match;
                                                            }
                                                            *parentMatch24 = match;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch29 = &match;
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch30 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    Span span = lexer.GetSpan();
                                                                    Match match(true);
                                                                    Match* parentMatch31 = &match;
                                                                    {
                                                                        System.Lex.Span span = lexer.GetSpan();
                                                                        Match match(false);
                                                                        if (*lexer == RBRACKET)
                                                                        {
                                                                            ++lexer;
                                                                            match.hit = true;
                                                                        }
                                                                        if (match.hit)
                                                                        {
                                                                            *parentMatch31 = match;
                                                                        }
                                                                        else
                                                                        {
                                                                            lexer.ThrowExpectationFailure(span, GetTokenName(RBRACKET));
                                                                        }
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        s.end = span.end;
                                                                        expr.Reset(new IndexingNode(s, expr.Release(), index.Release()));
                                                                    }
                                                                    *parentMatch30 = match;
                                                                }
                                                                *parentMatch29 = match;
                                                            }
                                                            *parentMatch24 = match;
                                                        }
                                                        *parentMatch23 = match;
                                                    }
                                                    *parentMatch8 = match;
                                                }
                                            }
                                            *parentMatch7 = match;
                                            if (!match.hit)
                                            {
                                                Match match(false);
                                                Match* parentMatch32 = &match;
                                                lexer.SetPos(save);
                                                {
                                                    Match match(false);
                                                    Match* parentMatch33 = &match;
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch34 = &match;
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch35 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Match match(false);
                                                                if (*lexer == LPAREN)
                                                                {
                                                                    ++lexer;
                                                                    match.hit = true;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    expr.Reset(new InvokeNode(s, expr.Release()));
                                                                }
                                                                *parentMatch35 = match;
                                                            }
                                                            *parentMatch34 = match;
                                                        }
                                                        if (match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch36 = &match;
                                                            {
                                                                Match match = ParExpressionParser.ArgumentList(lexer, ctx, expr.Get());
                                                                *parentMatch36 = match;
                                                            }
                                                            *parentMatch34 = match;
                                                        }
                                                        *parentMatch33 = match;
                                                    }
                                                    if (match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch37 = &match;
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch38 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Span span = lexer.GetSpan();
                                                                Match match(true);
                                                                Match* parentMatch39 = &match;
                                                                {
                                                                    System.Lex.Span span = lexer.GetSpan();
                                                                    Match match(false);
                                                                    if (*lexer == RPAREN)
                                                                    {
                                                                        ++lexer;
                                                                        match.hit = true;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        *parentMatch39 = match;
                                                                    }
                                                                    else
                                                                    {
                                                                        lexer.ThrowExpectationFailure(span, GetTokenName(RPAREN));
                                                                    }
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    expr->SetSpanEnd(span.end);
                                                                }
                                                                *parentMatch38 = match;
                                                            }
                                                            *parentMatch37 = match;
                                                        }
                                                        *parentMatch33 = match;
                                                    }
                                                    *parentMatch32 = match;
                                                }
                                                *parentMatch7 = match;
                                            }
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch5 = match;
                                    }
                                    else
                                    {
                                        lexer.SetPos(save);
                                        break;
                                    }
                                }
                            }
                        }
                        *parentMatch4 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Postfix");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Postfix");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Postfix");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match Primary(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"Primary");
            }
        #endif
        Span s;
        UniquePtr<Node> expr;
        UniquePtr<LiteralNode> literal;
        UniquePtr<Node> basicType;
        UniquePtr<Node> templateId;
        UniquePtr<IdentifierNode> id;
        UniquePtr<Node> sizeOf;
        UniquePtr<Node> typeName;
        UniquePtr<Node> typeId;
        UniquePtr<Node> castExpr;
        UniquePtr<Node> constructExpr;
        UniquePtr<Node> newExpr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long save = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long save = lexer.GetPos();
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    long save = lexer.GetPos();
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long save = lexer.GetPos();
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            long save = lexer.GetPos();
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                long save = lexer.GetPos();
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    long save = lexer.GetPos();
                                    Match match(false);
                                    Match* parentMatch7 = &match;
                                    {
                                        long save = lexer.GetPos();
                                        Match match(false);
                                        Match* parentMatch8 = &match;
                                        {
                                            long save = lexer.GetPos();
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            {
                                                long save = lexer.GetPos();
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long save = lexer.GetPos();
                                                    Match match(false);
                                                    Match* parentMatch11 = &match;
                                                    {
                                                        long save = lexer.GetPos();
                                                        Match match(false);
                                                        Match* parentMatch12 = &match;
                                                        {
                                                            long pos = lexer.GetPos();
                                                            Match match(false);
                                                            Match* parentMatch13 = &match;
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch14 = &match;
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch15 = &match;
                                                                    {
                                                                        Match match(false);
                                                                        Match* parentMatch16 = &match;
                                                                        {
                                                                            long pos = lexer.GetPos();
                                                                            Span span = lexer.GetSpan();
                                                                            Match match(false);
                                                                            if (*lexer == LPAREN)
                                                                            {
                                                                                ++lexer;
                                                                                match.hit = true;
                                                                            }
                                                                            if (match.hit)
                                                                            {
                                                                                s = span;
                                                                            }
                                                                            *parentMatch16 = match;
                                                                        }
                                                                        *parentMatch15 = match;
                                                                    }
                                                                    if (match.hit)
                                                                    {
                                                                        Match match(false);
                                                                        Match* parentMatch17 = &match;
                                                                        {
                                                                            Match match = ParExpressionParser.Expression(lexer, ctx);
                                                                            expr.Reset(cast<Node*>(match.value));
                                                                            *parentMatch17 = match;
                                                                        }
                                                                        *parentMatch15 = match;
                                                                    }
                                                                    *parentMatch14 = match;
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    Match match(false);
                                                                    Match* parentMatch18 = &match;
                                                                    {
                                                                        Match match(false);
                                                                        Match* parentMatch19 = &match;
                                                                        {
                                                                            long pos = lexer.GetPos();
                                                                            Span span = lexer.GetSpan();
                                                                            Match match(false);
                                                                            if (*lexer == RPAREN)
                                                                            {
                                                                                ++lexer;
                                                                                match.hit = true;
                                                                            }
                                                                            if (match.hit)
                                                                            {
                                                                                s.end = span.end;
                                                                            }
                                                                            *parentMatch19 = match;
                                                                        }
                                                                        *parentMatch18 = match;
                                                                    }
                                                                    *parentMatch14 = match;
                                                                }
                                                                *parentMatch13 = match;
                                                            }
                                                            if (match.hit)
                                                            {
                                                                {
                                                                    #if (DEBUG)
                                                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                                    #endif
                                                                    return Match(true, new ParenthesizedExpressionNode(s, expr.Release()));
                                                                }
                                                            }
                                                            *parentMatch12 = match;
                                                        }
                                                        *parentMatch11 = match;
                                                        if (!match.hit)
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch20 = &match;
                                                            lexer.SetPos(save);
                                                            {
                                                                Match match(false);
                                                                Match* parentMatch21 = &match;
                                                                {
                                                                    long pos = lexer.GetPos();
                                                                    Match match = ParLiteralParser.Literal(lexer, ctx);
                                                                    literal.Reset(cast<LiteralNode*>(match.value));
                                                                    if (match.hit)
                                                                    {
                                                                        {
                                                                            #if (DEBUG)
                                                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                                            #endif
                                                                            return Match(true, literal.Release());
                                                                        }
                                                                    }
                                                                    *parentMatch21 = match;
                                                                }
                                                                *parentMatch20 = match;
                                                            }
                                                            *parentMatch11 = match;
                                                        }
                                                    }
                                                    *parentMatch10 = match;
                                                    if (!match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch22 = &match;
                                                        lexer.SetPos(save);
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch23 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Match match = ParBasicTypeParser.BasicType(lexer);
                                                                basicType.Reset(cast<Node*>(match.value));
                                                                if (match.hit)
                                                                {
                                                                    {
                                                                        #if (DEBUG)
                                                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                                        #endif
                                                                        return Match(true, basicType.Release());
                                                                    }
                                                                }
                                                                *parentMatch23 = match;
                                                            }
                                                            *parentMatch22 = match;
                                                        }
                                                        *parentMatch10 = match;
                                                    }
                                                }
                                                *parentMatch9 = match;
                                                if (!match.hit)
                                                {
                                                    Match match(false);
                                                    Match* parentMatch24 = &match;
                                                    lexer.SetPos(save);
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch25 = &match;
                                                        {
                                                            long pos = lexer.GetPos();
                                                            Match match = ParTemplateParser.TemplateId(lexer, ctx);
                                                            templateId.Reset(cast<Node*>(match.value));
                                                            if (match.hit)
                                                            {
                                                                {
                                                                    #if (DEBUG)
                                                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                                    #endif
                                                                    return Match(true, templateId.Release());
                                                                }
                                                            }
                                                            *parentMatch25 = match;
                                                        }
                                                        *parentMatch24 = match;
                                                    }
                                                    *parentMatch9 = match;
                                                }
                                            }
                                            *parentMatch8 = match;
                                            if (!match.hit)
                                            {
                                                Match match(false);
                                                Match* parentMatch26 = &match;
                                                lexer.SetPos(save);
                                                {
                                                    Match match(false);
                                                    Match* parentMatch27 = &match;
                                                    {
                                                        long pos = lexer.GetPos();
                                                        Match match = ParIdentifierParser.Identifier(lexer);
                                                        id.Reset(cast<IdentifierNode*>(match.value));
                                                        if (match.hit)
                                                        {
                                                            {
                                                                #if (DEBUG)
                                                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                                #endif
                                                                return Match(true, id.Release());
                                                            }
                                                        }
                                                        *parentMatch27 = match;
                                                    }
                                                    *parentMatch26 = match;
                                                }
                                                *parentMatch8 = match;
                                            }
                                        }
                                        *parentMatch7 = match;
                                        if (!match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch28 = &match;
                                            lexer.SetPos(save);
                                            {
                                                Match match(false);
                                                Match* parentMatch29 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match(false);
                                                    if (*lexer == THIS)
                                                    {
                                                        ++lexer;
                                                        match.hit = true;
                                                    }
                                                    if (match.hit)
                                                    {
                                                        {
                                                            #if (DEBUG)
                                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                            #endif
                                                            return Match(true, new ThisNode(span));
                                                        }
                                                    }
                                                    *parentMatch29 = match;
                                                }
                                                *parentMatch28 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                    }
                                    *parentMatch6 = match;
                                    if (!match.hit)
                                    {
                                        Match match(false);
                                        Match* parentMatch30 = &match;
                                        lexer.SetPos(save);
                                        {
                                            Match match(false);
                                            Match* parentMatch31 = &match;
                                            {
                                                long pos = lexer.GetPos();
                                                Span span = lexer.GetSpan();
                                                Match match(false);
                                                if (*lexer == BASE)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    {
                                                        #if (DEBUG)
                                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                        #endif
                                                        return Match(true, new BaseNode(span));
                                                    }
                                                }
                                                *parentMatch31 = match;
                                            }
                                            *parentMatch30 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                }
                                *parentMatch5 = match;
                                if (!match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch32 = &match;
                                    lexer.SetPos(save);
                                    {
                                        Match match(false);
                                        Match* parentMatch33 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Match match = ParExpressionParser.SizeOfExpr(lexer, ctx);
                                            sizeOf.Reset(cast<Node*>(match.value));
                                            if (match.hit)
                                            {
                                                {
                                                    #if (DEBUG)
                                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                    #endif
                                                    return Match(true, sizeOf.Release());
                                                }
                                            }
                                            *parentMatch33 = match;
                                        }
                                        *parentMatch32 = match;
                                    }
                                    *parentMatch5 = match;
                                }
                            }
                            *parentMatch4 = match;
                            if (!match.hit)
                            {
                                Match match(false);
                                Match* parentMatch34 = &match;
                                lexer.SetPos(save);
                                {
                                    Match match(false);
                                    Match* parentMatch35 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Match match = ParExpressionParser.TypeNameExpr(lexer, ctx);
                                        typeName.Reset(cast<Node*>(match.value));
                                        if (match.hit)
                                        {
                                            {
                                                #if (DEBUG)
                                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                                #endif
                                                return Match(true, typeName.Release());
                                            }
                                        }
                                        *parentMatch35 = match;
                                    }
                                    *parentMatch34 = match;
                                }
                                *parentMatch4 = match;
                            }
                        }
                        *parentMatch3 = match;
                        if (!match.hit)
                        {
                            Match match(false);
                            Match* parentMatch36 = &match;
                            lexer.SetPos(save);
                            {
                                Match match(false);
                                Match* parentMatch37 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match = ParExpressionParser.TypeIdExpr(lexer, ctx);
                                    typeId.Reset(cast<Node*>(match.value));
                                    if (match.hit)
                                    {
                                        {
                                            #if (DEBUG)
                                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                            #endif
                                            return Match(true, typeId.Release());
                                        }
                                    }
                                    *parentMatch37 = match;
                                }
                                *parentMatch36 = match;
                            }
                            *parentMatch3 = match;
                        }
                    }
                    *parentMatch2 = match;
                    if (!match.hit)
                    {
                        Match match(false);
                        Match* parentMatch38 = &match;
                        lexer.SetPos(save);
                        {
                            Match match(false);
                            Match* parentMatch39 = &match;
                            {
                                long pos = lexer.GetPos();
                                Match match = ParExpressionParser.CastExpr(lexer, ctx);
                                castExpr.Reset(cast<Node*>(match.value));
                                if (match.hit)
                                {
                                    {
                                        #if (DEBUG)
                                            if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                        #endif
                                        return Match(true, castExpr.Release());
                                    }
                                }
                                *parentMatch39 = match;
                            }
                            *parentMatch38 = match;
                        }
                        *parentMatch2 = match;
                    }
                }
                *parentMatch1 = match;
                if (!match.hit)
                {
                    Match match(false);
                    Match* parentMatch40 = &match;
                    lexer.SetPos(save);
                    {
                        Match match(false);
                        Match* parentMatch41 = &match;
                        {
                            long pos = lexer.GetPos();
                            Match match = ParExpressionParser.ConstructExpr(lexer, ctx);
                            constructExpr.Reset(cast<Node*>(match.value));
                            if (match.hit)
                            {
                                {
                                    #if (DEBUG)
                                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                    #endif
                                    return Match(true, constructExpr.Release());
                                }
                            }
                            *parentMatch41 = match;
                        }
                        *parentMatch40 = match;
                    }
                    *parentMatch1 = match;
                }
            }
            *parentMatch0 = match;
            if (!match.hit)
            {
                Match match(false);
                Match* parentMatch42 = &match;
                lexer.SetPos(save);
                {
                    Match match(false);
                    Match* parentMatch43 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match = ParExpressionParser.NewExpr(lexer, ctx);
                        newExpr.Reset(cast<Node*>(match.value));
                        if (match.hit)
                        {
                            {
                                #if (DEBUG)
                                    if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                                #endif
                                return Match(true, newExpr.Release());
                            }
                        }
                        *parentMatch43 = match;
                    }
                    *parentMatch42 = match;
                }
                *parentMatch0 = match;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"Primary");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"Primary");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match SizeOfExpr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"SizeOfExpr");
            }
        #endif
        Span s;
        UniquePtr<Node> expr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Span span = lexer.GetSpan();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                long pos = lexer.GetPos();
                                Span span = lexer.GetSpan();
                                Match match(false);
                                if (*lexer == SIZEOF)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                if (match.hit)
                                {
                                    s = span;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch6 = &match;
                            {
                                Match match(true);
                                Match* parentMatch7 = &match;
                                {
                                    System.Lex.Span span = lexer.GetSpan();
                                    Match match(false);
                                    if (*lexer == LPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch7 = match;
                                    }
                                    else
                                    {
                                        lexer.ThrowExpectationFailure(span, GetTokenName(LPAREN));
                                    }
                                }
                                *parentMatch6 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch8 = &match;
                        {
                            Match match(true);
                            Match* parentMatch9 = &match;
                            {
                                System.Lex.Span span = lexer.GetSpan();
                                Match match = ParExpressionParser.Expression(lexer, ctx);
                                expr.Reset(cast<Node*>(match.value));
                                if (match.hit)
                                {
                                    *parentMatch9 = match;
                                }
                                else
                                {
                                    lexer.ThrowExpectationFailure(span, u"expression");
                                }
                            }
                            *parentMatch8 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch10 = &match;
                    {
                        Match match(true);
                        Match* parentMatch11 = &match;
                        {
                            System.Lex.Span span = lexer.GetSpan();
                            Match match(false);
                            if (*lexer == RPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                *parentMatch11 = match;
                            }
                            else
                            {
                                lexer.ThrowExpectationFailure(span, GetTokenName(RPAREN));
                            }
                        }
                        *parentMatch10 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                s.end = span.end;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"SizeOfExpr");
                    #endif
                    return Match(true, new SizeOfNode(s, expr.Release()));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"SizeOfExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"SizeOfExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match TypeNameExpr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"TypeNameExpr");
            }
        #endif
        Span s;
        UniquePtr<Node> expr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Span span = lexer.GetSpan();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                long pos = lexer.GetPos();
                                Span span = lexer.GetSpan();
                                Match match(false);
                                if (*lexer == TYPENAME)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                if (match.hit)
                                {
                                    s = span;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch6 = &match;
                            {
                                Match match(true);
                                Match* parentMatch7 = &match;
                                {
                                    System.Lex.Span span = lexer.GetSpan();
                                    Match match(false);
                                    if (*lexer == LPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch7 = match;
                                    }
                                    else
                                    {
                                        lexer.ThrowExpectationFailure(span, GetTokenName(LPAREN));
                                    }
                                }
                                *parentMatch6 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch8 = &match;
                        {
                            Match match(true);
                            Match* parentMatch9 = &match;
                            {
                                System.Lex.Span span = lexer.GetSpan();
                                Match match = ParExpressionParser.Expression(lexer, ctx);
                                expr.Reset(cast<Node*>(match.value));
                                if (match.hit)
                                {
                                    *parentMatch9 = match;
                                }
                                else
                                {
                                    lexer.ThrowExpectationFailure(span, u"expression");
                                }
                            }
                            *parentMatch8 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch10 = &match;
                    {
                        Match match(true);
                        Match* parentMatch11 = &match;
                        {
                            System.Lex.Span span = lexer.GetSpan();
                            Match match(false);
                            if (*lexer == RPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                *parentMatch11 = match;
                            }
                            else
                            {
                                lexer.ThrowExpectationFailure(span, GetTokenName(RPAREN));
                            }
                        }
                        *parentMatch10 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                s.end = span.end;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"TypeNameExpr");
                    #endif
                    return Match(true, new TypeNameNode(s, expr.Release()));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"TypeNameExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"TypeNameExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match TypeIdExpr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"TypeIdExpr");
            }
        #endif
        Span s;
        UniquePtr<Node> expr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Span span = lexer.GetSpan();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                long pos = lexer.GetPos();
                                Span span = lexer.GetSpan();
                                Match match(false);
                                if (*lexer == TYPEID)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                if (match.hit)
                                {
                                    s = span;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch6 = &match;
                            {
                                Match match(true);
                                Match* parentMatch7 = &match;
                                {
                                    System.Lex.Span span = lexer.GetSpan();
                                    Match match(false);
                                    if (*lexer == LPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch7 = match;
                                    }
                                    else
                                    {
                                        lexer.ThrowExpectationFailure(span, GetTokenName(LPAREN));
                                    }
                                }
                                *parentMatch6 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch8 = &match;
                        {
                            Match match(true);
                            Match* parentMatch9 = &match;
                            {
                                System.Lex.Span span = lexer.GetSpan();
                                Match match = ParExpressionParser.Expression(lexer, ctx);
                                expr.Reset(cast<Node*>(match.value));
                                if (match.hit)
                                {
                                    *parentMatch9 = match;
                                }
                                else
                                {
                                    lexer.ThrowExpectationFailure(span, u"expression");
                                }
                            }
                            *parentMatch8 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch10 = &match;
                    {
                        Match match(true);
                        Match* parentMatch11 = &match;
                        {
                            System.Lex.Span span = lexer.GetSpan();
                            Match match(false);
                            if (*lexer == RPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                *parentMatch11 = match;
                            }
                            else
                            {
                                lexer.ThrowExpectationFailure(span, GetTokenName(RPAREN));
                            }
                        }
                        *parentMatch10 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                s.end = span.end;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"TypeIdExpr");
                    #endif
                    return Match(true, new TypeIdNode(s, expr.Release()));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"TypeIdExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"TypeIdExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match CastExpr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"CastExpr");
            }
        #endif
        Span s;
        UniquePtr<Node> typeExpr;
        UniquePtr<Node> expr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Span span = lexer.GetSpan();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch7 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch8 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Span span = lexer.GetSpan();
                                            Match match(false);
                                            if (*lexer == CAST)
                                            {
                                                ++lexer;
                                                match.hit = true;
                                            }
                                            if (match.hit)
                                            {
                                                s = span;
                                            }
                                            *parentMatch8 = match;
                                        }
                                        *parentMatch7 = match;
                                    }
                                    if (match.hit)
                                    {
                                        Match match(false);
                                        Match* parentMatch9 = &match;
                                        {
                                            Match match(true);
                                            Match* parentMatch10 = &match;
                                            {
                                                System.Lex.Span span = lexer.GetSpan();
                                                Match match(false);
                                                if (*lexer == LANGLE)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    *parentMatch10 = match;
                                                }
                                                else
                                                {
                                                    lexer.ThrowExpectationFailure(span, GetTokenName(LANGLE));
                                                }
                                            }
                                            *parentMatch9 = match;
                                        }
                                        *parentMatch7 = match;
                                    }
                                    *parentMatch6 = match;
                                }
                                if (match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch11 = &match;
                                    {
                                        Match match(true);
                                        Match* parentMatch12 = &match;
                                        {
                                            System.Lex.Span span = lexer.GetSpan();
                                            Match match = ParTypeExprParser.TypeExpr(lexer, ctx);
                                            typeExpr.Reset(cast<Node*>(match.value));
                                            if (match.hit)
                                            {
                                                *parentMatch12 = match;
                                            }
                                            else
                                            {
                                                lexer.ThrowExpectationFailure(span, u"type expression");
                                            }
                                        }
                                        *parentMatch11 = match;
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch13 = &match;
                                {
                                    Match match(true);
                                    Match* parentMatch14 = &match;
                                    {
                                        System.Lex.Span span = lexer.GetSpan();
                                        Match match(false);
                                        if (*lexer == RANGLE)
                                        {
                                            ++lexer;
                                            match.hit = true;
                                        }
                                        if (match.hit)
                                        {
                                            *parentMatch14 = match;
                                        }
                                        else
                                        {
                                            lexer.ThrowExpectationFailure(span, GetTokenName(RANGLE));
                                        }
                                    }
                                    *parentMatch13 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch15 = &match;
                            {
                                Match match(true);
                                Match* parentMatch16 = &match;
                                {
                                    System.Lex.Span span = lexer.GetSpan();
                                    Match match(false);
                                    if (*lexer == LPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        *parentMatch16 = match;
                                    }
                                    else
                                    {
                                        lexer.ThrowExpectationFailure(span, GetTokenName(LPAREN));
                                    }
                                }
                                *parentMatch15 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch17 = &match;
                        {
                            Match match(true);
                            Match* parentMatch18 = &match;
                            {
                                System.Lex.Span span = lexer.GetSpan();
                                Match match = ParExpressionParser.Expression(lexer, ctx);
                                expr.Reset(cast<Node*>(match.value));
                                if (match.hit)
                                {
                                    *parentMatch18 = match;
                                }
                                else
                                {
                                    lexer.ThrowExpectationFailure(span, u"expression");
                                }
                            }
                            *parentMatch17 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch19 = &match;
                    {
                        Match match(true);
                        Match* parentMatch20 = &match;
                        {
                            System.Lex.Span span = lexer.GetSpan();
                            Match match(false);
                            if (*lexer == RPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                *parentMatch20 = match;
                            }
                            else
                            {
                                lexer.ThrowExpectationFailure(span, GetTokenName(RPAREN));
                            }
                        }
                        *parentMatch19 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                s.end = span.end;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"CastExpr");
                    #endif
                    return Match(true, new CastNode(s, typeExpr.Release(), expr.Release()));
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"CastExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"CastExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match ConstructExpr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"ConstructExpr");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> typeExpr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        long pos = lexer.GetPos();
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch7 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch8 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Span span = lexer.GetSpan();
                                            Match match(false);
                                            if (*lexer == CONSTRUCT)
                                            {
                                                ++lexer;
                                                match.hit = true;
                                            }
                                            if (match.hit)
                                            {
                                                s = span;
                                            }
                                            *parentMatch8 = match;
                                        }
                                        *parentMatch7 = match;
                                    }
                                    if (match.hit)
                                    {
                                        Match match(false);
                                        Match* parentMatch9 = &match;
                                        {
                                            Match match(true);
                                            Match* parentMatch10 = &match;
                                            {
                                                System.Lex.Span span = lexer.GetSpan();
                                                Match match(false);
                                                if (*lexer == LANGLE)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                if (match.hit)
                                                {
                                                    *parentMatch10 = match;
                                                }
                                                else
                                                {
                                                    lexer.ThrowExpectationFailure(span, GetTokenName(LANGLE));
                                                }
                                            }
                                            *parentMatch9 = match;
                                        }
                                        *parentMatch7 = match;
                                    }
                                    *parentMatch6 = match;
                                }
                                if (match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch11 = &match;
                                    {
                                        Match match(true);
                                        Match* parentMatch12 = &match;
                                        {
                                            System.Lex.Span span = lexer.GetSpan();
                                            Match match = ParTypeExprParser.TypeExpr(lexer, ctx);
                                            typeExpr.Reset(cast<Node*>(match.value));
                                            if (match.hit)
                                            {
                                                *parentMatch12 = match;
                                            }
                                            else
                                            {
                                                lexer.ThrowExpectationFailure(span, u"type expression");
                                            }
                                        }
                                        *parentMatch11 = match;
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch13 = &match;
                                {
                                    Match match(true);
                                    Match* parentMatch14 = &match;
                                    {
                                        System.Lex.Span span = lexer.GetSpan();
                                        Match match(false);
                                        if (*lexer == RANGLE)
                                        {
                                            ++lexer;
                                            match.hit = true;
                                        }
                                        if (match.hit)
                                        {
                                            *parentMatch14 = match;
                                        }
                                        else
                                        {
                                            lexer.ThrowExpectationFailure(span, GetTokenName(RANGLE));
                                        }
                                    }
                                    *parentMatch13 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            expr.Reset(new ConstructNode(s, typeExpr.Release()));
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch15 = &match;
                    {
                        Match match(true);
                        Match* parentMatch16 = &match;
                        {
                            System.Lex.Span span = lexer.GetSpan();
                            Match match(false);
                            if (*lexer == LPAREN)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                *parentMatch16 = match;
                            }
                            else
                            {
                                lexer.ThrowExpectationFailure(span, GetTokenName(LPAREN));
                            }
                        }
                        *parentMatch15 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                Match match(false);
                Match* parentMatch17 = &match;
                {
                    Match match(true);
                    Match* parentMatch18 = &match;
                    {
                        System.Lex.Span span = lexer.GetSpan();
                        Match match = ParExpressionParser.ExpressionList(lexer, ctx, expr.Get());
                        if (match.hit)
                        {
                            *parentMatch18 = match;
                        }
                        else
                        {
                            lexer.ThrowExpectationFailure(span, u"expression list");
                        }
                    }
                    *parentMatch17 = match;
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch19 = &match;
            {
                Match match(false);
                Match* parentMatch20 = &match;
                {
                    long pos = lexer.GetPos();
                    Span span = lexer.GetSpan();
                    Match match(true);
                    Match* parentMatch21 = &match;
                    {
                        System.Lex.Span span = lexer.GetSpan();
                        Match match(false);
                        if (*lexer == RPAREN)
                        {
                            ++lexer;
                            match.hit = true;
                        }
                        if (match.hit)
                        {
                            *parentMatch21 = match;
                        }
                        else
                        {
                            lexer.ThrowExpectationFailure(span, GetTokenName(RPAREN));
                        }
                    }
                    if (match.hit)
                    {
                        expr->SetSpanEnd(span.end);
                        {
                            #if (DEBUG)
                                if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"ConstructExpr");
                            #endif
                            return Match(true, expr.Release());
                        }
                    }
                    *parentMatch20 = match;
                }
                *parentMatch19 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"ConstructExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"ConstructExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match NewExpr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"NewExpr");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> typeExpr;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            long pos = lexer.GetPos();
                            Span span = lexer.GetSpan();
                            Match match(false);
                            if (*lexer == NEW)
                            {
                                ++lexer;
                                match.hit = true;
                            }
                            if (match.hit)
                            {
                                s = span;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch5 = &match;
                        {
                            Match match(false);
                            Match* parentMatch6 = &match;
                            {
                                long pos = lexer.GetPos();
                                Span span = lexer.GetSpan();
                                Match match(true);
                                Match* parentMatch7 = &match;
                                {
                                    System.Lex.Span span = lexer.GetSpan();
                                    Match match = ParTypeExprParser.TypeExpr(lexer, ctx);
                                    typeExpr.Reset(cast<Node*>(match.value));
                                    if (match.hit)
                                    {
                                        *parentMatch7 = match;
                                    }
                                    else
                                    {
                                        lexer.ThrowExpectationFailure(span, u"type expression");
                                    }
                                }
                                if (match.hit)
                                {
                                    s.end = span.end;
                                    expr.Reset(new NewNode(s, typeExpr.Release()));
                                }
                                *parentMatch6 = match;
                            }
                            *parentMatch5 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch8 = &match;
                    {
                        Match match(true);
                        long save = lexer.GetPos();
                        Match* parentMatch9 = &match;
                        {
                            Match match(false);
                            Match* parentMatch10 = &match;
                            {
                                Match match(false);
                                Match* parentMatch11 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch12 = &match;
                                    {
                                        Match match(false);
                                        if (*lexer == LPAREN)
                                        {
                                            ++lexer;
                                            match.hit = true;
                                        }
                                        *parentMatch12 = match;
                                    }
                                    if (match.hit)
                                    {
                                        Match match(false);
                                        Match* parentMatch13 = &match;
                                        {
                                            Match match = ParExpressionParser.ArgumentList(lexer, ctx, expr.Get());
                                            *parentMatch13 = match;
                                        }
                                        *parentMatch12 = match;
                                    }
                                    *parentMatch11 = match;
                                }
                                if (match.hit)
                                {
                                    Match match(false);
                                    Match* parentMatch14 = &match;
                                    {
                                        Match match(false);
                                        Match* parentMatch15 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Span span = lexer.GetSpan();
                                            Match match(false);
                                            if (*lexer == RPAREN)
                                            {
                                                ++lexer;
                                                match.hit = true;
                                            }
                                            if (match.hit)
                                            {
                                                expr->SetSpanEnd(span.end);
                                            }
                                            *parentMatch15 = match;
                                        }
                                        *parentMatch14 = match;
                                    }
                                    *parentMatch11 = match;
                                }
                                *parentMatch10 = match;
                            }
                            if (match.hit)
                            {
                                *parentMatch9 = match;
                            }
                            else
                            {
                                lexer.SetPos(save);
                            }
                        }
                        *parentMatch8 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NewExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"NewExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"NewExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match ArgumentList(ParserFileLexer& lexer, ParsingContext* ctx, Node* node)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"ArgumentList");
            }
        #endif
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(true);
            long save = lexer.GetPos();
            Match* parentMatch1 = &match;
            {
                Match match = ParExpressionParser.ExpressionList(lexer, ctx, node);
                if (match.hit)
                {
                    *parentMatch1 = match;
                }
                else
                {
                    lexer.SetPos(save);
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"ArgumentList");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"ArgumentList");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match ExpressionList(ParserFileLexer& lexer, ParsingContext* ctx, Node* node)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"ExpressionList");
            }
        #endif
        UniquePtr<Node> arg;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            Match match(false);
            Match* parentMatch1 = &match;
            {
                long pos = lexer.GetPos();
                Match match(true);
                if (match.hit)
                {
                    ctx->BeginParsingArguments();
                }
                *parentMatch1 = match;
            }
            *parentMatch0 = match;
        }
        if (match.hit)
        {
            Match match(false);
            Match* parentMatch2 = &match;
            {
                Match match(false);
                Match* parentMatch3 = &match;
                {
                    long pos = lexer.GetPos();
                    Match match(false);
                    Match* parentMatch4 = &match;
                    {
                        Match match(false);
                        Match* parentMatch5 = &match;
                        {
                            Match match(false);
                            Match* parentMatch6 = &match;
                            {
                                Match match(false);
                                Match* parentMatch7 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match = ParExpressionParser.Expression(lexer, ctx);
                                    arg.Reset(cast<Node*>(match.value));
                                    if (match.hit)
                                    {
                                        node->AddArgument(arg.Release());
                                    }
                                    *parentMatch7 = match;
                                }
                                *parentMatch6 = match;
                            }
                            *parentMatch5 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch8 = &match;
                            {
                                Match match(true);
                                Match* parentMatch9 = &match;
                                {
                                    while (true)
                                    {
                                        long save = lexer.GetPos();
                                        {
                                            Match match(false);
                                            Match* parentMatch10 = &match;
                                            {
                                                Match match(false);
                                                if (*lexer == COMMA)
                                                {
                                                    ++lexer;
                                                    match.hit = true;
                                                }
                                                *parentMatch10 = match;
                                            }
                                            if (match.hit)
                                            {
                                                Match match(false);
                                                Match* parentMatch11 = &match;
                                                {
                                                    Match match(false);
                                                    Match* parentMatch12 = &match;
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch13 = &match;
                                                        {
                                                            long pos = lexer.GetPos();
                                                            Match match = ParExpressionParser.Expression(lexer, ctx);
                                                            arg.Reset(cast<Node*>(match.value));
                                                            if (match.hit)
                                                            {
                                                                node->AddArgument(arg.Release());
                                                            }
                                                            *parentMatch13 = match;
                                                        }
                                                        *parentMatch12 = match;
                                                    }
                                                    *parentMatch11 = match;
                                                }
                                                *parentMatch10 = match;
                                            }
                                            if (match.hit)
                                            {
                                                *parentMatch9 = match;
                                            }
                                            else
                                            {
                                                lexer.SetPos(save);
                                                break;
                                            }
                                        }
                                    }
                                }
                                *parentMatch8 = match;
                            }
                            *parentMatch5 = match;
                        }
                        *parentMatch4 = match;
                    }
                    if (match.hit)
                    {
                        ctx->EndParsingArguments();
                    }
                    else
                    {
                        ctx->EndParsingArguments();
                    }
                    *parentMatch3 = match;
                }
                *parentMatch2 = match;
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"ExpressionList");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"ExpressionList");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
    public static Match InvokeExpr(ParserFileLexer& lexer, ParsingContext* ctx)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"InvokeExpr");
            }
        #endif
        UniquePtr<Node> expr;
        Span s;
        UniquePtr<Node> templateId;
        UniquePtr<IdentifierNode> id;
        UniquePtr<IdentifierNode> dotMemberId;
        Match match(false);
        Match* parentMatch0 = &match;
        {
            long pos = lexer.GetPos();
            Match match(false);
            Match* parentMatch1 = &match;
            {
                Match match(false);
                Match* parentMatch2 = &match;
                {
                    Match match(false);
                    Match* parentMatch3 = &match;
                    {
                        Match match(false);
                        Match* parentMatch4 = &match;
                        {
                            Match match(false);
                            Match* parentMatch5 = &match;
                            {
                                Match match(false);
                                Match* parentMatch6 = &match;
                                {
                                    Match match(false);
                                    Match* parentMatch7 = &match;
                                    {
                                        long save = lexer.GetPos();
                                        Match match(false);
                                        Match* parentMatch8 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Span span = lexer.GetSpan();
                                            Match match = ParTemplateParser.TemplateId(lexer, ctx);
                                            templateId.Reset(cast<Node*>(match.value));
                                            if (match.hit)
                                            {
                                                s = span;
                                                expr.Reset(templateId.Release());
                                            }
                                            *parentMatch8 = match;
                                        }
                                        *parentMatch7 = match;
                                        if (!match.hit)
                                        {
                                            Match match(false);
                                            Match* parentMatch9 = &match;
                                            lexer.SetPos(save);
                                            {
                                                Match match(false);
                                                Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Span span = lexer.GetSpan();
                                                    Match match = ParIdentifierParser.Identifier(lexer);
                                                    id.Reset(cast<IdentifierNode*>(match.value));
                                                    if (match.hit)
                                                    {
                                                        s = span;
                                                        expr.Reset(id.Release());
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                    }
                                    *parentMatch6 = match;
                                }
                                *parentMatch5 = match;
                            }
                            if (match.hit)
                            {
                                Match match(false);
                                Match* parentMatch11 = &match;
                                {
                                    Match match(true);
                                    Match* parentMatch12 = &match;
                                    {
                                        while (true)
                                        {
                                            long save = lexer.GetPos();
                                            {
                                                Match match(false);
                                                Match* parentMatch13 = &match;
                                                {
                                                    Match match(false);
                                                    Match* parentMatch14 = &match;
                                                    {
                                                        Match match(false);
                                                        if (*lexer == DOT)
                                                        {
                                                            ++lexer;
                                                            match.hit = true;
                                                        }
                                                        *parentMatch14 = match;
                                                    }
                                                    if (match.hit)
                                                    {
                                                        Match match(false);
                                                        Match* parentMatch15 = &match;
                                                        {
                                                            Match match(false);
                                                            Match* parentMatch16 = &match;
                                                            {
                                                                long pos = lexer.GetPos();
                                                                Span span = lexer.GetSpan();
                                                                Match match(true);
                                                                Match* parentMatch17 = &match;
                                                                {
                                                                    System.Lex.Span span = lexer.GetSpan();
                                                                    Match match = ParIdentifierParser.Identifier(lexer);
                                                                    dotMemberId.Reset(cast<IdentifierNode*>(match.value));
                                                                    if (match.hit)
                                                                    {
                                                                        *parentMatch17 = match;
                                                                    }
                                                                    else
                                                                    {
                                                                        lexer.ThrowExpectationFailure(span, u"identifier");
                                                                    }
                                                                }
                                                                if (match.hit)
                                                                {
                                                                    s.end = span.end;
                                                                    expr.Reset(new DotNode(s, expr.Release(), dotMemberId.Release()));
                                                                }
                                                                *parentMatch16 = match;
                                                            }
                                                            *parentMatch15 = match;
                                                        }
                                                        *parentMatch14 = match;
                                                    }
                                                    *parentMatch13 = match;
                                                }
                                                if (match.hit)
                                                {
                                                    *parentMatch12 = match;
                                                }
                                                else
                                                {
                                                    lexer.SetPos(save);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    *parentMatch11 = match;
                                }
                                *parentMatch5 = match;
                            }
                            *parentMatch4 = match;
                        }
                        if (match.hit)
                        {
                            Match match(false);
                            Match* parentMatch18 = &match;
                            {
                                Match match(false);
                                Match* parentMatch19 = &match;
                                {
                                    long pos = lexer.GetPos();
                                    Match match(false);
                                    if (*lexer == LPAREN)
                                    {
                                        ++lexer;
                                        match.hit = true;
                                    }
                                    if (match.hit)
                                    {
                                        expr.Reset(new InvokeNode(s, expr.Release()));
                                    }
                                    *parentMatch19 = match;
                                }
                                *parentMatch18 = match;
                            }
                            *parentMatch4 = match;
                        }
                        *parentMatch3 = match;
                    }
                    if (match.hit)
                    {
                        Match match(false);
                        Match* parentMatch20 = &match;
                        {
                            Match match = ParExpressionParser.ArgumentList(lexer, ctx, expr.Get());
                            *parentMatch20 = match;
                        }
                        *parentMatch3 = match;
                    }
                    *parentMatch2 = match;
                }
                if (match.hit)
                {
                    Match match(false);
                    Match* parentMatch21 = &match;
                    {
                        Match match(false);
                        Match* parentMatch22 = &match;
                        {
                            long pos = lexer.GetPos();
                            Span span = lexer.GetSpan();
                            Match match(true);
                            Match* parentMatch23 = &match;
                            {
                                System.Lex.Span span = lexer.GetSpan();
                                Match match(false);
                                if (*lexer == RPAREN)
                                {
                                    ++lexer;
                                    match.hit = true;
                                }
                                if (match.hit)
                                {
                                    *parentMatch23 = match;
                                }
                                else
                                {
                                    lexer.ThrowExpectationFailure(span, GetTokenName(RPAREN));
                                }
                            }
                            if (match.hit)
                            {
                                expr->SetSpanEnd(span.end);
                            }
                            *parentMatch22 = match;
                        }
                        *parentMatch21 = match;
                    }
                    *parentMatch2 = match;
                }
                *parentMatch1 = match;
            }
            if (match.hit)
            {
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"InvokeExpr");
                    #endif
                    return Match(true, expr.Release());
                }
            }
            *parentMatch0 = match;
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"InvokeExpr");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"InvokeExpr");
                }
            }
        #endif
        if (!match.hit)
        {
            match.value = null;
        }
        return match;
    }
}
