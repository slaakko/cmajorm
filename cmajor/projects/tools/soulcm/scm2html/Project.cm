using System;
using System.Collections;
using System.IO;
using System.Dom;
using System.XPath;

namespace soulcm.scm2html
{
    public class Project
    {
        public Project(Scm2htmlXml* xml_, Element* element_) :
            xml(xml_), element(element_), lexerContext(IdentifierClassKind.unicode)
        {
        }
        public void Process(bool verbose)
        {
            this->verbose = verbose;
            ReadLexerFiles();
            ParseLexerFiles();
            ReadParserFiles();
            Link();
            ReadOutDir();
            ReadStyleFilePath();
            ReadGrammarFiles();
            GenerateHtml();
        }
        private void ReadLexerFiles()
        {
            UniquePtr<XPathObject> result = Evaluate(u"lexer", element);
            if (!result.IsNull())
            {
                if (result.Get() is XPathNodeSet*)
                {
                    XPathNodeSet* nodeSet = cast<XPathNodeSet*>(result.Get());
                    int n = nodeSet->Length();
                    for (int i = 0; i < n; ++i)
                    {
                        Node* node = (*nodeSet)[i];
                        if (node is Element*)
                        {
                            Element* element = cast<Element*>(node);
                            ustring fileAttr = element->GetAttribute(u"file");
                            if (!fileAttr.IsEmpty())
                            {
                                string lexerFilePath = GetFullPath(Path.Combine(xml->RootDir(), Path.MakeCanonical(ToUtf8(fileAttr))));
                                if (verbose)
                                {
                                    Console.Out() << "> " << lexerFilePath << endl();
                                }
                                LexerFileLexer lexer(ToUtf32(File.ReadAllText(lexerFilePath)), lexerFilePath, index++);
                                ParsingContext parsingContext;
                                UniquePtr<LexerFile> lexerFile = LexLexerFileParser.Parse(lexer, &parsingContext);
                                lexerMap[lexerFile->GetLexer()->Name()] = lexerFile.Get();
                                lexerFiles.Add(Rvalue(lexerFile));
                            }
                        }
                    }
                }
            }
        }
        private void ParseLexerFiles()
        {
            for (const UniquePtr<LexerFile>& lexerFile : lexerFiles)
            {
                lexerFile->Parse(lexerContext);
            }
        }
        private void ReadParserFiles()
        {
            UniquePtr<XPathObject> result = Evaluate(u"parser", element);
            if (!result.IsNull())
            {
                if (result.Get() is XPathNodeSet*)
                {
                    XPathNodeSet* nodeSet = cast<XPathNodeSet*>(result.Get());
                    int n = nodeSet->Length();
                    for (int i = 0; i < n; ++i)
                    {
                        Node* node = (*nodeSet)[i];
                        if (node is Element*)
                        {
                            Element* element = cast<Element*>(node);
                            ustring fileAttr = element->GetAttribute(u"file");
                            if (!fileAttr.IsEmpty())
                            {
                                string parserFilePath = GetFullPath(Path.Combine(xml->RootDir(), Path.MakeCanonical(ToUtf8(fileAttr))));
                                if (verbose)
                                {
                                    Console.Out() << "> " << parserFilePath << endl();
                                }
                                ParserFileLexer lexer(ToUtf32(File.ReadAllText(parserFilePath)), parserFilePath, index++);
                                ParsingContext parsingContext;
                                UniquePtr<ParserFile> parserFile = ParserFileParser.Parse(lexer, &parsingContext);
                                domain.AddParserFile(parserFile.Get());
                                parserFiles.Add(Rvalue(parserFile));
                            }
                        }
                    }
                }
            }
        }
        private void ReadOutDir()
        {
            UniquePtr<XPathObject> result = Evaluate(u"out", element);
            if (!result.IsNull())
            {
                if (result.Get() is XPathNodeSet*)
                {
                    XPathNodeSet* nodeSet = cast<XPathNodeSet*>(result.Get());
                    int n = nodeSet->Length();
                    for (int i = 0; i < n; ++i)
                    {
                        Node* node = (*nodeSet)[i];
                        if (node is Element*)
                        {
                            Element* element = cast<Element*>(node);
                            ustring dirAttribute = element->GetAttribute(u"dir");
                            if (!dirAttribute.IsEmpty())
                            {
                                if (outDir.IsEmpty())
                                {
                                    outDir = GetFullPath(Path.Combine(xml->RootDir(), Path.MakeCanonical(ToUtf8(dirAttribute))));
                                }
                                else
                                {
                                    throw Exception("output directory already specified");
                                }
                            }
                        }
                    }
                }
            }
            if (outDir.IsEmpty())
            {
                throw Exception("output directory not specified");
            }
        }
        private void ReadStyleFilePath()
        {
            UniquePtr<XPathObject> result = Evaluate(u"style", element);
            if (!result.IsNull())
            {
                if (result.Get() is XPathNodeSet*)
                {
                    XPathNodeSet* nodeSet = cast<XPathNodeSet*>(result.Get());
                    int n = nodeSet->Length();
                    for (int i = 0; i < n; ++i)
                    {
                        Node* node = (*nodeSet)[i];
                        Element* element = cast<Element*>(node);
                        ustring fileAttribute = element->GetAttribute(u"file");
                        if (!fileAttribute.IsEmpty())
                        {
                            if (styleFilePath.IsEmpty())
                            {
                                styleFilePath = fileAttribute;
                            }
                            else
                            {
                                throw Exception("style file path already specified");
                            }
                        }
                    }
                }
            }
            if (styleFilePath.IsEmpty())
            {
                throw Exception("style file path not specified");
            }
        }
        private void ReadGrammarFiles()
        {
            UniquePtr<XPathObject> result = Evaluate(u"grammar", element);
            if (!result.IsNull())
            {
                if (result.Get() is XPathNodeSet*)
                {
                    XPathNodeSet* nodeSet = cast<XPathNodeSet*>(result.Get());
                    int n = nodeSet->Length();
                    for (int i = 0; i < n; ++i)
                    {
                        Node* node = (*nodeSet)[i];
                        if (node is Element*)
                        {
                            Element* element = cast<Element*>(node);
                            ustring fileAttr = element->GetAttribute(u"file");
                            if (!fileAttr.IsEmpty())
                            {
                                ustring grammarName = ToUtf32(Path.GetFileNameWithoutExtension(ToUtf8(fileAttr)));
                                string grammarFilePath = GetFullPath(Path.Combine(xml->RootDir(), Path.MakeCanonical(ToUtf8(fileAttr))));
                                if (verbose)
                                {
                                    Console.Out() << "> " << grammarFilePath << endl();
                                }
                                UniquePtr<Document> grammarDoc = ReadDocument(grammarFilePath);
                                ustring kindAttribute = grammarDoc->DocumentElement()->GetAttribute(u"kind");
                                ustring sourceAttribute = grammarDoc->DocumentElement()->GetAttribute(u"source");
                                ustring titleAttribute = grammarDoc->DocumentElement()->GetAttribute(u"title");
                                if (sourceAttribute.IsEmpty())
                                {
                                    throw Exception("grammar source not specified");
                                }
                                if (titleAttribute.IsEmpty())
                                {
                                    throw Exception("grammar title not specified");
                                }
                                UniquePtr<Grammar> grammar;
                                GrammarParser* grammarParser = null;
                                LexerFile* lexerFile = null;
                                if (kindAttribute == u"lexical")
                                {
                                    HashMap<ustring, LexerFile*>.ConstIterator it = lexerMap.CFind(sourceAttribute);
                                    if (it != lexerMap.CEnd())
                                    {
                                        lexerFile = it->second;
                                        grammar.Reset(new Grammar(grammarName, titleAttribute, GetFullPath(Path.Combine(outDir, ToUtf8(grammarName) + ".html")), lexerFile));
                                        lexerGrammarMap[lexerFile] = grammar.Get();
                                    }
                                }
                                else
                                {
                                    grammarParser = domain.GetParser(sourceAttribute);
                                    grammar.Reset(new Grammar(grammarName, titleAttribute, GetFullPath(Path.Combine(outDir, ToUtf8(grammarName) + ".html")), grammarParser));
                                    parserGrammarMap[grammarParser] = grammar.Get();
                                }
                                UniquePtr<XPathObject> ruleResult = Evaluate(u"/grammar/rule", grammarDoc.Get());
                                if (!ruleResult.IsNull())
                                {
                                    if (ruleResult.Get() is XPathNodeSet*)
                                    {
                                        XPathNodeSet* nodeSet = cast<XPathNodeSet*>(ruleResult.Get());
                                        int n = nodeSet->Length();
                                        for (int i = 0; i < n; ++i)
                                        {
                                            Node* node = (*nodeSet)[i];
                                            Element* element = cast<Element*>(node);
                                            ustring sourceAttribute = element->GetAttribute(u"source");
                                            ustring nameAttribute = element->GetAttribute(u"name");
                                            if (sourceAttribute.IsEmpty())
                                            {
                                                throw Exception("rule source not specified");
                                            }
                                            if (nameAttribute.IsEmpty())
                                            {
                                                throw Exception("rule name not specified");
                                            }
                                            UniquePtr<Rule> rule;
                                            if (kindAttribute == u"lexical")
                                            {
                                                Expression* expression = lexerFile->GetExpressions()->Get(sourceAttribute);
                                                rule.Reset(new Rule(nameAttribute, expression));
                                                lexerRuleMap[expression] = rule.Get();
                                            }
                                            else
                                            {
                                                RuleParser* ruleParser = grammarParser->GetRule(sourceAttribute);
                                                rule.Reset(new Rule(nameAttribute, ruleParser));
                                                parserRuleMap[ruleParser] = rule.Get();
                                            }
                                            grammar->AddRule(rule.Release());
                                        }
                                    }
                                }
                                grammars.Add(Rvalue(grammar));
                            }
                        }
                    }
                }
            }
        }
        private void GenerateHtml()
        {
            GrammarHtmlGeneratorVisitor domainVisitor(verbose, parserGrammarMap, parserRuleMap, lexerGrammarMap, lexerRuleMap, lexerMap, styleFilePath);
            domain.Accept(domainVisitor);
            for (const UniquePtr<LexerFile>& lexerFile : lexerFiles)
            {
                HashMap<LexerFile*, Grammar*>.ConstIterator it = lexerGrammarMap.CFind(lexerFile.Get());
                if (it != lexerGrammarMap.CEnd())
                {
                    Grammar* grammar = it->second;
                    Expression* idStartExpression = lexerFile->GetExpressions()->Get(u"idstart");
                    Rule* idStartRule = new Rule(u"idstart", idStartExpression);
                    grammar->AddRule(idStartRule);
                    lexerRuleMap[idStartExpression] = idStartRule;
                    Expression* idContExpression = lexerFile->GetExpressions()->Get(u"idcont");
                    Rule* idContRule = new Rule(u"idcont", idContExpression);
                    grammar->AddRule(idContRule);
                    lexerRuleMap[idContExpression] = idContRule;
                }
                GrammarHtmlGeneratorVisitor lexerFileVisitor(verbose, parserGrammarMap, parserRuleMap, lexerGrammarMap, lexerRuleMap, lexerMap, styleFilePath);
                lexerFile->Accept(lexerFileVisitor);
            }
        }
        private void Link()
        {
            LinkerVisitor visitor;
            domain.Accept(visitor);
        }
        private Scm2htmlXml* xml;
        private Element* element;
        private List<UniquePtr<LexerFile>> lexerFiles;
        private bool verbose;
        private int index;
        private LexerContext lexerContext;
        private HashMap<ustring, LexerFile*> lexerMap;
        private HashMap<LexerFile*, Grammar*> lexerGrammarMap;
        private HashMap<Expression*, Rule*> lexerRuleMap;
        private HashMap<GrammarParser*, Grammar*> parserGrammarMap;
        private HashMap<RuleParser*, Rule*> parserRuleMap;
        private string outDir;
        private ustring styleFilePath;
        private List<UniquePtr<Grammar>> grammars;
        private Domain domain;
        private List<UniquePtr<ParserFile>> parserFiles;
    }
} // namespace soulcm.scm2html
