using System;
using System.Lex;
using LexerFileTokens;

public class LexerFileLexer : System.Lex.Lexer
{
    public LexerFileLexer(const ustring& content_, const string& fileName_, int fileIndex_) :
        base(content_, fileName_, fileIndex_), floatingLit(), floatingLitFloat(), intLit(), intLitUnsigned(), chrLit(), chrLitPrefix(), strLit(), strLitPrefix(), leftAngleCount(), parsingOperatorFunctionGroupId()
    {
        SetKeywordMap(LexerFileKeywords.GetKeywordMap());
        LexerFileClassMap.Init();
    }
    public LexerFileLexer(const uchar* start_, const uchar* end_, const string& fileName_, int fileIndex_) :
        base(start_, end_, fileName_, fileIndex_), floatingLit(), floatingLitFloat(), intLit(), intLitUnsigned(), chrLit(), chrLitPrefix(), strLit(), strLitPrefix(), leftAngleCount(), parsingOperatorFunctionGroupId()
    {
        SetKeywordMap(LexerFileKeywords.GetKeywordMap());
        LexerFileClassMap.Init();
    }
    public override int NextState(int state, uchar c)
    {
        int i = LexerFileClassMap.GetClass(c);
        switch (state)
        {
            case 0: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 1;
                    }
                    case 1: case 2: case 9: case 10: 
                    {
                        return 2;
                    }
                    case 4: 
                    {
                        return 3;
                    }
                    case 5: 
                    {
                        return 4;
                    }
                    case 6: 
                    {
                        return 5;
                    }
                    case 7: case 12: case 13: case 15: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: 
                    {
                        return 6;
                    }
                    case 14: 
                    {
                        return 7;
                    }
                    case 16: 
                    {
                        return 8;
                    }
                    case 17: 
                    {
                        return 9;
                    }
                    case 18: 
                    {
                        return 10;
                    }
                    case 19: 
                    {
                        return 11;
                    }
                    case 24: 
                    {
                        return 12;
                    }
                    case 34: case 36: 
                    {
                        return 13;
                    }
                    case 35: 
                    {
                        return 14;
                    }
                    case 37: 
                    {
                        return 15;
                    }
                    case 38: 
                    {
                        return 16;
                    }
                    case 39: 
                    {
                        return 17;
                    }
                    case 40: 
                    {
                        return 18;
                    }
                    case 41: 
                    {
                        return 19;
                    }
                    case 42: 
                    {
                        return 20;
                    }
                    case 43: 
                    {
                        return 21;
                    }
                    case 44: 
                    {
                        return 22;
                    }
                    case 45: 
                    {
                        return 23;
                    }
                    case 46: 
                    {
                        return 24;
                    }
                    case 47: 
                    {
                        return 25;
                    }
                    case 48: 
                    {
                        return 26;
                    }
                    case 49: 
                    {
                        return 27;
                    }
                    case 50: 
                    {
                        return 28;
                    }
                    case 51: 
                    {
                        return 29;
                    }
                    case 52: 
                    {
                        return 30;
                    }
                    case 53: 
                    {
                        return 31;
                    }
                    case 54: 
                    {
                        return 32;
                    }
                    case 55: 
                    {
                        return 33;
                    }
                    case 56: 
                    {
                        return 34;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 34: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(43);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 33: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(42);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 32: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(41);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 31: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(39);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 30: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(38);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 29: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(37);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 28: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(36);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 27: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(35);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 26: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(34);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 25: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(33);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 24: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(30);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 23: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(26);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 22: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(29);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 39: 
                    {
                        return 35;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 35: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(15);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 21: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(12);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 20: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(13);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 42: 
                    {
                        return 36;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 36: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(10);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 19: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(11);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 41: 
                    {
                        return 37;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 37: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(9);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 18: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(19);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 39: 
                    {
                        return 38;
                    }
                    case 40: 
                    {
                        return 39;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 39: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(21);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 38: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(17);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 17: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(40);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 39: 
                    {
                        return 40;
                    }
                    case 40: 
                    {
                        return 41;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 41: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(8);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 40: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(14);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 16: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(18);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 38: 
                    {
                        return 42;
                    }
                    case 39: 
                    {
                        return 43;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 43: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(16);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 40: 
                    {
                        return 44;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 44: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(7);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 42: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(20);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 15: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(6);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 14: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(2);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 12: 
                    {
                        return 45;
                    }
                    case 13: 
                    {
                        return 46;
                    }
                    case 14: 
                    {
                        return 47;
                    }
                    case 15: 
                    {
                        return 48;
                    }
                    case 16: 
                    {
                        return 49;
                    }
                    case 26: 
                    {
                        return 50;
                    }
                    case 27: 
                    {
                        return 51;
                    }
                    case 34: 
                    {
                        return 52;
                    }
                    case 35: case 36: 
                    {
                        return 53;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 53: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(2);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 14: 
                    {
                        return 47;
                    }
                    case 15: 
                    {
                        return 48;
                    }
                    case 16: 
                    {
                        return 49;
                    }
                    case 26: 
                    {
                        return 50;
                    }
                    case 27: 
                    {
                        return 51;
                    }
                    case 34: 
                    {
                        return 52;
                    }
                    case 35: case 36: 
                    {
                        return 53;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 52: 
            {
                switch (i)
                {
                    case 16: 
                    {
                        return 49;
                    }
                    case 26: 
                    {
                        return 50;
                    }
                    case 27: 
                    {
                        return 51;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 52;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 51: 
            {
                switch (i)
                {
                    case 17: 
                    {
                        return 54;
                    }
                    case 18: 
                    {
                        return 55;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 56;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 56: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(3);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 34: case 35: case 36: 
                    {
                        return 56;
                    }
                    case 28: 
                    {
                        return 57;
                    }
                    case 29: 
                    {
                        return 58;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 58: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(3);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 57: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(3);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 55: 
            {
                switch (i)
                {
                    case 34: case 35: case 36: 
                    {
                        return 56;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 54: 
            {
                switch (i)
                {
                    case 34: case 35: case 36: 
                    {
                        return 56;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 50: 
            {
                switch (i)
                {
                    case 17: 
                    {
                        return 54;
                    }
                    case 18: 
                    {
                        return 55;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 56;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 49: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(3);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 28: 
                    {
                        return 57;
                    }
                    case 29: 
                    {
                        return 58;
                    }
                    case 26: 
                    {
                        return 59;
                    }
                    case 27: 
                    {
                        return 60;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 61;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 61: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(3);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 28: 
                    {
                        return 57;
                    }
                    case 29: 
                    {
                        return 58;
                    }
                    case 26: 
                    {
                        return 59;
                    }
                    case 27: 
                    {
                        return 60;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 61;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 60: 
            {
                switch (i)
                {
                    case 17: 
                    {
                        return 62;
                    }
                    case 18: 
                    {
                        return 63;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 64;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 64: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(3);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 28: 
                    {
                        return 57;
                    }
                    case 29: 
                    {
                        return 58;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 64;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 63: 
            {
                switch (i)
                {
                    case 34: case 35: case 36: 
                    {
                        return 64;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 62: 
            {
                switch (i)
                {
                    case 34: case 35: case 36: 
                    {
                        return 64;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 59: 
            {
                switch (i)
                {
                    case 17: 
                    {
                        return 62;
                    }
                    case 18: 
                    {
                        return 63;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 64;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 48: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(2);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 47: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(2);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 46: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 65;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 65: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(2);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 14: 
                    {
                        return 47;
                    }
                    case 15: 
                    {
                        return 48;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 65;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 45: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 65;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 13: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(2);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 14: 
                    {
                        return 47;
                    }
                    case 15: 
                    {
                        return 48;
                    }
                    case 16: 
                    {
                        return 49;
                    }
                    case 26: 
                    {
                        return 50;
                    }
                    case 27: 
                    {
                        return 51;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 66;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 66: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(2);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 14: 
                    {
                        return 47;
                    }
                    case 15: 
                    {
                        return 48;
                    }
                    case 16: 
                    {
                        return 49;
                    }
                    case 26: 
                    {
                        return 50;
                    }
                    case 27: 
                    {
                        return 51;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 66;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 12: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 67;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 67: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 68;
                    }
                    case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 69;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 69: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 68;
                    }
                    case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 69;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 68: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(5);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 11: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(1);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: 
                    {
                        return 1;
                    }
                    case 4: 
                    {
                        return 3;
                    }
                    case 24: 
                    {
                        return 12;
                    }
                    case 7: case 8: case 12: case 13: case 14: case 15: case 19: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 70;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 70: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(1);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 7: case 8: case 12: case 13: case 14: case 15: case 19: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 70;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 10: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(23);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 18: 
                    {
                        return 71;
                    }
                    case 40: 
                    {
                        return 72;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 72: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(32);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 71: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(28);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 9: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(22);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 17: 
                    {
                        return 73;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 73: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(27);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 8: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(31);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 34: case 35: case 36: 
                    {
                        return 61;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 7: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(1);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: 
                    {
                        return 1;
                    }
                    case 4: 
                    {
                        return 3;
                    }
                    case 24: 
                    {
                        return 12;
                    }
                    case 7: case 8: case 12: case 13: case 14: case 15: case 19: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 70;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 6: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(1);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 7: case 8: case 12: case 13: case 14: case 15: case 19: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 70;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 5: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(24);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 4: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(25);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 5: 
                    {
                        return 74;
                    }
                    case 6: 
                    {
                        return 75;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 75: 
            {
                switch (i)
                {
                    case 0: case 1: case 2: case 3: case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 77: 
            {
                switch (i)
                {
                    case 6: 
                    {
                        return 77;
                    }
                    case 0: case 1: case 2: case 3: case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 78;
                    }
                    case 5: 
                    {
                        return 79;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 79: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 1: case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 81: 
            {
                switch (i)
                {
                    case 0: case 1: case 2: case 3: case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 5: 
                    {
                        return 82;
                    }
                    case 6: 
                    {
                        return 83;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 83: 
            {
                switch (i)
                {
                    case 6: 
                    {
                        return 77;
                    }
                    case 0: case 1: case 2: case 3: case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 78;
                    }
                    case 5: 
                    {
                        return 79;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 82: 
            {
                switch (i)
                {
                    case 0: case 3: case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 84;
                    }
                    case 1: 
                    {
                        return 85;
                    }
                    case 2: 
                    {
                        return 86;
                    }
                    case 6: 
                    {
                        return 87;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 87: 
            {
                switch (i)
                {
                    case 6: 
                    {
                        return 87;
                    }
                    case 0: case 3: case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 88;
                    }
                    case 1: 
                    {
                        return 89;
                    }
                    case 2: 
                    {
                        return 90;
                    }
                    case 5: 
                    {
                        return 91;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 91: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 84;
                    }
                    case 6: 
                    {
                        return 87;
                    }
                    case 1: 
                    {
                        return 92;
                    }
                    case 2: 
                    {
                        return 93;
                    }
                    case 5: 
                    {
                        return 94;
                    }
                    case 9: case 10: 
                    {
                        return 95;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 95: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 84;
                    }
                    case 6: 
                    {
                        return 87;
                    }
                    case 1: 
                    {
                        return 92;
                    }
                    case 2: 
                    {
                        return 93;
                    }
                    case 5: 
                    {
                        return 94;
                    }
                    case 9: case 10: 
                    {
                        return 95;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 94: 
            {
                switch (i)
                {
                    case 5: 
                    {
                        return 82;
                    }
                    case 0: case 3: case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 84;
                    }
                    case 1: 
                    {
                        return 85;
                    }
                    case 2: 
                    {
                        return 86;
                    }
                    case 6: 
                    {
                        return 96;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 96: 
            {
                switch (i)
                {
                    case 6: 
                    {
                        return 87;
                    }
                    case 0: case 3: case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 88;
                    }
                    case 1: 
                    {
                        return 89;
                    }
                    case 2: 
                    {
                        return 90;
                    }
                    case 5: 
                    {
                        return 91;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 93: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    case 1: 
                    {
                        return 97;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 97: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 1: case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 92: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 1: case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 90: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    case 1: 
                    {
                        return 97;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 89: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 1: case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 88: 
            {
                switch (i)
                {
                    case 0: case 3: case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 84;
                    }
                    case 1: 
                    {
                        return 85;
                    }
                    case 2: 
                    {
                        return 86;
                    }
                    case 6: 
                    {
                        return 87;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 86: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    case 1: 
                    {
                        return 97;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 85: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 1: case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 84: 
            {
                switch (i)
                {
                    case 0: case 3: case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 84;
                    }
                    case 1: 
                    {
                        return 85;
                    }
                    case 2: 
                    {
                        return 86;
                    }
                    case 6: 
                    {
                        return 87;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 80: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: case 3: case 4: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    case 1: case 2: case 9: case 10: 
                    {
                        return 80;
                    }
                    case 5: 
                    {
                        return 81;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 78: 
            {
                switch (i)
                {
                    case 0: case 1: case 2: case 3: case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 76: 
            {
                switch (i)
                {
                    case 0: case 1: case 2: case 3: case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 76;
                    }
                    case 6: 
                    {
                        return 77;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 74: 
            {
                switch (i)
                {
                    case 0: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 98;
                    }
                    case 1: 
                    {
                        return 99;
                    }
                    case 2: 
                    {
                        return 100;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 100: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 2: case 9: case 10: 
                    {
                        return 2;
                    }
                    case 1: 
                    {
                        return 101;
                    }
                    case 5: 
                    {
                        return 102;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 102: 
            {
                switch (i)
                {
                    case 5: 
                    {
                        return 74;
                    }
                    case 6: 
                    {
                        return 75;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 101: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 1: case 2: case 9: case 10: 
                    {
                        return 2;
                    }
                    case 5: 
                    {
                        return 102;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 99: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 1: case 2: case 9: case 10: 
                    {
                        return 2;
                    }
                    case 5: 
                    {
                        return 102;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 98: 
            {
                switch (i)
                {
                    case 0: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 98;
                    }
                    case 1: 
                    {
                        return 99;
                    }
                    case 2: 
                    {
                        return 100;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 3: 
            {
                switch (i)
                {
                    case 0: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 103;
                    }
                    case 3: 
                    {
                        return 104;
                    }
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 105: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(4);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
            case 104: 
            {
                switch (i)
                {
                    case 0: case 1: case 2: case 3: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 16: case 17: case 18: case 19: case 24: case 25: case 26: case 27: case 29: case 34: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 106;
                    }
                    case 4: 
                    {
                        return 107;
                    }
                    case 12: 
                    {
                        return 108;
                    }
                    case 13: 
                    {
                        return 109;
                    }
                    case 14: 
                    {
                        return 110;
                    }
                    case 15: 
                    {
                        return 111;
                    }
                    case 20: 
                    {
                        return 112;
                    }
                    case 21: 
                    {
                        return 113;
                    }
                    case 22: 
                    {
                        return 114;
                    }
                    case 23: 
                    {
                        return 115;
                    }
                    case 28: 
                    {
                        return 116;
                    }
                    case 30: 
                    {
                        return 117;
                    }
                    case 31: 
                    {
                        return 118;
                    }
                    case 32: 
                    {
                        return 119;
                    }
                    case 33: 
                    {
                        return 120;
                    }
                    case 35: case 36: 
                    {
                        return 121;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 121: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 35: case 36: 
                    {
                        return 122;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 122: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 35: case 36: 
                    {
                        return 122;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 120: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 119: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 118: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 123;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 123: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 123;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 117: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 123;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 116: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 115: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 114: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 113: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 112: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 111: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 124;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 124: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 125;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 125: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 126;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 126: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 127;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 127: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 128u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 128u: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 129u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 129u: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 130u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 130u: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 131u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 131u: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 110: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 132u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 132u: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 133u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 133u: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 134u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 134u: 
            {
                switch (i)
                {
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 135u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 135u: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 109: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 136u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 136u: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 136u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 108: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 136u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 107: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(4);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 106: 
            {
                switch (i)
                {
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 103: 
            {
                switch (i)
                {
                    case 0: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 103;
                    }
                    case 4: 
                    {
                        return 105;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 2: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(0);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 1: case 2: case 9: case 10: 
                    {
                        return 2;
                    }
                    case 5: 
                    {
                        return 102;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 1: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 139u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 138u: 
            {
                switch (i)
                {
                    case 3: 
                    {
                        return 138u;
                    }
                    case 0: 
                    {
                        return 140u;
                    }
                    case 1: case 2: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 16: case 17: case 18: case 19: case 24: case 25: case 26: case 27: case 29: case 34: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 141u;
                    }
                    case 12: 
                    {
                        return 142u;
                    }
                    case 13: 
                    {
                        return 143u;
                    }
                    case 14: 
                    {
                        return 144u;
                    }
                    case 15: 
                    {
                        return 145u;
                    }
                    case 20: 
                    {
                        return 146u;
                    }
                    case 21: 
                    {
                        return 147u;
                    }
                    case 22: 
                    {
                        return 148u;
                    }
                    case 23: 
                    {
                        return 149u;
                    }
                    case 28: 
                    {
                        return 150u;
                    }
                    case 30: 
                    {
                        return 151u;
                    }
                    case 31: 
                    {
                        return 152u;
                    }
                    case 32: 
                    {
                        return 153u;
                    }
                    case 33: 
                    {
                        return 154u;
                    }
                    case 35: case 36: 
                    {
                        return 155u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 155u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 35: case 36: 
                    {
                        return 156u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 156u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 35: case 36: 
                    {
                        return 156u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 154u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 153u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 152u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 157u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 157u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 157u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 151u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 34: case 35: case 36: 
                    {
                        return 157u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 150u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 149u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 148u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 147u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 146u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 145u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 158u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 158u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 159u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 159u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 160u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 160u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 161u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 161u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 162u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 162u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 163u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 163u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 164u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 164u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 165u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 165u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 144u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 166u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 166u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 167u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 167u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 168u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 168u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 169u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 169u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 143u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 170u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 170u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 170u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 142u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: 
                    {
                        return 170u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 141u: 
            {
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 140u: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(5);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                switch (i)
                {
                    case 0: 
                    {
                        return 137u;
                    }
                    case 3: 
                    {
                        return 138u;
                    }
                    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: 
                    {
                        return 139u;
                    }
                    default: 
                    {
                        return -1;
                    }
                }
                return -1;
            }
            case 137u: 
            {
                System.Lex.Lexeme prevMatch = token.match;
                token.match = lexeme;
                int tokenId = GetTokenId(5);
                if (tokenId == CONTINUE_TOKEN)
                {
                    token.id = CONTINUE_TOKEN;
                    return -1;
                }
                else
                {
                    if (tokenId != INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                }
                return -1;
            }
        }
        return -1;
    }
    private int GetTokenId(int statementIndex)
    {
        switch (statementIndex)
        {
            case 0: 
            {
                Retract();
                break;
            }
            case 1: 
            {
                Retract();
                int kw = GetKeywordToken(token.match);
                if (kw == INVALID_TOKEN) return ID;
                else return kw;
                break;
            }
            case 2: 
            {
                Retract();
                return INTLIT;
                break;
            }
            case 3: 
            {
                Retract();
                return FLOATINGLIT;
                break;
            }
            case 4: 
            {
                Retract();
                return CHARLIT;
                break;
            }
            case 5: 
            {
                Retract();
                return STRINGLIT;
                break;
            }
            case 6: 
            {
                Retract();
                return DOLLAR;
                break;
            }
            case 7: 
            {
                Retract();
                return EQUIVALENCE;
                break;
            }
            case 8: 
            {
                Retract();
                return IMPLICATION;
                break;
            }
            case 9: 
            {
                Retract();
                return DISJUNCTION;
                break;
            }
            case 10: 
            {
                Retract();
                return AMPAMP;
                break;
            }
            case 11: 
            {
                Retract();
                return BITOR;
                break;
            }
            case 12: 
            {
                Retract();
                return BITXOR;
                break;
            }
            case 13: 
            {
                Retract();
                return AMP;
                break;
            }
            case 14: 
            {
                Retract();
                return EQ;
                break;
            }
            case 15: 
            {
                Retract();
                return NEQ;
                break;
            }
            case 16: 
            {
                Retract();
                return LEQ;
                break;
            }
            case 17: 
            {
                Retract();
                return GEQ;
                break;
            }
            case 18: 
            {
                Retract();
                return LANGLE;
                break;
            }
            case 19: 
            {
                Retract();
                return RANGLE;
                break;
            }
            case 20: 
            {
                Retract();
                if (parsingOperatorFunctionGroupId) return INVALID_TOKEN;
                return SHIFTLEFT;
                break;
            }
            case 21: 
            {
                Retract();
                if (leftAngleCount > 0) return INVALID_TOKEN;
                return SHIFTRIGHT;
                break;
            }
            case 22: 
            {
                Retract();
                return PLUS;
                break;
            }
            case 23: 
            {
                Retract();
                return MINUS;
                break;
            }
            case 24: 
            {
                Retract();
                return STAR;
                break;
            }
            case 25: 
            {
                Retract();
                return DIV;
                break;
            }
            case 26: 
            {
                Retract();
                return REM;
                break;
            }
            case 27: 
            {
                Retract();
                return PLUSPLUS;
                break;
            }
            case 28: 
            {
                Retract();
                return MINUSMINUS;
                break;
            }
            case 29: 
            {
                Retract();
                return EXCLAMATION;
                break;
            }
            case 30: 
            {
                Retract();
                return CPL;
                break;
            }
            case 31: 
            {
                Retract();
                return DOT;
                break;
            }
            case 32: 
            {
                Retract();
                return ARROW;
                break;
            }
            case 33: 
            {
                Retract();
                return LBRACKET;
                break;
            }
            case 34: 
            {
                Retract();
                return RBRACKET;
                break;
            }
            case 35: 
            {
                Retract();
                return LPAREN;
                break;
            }
            case 36: 
            {
                Retract();
                return RPAREN;
                break;
            }
            case 37: 
            {
                Retract();
                return LBRACE;
                break;
            }
            case 38: 
            {
                Retract();
                return RBRACE;
                break;
            }
            case 39: 
            {
                Retract();
                return COMMA;
                break;
            }
            case 40: 
            {
                Retract();
                return ASSIGN;
                break;
            }
            case 41: 
            {
                Retract();
                return COLON;
                break;
            }
            case 42: 
            {
                Retract();
                return SEMICOLON;
                break;
            }
            case 43: 
            {
                Retract();
                return HASH;
                break;
            }
        }
        return CONTINUE_TOKEN;
    }
    public double floatingLit;
    public bool floatingLitFloat;
    public ulong intLit;
    public bool intLitUnsigned;
    public uchar chrLit;
    public int chrLitPrefix;
    public ustring strLit;
    public int strLitPrefix;
    public int leftAngleCount;
    public bool parsingOperatorFunctionGroupId;
}
