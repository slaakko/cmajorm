using System;
using System.Collections;

namespace soulcm.scm2html
{
    public abstract class Parser
    {
        public Parser(const ustring& name_) :
            name(name_), parent(null), parentIsList(false)
        {
        }
        public virtual ~Parser()
        {
        }
        public bool ParentIsList() const
        {
            return parentIsList;
        }
        public const ustring& Name() const
        {
            return name;
        }
        public Parser* Parent() const
        {
            return parent;
        }
        public void SetParent(Parser* parent_)
        {
            parent = parent_;
        }
        public void SetParentIsList()
        {
            parentIsList = true;
        }
        public abstract void Accept(Visitor& visitor);
        public virtual bool IsNonterminal() const
        {
            return false;
        }
        public virtual bool IsAction() const
        {
            return false;
        }
        public virtual bool IsTokenSwitch() const
        {
            return false;
        }
        public virtual bool IsActionToken() const
        {
            return false;
        }
        public virtual bool IsToken() const
        {
            return false;
        }
        public virtual bool IsGrammar() const
        {
            return false;
        }
        public virtual bool IsEmptyOrEmptyActionParser() const
        {
            return false;
        }
        public virtual bool IsPostfix() const
        {
            return false;
        }
        public virtual bool IsList() const
        {
            return false;
        }
        public virtual Parser* Clone() const
        {
            throw Exception("this class does not support clone operation");
        }
        private Parser* parent;
        private ustring name;
        private bool parentIsList;
    }

    public abstract class UnaryParser : Parser
    {
        public UnaryParser(const ustring& name_, Parser* child_) :
            base(name_), child(child_)
        {
            child->SetParent(this);
        }
        public Parser* Child() const
        {
            return child.Get();
        }
        private UniquePtr<Parser> child;
    }

    public abstract class BinaryParser : Parser
    {
        public BinaryParser(const ustring& name_, Parser* left_, Parser* right_) :
            base(name_), left(left_), right(right_)
        {
            left->SetParent(this);
            right->SetParent(this);
        }
        public Parser* Left() const
        {
            return left.Get();
        }
        public Parser* Right() const
        {
            return right.Get();
        }
        private UniquePtr<Parser> left;
        private UniquePtr<Parser> right;
    }

    public class EmptyParser : Parser
    {
        public EmptyParser() :
            base(u"empty")
        {
        }
        public override bool IsEmptyOrEmptyActionParser() const
        {
            return true;
        }
        public override Parser* Clone() const
        {
            return new EmptyParser();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class TokenParser : Parser
    {
        public TokenParser(const ustring& tokenName_) :
            base(tokenName_), tokenName(tokenName_)
        {
        }
        public const ustring& TokenName() const
        {
            return tokenName;
        }
        public override bool IsToken() const
        {
            return true;
        }
        public override Parser* Clone() const
        {
            return new TokenParser(tokenName);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private ustring tokenName;
    }

    public class CharParser : Parser
    {
        public CharParser(uchar chr_) :
            base(ustring(chr_, 1)), chr(chr_)
        {
        }
        public uchar Chr() const
        {
            return chr;
        }
        public override Parser* Clone() const
        {
            return new CharParser(chr);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private uchar chr;
    }

    public class StringParser : Parser
    {
        public StringParser(const ustring& str_) :
            base(str_), str(str_)
        {
        }
        public const ustring& Str() const
        {
            return str;
        }
        public const string& ArrayName() const
        {
            return arrayName;
        }
        public void SetArrayName(const string& arrayName_)
        {
            arrayName = arrayName_;
        }
        public override Parser* Clone() const
        {
            return new StringParser(str);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private ustring str;
        private string arrayName;
    }

    public class CharSetParser : Parser
    {
        public CharSetParser(const CharSet& set_) :
            base(u"charset"), set(set_)
        {
        }
        public const CharSet& Set() const
        {
            return set;
        }
        public const string& ArrayName() const
        {
            return arrayName;
        }
        public void SetArrayName(const string& arrayName_)
        {
            arrayName = arrayName_;
        }
        public override Parser* Clone() const
        {
            return new CharSetParser(set);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private CharSet set;
        private string arrayName;
    }

    public class OptionalParser : UnaryParser
    {
        public OptionalParser(Parser* child_) :
            base(u"optional", child_)
        {
        }
        public override bool IsPostfix() const
        {
            return true;
        }
        public override Parser* Clone() const
        {
            return new OptionalParser(Child()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class KleeneParser : UnaryParser
    {
        public KleeneParser(Parser* child_) :
            base(u"kleene", child_)
        {
        }
        public override bool IsPostfix() const
        {
            return true;
        }
        public override Parser* Clone() const
        {
            return new KleeneParser(Child()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class PositiveParser : UnaryParser
    {
        public PositiveParser(Parser* child_) :
            base(u"positive", child_)
        {
        }
        public override bool IsPostfix() const
        {
            return true;
        }
        public override Parser* Clone() const
        {
            return new PositiveParser(Child()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class ExpectationParser : UnaryParser
    {
        public ExpectationParser(Parser* child_) :
            base(u"expectation", child_)
        {
        }
        public override Parser* Clone() const
        {
            return new ExpectationParser(Child()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class GroupingParser : UnaryParser
    {
        public GroupingParser(Parser* child_) :
            base(u"grouping", child_)
        {
        }
        public override bool IsAction() const
        {
            return Child()->IsAction();
        }
        public override Parser* Clone() const
        {
            return new GroupingParser(Child()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class SequenceParser : BinaryParser
    {
        public SequenceParser(Parser* left_, Parser* right_) :
            base(u"sequence", left_, right_)
        {
        }
        public override Parser* Clone() const
        {
            return new SequenceParser(Left()->Clone(), Right()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override bool IsAction() const
        {
            if (Left()->IsEmptyOrEmptyActionParser())
            {
                return Right()->IsAction();
            }
            else if (Right()->IsEmptyOrEmptyActionParser())
            {
                return Left()->IsAction();
            }
            else
            {
                return false;
            }
        }
    }

    public class AlternativeParser : BinaryParser
    {
        public AlternativeParser(Parser* left_, Parser* right_) :
            base(u"alternative", left_, right_)
        {
        }
        public override bool IsTokenSwitch() const
        {
            return Left()->IsActionToken() && Right()->IsActionToken() || Left()->IsTokenSwitch() && Right()->IsActionToken();
        }
        public override Parser* Clone() const
        {
            return new AlternativeParser(Left()->Clone(), Right()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class DifferenceParser : BinaryParser
    {
        public DifferenceParser(Parser* left_, Parser* right_) :
            base(u"difference", left_, right_)
        {
        }
        public override Parser* Clone() const
        {
            return new DifferenceParser(Left()->Clone(), Right()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class ListParser : UnaryParser
    {
        public ListParser(Parser* left_, Parser* right_) :
            base(u"list", new SequenceParser(left_, new KleeneParser(new SequenceParser(right_, left_->Clone())))), left(left_), right(right_)
        {
            left->SetParentIsList();
            right->SetParentIsList();
        }
        public Parser* Left() const
        {
            return left;
        }
        public Parser* Right() const
        {
            return right;
        }
        public override Parser* Clone() const
        {
            return new ListParser(left->Clone(), right->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private Parser* left;
        private Parser* right;
    }

    public class ActionParser : UnaryParser
    {
        public ActionParser(Parser* child_) :
            base(u"action", child_)
        {
        }
        public ~ActionParser()
        {
        }
        public override bool IsAction() const
        {
            return true;
        }
        public override bool IsEmptyOrEmptyActionParser() const
        {
            return Child()->IsEmptyOrEmptyActionParser();
        }
        public override Parser* Clone() const
        {
            return new ActionParser(Child()->Clone());
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override bool IsActionToken() const
        {
            return Child()->IsToken();
        }
    }

    public class Parameter
    {
        public Parameter(Cm.Ast.Node* type_, Cm.Ast.IdentifierNode* name_) :
            type(type_), name(name_), variable(false)
        {
        }
        public Parameter(Cm.Ast.Node* type_, Cm.Ast.IdentifierNode* name_, bool variable_) :
            type(type_), name(name_), variable(variable_)
        {
        }
        public virtual ~Parameter()
        {
        }
        public UniquePtr<Cm.Ast.Node> type;
        public UniquePtr<Cm.Ast.IdentifierNode> name;
        public bool variable;
    }

    public class Variable : Parameter
    {
        public Variable(Cm.Ast.Node* type_, Cm.Ast.IdentifierNode* name_) :
            base(type_, name_, true)
        {
        }
    }

    public class NonterminalParser : Parser
    {
        public NonterminalParser(const ustring& name_, const ustring& ruleName_) :
            base(name_), ruleName(ruleName_), rule(null)
        {
        }
        public const ustring& RuleName() const
        {
            return ruleName;
        }
        public void SetRule(RuleParser* rule)
        {
            this->rule = rule;
        }
        public RuleParser* Rule() const
        {
            return rule;
        }
        public const Cm.Ast.NodeList<Cm.Ast.Node>& Arguments() const
        {
            return args;
        }
        public void SetArguments(Cm.Ast.InvokeNode* invoke)
        {
            int n = invoke->Arguments().Count();
            for (int i = 0; i < n; ++i)
            {
                Cm.Ast.Node* arg = invoke->Arguments()[i];
                Cm.Ast.CloneContext cloneContext;
                args.Add(arg->Clone(cloneContext));
            }
        }
        public override bool IsNonterminal() const
        {
            return true;
        }
        public override Parser* Clone() const
        {
            NonterminalParser* clone = new NonterminalParser(Name(), ruleName);
            int n = args.Count();
            for (int i = 0; i < n; ++i)
            {
                Cm.Ast.CloneContext cloneContext;
                clone->args.Add(args[i]->Clone(cloneContext));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private ustring ruleName;
        private RuleParser* rule;
        private Cm.Ast.NodeList<Cm.Ast.Node> args;
    }

    public class RuleParser : Parser
    {
        public RuleParser(const ustring& name_) :
            base(name_), hasReturn(false)
        {
        }
        public Parser* Definition()
        {
            return definition.Get();
        }
        public const List<UniquePtr<Parameter>>& Parameters() const
        {
            return parameters;
        }
        public const List<UniquePtr<Variable>>& Variables() const
        {
            return variables;
        }
        public Cm.Ast.Node* ReturnType() const
        {
            return returnType.Get();
        }
        public const List<NonterminalParser*>& Nonterminals() const
        {
            return nonterminals;
        }
        public const ustring& Info() const
        {
            return info;
        }
        public void SetHasReturn()
        {
            hasReturn = true;
        }
        public bool HasReturn() const
        {
            return hasReturn;
        }
        public GrammarParser* GetGrammar() const
        {
            if ((Parent() != null))
            {
                if (Parent()->IsGrammar())
                {
                    return cast<GrammarParser*>(Parent());
                }
                else
                {
                    throw Exception("error: parent of rule not grammar");
                }
            }
            else
            {
                throw Exception("error: rule has no parent");
            }
        }
        public void SetDefinition(Parser* definition_)
        {
            definition.Reset(definition_);
        }
        public void AddParamOrVariable(Parameter* paramOrVariable)
        {
            if (paramOrVariable->variable)
            {
                variables.Add(UniquePtr<Variable>(cast<Variable*>(paramOrVariable)));
            }
            else
            {
                parameters.Add(UniquePtr<Parameter>(paramOrVariable));
            }
        }
        public void SetReturnType(Cm.Ast.Node* returnType_)
        {
            returnType.Reset(returnType_);
        }
        public void AddNonterminal(NonterminalParser* nonterminal)
        {
            nonterminals.Add(nonterminal);
        }
        public void SetInfo(const ustring& info_)
        {
            info = info_;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private UniquePtr<Parser> definition;
        private List<UniquePtr<Parameter>> parameters;
        private List<UniquePtr<Variable>> variables;
        private UniquePtr<Cm.Ast.Node> returnType;
        private List<NonterminalParser*> nonterminals;
        private ustring info;
        private bool hasReturn;
    }

    public class GrammarParser : Parser
    {
        public GrammarParser(const ustring& name_, const ustring& api_) :
            base(name_), api(api_), main(false)
        {
        }
        public const ustring& Api() const
        {
            return api;
        }
        public void SetMain()
        {
            main = true;
        }
        public bool Main() const
        {
            return main;
        }
        public const List<ustring>& Usings() const
        {
            return usings;
        }
        public void SetLexer(const ustring& lexer_)
        {
            lexer = lexer_;
        }
        public const ustring& Lexer() const
        {
            return lexer;
        }
        public const List<UniquePtr<RuleParser>>& Rules() const
        {
            return rules;
        }
        public const List<Pair<ustring, ustring>>& RuleInfos() const
        {
            return ruleInfos;
        }
        public void AddUsing(const ustring& using_)
        {
            usings.Add(using_);
        }
        public void AddRule(RuleParser* rule)
        {
            rule->SetParent(this);
            rules.Add(UniquePtr<RuleParser>(rule));
            ruleMap[rule->Name()] = rule;
        }
        public void MapRule(RuleParser* rule)
        {
            ruleMap[rule->Name()] = rule;
        }
        public RuleParser* GetRule(const ustring& ruleName) const
        {
            Map<ustring, RuleParser*>.ConstIterator it = ruleMap.CFind(ruleName);
            if (it != ruleMap.CEnd())
            {
                return it->second;
            }
            else
            {
                throw Exception("rule \'" + ToUtf8(ruleName) + "\' not found from parser \'" + ToUtf8(Name()) + "\'");
            }
        }
        public void AddRuleInfo(const ustring& ruleName, const ustring& ruleInfo)
        {
            ruleInfos.Add(MakePair(ruleName, ruleInfo));
        }
        public override bool IsGrammar() const
        {
            return true;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private ustring api;
        private bool main;
        private List<ustring> usings;
        private ustring lexer;
        private List<UniquePtr<RuleParser>> rules;
        private Map<ustring, RuleParser*> ruleMap;
        private List<Pair<ustring, ustring>> ruleInfos;
    }
} // namespace soulcm.scm2html
