using System;
using System.Collections;
using System.IO;

namespace soulcm.scm2html
{
    public class GrammarHtmlGeneratorVisitor : Visitor
    {
        public GrammarHtmlGeneratorVisitor(bool verbose_, HashMap<GrammarParser*, Grammar*>& parserGrammarMap_, HashMap<RuleParser*, Rule*>& parserRuleMap_, HashMap<LexerFile*, Grammar*>& lexerGrammarMap_, HashMap<Expression*, Rule*>& lexerRuleMap_, HashMap<ustring, LexerFile*>& lexerMap_, const ustring& styleFilePath_) :
            verbose(verbose_), parserGrammarMap(parserGrammarMap_), parserRuleMap(parserRuleMap_), lexerGrammarMap(lexerGrammarMap_), lexerRuleMap(lexerRuleMap_), lexerMap(lexerMap_), styleFilePath(styleFilePath_), ruleTable(null), ruleBodyElement(null), currentGrammar(null), lexerFile(null)
        {
        }
        public Grammar* GetGrammar(GrammarParser* parser) const
        {
            HashMap<GrammarParser*, Grammar*>.ConstIterator it = parserGrammarMap.CFind(parser);
            if (it != parserGrammarMap.CEnd())
            {
                return it->second;
            }
            else
            {
                throw Exception("grammar for parser \'" + ToUtf8(parser->Name()) + "\' not found");
            }
        }
        public Rule* GetRule(RuleParser* parser) const
        {
            HashMap<RuleParser*, Rule*>.ConstIterator it = parserRuleMap.CFind(parser);
            if (it != parserRuleMap.CEnd())
            {
                return it->second;
            }
            else
            {
                throw Exception("rule for parser \'" + ToUtf8(parser->Name()) + "\' not found");
            }
        }
        public override void Visit(Char& symbol)
        {
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleChar");
            ustring s = CharStr(symbol.Chr());
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(s)));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(Any& symbol)
        {
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u".")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(Range& symbol)
        {
            if (symbol.Start() == symbol.End())
            {
                UniquePtr<System.Dom.Element> startSpanElement(new System.Dom.Element(u"span"));
                startSpanElement->SetAttribute(u"class", u"ruleCharSet");
                ustring s = CharStr(symbol.Start());
                startSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(s)));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(startSpanElement.Release()));
            }
            else
            {
                UniquePtr<System.Dom.Element> startSpanElement(new System.Dom.Element(u"span"));
                startSpanElement->SetAttribute(u"class", u"ruleCharSet");
                ustring s = CharStr(symbol.Start());
                startSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(s)));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(startSpanElement.Release()));
                UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
                spanElement->SetAttribute(u"class", u"ruleOp");
                spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.EntityReference(u"#8209")));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
                UniquePtr<System.Dom.Element> endSpanElement(new System.Dom.Element(u"span"));
                endSpanElement->SetAttribute(u"class", u"ruleCharSet");
                ustring t = CharStr(symbol.End());
                endSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(t)));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(endSpanElement.Release()));
            }
        }
        public override void Visit(Class& symbol)
        {
            UniquePtr<System.Dom.Element> leftSpanElement(new System.Dom.Element(u"span"));
            leftSpanElement->SetAttribute(u"class", u"ruleOp");
            leftSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"[")));
            if (symbol.Inverse())
            {
                leftSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"^")));
            }
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(leftSpanElement.Release()));
            for (Symbol* symbol : symbol.Symbols())
            {
                symbol->Accept(*this);
            }
            UniquePtr<System.Dom.Element> rightSpanElement(new System.Dom.Element(u"span"));
            rightSpanElement->SetAttribute(u"class", u"ruleOp");
            rightSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"]")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(rightSpanElement.Release()));
        }
        public override void Visit(Alt& alt)
        {
            alt.Left()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u" | ")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
            alt.Right()->Accept(*this);
        }
        public override void Visit(Cat& cat)
        {
            bool chars = cat.Left()->IsCharSymbolExpr() && cat.Right()->IsCharSymbolExpr();
            cat.Left()->Accept(*this);
            if (!chars)
            {
                UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
                spanElement->SetAttribute(u"class", u"ruleOp");
                spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u" ")));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
            }
            cat.Right()->Accept(*this);
        }
        public override void Visit(Kleene& kleene)
        {
            kleene.Child()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"*")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(Pos& pos)
        {
            pos.Child()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"+")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(Opt& opt)
        {
            opt.Child()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"?")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(ParenExpr& parenExpr)
        {
            UniquePtr<System.Dom.Element> leftSpanElement(new System.Dom.Element(u"span"));
            leftSpanElement->SetAttribute(u"class", u"ruleOp");
            leftSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"(")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(leftSpanElement.Release()));
            parenExpr.Child()->Accept(*this);
            UniquePtr<System.Dom.Element> rightSpanElement(new System.Dom.Element(u"span"));
            rightSpanElement->SetAttribute(u"class", u"ruleOp");
            rightSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u")")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(rightSpanElement.Release()));
        }
        public override void Visit(SymbolExpr& symbolExpr)
        {
            symbolExpr.GetSymbol()->Accept(*this);
        }
        public override void Visit(RefExpr& refExpr)
        {
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"lexerRule");
            UniquePtr<System.Dom.Element> linkElement(new System.Dom.Element(u"a"));
            linkElement->SetAttribute(u"class", u"lexerRule");
            ustring linkText;
            HashMap<LexerFile*, Grammar*>.ConstIterator grammarIt = lexerGrammarMap.CFind(lexerFile);
            if (grammarIt != lexerGrammarMap.CEnd())
            {
                Grammar* grammar = grammarIt->second;
                linkText.Append(grammar->HtmlFileName());
            }
            else
            {
                throw Exception("lexical grammar not found");
            }
            Expression* expression = lexerFile->GetExpressions()->Get(refExpr.ExprId());
            Rule* rule = null;
            HashMap<Expression*, Rule*>.ConstIterator ruleIt = lexerRuleMap.CFind(expression);
            if (ruleIt != lexerRuleMap.CEnd())
            {
                rule = ruleIt->second;
                linkText.Append(u"#").Append(rule->Name());
            }
            else
            {
                throw Exception("lexical rule not found");
            }
            linkElement->SetAttribute(u"href", linkText);
            AppendRuleName(linkElement.Get(), rule->Name());
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(linkElement.Release()));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(EmptyParser& parser)
        {
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"<empty>")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(TokenParser& parser)
        {
            ustring keyword;
            if ((lexerFile != null))
            {
                Keywords* keywords = lexerFile->GetKeywords();
                if ((keywords != null))
                {
                    keyword = keywords->GetKeyword(parser.TokenName());
                }
            }
            if (!keyword.IsEmpty())
            {
                UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
                spanElement->SetAttribute(u"class", u"ruleKeyword");
                spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(keyword)));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
            }
            else
            {
                RegExpression* regEx = null;
                if ((lexerFile != null))
                {
                    LexerStatement* statement = lexerFile->GetLexer()->GetStatement(parser.TokenName());
                    if ((statement != null))
                    {
                        regEx = statement->RegEx();
                    }
                }
                if ((regEx != null))
                {
                    regEx->Accept(*this);
                }
                else
                {
                    UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
                    spanElement->SetAttribute(u"class", u"ruleString");
                    spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(parser.TokenName())));
                    ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
                }
            }
        }
        public override void Visit(CharParser& parser)
        {
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleChar");
            ustring s = CharStr(parser.Chr());
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(s)));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(StringParser& parser)
        {
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleString");
            ustring s = StringStr(parser.Str());
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(s)));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(CharSetParser& parser)
        {
            ustring text = u"[";
            if (parser.Set().Inverse())
            {
                text.Append(u"^");
            }
            for (const System.Parsing.Range& range : parser.Set().Ranges())
            {
                text.Append(CharStr(cast<uchar>(range.first)));
                if (range.last != range.first)
                {
                    text.Append('-', 1).Append(CharStr(cast<uchar>(range.last)));
                }
            }
            text.Append(']', 1);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleCharSet");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(text)));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(OptionalParser& parser)
        {
            parser.Child()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"?")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(KleeneParser& parser)
        {
            parser.Child()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"*")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(PositiveParser& parser)
        {
            parser.Child()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"+")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(ExpectationParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(GroupingParser& parser)
        {
            if (parser.Parent() == null || parser.Parent()->IsAction() || ((parser.Parent()->IsPostfix() || parser.ParentIsList()) && parser.Child()->IsAction()))
            {
                parser.Child()->Accept(*this);
            }
            else
            {
                UniquePtr<System.Dom.Element> leftSpanElement(new System.Dom.Element(u"span"));
                leftSpanElement->SetAttribute(u"class", u"ruleOp");
                leftSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u"(")));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(leftSpanElement.Release()));
                parser.Child()->Accept(*this);
                UniquePtr<System.Dom.Element> rightSpanElement(new System.Dom.Element(u"span"));
                rightSpanElement->SetAttribute(u"class", u"ruleOp");
                rightSpanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u")")));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(rightSpanElement.Release()));
            }
        }
        public override void Visit(SequenceParser& parser)
        {
            if (parser.Left()->IsEmptyOrEmptyActionParser())
            {
                if (!parser.Right()->IsEmptyOrEmptyActionParser())
                {
                    parser.Right()->Accept(*this);
                }
            }
            else if (parser.Right()->IsEmptyOrEmptyActionParser())
            {
                if (!parser.Left()->IsEmptyOrEmptyActionParser())
                {
                    parser.Left()->Accept(*this);
                }
            }
            else
            {
                parser.Left()->Accept(*this);
                UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
                spanElement->SetAttribute(u"class", u"ruleOp");
                spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u" ")));
                ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
                parser.Right()->Accept(*this);
            }
        }
        public override void Visit(AlternativeParser& parser)
        {
            parser.Left()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u" | ")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
            parser.Right()->Accept(*this);
        }
        public override void Visit(DifferenceParser& parser)
        {
            parser.Left()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u" ")));
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.EntityReference(u"minus")));
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u" ")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
            parser.Right()->Accept(*this);
        }
        public override void Visit(ListParser& parser)
        {
            parser.Left()->Accept(*this);
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleOp");
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(u" % ")));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
            parser.Right()->Accept(*this);
        }
        public override void Visit(ActionParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(NonterminalParser& parser)
        {
            UniquePtr<System.Dom.Element> spanElement(new System.Dom.Element(u"span"));
            spanElement->SetAttribute(u"class", u"ruleLink");
            UniquePtr<System.Dom.Element> linkElement(new System.Dom.Element(u"a"));
            linkElement->SetAttribute(u"class", u"ruleLink");
            RuleParser* ruleParser = parser.Rule();
            GrammarParser* grammarParser = ruleParser->GetGrammar();
            Rule* rule = GetRule(ruleParser);
            ustring linkText;
            if (grammarParser == currentGrammar)
            {
                linkText.Append(u"#").Append(rule->Name());
            }
            else
            {
                Grammar* grammar = GetGrammar(grammarParser);
                linkText.Append(grammar->HtmlFileName()).Append(u"#").Append(rule->Name());
            }
            linkElement->SetAttribute(u"href", linkText);
            AppendRuleName(linkElement.Get(), rule->Name());
            spanElement->AppendChild(UniquePtr<System.Dom.Node>(linkElement.Release()));
            ruleBodyElement->AppendChild(UniquePtr<System.Dom.Node>(spanElement.Release()));
        }
        public override void Visit(RuleParser& parser)
        {
            UniquePtr<System.Dom.Element> trElement(new System.Dom.Element(u"tr"));
            Rule* rule = GetRule(&parser);
            trElement->SetAttribute(u"id", rule->Name());
            UniquePtr<System.Dom.Element> tdNameElement(new System.Dom.Element(u"td"));
            tdNameElement->SetAttribute(u"class", u"grammarFirstCol");
            UniquePtr<System.Dom.Element> ruleSpanElement(new System.Dom.Element(u"span"));
            ruleSpanElement->SetAttribute(u"class", u"rule");
            AppendRuleName(ruleSpanElement.Get(), rule->Name());
            tdNameElement->AppendChild(UniquePtr<System.Dom.Node>(ruleSpanElement.Release()));
            trElement->AppendChild(UniquePtr<System.Dom.Node>(tdNameElement.Release()));
            UniquePtr<System.Dom.Element> tdArrowElement(new System.Dom.Element(u"td"));
            tdArrowElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.EntityReference(u"rarr")));
            tdArrowElement->SetAttribute(u"class", u"grammarSecondCol");
            trElement->AppendChild(UniquePtr<System.Dom.Node>(tdArrowElement.Release()));
            UniquePtr<System.Dom.Element> tdRuleBodyElement(new System.Dom.Element(u"td"));
            tdRuleBodyElement->SetAttribute(u"class", u"grammarThirdCol");
            tdRuleBodyElement->SetAttribute(u"xml:space", u"preserve");
            ruleBodyElement = tdRuleBodyElement.Get();
            parser.Definition()->Accept(*this);
            trElement->AppendChild(UniquePtr<System.Dom.Node>(tdRuleBodyElement.Release()));
            ruleTable->AppendChild(UniquePtr<System.Dom.Node>(trElement.Release()));
        }
        public override void Visit(GrammarParser& parser)
        {
            Grammar* grammar = GetGrammar(&parser);
            GrammarParser* prevGrammar = currentGrammar;
            currentGrammar = &parser;
            LexerFile* prevLexerFile = lexerFile;
            HashMap<ustring, LexerFile*>.ConstIterator it = lexerMap.CFind(parser.Lexer());
            if (it != lexerMap.CEnd())
            {
                lexerFile = it->second;
            }
            UniquePtr<System.Dom.Document> grammarDoc(new System.Dom.Document());
            UniquePtr<System.Dom.Element> htmlElement(new System.Dom.Element(u"html"));
            UniquePtr<System.Dom.Element> headElement(new System.Dom.Element(u"head"));
            UniquePtr<System.Dom.Element> metaElement(new System.Dom.Element(u"meta"));
            metaElement->SetAttribute(u"charset", u"utf-8");
            headElement->AppendChild(UniquePtr<System.Dom.Node>(metaElement.Release()));
            UniquePtr<System.Dom.Element> titleElement(new System.Dom.Element(u"title"));
            titleElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(grammar->Title())));
            headElement->AppendChild(UniquePtr<System.Dom.Node>(titleElement.Release()));
            UniquePtr<System.Dom.Element> linkElement(new System.Dom.Element(u"link"));
            linkElement->SetAttribute(u"rel", u"stylesheet");
            linkElement->SetAttribute(u"type", u"text/css");
            linkElement->SetAttribute(u"href", styleFilePath);
            headElement->AppendChild(UniquePtr<System.Dom.Node>(linkElement.Release()));
            htmlElement->AppendChild(UniquePtr<System.Dom.Node>(headElement.Release()));
            UniquePtr<System.Dom.Element> bodyElement(new System.Dom.Element(u"body"));
            UniquePtr<System.Dom.Element> headerElement(new System.Dom.Element(u"h1"));
            headerElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(grammar->Title())));
            bodyElement->AppendChild(UniquePtr<System.Dom.Node>(headerElement.Release()));
            UniquePtr<System.Dom.Element> tableElement(new System.Dom.Element(u"table"));
            tableElement->SetAttribute(u"class", u"grammar");
            ruleTable = tableElement.Get();
            int n = cast<int>(parser.Rules().Count());
            for (int i = 0; i < n; ++i)
            {
                parser.Rules()[i]->Accept(*this);
            }
            bodyElement->AppendChild(UniquePtr<System.Dom.Node>(tableElement.Release()));
            htmlElement->AppendChild(UniquePtr<System.Dom.Node>(bodyElement.Release()));
            grammarDoc->AppendChild(UniquePtr<System.Dom.Node>(htmlElement.Release()));
            StreamWriter htmlFile = File.CreateText(grammar->HtmlFilePath());
            System.Text.CodeFormatter formatter(htmlFile);
            formatter.SetIndentSize(1);
            grammarDoc->Write(formatter);
            currentGrammar = prevGrammar;
            lexerFile = prevLexerFile;
            if (verbose)
            {
                Console.Out() << "==> " << grammar->HtmlFilePath() << endl();
            }
        }
        public override void Visit(ParserFile& parserFile)
        {
            for (const UniquePtr<GrammarParser>& grammar : parserFile.Parsers())
            {
                grammar->Accept(*this);
            }
        }
        public override void Visit(Domain& domain)
        {
            for (ParserFile* parserFile : domain.ParserFiles())
            {
                parserFile->Accept(*this);
            }
        }
        public override void Visit(LexerFile& lexerFile)
        {
            this->lexerFile = &lexerFile;
            HashMap<LexerFile*, Grammar*>.ConstIterator it = lexerGrammarMap.CFind(this->lexerFile);
            if (it != lexerGrammarMap.CEnd())
            {
                Grammar* grammar = it->second;
                UniquePtr<System.Dom.Document> grammarDoc(new System.Dom.Document());
                UniquePtr<System.Dom.Element> htmlElement(new System.Dom.Element(u"html"));
                UniquePtr<System.Dom.Element> headElement(new System.Dom.Element(u"head"));
                UniquePtr<System.Dom.Element> metaElement(new System.Dom.Element(u"meta"));
                metaElement->SetAttribute(u"charset", u"utf-8");
                headElement->AppendChild(UniquePtr<System.Dom.Node>(metaElement.Release()));
                UniquePtr<System.Dom.Element> titleElement(new System.Dom.Element(u"title"));
                titleElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(grammar->Title())));
                headElement->AppendChild(UniquePtr<System.Dom.Node>(titleElement.Release()));
                UniquePtr<System.Dom.Element> linkElement(new System.Dom.Element(u"link"));
                linkElement->SetAttribute(u"rel", u"stylesheet");
                linkElement->SetAttribute(u"type", u"text/css");
                linkElement->SetAttribute(u"href", styleFilePath);
                headElement->AppendChild(UniquePtr<System.Dom.Node>(linkElement.Release()));
                htmlElement->AppendChild(UniquePtr<System.Dom.Node>(headElement.Release()));
                UniquePtr<System.Dom.Element> bodyElement(new System.Dom.Element(u"body"));
                UniquePtr<System.Dom.Element> headerElement(new System.Dom.Element(u"h1"));
                headerElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(grammar->Title())));
                bodyElement->AppendChild(UniquePtr<System.Dom.Node>(headerElement.Release()));
                UniquePtr<System.Dom.Element> tableElement(new System.Dom.Element(u"table"));
                tableElement->SetAttribute(u"class", u"grammar");
                ruleTable = tableElement.Get();
                int n = cast<int>(grammar->Rules().Count());
                for (int i = 0; i < n; ++i)
                {
                    Rule* rule = grammar->Rules()[i].Get();
                    UniquePtr<System.Dom.Element> trElement(new System.Dom.Element(u"tr"));
                    trElement->SetAttribute(u"id", rule->Name());
                    UniquePtr<System.Dom.Element> tdNameElement(new System.Dom.Element(u"td"));
                    tdNameElement->SetAttribute(u"class", u"grammarFirstCol");
                    UniquePtr<System.Dom.Element> ruleSpanElement(new System.Dom.Element(u"span"));
                    ruleSpanElement->SetAttribute(u"class", u"rule");
                    AppendRuleName(ruleSpanElement.Get(), rule->Name());
                    tdNameElement->AppendChild(UniquePtr<System.Dom.Node>(ruleSpanElement.Release()));
                    trElement->AppendChild(UniquePtr<System.Dom.Node>(tdNameElement.Release()));
                    UniquePtr<System.Dom.Element> tdArrowElement(new System.Dom.Element(u"td"));
                    tdArrowElement->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.EntityReference(u"rarr")));
                    tdArrowElement->SetAttribute(u"class", u"grammarSecondCol");
                    trElement->AppendChild(UniquePtr<System.Dom.Node>(tdArrowElement.Release()));
                    UniquePtr<System.Dom.Element> tdRuleBodyElement(new System.Dom.Element(u"td"));
                    tdRuleBodyElement->SetAttribute(u"class", u"grammarThirdCol");
                    tdRuleBodyElement->SetAttribute(u"xml:space", u"preserve");
                    ruleBodyElement = tdRuleBodyElement.Get();
                    rule->GetExpression()->RegEx()->Accept(*this);
                    trElement->AppendChild(UniquePtr<System.Dom.Node>(tdRuleBodyElement.Release()));
                    ruleTable->AppendChild(UniquePtr<System.Dom.Node>(trElement.Release()));
                }
                bodyElement->AppendChild(UniquePtr<System.Dom.Node>(tableElement.Release()));
                htmlElement->AppendChild(UniquePtr<System.Dom.Node>(bodyElement.Release()));
                grammarDoc->AppendChild(UniquePtr<System.Dom.Node>(htmlElement.Release()));
                StreamWriter htmlFile = File.CreateText(grammar->HtmlFilePath());
                System.Text.CodeFormatter formatter(htmlFile);
                formatter.SetIndentSize(1);
                grammarDoc->Write(formatter);
                if (verbose)
                {
                    Console.Out() << "==> " << grammar->HtmlFilePath() << endl();
                }
            }
            else
            {
                throw Exception("lexical grammar not found");
            }
        }
        private bool verbose;
        private HashMap<GrammarParser*, Grammar*>& parserGrammarMap;
        private HashMap<RuleParser*, Rule*>& parserRuleMap;
        private HashMap<LexerFile*, Grammar*>& lexerGrammarMap;
        private HashMap<Expression*, Rule*>& lexerRuleMap;
        private HashMap<ustring, LexerFile*>& lexerMap;
        private LexerFile* lexerFile;
        private ustring styleFilePath;
        private System.Dom.Element* ruleTable;
        private System.Dom.Element* ruleBodyElement;
        private GrammarParser* currentGrammar;
    }

    public void AppendRuleName(System.Dom.Element* parent, const ustring& name)
    {
        for (uchar c : name)
        {
            ustring s(c);
            if (c == '-')
            {
                parent->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.EntityReference(u"#8209")));
            }
            else
            {
                parent->AppendChild(UniquePtr<System.Dom.Node>(new System.Dom.Text(s)));
            }
        }
    }
} // namespace soulcm.scm2html
