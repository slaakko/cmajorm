using System;
using System.Collections;
using System.IO;

// this file has been semiautomatically generated from 'D:/work/soulngcm/soulngcm/sngcmpg/Main.cpp' using cpp2cm version 1.0.0

public void PrintHelp()
{
    Console.Out() << "Soul CM Parser Generator version " << soulcm.scmpg.ParserGeneratorVersionStr() << endl();
    Console.Out() << "Usage: scmpg [options] <file.spg>" << endl();
    Console.Out() << "Options:" << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl();
    Console.Out() << "--verbose | -v" << endl();
    Console.Out() << "  Be verbose." << endl();
    Console.Out() << "--no-parser-debug-support | -n" << endl();
    Console.Out() << "  Do not generate parser debug support code to the generated parsers." << endl();
}
public int main(int argc, const char** argv)
{
    try
    {
        bool verbose = false;
        bool noParserDebugSupport = false;
        string projectFilePath;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 1;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else if (arg == "--no-parser-debug-support")
                {
                    noParserDebugSupport = true;
                }
                else
                {
                    throw Exception("unknown option \'" + arg + "\'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown option \'" + arg + "\'");
                }
                else
                {
                    for (char o : options)
                    {
                        if (o == 'h')
                        {
                            PrintHelp();
                            return 1;
                        }
                        else if (o == 'v')
                        {
                            verbose = true;
                        }
                        else if (o == 'n')
                        {
                            noParserDebugSupport = true;
                        }
                        else
                        {
                            throw Exception("unknown option \'-" + string(o, 1) + "\'");
                        }
                    }
                }
            }
            else
            {
                string filePath = GetFullPath(arg);
                if (Path.GetExtension(filePath) != ".spg")
                {
                    throw Exception("unknown project file extension \'" + Path.GetExtension(filePath) + "\'");
                }
                projectFilePath = filePath;
            }
        }
        if (projectFilePath.IsEmpty())
        {
            PrintHelp();
            return 1;
        }
        if (verbose)
        {
            Console.Out() << "> " << projectFilePath << endl();
        }
        string s = System.IO.ReadFile(projectFilePath);
        ustring content = ToUtf32(s);
        ProjectFileLexer lexer(content, projectFilePath, 0);
        UniquePtr<soulcm.scmpg.ProjectFile> projectFile = ProjectFileParser.Parse(lexer);
        int index = 1;
        List<UniquePtr<soulcm.scmpg.ParserFile>> parserFiles;
        for (const string& sourceFileName : projectFile->SourceFiles())
        {
            string sourceFilePath = Path.Combine(projectFile->BasePath(), sourceFileName);
            string s = System.IO.ReadFile(sourceFilePath);
            ustring content = ToUtf32(s);
            ParserFileLexer lexer(content, sourceFilePath, index);
            ParsingContext parsingContext;
            UniquePtr<soulcm.scmpg.ParserFile> parserFile = ParserFileParser.Parse(lexer, &parsingContext);
            ++index;
            parserFiles.Add(Rvalue(parserFile));
        }
        soulcm.scmpg.Domain domain;
        for (const UniquePtr<soulcm.scmpg.ParserFile>& parserFile : parserFiles)
        {
            domain.AddParserFile(parserFile.Get());
        }
        soulcm.scmpg.LinkerVisitor linkerVisitor;
        domain.Accept(linkerVisitor);
        soulcm.scmpg.CodeGeneratorVisitor codeGeneratorVisitor(verbose, noParserDebugSupport);
        domain.Accept(codeGeneratorVisitor);
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
