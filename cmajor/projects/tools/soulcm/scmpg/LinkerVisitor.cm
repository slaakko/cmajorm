using System;
using System.Collections;

// this file has been semiautomatically generated from 'D:/work/soulngcm/soulngcm/sngcmpg/LinkerVisitor.hpp' using cpp2cm version 1.0.0

// this file has been semiautomatically generated from 'D:/work/soulngcm/soulngcm/sngcmpg/LinkerVisitor.cpp' using cpp2cm version 1.0.0

namespace soulcm.scmpg
{
    public class LinkerVisitor : Visitor
    {
        public LinkerVisitor() :
            domain(null), currentParser(null), currentRule(null), stage(Stage.addParsers)
        {
        }
        public enum Stage
        {
            addParsers, resolveRules
        }
        public override void Visit(OptionalParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(KleeneParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(PositiveParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(ExpectationParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(GroupingParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(SequenceParser& parser)
        {
            parser.Left()->Accept(*this);
            parser.Right()->Accept(*this);
        }
        public override void Visit(AlternativeParser& parser)
        {
            parser.Left()->Accept(*this);
            parser.Right()->Accept(*this);
        }
        public override void Visit(DifferenceParser& parser)
        {
            parser.Left()->Accept(*this);
            parser.Right()->Accept(*this);
        }
        public override void Visit(ListParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(ActionParser& parser)
        {
            parser.Child()->Accept(*this);
        }
        public override void Visit(NonterminalParser& parser)
        {
            currentRule->AddNonterminal(&parser);
            RuleParser* rule = currentParser->GetRule(parser.RuleName());
            parser.SetRule(rule);
            if (rule->Parameters().Count() != parser.Args().Count())
            {
                throw Exception("Rule \'" + ToUtf8(rule->Name()) + "\' takes " + ToString(rule->Parameters().Count()) + " parameters (" + ToString(parser.Args().Count()) + " arguments supplied). Detected in parser \'" + ToUtf8(currentParser->Name()) + "\' rule \'" + ToUtf8(currentRule->Name()) + "\'.");
            }
        }
        public override void Visit(RuleParser& parser)
        {
            currentRule = &parser;
            parser.Definition()->Accept(*this);
        }
        public override void Visit(GrammarParser& parser)
        {
            if (stage == Stage.addParsers)
            {
                domain->AddParser(&parser);
            }
            else if (stage == Stage.resolveRules)
            {
                currentParser = &parser;
                for (const ustring& u : parser.Usings())
                {
                    List<ustring> components = u.Split('.');
                    if (components.Count() != 2)
                    {
                        throw Exception("invalid using \'" + ToUtf8(u) + "\' in parser \'" + ToUtf8(parser.Name()) + "\'");
                    }
                    const ustring& parserName = components[0];
                    const ustring& ruleName = components[1];
                    GrammarParser* targetParser = domain->GetParser(parserName);
                    RuleParser* rule = targetParser->GetRule(ruleName);
                    parser.MapRule(rule);
                }
                for (const UniquePtr<RuleParser>& rule : parser.Rules())
                {
                    rule->Accept(*this);
                }
                for (const Pair<ustring, ustring>& ruleInfo : parser.RuleInfos())
                {
                    RuleParser* rule = parser.GetRule(ruleInfo.first);
                    rule->SetInfo(ruleInfo.second);
                }
            }
        }
        public override void Visit(ParserFile& parserFile)
        {
            for (const UniquePtr<GrammarParser>& parser : parserFile.Parsers())
            {
                parser->Accept(*this);
            }
        }
        public override void Visit(Domain& domain)
        {
            this->domain = &domain;
            stage = Stage.addParsers;
            for (ParserFile* parserFile : domain.ParserFiles())
            {
                parserFile->Accept(*this);
            }
            stage = Stage.resolveRules;
            for (ParserFile* parserFile : domain.ParserFiles())
            {
                parserFile->Accept(*this);
            }
        }
        private Domain* domain;
        private Stage stage;
        private GrammarParser* currentParser;
        private RuleParser* currentRule;
    }
} // namespace soulcm.scmpg
