// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Lex;
using Cm.Ast;
using ParserFileTokens;

parser ParserFileParser
{
    uselexer ParserFileLexer;
    main;

    using IdentifierParser.QualifiedId;
    using IdentifierParser.Identifier;
    using TypeExprParser.TypeExpr;
    using ExpressionParser.ExpressionList;
    using StatementParser.CompoundStatement;

    ParserFile(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.ParserFile> parserFile) : soulcm.scmpg.ParserFile*
        ::= (empty{ parserFile.Reset(new soulcm.scmpg.ParserFile(lexer.FileName())); } Declaration(parserFile.Get(), parsingContext):declaration*)
        {
            return parserFile.Release();
        }
        ;

    Declaration(soulcm.scmpg.ParserFile* parserFile, ParsingContext* parsingContext)
        ::= UsingDirective:usingDirective{ parserFile->AddUsingDirective(usingDirective); }
        |   ParserDeclaration(parsingContext):parserDeclaration{ parserFile->AddParser(parserDeclaration); }
        ;

    UsingDirective : Node*
        ::= UsingAliasDirective:usingAlias{ return usingAlias; }
        |   UsingNamespaceDirective:usingNs{ return usingNs; }
        ;

    UsingAliasDirective(var Span s) : Node*
        ::= USING{ s = span; } Identifier:id ASSIGN QualifiedId:qid! SEMICOLON!
        {
            s.end = span.end;
            return new AliasNode(s, id, qid);
        }
        ;

    UsingNamespaceDirective(var Span s) : Node*
        ::= USING{ s = span; } QualifiedId:ns! SEMICOLON!
        {
            s.end = span.end;
            return new NamespaceImportNode(s, ns);
        }
        ;

    ParserDeclaration(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.GrammarParser> grammarParser) : soulcm.scmpg.GrammarParser*
        ::= (PARSER ID{ grammarParser.Reset(new soulcm.scmpg.GrammarParser(lexer.GetMatch(span), u"")); } LBRACE! Statement(grammarParser.Get(), parsingContext):statement* RBRACE!)
        {
            return grammarParser.Release();
        }
        ;

    Statement(soulcm.scmpg.GrammarParser* grammarParser, ParsingContext* parsingContext)
        ::= MainStatement(grammarParser):mainStatement
        |   UsingStatement(grammarParser):usingStatement
        |   LexerStatement(grammarParser):lexerStatement
        |   RuleInfoStatement(grammarParser):ruleInfoStatement
        |   RuleStatement(grammarParser, parsingContext):ruleStatement
        ;

    MainStatement(soulcm.scmpg.GrammarParser* grammarParser)
        ::= MAIN SEMICOLON!{ grammarParser->SetMain(); }
        ;

    UsingStatement(soulcm.scmpg.GrammarParser* grammarParser)
        ::= USING UsingQualifiedId:parserId! SEMICOLON!{ grammarParser->AddUsing(parserId); }
        ;

    UsingQualifiedId(var Span s) : ustring
        ::= (ID{ s = span; } (DOT ID{ s.end = span.end; })*){ return lexer.GetMatch(s); }
        ;

    LexerStatement(soulcm.scmpg.GrammarParser* grammarParser, var ustring lexerName)
        ::= USELEXER ID!{ lexerName = lexer.GetMatch(span); } SEMICOLON!{ grammarParser->SetLexer(lexerName); }
        ;

    RuleInfoStatement(soulcm.scmpg.GrammarParser* grammarParser)
        ::= RULEINFO LBRACE! (RuleInfo(grammarParser):ruleInfo % COMMA)? RBRACE!
        ;

    RuleInfo(soulcm.scmpg.GrammarParser* grammarParser, var ustring ruleName, var ustring ruleInfo)
        ::= LPAREN ID!{ ruleName = lexer.GetMatch(span); } COMMA! STRINGLIT!{ ruleInfo = soulcm.scmpg.ParseStringLiteral(lexer.FileName(), lexer.GetToken(pos)); } RPAREN!
        {
            grammarParser->AddRuleInfo(ruleName, ruleInfo);
        }
        ;

    RuleStatement(soulcm.scmpg.GrammarParser* grammarParser, ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.RuleParser> rule)
        ::= ID{ rule.Reset(new soulcm.scmpg.RuleParser(lexer.GetMatch(span))); } ParametersAndVariables(rule.Get(), parsingContext):paramsAndVars?
            ReturnType(parsingContext):returnType? PRODUCES RuleBody(parsingContext):definition! SEMICOLON!
        {
            rule->SetDefinition(definition);
            rule->SetReturnType(returnType);
            grammarParser->AddRule(rule.Release());
        }
        ;

    ParametersAndVariables(soulcm.scmpg.RuleParser* rule, ParsingContext* parsingContext)
        ::= LPAREN (ParamOrVariable(parsingContext):paramOrVariable{ rule->AddParamOrVariable(paramOrVariable); } % COMMA)? RPAREN!
        ;

    ParamOrVariable(ParsingContext* parsingContext) : soulcm.scmpg.Parameter*
        ::= VAR TypeExpr(parsingContext):varType Identifier:varName{ return new soulcm.scmpg.Variable(varType, varName); }
        |   TypeExpr(parsingContext):paramType Identifier:paramName{ return new soulcm.scmpg.Parameter(paramType, paramName); }
        ;

    ReturnType(ParsingContext* parsingContext) : Node*
        ::= COLON TypeExpr(parsingContext):type{ return type; }
        ;

    RuleBody(ParsingContext* parsingContext) : soulcm.scmpg.Parser*
        ::= Alternative(parsingContext):alt{ return alt; }
        ;

    Alternative(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.Parser> value) : soulcm.scmpg.Parser*
        ::= (Sequence(parsingContext):left{ value.Reset(left); } (BITOR Sequence(parsingContext):right!{ value.Reset(new soulcm.scmpg.AlternativeParser(value.Release(), right)); })*)
        {
            return value.Release();
        }
        ;

    Sequence(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.Parser> value) : soulcm.scmpg.Parser*
        ::= (Difference(parsingContext):left{ value.Reset(left); } (Difference(parsingContext):right{ value.Reset(new soulcm.scmpg.SequenceParser(value.Release(), right)); })*)
        {
            return value.Release();
        }
        ;

    Difference(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.Parser> value) : soulcm.scmpg.Parser*
        ::= (List(parsingContext):left{ value.Reset(left); } (MINUS List(parsingContext):right!{ value.Reset(new soulcm.scmpg.DifferenceParser(value.Release(), right)); })*)
        {
            return value.Release();
        }
        ;

    List(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.Parser> value) : soulcm.scmpg.Parser*
        ::= (Postfix(parsingContext):left{ value.Reset(left); } (REM Postfix(parsingContext):right!{ value.Reset(new soulcm.scmpg.ListParser(value.Release(), right)); })?)
        {
            return value.Release();
        }
        ;

    Postfix(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.Parser> value) : soulcm.scmpg.Parser*
        ::=
        (   Primary(parsingContext):primary{ value.Reset(primary); }
            (   STAR{ value.Reset(new soulcm.scmpg.KleeneParser(value.Release())); }
            |   PLUS{ value.Reset(new soulcm.scmpg.PositiveParser(value.Release())); }
            |   QUEST{ value.Reset(new soulcm.scmpg.OptionalParser(value.Release())); }
            )?    
        )
        {
            return value.Release();
        }
        ;

    Primary(ParsingContext* parsingContext, var UniquePtr<soulcm.scmpg.Parser> value) : soulcm.scmpg.Parser*
        ::=
        (
            (   RuleCall(parsingContext):ruleCall{ value.Reset(ruleCall); }
            |   Primitive:primitive{ value.Reset(primitive); }
            |   Grouping(parsingContext):grouping{ value.Reset(grouping); }
            )
            (
                EXCLAMATION{ value.Reset(new soulcm.scmpg.ExpectationParser(value.Release())); }
            )?
            (   
                (
                    (CompoundStatement(parsingContext):successCode
                    (DIV CompoundStatement(parsingContext):failureCode)?){ value.Reset(new soulcm.scmpg.ActionParser(successCode, failureCode, value.Release())); }
                )
            )?
        )
        {
            return value.Release();
        }
        ;

    RuleCall(ParsingContext* parsingContext, var ustring ruleName, var UniquePtr<InvokeNode> invoke, var long nonterminalPos) : soulcm.scmpg.Parser*
        ::= Nonterminal:nt{ ruleName = nt; nonterminalPos = pos; invoke.Reset(new InvokeNode(Span())); }
            (LPAREN{ pass = NoWhiteSpaceBetweenTokens(lexer.GetToken(nonterminalPos), lexer.GetToken(pos)); }
            ExpressionList(parsingContext, invoke.Get()):args RPAREN)? COLON ID!
        {
            ustring name = lexer.GetMatch(span);
            soulcm.scmpg.NonterminalParser* nonterminalParser = new soulcm.scmpg.NonterminalParser(name, ruleName);
            nonterminalParser->SetArguments(invoke.Get());
            return nonterminalParser;
        }
        ;

    Nonterminal : ustring
        ::= ID{ return lexer.GetMatch(span); }
        ;

    Primitive : soulcm.scmpg.Parser*
        ::= EMPTY{ return new soulcm.scmpg.EmptyParser(); }
        |   ID{ return new soulcm.scmpg.TokenParser(lexer.GetMatch(span)); }
        |   CHARLIT{ return new soulcm.scmpg.CharParser(soulcm.scmpg.ParseCharLiteral(lexer.FileName(), lexer.GetToken(pos))); }
        |   STRINGLIT
        {
            ustring strLit = soulcm.scmpg.ParseStringLiteral(lexer.FileName(), lexer.GetToken(pos));
            if (strLit.Length() > 0 && strLit[0] == '[' && strLit[strLit.Length() - 1] == ']')
            {
                return new soulcm.scmpg.CharSetParser(soulcm.scmpg.ParseCharSet(lexer.FileName(), lexer.GetToken(pos), strLit));
            }
            else
            {
                return new soulcm.scmpg.StringParser(strLit);
            }
        }
        ;

    Grouping(ParsingContext* parsingContext) : soulcm.scmpg.Parser*
        ::= (LPAREN Alternative(parsingContext):alt RPAREN!){ return new soulcm.scmpg.GroupingParser(alt); }
        ;
}
