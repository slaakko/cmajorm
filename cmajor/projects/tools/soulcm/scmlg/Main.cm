using System;
using System.Collections;
using System.IO;

// this file has been semiautomatically generated from 'D:/work/soulngcm/soulngcm/sngcmlg/Main.cpp' using cpp2cm version 1.0.0

public void PrintUsage()
{
    Console.Out() << "Soul CM Lexer Generator version " << soulcm.scmlg.LexerGeneratorVersionStr() << endl();
    Console.Out() << "Usage: scmlg [options] <file.lexer>" << endl();
    Console.Out() << "Options:" << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "  Print help and exit." << endl();
    Console.Out() << "--verbose | -v" << endl();
    Console.Out() << "  Be verbose." << endl();
    Console.Out() << "--debug | -d" << endl();
    Console.Out() << "  Print character class partition to stdout" << endl();
    Console.Out() << "--use-ascii-identifier-classes | -a" << endl();
    Console.Out() << "  Use ASCII identifier classes." << endl();
    Console.Out() << "  By default uses Unicode identifier classes." << endl();
    Console.Out() << "--no-identifier-classes | -n" << endl();
    Console.Out() << "  No predefined identifier classes" << endl();
}
public int main(int argc, const char** argv)
{
    try
    {
        bool verbose = false;
        bool debug = false;
        soulcm.scmlg.IdentifierClassKind identifierClassKind = soulcm.scmlg.IdentifierClassKind.unicode;
        string fileName;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintUsage();
                    return 1;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else if (arg == "--debug")
                {
                    debug = true;
                }
                else if (arg == "--use-ascii-identifier-classes")
                {
                    identifierClassKind = soulcm.scmlg.IdentifierClassKind.ascii;
                }
                else if (arg == "--no-identifier-classes")
                {
                    identifierClassKind = soulcm.scmlg.IdentifierClassKind.none;
                }
                else
                {
                    throw Exception("unknown option \'" + arg + "\'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                if (options.IsEmpty())
                {
                    throw Exception("unknown option \'-" + arg + "\'");
                }
                for (char o : options)
                {
                    if (o == 'h')
                    {
                        PrintUsage();
                        return 1;
                    }
                    else if (o == 'v')
                    {
                        verbose = true;
                    }
                    else if (o == 'd')
                    {
                        debug = true;
                    }
                    else if (o == 'a')
                    {
                        identifierClassKind = soulcm.scmlg.IdentifierClassKind.ascii;
                    }
                    else if (o == 'n')
                    {
                        identifierClassKind = soulcm.scmlg.IdentifierClassKind.none;
                    }
                    else
                    {
                        throw Exception("unknown option \'-" + string(o, 1) + "\'");
                    }
                }
            }
            else
            {
                fileName = GetFullPath(arg);
            }
        }
        if (fileName.IsEmpty())
        {
            PrintUsage();
            return 1;
        }
        if (verbose)
        {
            Console.Out() << "> " << fileName << endl();
        }
        string s = File.ReadAllText(fileName);
        ustring content = ToUtf32(s);
        LexerFileLexer lexer(content, fileName, 0);
        ParsingContext ctx;
        UniquePtr<soulcm.scmlg.LexerFile> lexerFile = LexerFileParser.Parse(lexer, &ctx);
        soulcm.scmlg.LexerContext lexerContext(identifierClassKind);
        lexerContext.SetFileName(fileName);
        soulcm.scmlg.RegularExpressionParser regularExpressionParser;
        lexerContext.SetParser(&regularExpressionParser);
        string root = Path.GetDirectoryName(fileName);
        lexerFile->Process(root, verbose, debug, lexerContext);
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
