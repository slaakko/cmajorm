// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

using Cm.Ast;
using LexerFileTokens;

parser LexerFileParser
{
    uselexer LexerFileLexer;

    using IdentifierParser.Identifier;
    using IdentifierParser.QualifiedId;
    using TypeExprParser.TypeExpr;
    using StatementParser.CompoundStatement;

    main;

    LexerFile(var UniquePtr<soulcm.scmlg.LexerFile> lexerFile, ParsingContext* parsingContext) : soulcm.scmlg.LexerFile*
        ::= empty{ lexerFile.Reset(new soulcm.scmlg.LexerFile()); }
        (
            (Declaration(parsingContext):declaration{ lexerFile->Add(declaration); })*
        )
        {
            return lexerFile.Release();
        }
        ;

    Declaration(ParsingContext* parsingContext) : soulcm.scmlg.Declaration*
        ::= ClassMap:classMapDeclaration{ return classMapDeclaration; }
        |   Usings:usingDeclarations{ return usingDeclarations; }
        |   Tokens:tokensDeclaration{ return tokensDeclaration; }
        |   Keywords:keywordsDeclaration{ return keywordsDeclaration; }
        |   Expressions:expressionsDeclaration{ return expressionsDeclaration; }
        |   Lexer(parsingContext):lexerDeclaration{ return lexerDeclaration; }
        ;

    ClassMap(var ustring classMapName) : soulcm.scmlg.ClassMap*
        ::= CLASSMAP ID!{ classMapName = lexer.GetMatch(span); } SEMICOLON!{ return new soulcm.scmlg.ClassMap(classMapName); }
        ;

    Usings(var UniquePtr<soulcm.scmlg.Usings> usings) : soulcm.scmlg.Usings*
        ::= empty{ usings.Reset(new soulcm.scmlg.Usings()); } UsingDirectives(usings.Get()):usingDirectives{ return usings.Release(); }
        ;

    UsingDirectives(soulcm.scmlg.Usings* usings)
        ::= UsingDirective(usings):usingDirective+
        ;

    UsingDirective(soulcm.scmlg.Usings* usings)
        ::= UsingAliasDirective:usingAlias{ usings->AddMember(usingAlias); }
        |   UsingNamespaceDirective:usingNs{ usings->AddMember(usingNs); }
        ;

    UsingAliasDirective(var Span s) : Node*
        ::= USING{ s = span; } Identifier:id ASSIGN QualifiedId:qid! SEMICOLON!
        {
            s.end = span.end;
            return new AliasNode(s, id, qid);
        }
        ;

    UsingNamespaceDirective(var Span s) : Node*
        ::= USING{ s = span; } QualifiedId:ns! SEMICOLON!
        {
            s.end = span.end;
            return new NamespaceImportNode(s, ns);
        }
        ;

    Tokens(var ustring tokensDeclarationName, var UniquePtr<soulcm.scmlg.Tokens> tokens) : soulcm.scmlg.Tokens*
        ::= TOKENS ID!{ tokensDeclarationName = lexer.GetMatch(span); } LBRACE!{ tokens.Reset(new soulcm.scmlg.Tokens(tokensDeclarationName)); }
            (Token:token{ tokens->Add(token); } % COMMA)? RBRACE!
        {
            return tokens.Release();
        }
        ;

    Token(var ustring tokenName, var ustring tokenInfo) : soulcm.scmlg.Token
        ::= LPAREN ID!{ tokenName = lexer.GetMatch(span); } COMMA! STRINGLIT!{ tokenInfo = soulcm.scmlg.MakeStrValue(lexer.FileName(), lexer.GetToken(pos)); } RPAREN!
        {
            return soulcm.scmlg.Token(tokenName, ToUtf8(tokenInfo));
        }
        ;

    Keywords(var ustring keywordsDeclarationName, var UniquePtr<soulcm.scmlg.Keywords> keywords) : soulcm.scmlg.Keywords*
        ::= KEYWORDS ID!{ keywordsDeclarationName = lexer.GetMatch(span); } LBRACE!{ keywords.Reset(new soulcm.scmlg.Keywords(keywordsDeclarationName)); }
            (Keyword:keyword{ keywords->Add(keyword); } % COMMA)? RBRACE!
        {
            return keywords.Release();
        }
        ;

    Keyword(var ustring kw, var ustring tokenName) : soulcm.scmlg.Keyword*
        ::= LPAREN STRINGLIT!{ kw = soulcm.scmlg.MakeStrValue(lexer.FileName(), lexer.GetToken(pos)); } COMMA! ID!{ tokenName = lexer.GetMatch(span); } RPAREN!
        {
            return new soulcm.scmlg.Keyword(kw, tokenName);
        }
        ;

    Expressions(var int index, var UniquePtr<soulcm.scmlg.Expressions> expressions) : soulcm.scmlg.Expressions*
        ::= EXPRESSIONS{ index = 0; expressions.Reset(new soulcm.scmlg.Expressions()); } LBRACE!
            (Expression(index):expr{ expressions->Add(expr); index = index + 1; })* RBRACE!
        {
            return expressions.Release();
        }
        ;

    Expression(int index, var ustring exprName, var int line) : soulcm.scmlg.Expression*
        ::= ID{ exprName = lexer.GetMatch(span); } ASSIGN ExprString:exprValue!{ line = lexer.GetToken(pos).line; } SEMICOLON!
        {
            return new soulcm.scmlg.Expression(index, exprName, exprValue, line);
        }
        ;

    ExprString : ustring
        ::= STRINGLIT{ return soulcm.scmlg.MakeExprStringValue(lexer.FileName(), lexer.GetToken(pos)); }
        ;

    Lexer(ParsingContext* parsingContext, var ustring lexerDeclarationName, var UniquePtr<soulcm.scmlg.Lexer> currentLexer) : soulcm.scmlg.Lexer*
        ::= LEXER ID!{ lexerDeclarationName = lexer.GetMatch(span); } LBRACE!{ currentLexer.Reset(new soulcm.scmlg.Lexer(u"", lexerDeclarationName)); }
            (LexerClause(currentLexer.Get(), parsingContext):lexerClause)* RBRACE!
        {
            return currentLexer.Release();
        }
        ;

    LexerClause(soulcm.scmlg.Lexer* currentLexer, ParsingContext* parsingContext, var int line)
        ::= (ExprString:expr{ line = lexer.GetToken(pos).line; } Action:action CompoundStatement(parsingContext):stmt!){ currentLexer->AddStatement(new soulcm.scmlg.LexerStatement(expr, stmt, action, line)); }
        |   Variables(currentLexer, parsingContext):variables
        |   Actions(currentLexer, parsingContext):actions
        ;

    Variables(soulcm.scmlg.Lexer* currentLexer, ParsingContext* parsingContext)
        ::= VARIABLES LBRACE! (Variable(parsingContext):variable{ currentLexer->AddVariable(variable); })* RBRACE!
        ;

    Variable(ParsingContext* parsingContext, var ustring name) : soulcm.scmlg.Variable*
        ::= TypeExpr(parsingContext):type ID{ name = lexer.GetMatch(span); } SEMICOLON{ return new soulcm.scmlg.Variable(type, name); }
        ;

    Actions(soulcm.scmlg.Lexer* currentLexer, ParsingContext* parsingContext)
        ::= ACTIONS LBRACE! ((Action:action{ pass = action != -1; } ASSIGN CompoundStatement(parsingContext):stmt!){ currentLexer->AddAction(new soulcm.scmlg.Action(action, stmt)); })* RBRACE!
        ;

    Action(var int actionId) : int
        ::= (DOLLAR LPAREN! INTLIT!{ actionId = soulcm.scmlg.MakeActionIntValue(lexer.FileName(), lexer.GetToken(pos)); } RPAREN!){ return actionId; }
        |   empty{ return -1; }
        ;

    ruleinfo
    {
        (LexerFile, "lexer file"), (Declaration, "lexer file declaration"), (ClassMap, "class map declaration"), (Tokens, "tokens declaration"), (Token, "token declaration"),
        (Keywords, "keywords declaration"), (Keyword, "keyword declaration"), (Expressions, "regular expressions declaration"),
        (Expression, "regular expression declaration"), (ExprString, "regular expression string"), (Lexer, "lexer declaration"), (LexerClause, "lexer clause"),
        (Variables, "variables"), (Variable, "variable"), (Actions, "actions"), (Action, "action identifier")
    }
}
