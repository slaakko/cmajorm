using System;
using System.Collections;
using System.Lex;
using System.Parsing;
using System.Cmajor.Ast;
using LexerFileTokens;

public static class BasicTypeParser
{
    public static Match BasicType(LexerFileLexer& lexer)
    {
        #if (DEBUG)
            Span debugSpan;
            bool writeToLog = lexer.Log() != null;
            if (writeToLog)
            {
                debugSpan = lexer.GetSpan();
                System.Lex.WriteBeginRuleToLog(lexer, u"BasicType");
            }
        #endif
        Match match(false);
        long pos = lexer.GetPos();
        Span span = lexer.GetSpan();
        switch (*lexer)
        {
            case BOOL: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new BoolNode(span));
                }
                break;
            }
            case SBYTE: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new SByteNode(span));
                }
                break;
            }
            case BYTE: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new ByteNode(span));
                }
                break;
            }
            case SHORT: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new ShortNode(span));
                }
                break;
            }
            case USHORT: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new UShortNode(span));
                }
                break;
            }
            case INT: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new IntNode(span));
                }
                break;
            }
            case UINT: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new UIntNode(span));
                }
                break;
            }
            case LONG: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new LongNode(span));
                }
                break;
            }
            case ULONG: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new ULongNode(span));
                }
                break;
            }
            case FLOAT: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new FloatNode(span));
                }
                break;
            }
            case DOUBLE: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new DoubleNode(span));
                }
                break;
            }
            case CHAR: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new CharNode(span));
                }
                break;
            }
            case WCHAR: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new WCharNode(span));
                }
                break;
            }
            case UCHAR: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new UCharNode(span));
                }
                break;
            }
            case VOID: 
            {
                ++lexer;
                {
                    #if (DEBUG)
                        if (writeToLog) System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                    #endif
                    return Match(true, new VoidNode(span));
                }
                break;
            }
        }
        #if (DEBUG)
            if (writeToLog)
            {
                if (match.hit)
                {
                    System.Lex.WriteSuccessToLog(lexer, debugSpan, u"BasicType");
                }
                else
                {
                    System.Lex.WriteFailureToLog(lexer, u"BasicType");
                }
            }
        #endif
        return match;
    }
}
