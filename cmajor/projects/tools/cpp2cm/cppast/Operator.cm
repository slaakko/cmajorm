using System;

namespace cppast
{
    public enum Operator
    {
        arrayNew, arrayDelete, new_, delete_,
        assign, mulAssign, divAssign, remAssign, addAssign, subAssign, shiftRightAssign, shiftLeftAssign, andAssign, xorAssign, orAssign,
        inc, dec, shiftLeft, shiftRight, logicalAnd, logicalOr, equal, notEqual, lessOrEqual, greaterOrEqual, dotStar, arrowStar, arrow, apply, subscript, less, greater, 
        add, sub, mul, div, rem, xor, and_, or_, neg, not_, comma, deref, addrOf, unaryPlus, unaryMinus
    }
    
    public nothrow ustring OpName(Operator op)
    {
        switch (op)
        {
            case Operator.arrayNew: return u"arrayNew";
            case Operator.arrayDelete: return u"arrayDelete";
            case Operator.new_: return u"new";
            case Operator.delete_: return u"delete";
            case Operator.assign: return u"assign";
            case Operator.mulAssign: return u"mulAssign";
            case Operator.divAssign: return u"divAssign";
            case Operator.remAssign: return u"remAssign";
            case Operator.addAssign: return u"addAssign";
            case Operator.subAssign: return u"subAssign";
            case Operator.shiftRightAssign: return u"shiftRightAssign";
            case Operator.shiftLeftAssign: return u"shiftLeftAssign";
            case Operator.andAssign: return u"andAssign";
            case Operator.xorAssign: return u"xorAssign";
            case Operator.orAssign: return u"orAssign";
            case Operator.inc: return u"inc";
            case Operator.dec: return u"dec";
            case Operator.shiftLeft: return u"shiftLeft";
            case Operator.shiftRight: return u"shiftRight";
            case Operator.logicalAnd: return u"logicalAnd";
            case Operator.logicalOr: return u"logicalOr";
            case Operator.equal: return u"equal";
            case Operator.notEqual: return u"notEqual";
            case Operator.lessOrEqual: return u"lessOrEqual";
            case Operator.greaterOrEqual: return u"greaterOrEqual";
            case Operator.dotStar: return u"dotStar";
            case Operator.arrowStar: return u"arrowStar"; 
            case Operator.arrow: return u"arrow";
            case Operator.apply: return u"apply";
            case Operator.subscript: return u"subscript";
            case Operator.less: return u"less";
            case Operator.greater: return u"greater";
            case Operator.add: return u"add";
            case Operator.sub: return u"sub";
            case Operator.mul: return u"mul";
            case Operator.div: return u"div";
            case Operator.rem: return u"rem";
            case Operator.xor: return u"xor";
            case Operator.and_: return u"and";
            case Operator.or_: return u"or";
            case Operator.neg: return u"neg";
            case Operator.not_: return u"not";
            case Operator.comma: return u"comma";
            case Operator.deref: return u"deref";
            case Operator.addrOf: return u"addrOf";
            case Operator.unaryPlus: return u"unaryPlus";
            case Operator.unaryMinus: return u"unaryMinus";
        }
        return u"OPERATOR";
    }
}
