using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace cppast
{
    public class TemplateParameterNode : Node
    {
        public nothrow TemplateParameterNode(const Span& span_, IdentifierNode* id_, Node* defaultTemplateArgument_) : base(span_), id(id_), defaultTemplateArgument(defaultTemplateArgument_)
        {
            id->parent = this;
            if (!defaultTemplateArgument.IsNull())
            {
                defaultTemplateArgument->parent = this;
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<IdentifierNode> id;
        public UniquePtr<Node> defaultTemplateArgument;
    }
    
    public class TemplateDeclarationNode : Node
    {
        public nothrow TemplateDeclarationNode(const Span& span_) : base(span_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public void AddTemplateParameter(Node* templateParameterNode)
        {
            templateParameterNode->parent = this;
            templateParameters.Add(UniquePtr<Node>(templateParameterNode)); 
        }
        public void SetDeclaration(Node* declaration_)
        {
            declaration.Reset(declaration_);
            declaration->parent = this;
        }
        public List<UniquePtr<Node>> templateParameters;
        public UniquePtr<Node> declaration;
    }
    
    public class ExplicitInstantiationNode : Node
    {
        public nothrow ExplicitInstantiationNode(const Span& span_, Node* declaration_) : base(span_), declaration(declaration_)
        {
            declaration->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> declaration;
    }
    
    public class ExplicitSpecializationNode : Node
    {
        public nothrow ExplicitSpecializationNode(const Span& span_, Node* declaration_) : base(span_), declaration(declaration_)
        {
            declaration->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> declaration;
    }
}
