using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace cppast
{
    public enum EnumKey
    {
        enum_, enumClass, enumStruct
    }
    
    public nothrow ustring EnumKeyStr(EnumKey enumKey)
    {
        switch (enumKey)
        {
            case EnumKey.enum_: return u"enum";
            case EnumKey.enumClass: return u"enumClass";
            case EnumKey.enumStruct: return u"enumStruct";
        }
        return u"ENUM_KEY";
    }
    
    public class EnumTypeNode : CompositeNode<EnumeratorNode>
    {
        public nothrow EnumTypeNode(const Span& span_, EnumKey enumKey_, Node* enumName_, Node* enumBase_) :
            base(span_), enumKey(enumKey_), enumName(enumName_), enumBase(enumBase_)
        {
            enumName->parent = this;
            if (!enumBase.IsNull())
            {
                enumBase->parent = this;
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public EnumKey enumKey;
        public UniquePtr<Node> enumName;
        public UniquePtr<Node> enumBase;
    }
    
    public class EnumeratorNode : Node
    {
        public nothrow EnumeratorNode(const Span& span_, IdentifierNode* id_, Node* value_) : base(span_), id(id_), value(value_)
        {
            id->parent = this;
            if (!value.IsNull())
            {
                value->parent = this;
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<IdentifierNode> id;
        public UniquePtr<Node> value;
    }
}
