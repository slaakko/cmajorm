using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace cppast
{
    public class IdentifierNode : Node
    {
        public nothrow IdentifierNode(const Span& span_, const ustring& str_) : base(span_), str(str_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public ustring str;
    }
    
    public class ColonColonNode : BinaryNode
    {
        public nothrow ColonColonNode(const Span& span_, Node* left_, Node* right_) : base(span_, left_, right_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class DotNode : BinaryNode
    {
        public nothrow DotNode(const Span& span_, Node* left_, Node* right_) : base(span_, left_, right_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class ArrowNode : BinaryNode
    {
        public nothrow ArrowNode(const Span& span_, Node* left_, Node* right_) : base(span_, left_, right_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class TemplateIdNode : CompositeNode<Node>
    {
        public nothrow TemplateIdNode(const Span& span_, IdentifierNode* id_) : base(span_), id(id_)
        {
            id->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<IdentifierNode> id;
    }
    
    public class FunctionPtrIdNode : UnaryNode
    {
        public nothrow FunctionPtrIdNode(const Span& span_, IdentifierNode* id_) : base(span_, id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class MemberFunctionPtrIdNode : BinaryNode
    {
        public nothrow MemberFunctionPtrIdNode(const Span& span_, Node* nestedNameSpecifier_, IdentifierNode* id_) : base(span_, nestedNameSpecifier_, id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OperatorFunctionIdNode: Node
    {
        public nothrow OperatorFunctionIdNode(const Span& span_, Operator op_) : base(span_), op(op_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public Operator op;
    }
    
    public class ConversionFunctionIdNode : UnaryNode
    {
        public nothrow ConversionFunctionIdNode(const Span& span_, Node* typeExpr_) : base(span_, typeExpr_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class DestructorIdNode : UnaryNode
    {
        public nothrow DestructorIdNode(const Span& span_, IdentifierNode* id_) : base(span_, id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    internal class NodeStringComputer : Visitor
    {
        public nothrow NodeStringComputer(Node* node)
        {
            if (node == null)
            {
                nodeString = "null";
            }
            else
            {
                node->Accept(*this);
                if (nodeString.IsEmpty())
                {
                    nodeString = typename(*node);
                }
            }
        }
        public override void Visit(SimpleTypeNode& simpleTypeNode) 
        {
            nodeString.Append(ToUtf8(SimpleTypeSpecifierStr(simpleTypeNode.simpleTypeSpecifiers)));
        }
        public override void Visit(IdentifierNode& identifierNode)
        {
            nodeString.Append(ToUtf8(identifierNode.str));
        }
        public override void Visit(ColonColonNode& colonColonNode)
        {
            if (!colonColonNode.left.IsNull())
            {
                colonColonNode.left->Accept(*this);
            }            
            nodeString.Append("::");
            colonColonNode.right->Accept(*this);
        }
        public override void Visit(DotNode& dotNode)
        {
            dotNode.left->Accept(*this);
            nodeString.Append('.');
            dotNode.right->Accept(*this);
        }
        public override void Visit(ArrowNode& arrowNode)
        {
            arrowNode.left->Accept(*this);
            nodeString.Append("->");
            arrowNode.right->Accept(*this);
        }
        public override void Visit(TemplateIdNode& templateIdNode)
        {
            templateIdNode.id->Accept(*this);
            nodeString.Append('<');
            bool first = true;
            for (const UniquePtr<Node>& node : templateIdNode.nodes)
            {
                if (first)
                {
                    first = false; 
                }                
                else
                {
                    nodeString.Append(", ");
                }
                node->Accept(*this);
            }
            nodeString.Append('>');
        }
        public override void Visit(ConstNode& constNode) 
        {
            nodeString.Append("const ");
            constNode.child->Accept(*this);
        }
        public override void Visit(VolatileNode& volatileNode) 
        {
            nodeString.Append("volatile ");
            volatileNode.child->Accept(*this);
        }
        public override void Visit(PointerNode& pointerNode) 
        {
            pointerNode.child->Accept(*this);
            nodeString.Append('*');
        }
        public override void Visit(RvalueRefNode& rvalueRefNode) 
        {
            rvalueRefNode.child->Accept(*this);
            nodeString.Append("&&");
        }
        public override void Visit(LvalueRefNode& lvalueRefNode) 
        {
            lvalueRefNode.child->Accept(*this);
            nodeString.Append('&');
        }
        public override void Visit(ArrayTypeNode& arrayTypeNode) 
        {
            arrayTypeNode.left->Accept(*this);
            nodeString.Append('[');
            if (!arrayTypeNode.right.IsNull())
            {
                arrayTypeNode.right->Accept(*this);
            }
            nodeString.Append(']');
        }
        public override void Visit(FunctionPtrIdNode& functionPtrIdNode)
        {
            nodeString.Append('*');
            functionPtrIdNode.child->Accept(*this);
        }
        public override void Visit(MemberFunctionPtrIdNode& memberFunctionPtrIdNode)
        {
            memberFunctionPtrIdNode.left->Accept(*this);
            nodeString.Append('*');
            memberFunctionPtrIdNode.right->Accept(*this);
        }
        public override void Visit(DestructorIdNode& destructorIdNode)
        {
            nodeString.Append('~');
            destructorIdNode.child->Accept(*this);
        }
        public string nodeString;
    }
    
    public string MakeNodeString(Node* node)
    {
        NodeStringComputer computer(node);
        return Rvalue(computer.nodeString);
    }
    
    public nothrow bool HasTemplateIdNodeParent(Node* node)
    {
        if (node->parent != null)
        {
            if (node->parent is TemplateIdNode*)
            {
                return true;
            }
            else if (HasTemplateIdNodeParent(node->parent))
            {
                return true;
            }
        }
        return false;
    }    
    
}
