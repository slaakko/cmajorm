using System;
using System.Collections;
using System.Dom;

namespace cppast
{
    public class XmlGeneratorVisitor : Visitor
    {
        public override void Visit(CompileUnitNode& compileUnitNode)
        {
            compileUnitElement.Reset(new DomElement(u"compileUnit"));
            compileUnitElement->SetAttribute(u"fileName", ToUtf32(compileUnitNode.fileName));
            currentElement = compileUnitElement.Get();
            for (const UniquePtr<SourceFileNode>& sourceFileNode : compileUnitNode.nodes)
            {
                sourceFileNode->Accept(*this);
            }
        }
        public override void Visit(SourceFileNode& sourceFileNode) 
        {
            UniquePtr<DomElement> sourceFileElement = new DomElement(u"sourceFile");
            sourceFileElement->SetAttribute(u"fileName", ToUtf32(sourceFileNode.fileName));
            DomElement* prevElement = currentElement;
            currentElement = sourceFileElement.Get();
            for (const UniquePtr<Node>& node : sourceFileNode.nodes)
            {
                node->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(sourceFileElement.Release()));
        }
        public override void Visit(TemplateDeclarationNode& templateDeclarationNode) 
        {
            UniquePtr<DomElement> templateElement(new DomElement(u"template"));
            DomElement* prevElement = currentElement;
            currentElement = templateElement.Get();
            {            
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> templateParametersElement(new DomElement(u"templateParameters"));
                currentElement = templateParametersElement.Get();
                for (const UniquePtr<Node>& templateParameterNode : templateDeclarationNode.templateParameters)
                {
                    templateParameterNode->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(templateParametersElement.Release()));
            }
            templateDeclarationNode.declaration->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(templateElement.Release()));
        }
        public override void Visit(TemplateParameterNode& templateParameterNode) 
        {
            UniquePtr<DomElement> templateParameterElement(new DomElement(u"templateParameter"));
            DomElement* prevElement = currentElement;
            currentElement = templateParameterElement.Get();
            templateParameterNode.id->Accept(*this);
            if (!templateParameterNode.defaultTemplateArgument.IsNull())
            {
                templateParameterNode.defaultTemplateArgument->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(templateParameterElement.Release()));
        }
        public override void Visit(ExplicitInstantiationNode& explicitInstantiationNode) 
        {
            UniquePtr<DomElement> explicitInstantiationElement(new DomElement(u"explicitInstantiation"));
            DomElement* prevElement = currentElement;
            currentElement = explicitInstantiationElement.Get();
            explicitInstantiationNode.declaration->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(explicitInstantiationElement.Release()));
        }
        public override void Visit(ExplicitSpecializationNode& explicitSpecializationNode) 
        {
            UniquePtr<DomElement> explicitSpecializationElement(new DomElement(u"explicitSpecialization"));
            DomElement* prevElement = currentElement;
            currentElement = explicitSpecializationElement.Get();
            explicitSpecializationNode.declaration->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(explicitSpecializationElement.Release()));
        }
        public override void Visit(FloatingLiteralNode& floatingLiteralNode) 
        {
            UniquePtr<DomElement> floatingLiteralElement(new DomElement(u"floatingLiteral"));
            floatingLiteralElement->SetAttribute(u"line", ToUtf32(ToString(floatingLiteralNode.span.lineNumber)));
            floatingLiteralElement->SetAttribute(u"rep", floatingLiteralNode.strValue);
            floatingLiteralElement->SetAttribute(u"value", ToUtf32(ToString(floatingLiteralNode.val)));
            currentElement->AppendChild(UniquePtr<DomNode>(floatingLiteralElement.Release()));
        }
        public override void Visit(IntegerLiteralNode& integerLiteralNode) 
        {
            UniquePtr<DomElement> integerLiteralElement(new DomElement(u"integerLiteral"));
            integerLiteralElement->SetAttribute(u"line", ToUtf32(ToString(integerLiteralNode.span.lineNumber)));
            integerLiteralElement->SetAttribute(u"rep", integerLiteralNode.strValue);
            integerLiteralElement->SetAttribute(u"value", ToUtf32(ToString(integerLiteralNode.val)));
            currentElement->AppendChild(UniquePtr<DomNode>(integerLiteralElement.Release()));
        }
        public override void Visit(CharacterLiteralNode& characterLiteralNode) 
        {
            UniquePtr<DomElement> characterLiteralElement(new DomElement(u"characterLiteral"));
            characterLiteralElement->SetAttribute(u"line", ToUtf32(ToString(characterLiteralNode.span.lineNumber)));
            characterLiteralElement->SetAttribute(u"rep", characterLiteralNode.strValue);
            characterLiteralElement->SetAttribute(u"value", ToUtf32(ToString(characterLiteralNode.val)));
            currentElement->AppendChild(UniquePtr<DomNode>(characterLiteralElement.Release()));
        }
        public override void Visit(StringLiteralNode& stringLiteralNode) 
        {
            UniquePtr<DomElement> stringLiteralElement(new DomElement(u"stringLiteral"));
            stringLiteralElement->SetAttribute(u"line", ToUtf32(ToString(stringLiteralNode.span.lineNumber)));
            stringLiteralElement->SetAttribute(u"rep", stringLiteralNode.strValue);
            stringLiteralElement->SetAttribute(u"value", stringLiteralNode.val);
            currentElement->AppendChild(UniquePtr<DomNode>(stringLiteralElement.Release()));
        }
        public override void Visit(BooleanLiteralNode& booleanLiteralNode) 
        {
            UniquePtr<DomElement> booleanLiteralElement(new DomElement(u"booleanLiteral"));
            booleanLiteralElement->SetAttribute(u"line", ToUtf32(ToString(booleanLiteralNode.span.lineNumber)));
            booleanLiteralElement->SetAttribute(u"rep", booleanLiteralNode.strValue);
            booleanLiteralElement->SetAttribute(u"value", ToUtf32(ToString(booleanLiteralNode.val)));
            currentElement->AppendChild(UniquePtr<DomNode>(booleanLiteralElement.Release()));
        }
        public override void Visit(PointerLiteralNode& pointerLiteralNode) 
        {
            UniquePtr<DomElement> pointerLiteralElement(new DomElement(u"pointerLiteral"));
            pointerLiteralElement->SetAttribute(u"line", ToUtf32(ToString(pointerLiteralNode.span.lineNumber)));
            pointerLiteralElement->SetAttribute(u"rep", pointerLiteralNode.strValue);
            currentElement->AppendChild(UniquePtr<DomNode>(pointerLiteralElement.Release()));
        }
        public override void Visit(SimpleTypeNode& simpleTypeNode) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"simpleTypeSpecifiers", SimpleTypeSpecifierStr(simpleTypeNode.simpleTypeSpecifiers));
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(IdentifierNode& identifierNode) 
        {
            UniquePtr<DomElement> idElement(new DomElement(u"identifier"));
            idElement->SetAttribute(u"line", ToUtf32(ToString(identifierNode.span.lineNumber)));
            idElement->SetAttribute(u"name", identifierNode.str);
            currentElement->AppendChild(UniquePtr<DomNode>(idElement.Release()));
        }
        public override void Visit(ColonColonNode& colonColonNode) 
        {
            UniquePtr<DomElement> colonColonElement(new DomElement(u"colonColon"));
            DomElement* prevElement = currentElement;
            currentElement = colonColonElement.Get();
            if (colonColonNode.left.IsNull())
            {
                currentElement->AppendChild(UniquePtr<DomNode>(new DomElement(u"@global")));
            }
            else
            {
                colonColonNode.left->Accept(*this);
            }            
            colonColonNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(colonColonElement.Release()));
        }
        public override void Visit(DotNode& dotNode) 
        {
            UniquePtr<DomElement> dotElement(new DomElement(u"dot"));
            DomElement* prevElement = currentElement;
            currentElement = dotElement.Get();
            dotNode.left->Accept(*this);
            dotNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(dotElement.Release()));
        }
        public override void Visit(ArrowNode& arrowNode) 
        {
            UniquePtr<DomElement> arrowElement(new DomElement(u"arrow"));
            DomElement* prevElement = currentElement;
            currentElement = arrowElement.Get();
            arrowNode.left->Accept(*this);
            arrowNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(arrowElement.Release()));
        }
        public override void Visit(TemplateIdNode& templateIdNode) 
        {
            UniquePtr<DomElement> templateIdElement(new DomElement(u"templateId"));
            DomElement* prevElement = currentElement;
            currentElement = templateIdElement.Get();
            templateIdNode.id->Accept(*this);
            {            
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> templateArgumentsElement(new DomElement(u"templateArguments"));
                currentElement = templateArgumentsElement.Get();
                for (const UniquePtr<Node>& templateArgumentNode : templateIdNode.nodes)
                {
                    templateArgumentNode->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(templateArgumentsElement.Release()));
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(templateIdElement.Release()));
        }
        public override void Visit(ConstNode& constNode) 
        {
            UniquePtr<DomElement> constElement(new DomElement(u"const"));
            DomElement* prevElement = currentElement;
            currentElement = constElement.Get();
            constNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(constElement.Release()));
        }
        public override void Visit(VolatileNode& volatileNode) 
        {
            UniquePtr<DomElement> volatileElement(new DomElement(u"volatile"));
            DomElement* prevElement = currentElement;
            currentElement = volatileElement.Get();
            volatileNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(volatileElement.Release()));
        }
        public override void Visit(PointerNode& pointerNode) 
        {
            UniquePtr<DomElement> pointerElement(new DomElement(u"pointer"));
            DomElement* prevElement = currentElement;
            currentElement = pointerElement.Get();
            pointerNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(pointerElement.Release()));
        }
        public override void Visit(RvalueRefNode& rvalueRefNode) 
        {
            UniquePtr<DomElement> rvalueRefElement(new DomElement(u"rvalueRef"));
            DomElement* prevElement = currentElement;
            currentElement = rvalueRefElement.Get();
            rvalueRefNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(rvalueRefElement.Release()));
        }
        public override void Visit(LvalueRefNode& lvalueRefNode) 
        {
            UniquePtr<DomElement> lvalueRefElement(new DomElement(u"lvalueRef"));
            DomElement* prevElement = currentElement;
            currentElement = lvalueRefElement.Get();
            lvalueRefNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(lvalueRefElement.Release()));
        }
        public override void Visit(ArrayTypeNode& arrayTypeNode) 
        {
            UniquePtr<DomElement> arrayElement(new DomElement(u"array"));
            DomElement* prevElement = currentElement;
            currentElement = arrayElement.Get();
            arrayTypeNode.left->Accept(*this);
            if (!arrayTypeNode.right.IsNull())
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> sizeElement(new DomElement(u"size"));
                currentElement = sizeElement.Get();
                arrayTypeNode.right->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(sizeElement.Release()));
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(arrayElement.Release()));
        }
        public override void Visit(OperatorFunctionIdNode& operatorFunctionIdNode) 
        {
            UniquePtr<DomElement> operatorFunctionElement(new DomElement(u"operatorFunction"));
            operatorFunctionElement->SetAttribute(u"op", OpName(operatorFunctionIdNode.op));
            currentElement->AppendChild(UniquePtr<DomNode>(operatorFunctionElement.Release()));
        }
        public override void Visit(ConversionFunctionIdNode& conversionFunctionIdNode) 
        {
            UniquePtr<DomElement> conversionFunctionElement(new DomElement(u"conversionFunction"));
            DomElement* prevElement = currentElement;
            currentElement = conversionFunctionElement.Get();
            conversionFunctionIdNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(conversionFunctionElement.Release()));
        }
        public override void Visit(FunctionPtrIdNode& functionPtrIdNode) 
        {
            UniquePtr<DomElement> functionPtrElement(new DomElement(u"functionPtr"));
            DomElement* prevElement = currentElement;
            currentElement = functionPtrElement.Get();
            functionPtrIdNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(functionPtrElement.Release()));
        }
        public override void Visit(MemberFunctionPtrIdNode& memberFunctionPtrIdNode) 
        {
            UniquePtr<DomElement> memberFunctionPtrElement(new DomElement(u"memberFunctionPtr"));
            DomElement* prevElement = currentElement;
            currentElement = memberFunctionPtrElement.Get();
            memberFunctionPtrIdNode.left->Accept(*this);
            memberFunctionPtrIdNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(memberFunctionPtrElement.Release()));
        }
        public override void Visit(DestructorIdNode& destructorIdNode) 
        {
            UniquePtr<DomElement> destructorElement(new DomElement(u"destructor"));
            DomElement* prevElement = currentElement;
            currentElement = destructorElement.Get();
            destructorIdNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(destructorElement.Release()));
        }
        public override void Visit(BinaryExpressionNode& binaryExpressionNode) 
        {
            UniquePtr<DomElement> binaryExpressionElement(new DomElement(u"binaryExpression"));
            binaryExpressionElement->SetAttribute(u"op", OpName(binaryExpressionNode.op));
            DomElement* prevElement = currentElement;
            currentElement = binaryExpressionElement.Get();
            if (binaryExpressionNode.left.IsNull())
            {
                throw Exception("left child of binaryExpression " + ToUtf8(OpName(binaryExpressionNode.op)) + " at line " + ToString(binaryExpressionNode.span.lineNumber) + " is null");
            }
            binaryExpressionNode.left->Accept(*this);
            if (binaryExpressionNode.right.IsNull())
            {
                throw Exception("right child of binaryExpression " + ToUtf8(OpName(binaryExpressionNode.op)) + " at line " + ToString(binaryExpressionNode.span.lineNumber) + " is null");
            }
            binaryExpressionNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(binaryExpressionElement.Release()));
        }
        public override void Visit(UnaryExpressionNode& unaryExpressionNode) 
        {
            UniquePtr<DomElement> unaryExpressionElement(new DomElement(u"unaryExpression"));
            unaryExpressionElement->SetAttribute(u"op", OpName(unaryExpressionNode.op));
            DomElement* prevElement = currentElement;
            currentElement = unaryExpressionElement.Get();
            unaryExpressionNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(unaryExpressionElement.Release()));
        }
        public override void Visit(ExpressionListNode& expressionListNode) 
        {
            UniquePtr<DomElement> expressionListElement(new DomElement(u"expressionList"));
            DomElement* prevElement = currentElement;
            currentElement = expressionListElement.Get();
            for (const UniquePtr<Node>& node : expressionListNode.nodes)
            {
                node->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(expressionListElement.Release()));
        }
        public override void Visit(ConditionalExpressionNode& conditionalExpressionNode) 
        {
            UniquePtr<DomElement> conditionalExpressionElement(new DomElement(u"conditionalExpression"));
            DomElement* prevElement = currentElement;
            currentElement = conditionalExpressionElement.Get();
            conditionalExpressionNode.expr->Accept(*this);
            conditionalExpressionNode.thenExpr->Accept(*this);
            conditionalExpressionNode.elseExpr->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(conditionalExpressionElement.Release()));
        }
        public override void Visit(ThrowExpressionNode& throwExpressionNode) 
        {
            UniquePtr<DomElement> throwExpressionElement(new DomElement(u"throwExpression"));
            DomElement* prevElement = currentElement;
            currentElement = throwExpressionElement.Get();
            throwExpressionNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(throwExpressionElement.Release()));
        }
        public override void Visit(CastExpressionNode& castExpressionNode) 
        {
            UniquePtr<DomElement> castExpressionElement(new DomElement(u"castExpression"));
            DomElement* prevElement = currentElement;
            currentElement = castExpressionElement.Get();
            castExpressionNode.left->Accept(*this);
            castExpressionNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(castExpressionElement.Release()));
        }
        public override void Visit(PrefixIncrementNode& prefixIncrementNode) 
        {
            UniquePtr<DomElement> prefixIncrementExpressionElement(new DomElement(u"prefixIncrementExpression"));
            DomElement* prevElement = currentElement;
            currentElement = prefixIncrementExpressionElement.Get();
            prefixIncrementNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(prefixIncrementExpressionElement.Release()));
        }
        public override void Visit(PrefixDecrementNode& prefixDecrementNode) 
        {
            UniquePtr<DomElement> prefixDecrementExpressionElement(new DomElement(u"prefixDecrementExpression"));
            DomElement* prevElement = currentElement;
            currentElement = prefixDecrementExpressionElement.Get();
            prefixDecrementNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(prefixDecrementExpressionElement.Release()));
        }
        public override void Visit(SizeOfExpressionNode& sizeOfExpressionNode) 
        {
            UniquePtr<DomElement> sizeOfExpressionElement(new DomElement(u"sizeOfExpression"));
            DomElement* prevElement = currentElement;
            currentElement = sizeOfExpressionElement.Get();
            sizeOfExpressionNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(sizeOfExpressionElement.Release()));
        }
        public override void Visit(AlignOfExpressionNode& alignOfExpressionNode) 
        {
            UniquePtr<DomElement> alignOfExpressionElement(new DomElement(u"alignOfExpression"));
            DomElement* prevElement = currentElement;
            currentElement = alignOfExpressionElement.Get();
            alignOfExpressionNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(alignOfExpressionElement.Release()));
        }
        public override void Visit(NewExpressionNode& newExpressionNode) 
        {
            UniquePtr<DomElement> newExpressionElement(new DomElement(u"newExpression"));
            DomElement* prevElement = currentElement;
            currentElement = newExpressionElement.Get();
            if (!newExpressionNode.placement.IsNull())
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> placementElement(new DomElement(u"placement"));
                currentElement = placementElement.Get();
                newExpressionNode.placement->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(placementElement.Release()));
            }
            newExpressionNode.typeExpr->Accept(*this);
            if (!newExpressionNode.initializer.IsNull())
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> initializerElement(new DomElement(u"initializer"));
                currentElement = initializerElement.Get();
                newExpressionNode.initializer->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(initializerElement.Release()));
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(newExpressionElement.Release()));
        }
        public override void Visit(DeleteExpressionNode& deleteExpressionNode) 
        {
            UniquePtr<DomElement> deleteExpressionElement(new DomElement(u"deleteExpression"));
            if (deleteExpressionNode.arrayDelete) deleteExpressionElement->SetAttribute(u"array", u"true");
            DomElement* prevElement = currentElement;
            currentElement = deleteExpressionElement.Get();
            deleteExpressionNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(deleteExpressionElement.Release()));
        }
        public override void Visit(SubscriptExpressionNode& subscriptExpressionNode) 
        {
            UniquePtr<DomElement> subscriptExpressionElement(new DomElement(u"subscriptExpression"));
            DomElement* prevElement = currentElement;
            currentElement = subscriptExpressionElement.Get();
            subscriptExpressionNode.left->Accept(*this);
            subscriptExpressionNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(subscriptExpressionElement.Release()));
        }
        public override void Visit(InvokeExpressionNode& invokeExpressionNode) 
        {
            UniquePtr<DomElement> invokeExpressionElement(new DomElement(u"invokeExpression"));
            DomElement* prevElement = currentElement;
            currentElement = invokeExpressionElement.Get();
            invokeExpressionNode.child->Accept(*this);
            if (invokeExpressionNode.args.IsNull())
            {
                throw Exception("argument list of invoke expression is null at line " + ToString(invokeExpressionNode.span.lineNumber));
            }
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> argumentsElement(new DomElement(u"arguments"));
                currentElement = argumentsElement.Get();
                invokeExpressionNode.args->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(argumentsElement.Release()));
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(invokeExpressionElement.Release()));
        }
        public override void Visit(PostfixIncrementNode& postfixIncrementNode) 
        {
            UniquePtr<DomElement> postfixIncrementExpressionElement(new DomElement(u"postfixIncrementExpression"));
            DomElement* prevElement = currentElement;
            currentElement = postfixIncrementExpressionElement.Get();
            postfixIncrementNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(postfixIncrementExpressionElement.Release()));
        }
        public override void Visit(PostfixDecrementNode& postfixDecrementNode) 
        {
            UniquePtr<DomElement> postfixDecrementExpressionElement(new DomElement(u"postfixDecrementExpression"));
            DomElement* prevElement = currentElement;
            currentElement = postfixDecrementExpressionElement.Get();
            postfixDecrementNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(postfixDecrementExpressionElement.Release()));
        }
        public override void Visit(AssignCapture& assignCapture) 
        {
            UniquePtr<DomElement> assignCaptureElement(new DomElement(u"assignCapture"));
            assignCaptureElement->SetAttribute(u"line", ToUtf32(ToString(assignCapture.span.lineNumber)));
            currentElement->AppendChild(UniquePtr<DomNode>(assignCaptureElement.Release()));
        }
        public override void Visit(RefCapture& refCapture) 
        {
            UniquePtr<DomElement> refCaptureElement(new DomElement(u"refCapture"));
            refCaptureElement->SetAttribute(u"line", ToUtf32(ToString(refCapture.span.lineNumber)));
            currentElement->AppendChild(UniquePtr<DomNode>(refCaptureElement.Release()));
        }
        public override void Visit(IdentifierCapture& identifierCapture) 
        {
            UniquePtr<DomElement> identifierCaptureElement(new DomElement(u"identifierCapture"));
            DomElement* prevElement = currentElement;
            currentElement = identifierCaptureElement.Get();
            identifierCapture.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(identifierCaptureElement.Release()));
        }
        public override void Visit(ThisCapture& thisCapture) 
        {
            UniquePtr<DomElement> thisCaptureElement(new DomElement(u"thisCapture"));
            thisCaptureElement->SetAttribute(u"line", ToUtf32(ToString(thisCapture.span.lineNumber)));
            currentElement->AppendChild(UniquePtr<DomNode>(thisCaptureElement.Release()));
        }
        public override void Visit(LambdaExpressionNode& lambdaExpressionNode) 
        {
            UniquePtr<DomElement> lambdaExpressionElement(new DomElement(u"lambdaExpression"));
            DomElement* prevElement = currentElement;
            currentElement = lambdaExpressionElement.Get();
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> capturesElement(new DomElement(u"captures"));
                currentElement = capturesElement.Get();
                for (const UniquePtr<Node>& capture : lambdaExpressionNode.captures)
                {
                    capture->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(capturesElement.Release()));
            }
            if (!lambdaExpressionNode.parameters.IsNull())
            {
                lambdaExpressionNode.parameters->Accept(*this);
            }
            lambdaExpressionNode.body->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(lambdaExpressionElement.Release()));
        }
        public override void Visit(ParenthesizedExpressionNode& parenthesizedExpressionNode) 
        {
            UniquePtr<DomElement> parenthesizedExpressionElement(new DomElement(u"parenthesizedExpression"));
            DomElement* prevElement = currentElement;
            currentElement = parenthesizedExpressionElement.Get();
            parenthesizedExpressionNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(parenthesizedExpressionElement.Release()));
        }
        public override void Visit(ThisNode& thisNode) 
        {
            UniquePtr<DomElement> thisElement(new DomElement(u"this"));
            thisElement->SetAttribute(u"line", ToUtf32(ToString(thisNode.span.lineNumber)));
            currentElement->AppendChild(UniquePtr<DomNode>(thisElement.Release()));
        }
        public override void Visit(CppCastNode& cppCastNode) 
        {
            UniquePtr<DomElement> cppCastExpressionElement(new DomElement(u"cppCastExpression"));
            cppCastExpressionElement->SetAttribute(u"kind", CppCastStr(cppCastNode.cast_));
            DomElement* prevElement = currentElement;
            currentElement = cppCastExpressionElement.Get();
            cppCastNode.typeExpr->Accept(*this);
            cppCastNode.expr->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(cppCastExpressionElement.Release()));
        }
        public override void Visit(TypeIdNode& typeIdNode)
        {
            UniquePtr<DomElement> typeIdElement(new DomElement(u"typeIdExpression"));
            DomElement* prevElement = currentElement;
            currentElement = typeIdElement.Get();
            typeIdNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(typeIdElement.Release()));
        }
        public override void Visit(DefinedNode& definedNode) 
        {
            UniquePtr<DomElement> definedElement(new DomElement(u"defined"));
            definedElement->SetAttribute(u"name", definedNode.identifier);
            currentElement->AppendChild(UniquePtr<DomNode>(definedElement.Release()));
        }
        public override void Visit(InitDeclaratorNode& initDeclaratorNode) 
        {
            UniquePtr<DomElement> initDeclaratorElement(new DomElement(u"initDeclarator"));
            DomElement* prevElement = currentElement;
            currentElement = initDeclaratorElement.Get();
            initDeclaratorNode.left->Accept(*this);
            initDeclaratorNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(initDeclaratorElement.Release()));
        }
        public override void Visit(ArrayDeclaratorNode& arrayDeclaratorNode) 
        {
            UniquePtr<DomElement> arrayDeclaratorElement(new DomElement(u"arrayDeclarator"));
            DomElement* prevElement = currentElement;
            currentElement = arrayDeclaratorElement.Get();
            arrayDeclaratorNode.left->Accept(*this);
            arrayDeclaratorNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(arrayDeclaratorElement.Release()));
        }
        public override void Visit(InitializerListNode& initializerListNode) 
        {
            UniquePtr<DomElement> initializerListElement(new DomElement(u"initializerList"));
            DomElement* prevElement = currentElement;
            currentElement = initializerListElement.Get();
            for (const UniquePtr<Node>& initializer : initializerListNode.nodes)
            {
                initializer->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(initializerListElement.Release()));
        }
        public override void Visit(BracedInitializerListNode& bracedInitializerListNode) 
        {
            UniquePtr<DomElement> bracedInitializerListElement(new DomElement(u"bracedInitializerList"));
            DomElement* prevElement = currentElement;
            currentElement = bracedInitializerListElement.Get();
            for (const UniquePtr<Node>& initializer : bracedInitializerListNode.nodes)
            {
                initializer->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(bracedInitializerListElement.Release()));
        }
        public override void Visit(AssignmentInitializerNode& assignmentInitializerNode) 
        {
            UniquePtr<DomElement> assignmentInitializerElement(new DomElement(u"assignmentInitializer"));
            DomElement* prevElement = currentElement;
            currentElement = assignmentInitializerElement.Get();
            assignmentInitializerNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(assignmentInitializerElement.Release()));
        }
        public override void Visit(FunctionNode& functionNode) 
        {
            UniquePtr<DomElement> functionElement(new DomElement(u"function"));
            functionElement->SetAttribute(u"specifiers", SpecifierStr(functionNode.specifiers));
            DomElement* prevElement = currentElement;
            currentElement = functionElement.Get();
            if (!functionNode.returnTypeExpr.IsNull())
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> returnTypeElement(new DomElement(u"returnType"));
                currentElement = returnTypeElement.Get();
                functionNode.returnTypeExpr->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(returnTypeElement.Release()));
            }
            functionNode.declarator->Accept(*this);
            if (!functionNode.body.IsNull())
            {
                functionNode.body->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(functionElement.Release()));
        }
        public override void Visit(FunctionDeclaratorNode& functionDeclaratorNode) 
        {
            UniquePtr<DomElement> functionDeclaratorElement(new DomElement(u"functionDeclarator"));
            functionDeclaratorElement->SetAttribute(u"cv", CVSpecifierStr(functionDeclaratorNode.cvSpecifiers));
            DomElement* prevElement = currentElement;
            currentElement = functionDeclaratorElement.Get();
            functionDeclaratorNode.idExpr->Accept(*this);
            functionDeclaratorNode.parameters->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(functionDeclaratorElement.Release()));
        }
        public override void Visit(ParameterNode& parameterNode) 
        {
            UniquePtr<DomElement> parameterElement(new DomElement(u"parameter"));
            DomElement* prevElement = currentElement;
            currentElement = parameterElement.Get();
            parameterNode.typeExpr->Accept(*this);
            if (!parameterNode.name.IsNull())
            {
                parameterNode.name->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(parameterElement.Release()));
        }
        public override void Visit(ParameterListNode& parameterListNode) 
        {
            UniquePtr<DomElement> parametersElement(new DomElement(u"parameters"));
            DomElement* prevElement = currentElement;
            currentElement = parametersElement.Get();
            for (const UniquePtr<ParameterNode>& node : parameterListNode.nodes)
            {
                node->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(parametersElement.Release()));
        }
        public override void Visit(SimpleDeclarationNode& simpleDeclarationNode) 
        {
            UniquePtr<DomElement> simpleDeclarationElement(new DomElement(u"simpleDeclaration"));
            simpleDeclarationElement->SetAttribute(u"specifiers", SpecifierStr(simpleDeclarationNode.specifiers));
            DomElement* prevElement = currentElement;
            currentElement = simpleDeclarationElement.Get();
            simpleDeclarationNode.typeExpr->Accept(*this);
            simpleDeclarationNode.declarator->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(simpleDeclarationElement.Release()));
        }
        public override void Visit(UsingTypeDeclarationNode& usingTypeDeclarationNode) 
        {
            UniquePtr<DomElement> usingTypeDeclarationElement(new DomElement(u"usingTypeDeclaration"));
            DomElement* prevElement = currentElement;
            currentElement = usingTypeDeclarationElement.Get();
            usingTypeDeclarationNode.id->Accept(*this);
            usingTypeDeclarationNode.typeExpr->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(usingTypeDeclarationElement.Release()));
        }
        public override void Visit(UsingDirectiveNode& usingDirectiveNode) 
        {
            UniquePtr<DomElement> usingDirectiveElement(new DomElement(u"usingDirective"));
            DomElement* prevElement = currentElement;
            currentElement = usingDirectiveElement.Get();
            usingDirectiveNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(usingDirectiveElement.Release()));
        }
        public override void Visit(UsingDeclarationNode& usingDeclarationNode) 
        {
            UniquePtr<DomElement> usingDeclarationElement(new DomElement(u"usingDeclaration"));
            DomElement* prevElement = currentElement;
            currentElement = usingDeclarationElement.Get();
            usingDeclarationNode.child->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(usingDeclarationElement.Release()));
        }
        public override void Visit(StaticAssertDeclarationNode& staticAssertDeclarationNode) 
        {
            UniquePtr<DomElement> staticAssertDeclarationElement(new DomElement(u"staticAssertDeclaration"));
            DomElement* prevElement = currentElement;
            currentElement = staticAssertDeclarationElement.Get();
            staticAssertDeclarationNode.left->Accept(*this);
            staticAssertDeclarationNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(staticAssertDeclarationElement.Release()));
        }
        public override void Visit(TypedefDeclarationNode& typedefDeclarationNode) 
        {
            UniquePtr<DomElement> typedefDeclarationElement(new DomElement(u"typedefDeclaration"));
            DomElement* prevElement = currentElement;
            currentElement = typedefDeclarationElement.Get();
            typedefDeclarationNode.left->Accept(*this);
            typedefDeclarationNode.right->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(typedefDeclarationElement.Release()));
        }
        public override void Visit(LinkageSpecificationNode& linkageSpecificationNode) 
        {
            UniquePtr<DomElement> linkageSpecificationElement(new DomElement(u"linkageSpecification"));
            DomElement* prevElement = currentElement;
            currentElement = linkageSpecificationElement.Get();
            linkageSpecificationNode.linkage->Accept(*this);
            for (const UniquePtr<Node>& declaration : linkageSpecificationNode.nodes)
            {
                declaration->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(linkageSpecificationElement.Release()));
        }
        public override void Visit(NamespaceNode& namespaceNode) 
        {
            UniquePtr<DomElement> namespaceElement(new DomElement(u"namespace"));
            DomElement* prevElement = currentElement;
            currentElement = namespaceElement.Get();
            if (!namespaceNode.id.IsNull())
            {
                namespaceNode.id->Accept(*this);
            }
            for (const UniquePtr<Node>& declaration : namespaceNode.nodes)
            {
                declaration->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(namespaceElement.Release()));
        }
        public override void Visit(ForwardClassDeclarationNode& forwardClassDeclarationNode) 
        {
            UniquePtr<DomElement> forwardClassDeclarationElement(new DomElement(u"forwardClassDeclaration"));
            forwardClassDeclarationElement->SetAttribute(u"classKey", ClassKeyStr(forwardClassDeclarationNode.classKey));
            DomElement* prevElement = currentElement;
            currentElement = forwardClassDeclarationElement.Get();
            forwardClassDeclarationNode.className->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(forwardClassDeclarationElement.Release()));
        }
        public override void Visit(ClassNode& classNode) 
        {
            UniquePtr<DomElement> classElement(new DomElement(u"class"));
            classElement->SetAttribute(u"classKey", ClassKeyStr(classNode.classKey));
            classElement->SetAttribute(u"specifiers", SpecifierStr(classNode.specifiers));
            DomElement* prevElement = currentElement;
            currentElement = classElement.Get();
            classNode.className->Accept(*this);
            if (!classNode.baseClasses.IsNull())
            {
                classNode.baseClasses->Accept(*this);
            }
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> memberDeclarationsElement(new DomElement(u"memberDeclarations"));
                currentElement = memberDeclarationsElement.Get();
                for (const UniquePtr<Node>& memberDeclaration : classNode.memberDeclarations)
                {
                    memberDeclaration->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(memberDeclarationsElement.Release()));
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(classElement.Release()));
        }
        public override void Visit(BaseClassListNode& baseClassListNode) 
        {
            UniquePtr<DomElement> baseClassesElement(new DomElement(u"baseClasses"));
            DomElement* prevElement = currentElement;
            currentElement = baseClassesElement.Get();
            for (const UniquePtr<BaseClassNode>& baseClass : baseClassListNode.nodes)
            {
                baseClass->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(baseClassesElement.Release()));
        }
        public override void Visit(BaseClassNode& baseClassNode) 
        {
            UniquePtr<DomElement> baseClassElement(new DomElement(u"baseClass"));
            baseClassElement->SetAttribute(u"specifiers", SpecifierStr(baseClassNode.baseSpecifiers));
            DomElement* prevElement = currentElement;
            currentElement = baseClassElement.Get();
            baseClassNode.baseClassName->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(baseClassElement.Release()));
        }
        public override void Visit(MemberDeclarationNode& memberDeclarationNode)
        {
            UniquePtr<DomElement> memberDeclarationElement(new DomElement(u"memberDeclaration"));
            memberDeclarationElement->SetAttribute(u"specifiers", SpecifierStr(memberDeclarationNode.specifiers));
            DomElement* prevElement = currentElement;
            currentElement = memberDeclarationElement.Get();
            if (!memberDeclarationNode.type.IsNull())
            {
                memberDeclarationNode.type->Accept(*this);
            }
            memberDeclarationNode.declarator->Accept(*this);
            if (!memberDeclarationNode.initializer.IsNull())
            {
                memberDeclarationNode.initializer->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(memberDeclarationElement.Release()));
        }
        public override void Visit(SpecialMemberFunctionNode& specialMemberFunctionNode) 
        {
            UniquePtr<DomElement> specialMemberFunctionElement(new DomElement(u"specialMemberFunction"));
            specialMemberFunctionElement->SetAttribute(u"specifiers", SpecifierStr(specialMemberFunctionNode.specifiers));
            DomElement* prevElement = currentElement;
            currentElement = specialMemberFunctionElement.Get();
            specialMemberFunctionNode.declarator->Accept(*this);
            if (!specialMemberFunctionNode.ctorInitializer.IsNull())
            {
                specialMemberFunctionNode.ctorInitializer->Accept(*this);
            }
            if (!specialMemberFunctionNode.body.IsNull())
            {
                specialMemberFunctionNode.body->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(specialMemberFunctionElement.Release()));
        }
        public override void Visit(CtorInitializerNode& ctorInitializerNode) 
        {
            UniquePtr<DomElement> constructoInitializerElement(new DomElement(u"constructorInitializer"));
            DomElement* prevElement = currentElement;
            currentElement = constructoInitializerElement.Get();
            for (const UniquePtr<MemberInitializerNode>& memberInitializer : ctorInitializerNode.memberInitializers)
            {
                memberInitializer->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(constructoInitializerElement.Release()));
        }
        public override void Visit(MemberInitializerNode& memberInitializerNode) 
        {
            UniquePtr<DomElement> memberInitializerElement(new DomElement(u"memberInitializer"));
            DomElement* prevElement = currentElement;
            currentElement = memberInitializerElement.Get();
            memberInitializerNode.memberId->Accept(*this);
            if (!memberInitializerNode.initializer.IsNull())
            {
                memberInitializerNode.initializer->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(memberInitializerElement.Release()));
        }
        public override void Visit(EnumTypeNode& enumTypeNode) 
        {
            UniquePtr<DomElement> enumTypeElement(new DomElement(u"enumType"));
            enumTypeElement->SetAttribute(u"enumKey", EnumKeyStr(enumTypeNode.enumKey));
            DomElement* prevElement = currentElement;
            currentElement = enumTypeElement.Get();
            enumTypeNode.enumName->Accept(*this);
            if (!enumTypeNode.enumBase.IsNull())
            {
                enumTypeNode.enumBase->Accept(*this);
            }
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> enumeratorsElement(new DomElement(u"enumerators"));
                currentElement = enumeratorsElement.Get();
                for (const UniquePtr<EnumeratorNode>& enumerator : enumTypeNode.nodes)
                {
                    enumerator->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(enumeratorsElement.Release()));
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(enumTypeElement.Release()));
        }
        public override void Visit(EnumeratorNode& enumeratorNode) 
        {
            UniquePtr<DomElement> enumeratorElement(new DomElement(u"enumerator"));
            DomElement* prevElement = currentElement;
            currentElement = enumeratorElement.Get();
            enumeratorNode.id->Accept(*this);
            if (!enumeratorNode.value.IsNull())
            {
                enumeratorNode.value->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(enumeratorElement.Release()));
        }
        public override void Visit(LabeledStatementNode& labeledStatementNode) 
        {
            UniquePtr<DomElement> labeledStatementElement(new DomElement(u"labeledStatement"));
            DomElement* prevElement = currentElement;
            currentElement = labeledStatementElement.Get();
            labeledStatementNode.label->Accept(*this);
            labeledStatementNode.statement->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(labeledStatementElement.Release()));
        }
        public override void Visit(CaseStatementNode& caseStatementNode)
        {
            UniquePtr<DomElement> caseStatementElement(new DomElement(u"caseStatement"));
            DomElement* prevElement = currentElement;
            currentElement = caseStatementElement.Get();
            caseStatementNode.caseExpr->Accept(*this);
            caseStatementNode.statement->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(caseStatementElement.Release()));
        }
        public override void Visit(DefaultStatementNode& defaultStatementNode) 
        {
            UniquePtr<DomElement> defaultStatementElement(new DomElement(u"defaultStatement"));
            DomElement* prevElement = currentElement;
            currentElement = defaultStatementElement.Get();
            defaultStatementNode.statement->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(defaultStatementElement.Release()));
        }
        public override void Visit(ExpressionStatementNode& expressionStatementNode) 
        {
            UniquePtr<DomElement> expressionStatementElement(new DomElement(u"expressionStatement"));
            DomElement* prevElement = currentElement;
            currentElement = expressionStatementElement.Get();
            expressionStatementNode.expression->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(expressionStatementElement.Release()));
        }
        public override void Visit(CompoundStatementNode& compoundStatementNode) 
        {
            UniquePtr<DomElement> compoundStatementElement(new DomElement(u"compoundStatement"));
            DomElement* prevElement = currentElement;
            currentElement = compoundStatementElement.Get();
            for (const UniquePtr<StatementNode>& statement : compoundStatementNode.statements)
            {
                statement->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(compoundStatementElement.Release()));
        }
        public override void Visit(IfStatementNode& ifStatementNode) 
        {
            UniquePtr<DomElement> ifStatementElement(new DomElement(u"ifStatement"));
            DomElement* prevElement = currentElement;
            currentElement = ifStatementElement.Get();
            ifStatementNode.condition->Accept(*this);
            ifStatementNode.thenS->Accept(*this);
            if (!ifStatementNode.elseS.IsNull())
            {
                ifStatementNode.elseS->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(ifStatementElement.Release()));
        }
        public override void Visit(SwitchStatementNode& switchStatementNode) 
        {
            UniquePtr<DomElement> switchStatementElement(new DomElement(u"switchStatement"));
            DomElement* prevElement = currentElement;
            currentElement = switchStatementElement.Get();
            switchStatementNode.condition->Accept(*this);
            switchStatementNode.statement->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(switchStatementElement.Release()));
        }
        public override void Visit(WhileStatementNode& whileStatementNode) 
        {
            UniquePtr<DomElement> whileStatementElement(new DomElement(u"whileStatement"));
            DomElement* prevElement = currentElement;
            currentElement = whileStatementElement.Get();
            whileStatementNode.condition->Accept(*this);
            whileStatementNode.statement->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(whileStatementElement.Release()));
        }
        public override void Visit(DoStatementNode& doStatementNode) 
        {
            UniquePtr<DomElement> doStatementElement(new DomElement(u"doStatement"));
            DomElement* prevElement = currentElement;
            currentElement = doStatementElement.Get();
            doStatementNode.statement->Accept(*this);
            doStatementNode.expression->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(doStatementElement.Release()));
        }
        public override void Visit(RangeForStatementNode& rangeForStatementNode) 
        {
            UniquePtr<DomElement> rangeForStatementElement(new DomElement(u"rangeForStatement"));
            DomElement* prevElement = currentElement;
            currentElement = rangeForStatementElement.Get();
            rangeForStatementNode.forRangeDeclaration->Accept(*this);
            rangeForStatementNode.forRangeInitializer->Accept(*this);
            rangeForStatementNode.statement->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(rangeForStatementElement.Release()));
        }
        public override void Visit(ForStatementNode& forStatementNode) 
        {
            UniquePtr<DomElement> forStatementElement(new DomElement(u"forStatement"));
            DomElement* prevElement = currentElement;
            currentElement = forStatementElement.Get();
            if (!forStatementNode.forInitialization.IsNull())
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> initElement(new DomElement(u"init"));
                currentElement = initElement.Get();
                forStatementNode.forInitialization->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(initElement.Release()));
            }
            if (!forStatementNode.condition.IsNull())
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> conditionElement(new DomElement(u"condition"));
                currentElement = conditionElement.Get();
                forStatementNode.condition->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(conditionElement.Release()));
            }
            if (!forStatementNode.loopExpr.IsNull())
            {
                DomElement* prevElement = currentElement;
                UniquePtr<DomElement> loopExprElement(new DomElement(u"loopExpr"));
                currentElement = loopExprElement.Get();
                forStatementNode.loopExpr->Accept(*this);
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(loopExprElement.Release()));
            }
            forStatementNode.statement->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(forStatementElement.Release()));
        }
        public override void Visit(BreakStatementNode& breakStatementNode) 
        {
            UniquePtr<DomElement> breakStatementElement(new DomElement(u"breakStatement"));
            currentElement->AppendChild(UniquePtr<DomNode>(breakStatementElement.Release()));
        }
        public override void Visit(ContinueStatementNode& continueStatementNode) 
        {
            UniquePtr<DomElement> continueStatementElement(new DomElement(u"continueStatement"));
            currentElement->AppendChild(UniquePtr<DomNode>(continueStatementElement.Release()));
        }
        public override void Visit(ReturnStatementNode& returnStatementNode) 
        {
            UniquePtr<DomElement> returnStatementElement(new DomElement(u"returnStatement"));
            DomElement* prevElement = currentElement;
            currentElement = returnStatementElement.Get();
            if (!returnStatementNode.expression.IsNull())
            {
                returnStatementNode.expression->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(returnStatementElement.Release()));
        }
        public override void Visit(GotoStatementNode& gotoStatementNode) 
        {
            UniquePtr<DomElement> gotoStatementElement(new DomElement(u"gotoStatement"));
            DomElement* prevElement = currentElement;
            currentElement = gotoStatementElement.Get();
            gotoStatementNode.target->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(gotoStatementElement.Release()));
        }
        public override void Visit(DeclarationStatementNode& declarationStatementNode) 
        {
            UniquePtr<DomElement> declarationStatementElement(new DomElement(u"declarationStatement"));
            DomElement* prevElement = currentElement;
            currentElement = declarationStatementElement.Get();
            declarationStatementNode.declaration->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(declarationStatementElement.Release()));
        }
        public override void Visit(TryStatementNode& tryStatementNode) 
        {
            UniquePtr<DomElement> tryStatementElement(new DomElement(u"tryStatement"));
            DomElement* prevElement = currentElement;
            currentElement = tryStatementElement.Get();
            tryStatementNode.tryBlock->Accept(*this);
            for (UniquePtr<ExceptionHandlerNode>& exceptionHandler : tryStatementNode.handlers)
            {
                exceptionHandler->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(tryStatementElement.Release()));
        }
        public override void Visit(ExceptionHandlerNode& exceptionHandlerNode) 
        {
            UniquePtr<DomElement> exceptionHandlerElement(new DomElement(u"exceptionHandler"));
            DomElement* prevElement = currentElement;
            currentElement = exceptionHandlerElement.Get();
            exceptionHandlerNode.exceptionDeclaration->Accept(*this);
            exceptionHandlerNode.catchBlock->Accept(*this);
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(exceptionHandlerElement.Release()));
        }
        public override void Visit(CatchAllNode& catchAllNode) 
        {
            UniquePtr<DomElement> catchAllElement(new DomElement(u"catchAll"));
            currentElement->AppendChild(UniquePtr<DomNode>(catchAllElement.Release()));
        }
        public UniquePtr<DomElement> compileUnitElement;
        public DomElement* currentElement;
    }
}
