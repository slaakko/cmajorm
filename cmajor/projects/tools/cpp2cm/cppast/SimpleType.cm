using System;
using Span = System.Text.Parsing.Span;

namespace cppast
{
    public enum SimpleTypeSpecifiers
    {
        none = 0,
        char_ = 1 << 0,
        char16_t = 1 << 1,
        char32_t = 1 << 2,
        wchar_t = 1 << 3,
        bool_ = 1 << 4,
        short_ = 1 << 5,
        int_ = 1 << 6,
        long_ = 1 << 7,
        long_long = 1 << 8,
        signed  = 1 << 9,
        unsigned = 1 << 10,
        float_ = 1 << 11,
        double_ = 1 << 12,
        void_ = 1 << 13,
        auto = 1 << 14
    }
    
    public nothrow ustring SimpleTypeSpecifierStr(SimpleTypeSpecifiers specifiers)
    {
        ustring s;
        if ((specifiers & SimpleTypeSpecifiers.char_) != SimpleTypeSpecifiers.none) 
        {
            s.Append(u"char");
        }        
        if ((specifiers & SimpleTypeSpecifiers.char16_t) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"char16_t");
        }
        if ((specifiers & SimpleTypeSpecifiers.char32_t) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"char32_t");
        }
        if ((specifiers & SimpleTypeSpecifiers.wchar_t) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"wchar_t");
        }
        if ((specifiers & SimpleTypeSpecifiers.bool_) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"bool");
        }
        if ((specifiers & SimpleTypeSpecifiers.short_) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"short");
        }
        if ((specifiers & SimpleTypeSpecifiers.int_) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"int");
        }
        if ((specifiers & SimpleTypeSpecifiers.long_) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"long");
        }
        if ((specifiers & SimpleTypeSpecifiers.signed) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"signed");
        }
        if ((specifiers & SimpleTypeSpecifiers.unsigned) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"unsigned");
        }
        if ((specifiers & SimpleTypeSpecifiers.float_) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"float");
        }
        if ((specifiers & SimpleTypeSpecifiers.double_) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"double");
        }
        if ((specifiers & SimpleTypeSpecifiers.void_) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"void");
        }
        if ((specifiers & SimpleTypeSpecifiers.auto) != SimpleTypeSpecifiers.none) 
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append(u"auto");
        }
        return s;
    }
                
    public class SimpleTypeNode : Node
    {
        public nothrow SimpleTypeNode(const Span& span_, SimpleTypeSpecifiers simpleTypeSpecifiers_) : base(span_), simpleTypeSpecifiers(simpleTypeSpecifiers_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public SimpleTypeSpecifiers simpleTypeSpecifiers;
    }
}
