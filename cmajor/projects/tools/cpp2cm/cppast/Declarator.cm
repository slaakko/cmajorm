using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace cppast
{
    public class InitDeclaratorNode : BinaryNode
    {
        public nothrow InitDeclaratorNode(const Span& span_, Node* declarator_, Node* initializer_) : base(span_, declarator_, initializer_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }    
    
    public class ArrayDeclaratorNode : BinaryNode
    {
        public nothrow ArrayDeclaratorNode(const Span& span_, Node* declarator_, Node* size_) : base(span_, declarator_, size_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class InitializerListNode : CompositeNode<Node>
    {
        public nothrow InitializerListNode(const Span& span_) : base(span_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class BracedInitializerListNode : CompositeNode<Node>
    {
        public nothrow BracedInitializerListNode(const Span& span_) : base(span_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class AssignmentInitializerNode : UnaryNode
    {
        public nothrow AssignmentInitializerNode(const Span& span_, Node* initializer_) : base(span_, initializer_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
}