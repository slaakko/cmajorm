using System;
using cppast;

namespace cppparser
{
    grammar DeclaratorGrammar
    {
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.NestedNameSpecifier;
        using ExpressionGrammar.IdExpression;
        using ExpressionGrammar.ConstantExpression;
        using ExpressionGrammar.ExpressionList;
        using ExpressionGrammar.AssignmentExpression;
        using FunctionGrammar.ParameterList;
        using TypeExprGrammar.CVSpecifierSequence;
        
        InitDeclarator(ParsingContext* ctx) : Node*
            ::= Declarator(ctx){ value = Declarator; }
            (   Initializer(ctx){ value = new InitDeclaratorNode(span, value, Initializer); }
            |   empty
            )
            ;
            
        Declarator(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= ((   IdExpression(ctx){ node.Reset(IdExpression); }
            |   ('(' '*' Identifier:i1 ')'){ node.Reset(new FunctionPtrIdNode(span, i1)); }
            |   ('(' NestedNameSpecifier(ctx):nns '*' Identifier:i2 ')'){ node.Reset(new MemberFunctionPtrIdNode(span, nns, i2)); }
            )
            (   empty{ pass = !ctx->InFunctionBody(); } ParameterList(ctx) CVSpecifierSequence
                { node.Reset(new FunctionDeclaratorNode(span, node.Release(), ParameterList, CVSpecifierSequence)); }
            |   ('[' ConstantExpression(ctx):size? ']'!){ node.Reset(new ArrayDeclaratorNode(span, node.Release(), size)); }
            )*
            )
            {
                value = node.Release();
            }
            ;
            
        Initializer(ParsingContext* ctx) : Node*
            ::= ('=' InitializerClause(ctx)){ value = new AssignmentInitializerNode(span, InitializerClause); }
            |   '(' ExpressionList(ctx) ')'{ value = ExpressionList; }
            |   BracedInitializerList(ctx){ value = BracedInitializerList; }
            ;
            
        BraceOrEqualInitializer(ParsingContext* ctx) : Node*
            ::= ('=' InitializerClause(ctx)){ value = new AssignmentInitializerNode(span, InitializerClause); }
            |   BracedInitializerList(ctx){ value = BracedInitializerList; }
            ;
            
        BracedInitializerList(ParsingContext* ctx, var UniquePtr<BracedInitializerListNode> node) : BracedInitializerListNode*
            ::= ('{'{ node.Reset(new BracedInitializerListNode(span)); } (InitializerClause(ctx):ic1{ node->AddNode(ic1); } (',' InitializerClause(ctx):ic2{ node->AddNode(ic2); })*)? '}')
            {
                value = node.Release();
            }
            ;
            
        InitializerClause(ParsingContext* ctx) : Node*
            ::= AssignmentExpression(ctx){ value = AssignmentExpression; }
            |   BracedInitializerList(ctx){ value = BracedInitializerList; }
            ;
            
        InitializerList(ParsingContext* ctx, var UniquePtr<InitializerListNode> node) : InitializerListNode*
            ::= empty{ node.Reset(new InitializerListNode(span)); } (InitializerClause(ctx):ic1{ node->AddNode(ic1); } (',' InitializerClause(ctx):ic2{ node->AddNode(ic2); })*)
            {
                value = node.Release();
            }
            ;
    }
}
