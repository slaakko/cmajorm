using System;
using System.Collections;

namespace cppparser
{
    public class ParsingContext
    {
        public nothrow ParsingContext()
        {
        }
        public nothrow inline bool TypeRule() const
        {
            return typeRule;
        }
        public nothrow inline void SetTypeRule()
        {
            typeRule = true;
        }
        public nothrow inline bool ParsingTemplateId() const
        {
            return parsingTemplateId;
        }
        public void BeginParsingTemplateId()
        {
            parsingTemplateIdStack.Push(parsingTemplateId);
            parsingTemplateId = true;
        }
        public void EndParsingTemplateId()
        {
            parsingTemplateId = parsingTemplateIdStack.Pop();
        }
        public nothrow inline bool InFunctionBody() const
        {
            return inFunctionBody;
        }
        public void BeginFunctionBody()
        {
            inFunctionBodyStack.Push(inFunctionBody);
            inFunctionBody = true;
        }
        public void EndFunctionBody()
        {
            inFunctionBody = inFunctionBodyStack.Pop();
        }
        public nothrow inline bool ParsingLvalue() const
        {
            return parsingLvalue;
        }
        public void BeginParsingLvalue()
        {
            parsingLvalueStack.Push(parsingLvalue);
            parsingLvalue = true;
        }
        public void EndParsingLvalue()
        {
            parsingLvalue = parsingLvalueStack.Pop();
        }
        public nothrow inline bool ParsingArguments() const
        {
            return parsingArguments;
        }
        public void BeginParsingArguments() 
        {
            parsingArgumentsStack.Push(parsingArguments);
            parsingArguments = true;
        }
        public void EndParsingArguments()
        {
            parsingArguments = parsingArgumentsStack.Pop();
        }
        public nothrow inline bool ParsingTemplateIdOrLvalue() const 
        { 
            return parsingTemplateId || parsingLvalue; 
        }
        public nothrow inline bool ParsingTemplateIdOrLvalueAndNotArguments() const 
        { 
            return (parsingTemplateId || parsingLvalue) && !parsingArguments; 
        }
        public nothrow inline bool ParsingLvalueAndNotArguments() const 
        { 
            return parsingLvalue && !parsingArguments; 
        }
        public nothrow inline bool AcceptDefined() const
        {
            return acceptDefined;
        }
        public nothrow inline void SetAcceptDefined()
        {
            acceptDefined = true;
        }
        private bool parsingTemplateId;
        private Stack<bool> parsingTemplateIdStack;
        private bool inFunctionBody;
        private Stack<bool> inFunctionBodyStack;
        private bool parsingLvalue;
        private Stack<bool> parsingLvalueStack;
        private bool parsingArguments;
        private Stack<bool> parsingArgumentsStack;
        private bool acceptDefined;
        private bool typeRule;
    }
}
