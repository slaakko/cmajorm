using System;
using cppast;

namespace cppparser
{
    grammar EnumerationGrammar
    {
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using TypeExprGrammar.TypeExpr;
        using ExpressionGrammar.ConstantExpression;
        
        EnumDeclaration(ParsingContext* ctx) : EnumTypeNode*
            ::= (EnumSpecifier(ctx) ';'){ value = EnumSpecifier; }
            ;
            
        OpaqueEnumDeclaration(ParsingContext* ctx) : EnumTypeNode*
            ::= (EnumKey EnumName(ctx) EnumBase(ctx)? ';'){ value = new EnumTypeNode(span, EnumKey, EnumName, EnumBase); }
            ;
            
        EnumSpecifier(ParsingContext* ctx) : EnumTypeNode*
            ::= EnumHead(ctx){ value = EnumHead; } '{' Enumerators(ctx, value) '}'!
            ;
            
        EnumHead(ParsingContext* ctx) : EnumTypeNode*
            ::= (EnumKey EnumName(ctx) EnumBase(ctx)?){ value = new EnumTypeNode(span, EnumKey, EnumName, EnumBase); }
            ;
            
        EnumKey : EnumKey
            ::= (keyword("enum") keyword("class")){ value = EnumKey.enumClass; }
            |   (keyword("enum") keyword("struct")){ value = EnumKey.enumStruct; }
            |   keyword("enum"){ value = EnumKey.enum_; }
            ;
        
        EnumName(ParsingContext* ctx) : Node*
            ::= QualifiedId(ctx){ value = QualifiedId; }
            ;
            
        EnumBase(ParsingContext* ctx) : Node*
            ::= (':' TypeExpr(ctx)){ value = TypeExpr; }
            ;
            
        Enumerators(ParsingContext* ctx, EnumTypeNode* enumType)
            ::= EnumeratorDefinition(ctx):left{ enumType->AddNode(left); }
                (',' EnumeratorDefinition(ctx):right{ enumType->AddNode(right); })*
            ;
            
        EnumeratorDefinition(ParsingContext* ctx) : EnumeratorNode*
            ::= (Enumerator ('=' ConstantExpression(ctx))?){ value = new EnumeratorNode(span, Enumerator, ConstantExpression); }
            ;
            
        Enumerator : IdentifierNode*
            ::= Identifier{ value = Identifier; }
            ;
    }
}
