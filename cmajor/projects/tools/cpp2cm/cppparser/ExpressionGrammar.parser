using System;
using cppast;

namespace cppparser
{
    grammar ExpressionGrammar
    {
        using DeclaratorGrammar.InitializerList;
        using DeclaratorGrammar.InitializerClause;
        using DeclaratorGrammar.BracedInitializerList;
        using TypeExprGrammar.TypeExpr;
        using SimpleTypeGrammar.SimpleType;
        using LiteralGrammar.Literal;
        using SimpleTypeGrammar.SimpleTypeSpecifier;
        using TemplateGrammar.TemplateId;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.NestedNameSpecifier;
        using FunctionGrammar.ParameterList;
        using StatementGrammar.CompoundStatement;
        using stdlib.identifier;
        
        ExpressionList(ParsingContext* ctx, var UniquePtr<ExpressionListNode> node) : ExpressionListNode*
            ::= (empty{ node.Reset(new ExpressionListNode(span)); } InitializerClause(ctx):ic1{ node->AddNode(ic1); } (',' InitializerClause(ctx):ic2{ node->AddNode(ic2); })*)
            {
                value = node.Release();
            }
            ;
        
        PossiblyEmptyArgumentList(ParsingContext* ctx) : ExpressionListNode*
            ::= ExpressionList(ctx){ value = ExpressionList; }
            |   empty{ value = new ExpressionListNode(span); }
            ;
            
        Expression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (AssignmentExpression(ctx):left{ node.Reset(left); } (',' AssignmentExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, Operator.comma)); })*)
            {
                value = node.Release();
            }
            ;
            
        ConstantExpression(ParsingContext* ctx) : Node*
            ::= ConditionalExpression(ctx){ value = ConditionalExpression; }
            ;
            
        AssignmentExpression(ParsingContext* ctx) : Node*
            ::= ConcreteAssignmentExpression(ctx){ value = ConcreteAssignmentExpression; }
            |   ConditionalExpression(ctx){ value = ConditionalExpression; }
            |   ThrowExpression(ctx){ value = ThrowExpression; }
            ;
            
        ConcreteAssignmentExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= empty{ ctx->BeginParsingLvalue(); } (LogicalOrExpression(ctx){ node.Reset(LogicalOrExpression); ctx->EndParsingLvalue(); } / { ctx->EndParsingLvalue(); } 
                AssignmentOperator InitializerClause(ctx){ node.Reset(new BinaryExpressionNode(span, node.Release(), InitializerClause, AssignmentOperator)); })
            {
                value = node.Release();
            }
            ;
            
        AssignmentOperator : Operator
            ::= ("=" - "=="){ value = Operator.assign; }
            |   "*="{ value = Operator.mulAssign; }
            |   "/="{ value = Operator.divAssign; }
            |   "%="{ value = Operator.remAssign; }
            |   "+="{ value = Operator.addAssign; }
            |   "-="{ value = Operator.subAssign; }
            |   ">>="{ value = Operator.shiftRightAssign; }
            |   "<<="{ value = Operator.shiftLeftAssign; }
            |   "&="{ value = Operator.andAssign; }
            |   "^="{ value = Operator.xorAssign; }
            |   "|="{ value = Operator.orAssign; }
            ;
            
        ConditionalExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (LogicalOrExpression(ctx){ node.Reset(LogicalOrExpression); } 
                ('?' Expression(ctx) ':' AssignmentExpression(ctx){ node.Reset(new ConditionalExpressionNode(span, node.Release(), Expression, AssignmentExpression)); })?)
            {
                value = node.Release();
            }
            ;
            
        ThrowExpression(ParsingContext* ctx) : Node*
            ::= (keyword("throw") AssignmentExpression(ctx)?){ value = new ThrowExpressionNode(span, AssignmentExpression); }
            ;
            
        LogicalOrExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (LogicalAndExpression(ctx):left{ node.Reset(left); } 
                ("||"{ if (ctx->ParsingTemplateIdOrLvalueAndNotArguments()) pass = false; } 
                LogicalAndExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, Operator.logicalOr)); })*)
            {
                value = node.Release();
            }
            ;
            
        LogicalAndExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (InclusiveOrExpression(ctx):left{ node.Reset(left); } 
                ("&&"{ if (ctx->ParsingTemplateIdOrLvalueAndNotArguments()) pass = false; } 
                InclusiveOrExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, Operator.logicalAnd)); })*)
            {
                value = node.Release();
            }
            ;
            
        InclusiveOrExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (ExclusiveOrExpression(ctx):left{ node.Reset(left); } 
                (('|' - ("|=" | "||")){ if (ctx->ParsingLvalueAndNotArguments()) pass = false; } 
                ExclusiveOrExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, Operator.or_)); })*)
            {
                value = node.Release(); 
            }
            ;
            
        ExclusiveOrExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (AndExpression(ctx):left{ node.Reset(left); }
                (('^' - "^="){ if (ctx->ParsingLvalueAndNotArguments()) pass = false; } 
                AndExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, Operator.xor)); })*)
            {
                value = node.Release();
            }
            ;
            
        AndExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (EqualityExpression(ctx):left{ node.Reset(left); } 
                (('&' - ("&=" | "&&")){ if (ctx->ParsingLvalueAndNotArguments()) pass = false; } 
                EqualityExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, Operator.and_)); })*)
            {
                value = node.Release();
            }
            ;
            
        EqualityExpression(ParsingContext* ctx, var UniquePtr<Node> node, var Operator op) : Node*
            ::= (RelationalExpression(ctx):left{ node.Reset(left); } 
                (("=="{ op = Operator.equal; } | "!="{ op = Operator.notEqual; }){ if (ctx->ParsingLvalueAndNotArguments()) pass = false; } 
                RelationalExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, op)); })*)
            {
                value = node.Release();
            }
            ;

        RelationalExpression(ParsingContext* ctx, var UniquePtr<Node> node, var Operator op) : Node*
            ::= (ShiftExpression(ctx):left{ node.Reset(left); }
                (("<="{ op = Operator.lessOrEqual; } 
                | ">="{ op = Operator.greaterOrEqual; } 
                | ('<' - ("<<" | "<<=")){ op = Operator.less; } 
                | ('>' - (">>" | ">>=")){ op = Operator.greater; }){ if (ctx->ParsingTemplateIdOrLvalueAndNotArguments()) pass = false; } 
                ShiftExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, op)); })*)
            {
                value = node.Release();
            }
            ;
            
        ShiftExpression(ParsingContext* ctx, var UniquePtr<Node> node, var Operator op) : Node*
            ::= (AdditiveExpression(ctx):left{ node.Reset(left); }
                ((("<<" - "<<="){ op = Operator.shiftLeft; } 
                | (">>" - ">>="){ op = Operator.shiftRight; }){ ctx->BeginParsingArguments(); } 
                (AdditiveExpression(ctx):right){ ctx->EndParsingArguments(); node.Reset(new BinaryExpressionNode(span, node.Release(), right, op)); } / { ctx->EndParsingArguments(); })*)
            {
                value = node.Release();
            }
            ;
            
        AdditiveExpression(ParsingContext* ctx, var UniquePtr<Node> node, var Operator op) : Node*
            ::= (MultiplicativeExpression(ctx):left{ node.Reset(left); }
                ((('+' - "+="){ op = Operator.add; } 
                | ('-' - "-="){ op = Operator.sub; }){ if (ctx->ParsingLvalueAndNotArguments()) pass = false; }
                MultiplicativeExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, op)); })*)
            {
                value = node.Release();
            }
            ;
            
        MultiplicativeExpression(ParsingContext* ctx, var UniquePtr<Node> node, var Operator op) : Node*
            ::= (PMExpression(ctx):left{ node.Reset(left); }
                ((('*' - "*="){ op = Operator.mul; } 
                | ('/' - "/="){ op = Operator.div; } 
                | ('%' - "%="){ op = Operator.rem; }){ if (ctx->ParsingLvalueAndNotArguments()) pass = false; }
                PMExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, op)); })*)
            {
                value = node.Release();
            }
            ;
            
        PMExpression(ParsingContext* ctx, var UniquePtr<Node> node, var Operator op) : Node*
            ::= (CastExpression(ctx):left{ node.Reset(left); }
                ((".*"{ op = Operator.dotStar; } | "->*"{ op = Operator.arrowStar; })
                CastExpression(ctx):right{ node.Reset(new BinaryExpressionNode(span, node.Release(), right, op)); })*)
            {
                value = node.Release();
            }
            ;
            
        CastExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (('(' TypeExpr(ctx) ')' CastExpression(ctx)){ node.Reset(new CastExpressionNode(span, TypeExpr, CastExpression)); }
            |   UnaryExpression(ctx){ node.Reset(UnaryExpression); }
            )
            {
                value = node.Release();
            }
            ;
            
        UnaryExpression(ParsingContext* ctx) : Node*
            ::= ("++" CastExpression(ctx):c1){ value = new PrefixIncrementNode(span, c1); }
            |   "--" CastExpression(ctx):c2{ value = new PrefixDecrementNode(span, c2); }
            |   UnaryOperator:op CastExpression(ctx):c3{ value = new UnaryExpressionNode(span, c3, op); }
            |   (keyword("sizeof") UnaryExpression(ctx):u4){ value = new SizeOfExpressionNode(span, u4); }
            |   (keyword("alignof") '(' TypeExpr(ctx):t5 ')'){ value = new AlignOfExpressionNode(span, t5); }
            |   NewExpression(ctx){ value = NewExpression; }
            |   DeleteExpression(ctx){ value = DeleteExpression; }
            |   PostfixExpression(ctx){ value = PostfixExpression; }
            ;
            
        UnaryOperator : Operator
            ::= ('*' - "*="){ value = Operator.deref; }
            |   ('&' - "&="){ value = Operator.addrOf; }
            |   ('+' - "+="){ value = Operator.unaryPlus; }
            |   ('-' - "-="){ value = Operator.unaryMinus; }
            |   '!'{ value = Operator.not_; }
            |   '~'{ value = Operator.neg; }
            ;
            
        NewExpression(ParsingContext* ctx) : NewExpressionNode*
            ::= (keyword("new") NewPlacement(ctx)? NewTypeId(ctx) NewInitializer(ctx)?){ value = new NewExpressionNode(span, NewPlacement, NewTypeId, NewInitializer); }
            ;
            
        NewPlacement(ParsingContext* ctx) : ExpressionListNode*
            ::= ('(' ExpressionList(ctx) ')'){ value = ExpressionList; }
            ;
            
        NewTypeId(ParsingContext* ctx) : Node*
            ::= TypeExpr(ctx):type{ value = type; } (NewDeclarator(ctx):size{ value = new ArrayTypeNode(span, type, size); })?
            ;
            
        NewDeclarator(ParsingContext* ctx) : Node* 
            ::= '['{ ctx->BeginParsingArguments(); } Expression(ctx):size{ value = size; } ']'{ ctx->EndParsingArguments(); } / { ctx->EndParsingArguments(); }
            ;
            
        NewInitializer(ParsingContext* ctx) : ExpressionListNode*
            ::= ('(' PossiblyEmptyArgumentList(ctx):args ')'){ value = args; }
            ;
            
        DeleteExpression(ParsingContext* ctx, var bool arrayDelete) : DeleteExpressionNode*
            ::= (keyword("delete") ('[' ']'{ arrayDelete = true; })? CastExpression(ctx)){ value = new DeleteExpressionNode(span, CastExpression, arrayDelete); }
            ;
            
        PostfixExpression(ParsingContext* ctx, var UniquePtr<Node> node) : Node*
            ::= (PrimaryExpression(ctx){ node.Reset(PrimaryExpression); }
                (   '['{ ctx->BeginParsingArguments(); } 
                    Expression(ctx):subscript ']'{ node.Reset(new SubscriptExpressionNode(span, node.Release(), subscript)); ctx->EndParsingArguments(); } / { ctx->EndParsingArguments(); }
                |   '('{ ctx->BeginParsingArguments(); } 
                    PossiblyEmptyArgumentList(ctx):arguments ')'{ node.Reset(new InvokeExpressionNode(span, node.Release(), arguments)); ctx->EndParsingArguments(); } / { ctx->EndParsingArguments(); }
                |   (('.' - ".*") IdExpression(ctx):id1){ node.Reset(new DotNode(span, node.Release(), id1)); }
                |   (("->" - "->*") IdExpression(ctx):id2){ node.Reset(new ArrowNode(span, node.Release(), id2)); }
                |   "++"{ node.Reset(new PostfixIncrementNode(span, node.Release())); }
                |   "--"{ node.Reset(new PostfixDecrementNode(span, node.Release())); }
                )*
            )
            {
                value = node.Release();
            }
            ;
            
        PrimaryExpression(ParsingContext* ctx) : Node*
            ::= Literal{ value = Literal; }
            |   keyword("this"){ value = new ThisNode(span); }
            |   empty{ pass = ctx->AcceptDefined(); } DefinedExpr{ value = DefinedExpr; }
            |   ('(' Expression(ctx):expr ')'){ value = new ParenthesizedExpressionNode(span, expr); }
            |   CppCastExpression(ctx){ value = CppCastExpression; } 
            |   TypeIdExpression(ctx){ value = TypeIdExpression; }
            |   (SimpleTypeSpecifier:s1 '(' PossiblyEmptyArgumentList(ctx):args1 ')'){ value = new InvokeExpressionNode(span, new SimpleTypeNode(span, s1), args1); } 
            |   (SimpleTypeSpecifier:s2 BracedInitializerList(ctx):b1){ value = new InvokeExpressionNode(span, new SimpleTypeNode(span, s2), b1); } 
            |   (TypeExpr(ctx):t1 '(' PossiblyEmptyArgumentList(ctx):args2 ')'){ value = new InvokeExpressionNode(span, t1, args2); }
            |   (TypeExpr(ctx):t2 BracedInitializerList(ctx):b2){ value = new InvokeExpressionNode(span, t2, b2); }
            |   IdExpression(ctx){ value = IdExpression; }
            |   LambdaExpression(ctx){ value = LambdaExpression; }
            ;
            
        CppCastExpression(ParsingContext* ctx, var CppCast cast_) : Node*
            ::= ((  keyword("dynamic_cast"){ cast_ = CppCast.dynamicCast; }
                |   keyword("static_cast"){ cast_ = CppCast.staticCast; }
                |   keyword("reinterpret_cast"){ cast_ = CppCast.reinterpretCast; }
                |   keyword("const_cast"){ cast_ = CppCast.constCast; }
                )
                '<' TypeExpr(ctx):t1 '>' '(' Expression(ctx):e1 ')'
            )
            {
                value = new CppCastNode(span, cast_, t1, e1); 
            }
            ;
            
        DefinedExpr : Node*
            ::= (keyword("defined") '(' identifier:id1 ')'){ value = new DefinedNode(span, id1); } 
            |   (keyword("defined") identifier:id2){ value = new DefinedNode(span, id2); }
            |   (keyword("defined") '(' Literal:lit1 ')'){ value = new BooleanLiteralNode(span, true); }
            |   (keyword("defined") Literal:lit2){ value = new BooleanLiteralNode(span, true); }
            ;
            
        TypeIdExpression(ParsingContext* ctx) : Node*
            ::= (keyword("typeid") '(' TypeExpr(ctx):t1 ')'){ value = new TypeIdNode(span, t1); }
            |   (keyword("typeid") '(' Expression(ctx):e1 ')'){ value = new TypeIdNode(span, e1); }
            ;
            
        IdExpression(ParsingContext* ctx) : Node*
            ::= QualifiedIdExpr(ctx){ value = QualifiedIdExpr; }
            |   UnqualifiedIdExpr(ctx){ value = UnqualifiedIdExpr; }
            ;
            
        UnqualifiedIdExpr(ParsingContext* ctx) : Node*
            ::= TemplateId(ctx){ value = TemplateId; }
            |   Identifier:id1{ value = id1; }
            |   OperatorFunctionId{ value = OperatorFunctionId; }
            |   ConversionFunctionId(ctx){ value = ConversionFunctionId; }
            |   ('~' Identifier:id2){ value = new DestructorIdNode(span, id2); }
            ;
            
        QualifiedIdExpr(ParsingContext* ctx) : Node*
            ::= ("::" TemplateId(ctx)){ value = new ColonColonNode(span, null, TemplateId); }
            |   ("::" NestedNameSpecifier(ctx):ns UnqualifiedIdExpr(ctx):ud1){ value = new ColonColonNode(span, null, new ColonColonNode(span, ns, ud1)); }
            |   ("::" Identifier){ value = new ColonColonNode(span, null, Identifier); }
            |   ("::" OperatorFunctionId){ value = new ColonColonNode(span, null, OperatorFunctionId); }
            |   (NestedNameSpecifier(ctx):ns2 UnqualifiedIdExpr(ctx):uid2){ value = new ColonColonNode(span, ns2, uid2); }
            ;
            
        OperatorFunctionId : OperatorFunctionIdNode*
            ::= (keyword("operator") Operator){ value = new OperatorFunctionIdNode(span, Operator); }
            ;
            
        Operator : Operator
            ::= (keyword("new") "[]"){ value = Operator.arrayNew; }
            |   (keyword("delete") "[]"){ value = Operator.arrayDelete; }
            |   keyword("new"){ value = Operator.new_; }
            |   keyword("delete"){ value = Operator.delete_; }
            |   AssignmentOperator{ value = AssignmentOperator; }
            |   "++"{ value = Operator.inc; }
            |   "--"{ value = Operator.dec; }
            |   "<<"{ value = Operator.shiftLeft; }
            |   ">>"{ value = Operator.shiftRight; }
            |   "&&"{ value = Operator.logicalAnd; }
            |   "||"{ value = Operator.logicalOr; }
            |   "=="{ value = Operator.equal; }
            |   "!="{ value = Operator.notEqual; }
            |   "<="{ value = Operator.lessOrEqual; }
            |   ">="{ value = Operator.greaterOrEqual; }
            |   ".*"{ value = Operator.dotStar; }
            |   "->*"{ value = Operator.arrowStar; }
            |   "->"{ value = Operator.arrow; }
            |   "()"{ value = Operator.apply; }
            |   "[]"{ value = Operator.subscript; }
            |   '<'{ value = Operator.less; }
            |   '>'{ value = Operator.greater; }
            |   '+'{ value = Operator.add; }
            |   '-'{ value = Operator.sub; }
            |   '*'{ value = Operator.mul; }
            |   '/'{ value = Operator.div; }
            |   '%'{ value = Operator.rem; }
            |   '^'{ value = Operator.xor; }
            |   '&'{ value = Operator.and_; }
            |   '|'{ value = Operator.or_; }
            |   '~'{ value = Operator.neg; }
            |   '!'{ value = Operator.not_; }
            |   ','{ value = Operator.comma; }
            ;
        
        ConversionFunctionId(ParsingContext* ctx) : ConversionFunctionIdNode*
            ::= (keyword("operator") TypeExpr(ctx)){ value = new ConversionFunctionIdNode(span, TypeExpr); }
            ;
            
        LambdaExpression(ParsingContext* ctx) : LambdaExpressionNode*
            ::= '['{ value = new LambdaExpressionNode(span); } LambdaCaptures(value) ']'! (ParameterList(ctx){ value->SetParameters(ParameterList); })? 
                (CompoundStatement(ctx){ value->SetBody(CompoundStatement); })!
            ;
            
        LambdaCaptures(LambdaExpressionNode* lambdaExpression)
            ::= (CaptureDefault{ lambdaExpression->AddCapture(CaptureDefault); })? Captures(lambdaExpression)?
            ;
            
        CaptureDefault : Node*
            ::= '='{ value = new AssignCapture(span); }
            |   '&'{ value = new RefCapture(span); }
            ;
            
        Captures(LambdaExpressionNode* lambdaExpression)
            ::= Capture:left{ lambdaExpression->AddCapture(left); } (',' Capture:right{ lambdaExpression->AddCapture(right); })*
            ;
            
        Capture : Node*
            ::= Identifier{ value = new IdentifierCapture(span, Identifier); }
            |   keyword("this"){ value = new ThisCapture(span); }
            ;
    }
    
    grammar ConstantExpressionGrammar
    {
        using ExpressionGrammar.ConstantExpression;
        using stdlib.spaces;
        skip spaces;
        start ConstantExpression;
    }
}
