using System;
using cppast;

namespace cppparser
{
    grammar TemplateGrammar
    {
        using DeclarationGrammar.Declaration;
        using FunctionGrammar.ParameterDeclaration;
        using IdentifierGrammar.Identifier;
        using TypeExprGrammar.TypeExpr;
        using ExpressionGrammar.ConditionalExpression;

        TemplateDeclaration(ParsingContext* ctx) : TemplateDeclarationNode*
            ::= keyword("template"){ value = new TemplateDeclarationNode(span); } '<' TemplateParameterList(ctx, value)! '>'! (Declaration(ctx){ value->SetDeclaration(Declaration); })!
            ;

        TemplateParameterList(ParsingContext* ctx, TemplateDeclarationNode* templateDeclaration)
            ::= TemplateParameter(ctx):left{ templateDeclaration->AddTemplateParameter(left); } (',' TemplateParameter(ctx):right{ templateDeclaration->AddTemplateParameter(right); })*
            ;
            
        RuleTemplateParameter(ParsingContext* ctx) : Node*
            ::= (Identifier ('=' TypeExpr(ctx))?){ value = new TemplateParameterNode(span, Identifier, TypeExpr); }
            ;

        TemplateParameter(ParsingContext* ctx) : Node*
            ::= TypeParameter(ctx){ value = TypeParameter; }
            |   ParameterDeclaration(ctx){ value = ParameterDeclaration; }
            ;

        TypeParameter(ParsingContext* ctx) : TemplateParameterNode*
            ::= ((keyword("class") | keyword("typename")) Identifier ('=' TypeExpr(ctx))?){ value = new TemplateParameterNode(span, Identifier, TypeExpr); }
            ;

        SimpleTemplateId(ParsingContext* ctx, var UniquePtr<TemplateIdNode> templateIdNode) : TemplateIdNode*
            ::= (TemplateName 
                '<'{ templateIdNode.Reset(new TemplateIdNode(span, TemplateName)); ctx->BeginParsingTemplateId(); } 
                TemplateArgumentList(ctx, templateIdNode.Get())? 
                '>'{ ctx->EndParsingTemplateId(); } / { ctx->EndParsingTemplateId(); }
            )
            {
                value = templateIdNode.Release();
            }
            ;

        TemplateId(ParsingContext* ctx) : TemplateIdNode*
            ::= SimpleTemplateId(ctx){ value = SimpleTemplateId; }
            ;

        TemplateName : IdentifierNode*
            ::= Identifier{ value = Identifier; }
            ;

        TemplateArgumentList(ParsingContext* ctx, TemplateIdNode* templateIdNode)
            ::= TemplateArgument(ctx):left{ templateIdNode->AddNode(left); } (',' TemplateArgument(ctx):right{ templateIdNode->AddNode(right); })*
            ;

        TemplateArgument(ParsingContext* ctx) : Node*
            ::= empty{ pass = ctx->TypeRule(); } RuleTemplateParameter(ctx){ value = RuleTemplateParameter; }
            |   empty{ pass = !ctx->TypeRule(); } TypeExpr(ctx){ value = TypeExpr; }
            |   empty{ pass = !ctx->TypeRule(); } ConditionalExpression(ctx){ value = ConditionalExpression; }
            ;

        ExplicitInstantiation(ParsingContext* ctx) : ExplicitInstantiationNode*
            ::= (keyword("template") Declaration(ctx)){ value = new ExplicitInstantiationNode(span, Declaration); }
            ;

        ExplicitSpecialization(ParsingContext* ctx) : ExplicitSpecializationNode*
            ::= (keyword("template") '<' '>' Declaration(ctx)){ value = new ExplicitSpecializationNode(span, Declaration); }
            ;
    }
}
