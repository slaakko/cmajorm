using System;
using System.Collections;
using System.Text.Parsing;
using cppast;

// this source file has been automatically generated from 'ClassGrammar.parser' using cmparsergen version 2.0.0.

namespace cppparser
{
    public class ClassGrammar : System.Text.Parsing.Grammar
    {
        public ClassGrammar() : this(new ParsingDomain())
        {
        }
        public ClassGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("ClassGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("cppparser")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public ClassNode* Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, ParsingContext* ctx)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(ctx)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            ClassNode* result = *cast<ValueObject<ClassNode*>*>(value.Get());
            return result;
        }

        public class ClassDeclarationRule : System.Text.Parsing.RuleParser
        {
            public ClassDeclarationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("ClassNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ClassNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* classSpecifierNonterminalParser = GetNonterminal(ToUtf32("ClassSpecifier"));
                classSpecifierNonterminalParser->SetPre(PreClassSpecifier);
                classSpecifierNonterminalParser->SetPost(PostClassSpecifier);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromClassSpecifier;
            }
            public void PreClassSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostClassSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClassSpecifier_value = stack.Pop();
                    context->fromClassSpecifier = *cast<ValueObject<ClassNode*>*>(fromClassSpecifier_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromClassSpecifier()
                {
                }
                public ParsingContext* ctx;
                public ClassNode* value;
                public ClassNode* fromClassSpecifier;
            }
        }

        public class ForwardClassDeclarationRule : System.Text.Parsing.RuleParser
        {
            public ForwardClassDeclarationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("ForwardClassDeclarationNode*"));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Node>"), ToUtf32("className")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ForwardClassDeclarationNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* classKeyNonterminalParser = GetNonterminal(ToUtf32("ClassKey"));
                classKeyNonterminalParser->SetPost(PostClassKey);
                NonterminalParser* classNameNonterminalParser = GetNonterminal(ToUtf32("ClassName"));
                classNameNonterminalParser->SetPre(PreClassName);
                classNameNonterminalParser->SetPost(PostClassName);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new ForwardClassDeclarationNode(span, context->fromClassKey, context->className.Release());
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->className.Reset(context->fromClassName);
            }
            public void PostClassKey(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClassKey_value = stack.Pop();
                    context->fromClassKey = *cast<ValueObject<ClassKey>*>(fromClassKey_value.Get());
                }
            }
            public void PreClassName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostClassName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClassName_value = stack.Pop();
                    context->fromClassName = *cast<ValueObject<Node*>*>(fromClassName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), className(), fromClassKey(), fromClassName()
                {
                }
                public ParsingContext* ctx;
                public ForwardClassDeclarationNode* value;
                public UniquePtr<Node> className;
                public ClassKey fromClassKey;
                public Node* fromClassName;
            }
        }

        public class ClassSpecifierRule : System.Text.Parsing.RuleParser
        {
            public ClassSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("ClassNode*"));
                AddLocalVariable(AttrOrVar(ToUtf32("Specifiers"), ToUtf32("defaultAccess")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ClassNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* classNodeNonterminalParser = GetNonterminal(ToUtf32("classNode"));
                classNodeNonterminalParser->SetPre(PreclassNode);
                classNodeNonterminalParser->SetPost(PostclassNode);
                NonterminalParser* memberSpecificationsNonterminalParser = GetNonterminal(ToUtf32("MemberSpecifications"));
                memberSpecificationsNonterminalParser->SetPre(PreMemberSpecifications);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromclassNode;
            }
            public void PreclassNode(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostclassNode(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromclassNode_value = stack.Pop();
                    context->fromclassNode = *cast<ValueObject<ClassNode*>*>(fromclassNode_value.Get());
                }
            }
            public void PreMemberSpecifications(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<ClassNode*>(context->value)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), defaultAccess(), fromclassNode()
                {
                }
                public ParsingContext* ctx;
                public ClassNode* value;
                public Specifiers defaultAccess;
                public ClassNode* fromclassNode;
            }
        }

        public class MemberSpecificationsRule : System.Text.Parsing.RuleParser
        {
            public MemberSpecificationsRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("ClassNode*"), ToUtf32("classNode")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> classNode_value = stack.Pop();
                context->classNode = *cast<ValueObject<ClassNode*>*>(classNode_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* memberSpecificationNonterminalParser = GetNonterminal(ToUtf32("MemberSpecification"));
                memberSpecificationNonterminalParser->SetPre(PreMemberSpecification);
            }
            public void PreMemberSpecification(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<ClassNode*>(context->classNode)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), classNode()
                {
                }
                public ParsingContext* ctx;
                public ClassNode* classNode;
            }
        }

        public class MemberSpecificationRule : System.Text.Parsing.RuleParser
        {
            public MemberSpecificationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("ClassNode*"), ToUtf32("classNode")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> classNode_value = stack.Pop();
                context->classNode = *cast<ValueObject<ClassNode*>*>(classNode_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* accessSpecifierNonterminalParser = GetNonterminal(ToUtf32("AccessSpecifier"));
                accessSpecifierNonterminalParser->SetPost(PostAccessSpecifier);
                NonterminalParser* m1NonterminalParser = GetNonterminal(ToUtf32("m1"));
                m1NonterminalParser->SetPre(Prem1);
                m1NonterminalParser->SetPost(Postm1);
                NonterminalParser* m2NonterminalParser = GetNonterminal(ToUtf32("m2"));
                m2NonterminalParser->SetPre(Prem2);
                m2NonterminalParser->SetPost(Postm2);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->classNode->AddMemberDeclaration(context->fromm1);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->classNode->AddMemberDeclaration(context->fromm2);
            }
            public void PostAccessSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromAccessSpecifier_value = stack.Pop();
                    context->fromAccessSpecifier = *cast<ValueObject<Specifiers>*>(fromAccessSpecifier_value.Get());
                }
            }
            public void Prem1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->fromAccessSpecifier)));
            }
            public void Postm1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromm1_value = stack.Pop();
                    context->fromm1 = *cast<ValueObject<Node*>*>(fromm1_value.Get());
                }
            }
            public void Prem2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->classNode->DefaultAccess())));
            }
            public void Postm2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromm2_value = stack.Pop();
                    context->fromm2 = *cast<ValueObject<Node*>*>(fromm2_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), classNode(), fromAccessSpecifier(), fromm1(), fromm2()
                {
                }
                public ParsingContext* ctx;
                public ClassNode* classNode;
                public Specifiers fromAccessSpecifier;
                public Node* fromm1;
                public Node* fromm2;
            }
        }

        public class MemberDeclarationRule : System.Text.Parsing.RuleParser
        {
            public MemberDeclarationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("Specifiers"), ToUtf32("accessSpecifier")));
                SetValueTypeName(ToUtf32("Node*"));
                AddLocalVariable(AttrOrVar(ToUtf32("Specifiers"), ToUtf32("specifiers")));
                AddLocalVariable(AttrOrVar(ToUtf32("bool"), ToUtf32("functionDeclarator")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> accessSpecifier_value = stack.Pop();
                context->accessSpecifier = *cast<ValueObject<Specifiers>*>(accessSpecifier_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                ActionParser* a6ActionParser = GetAction(ToUtf32("A6"));
                a6ActionParser->SetAction(A6Action);
                ActionParser* a7ActionParser = GetAction(ToUtf32("A7"));
                a7ActionParser->SetAction(A7Action);
                ActionParser* a8ActionParser = GetAction(ToUtf32("A8"));
                a8ActionParser->SetAction(A8Action);
                ActionParser* a9ActionParser = GetAction(ToUtf32("A9"));
                a9ActionParser->SetAction(A9Action);
                ActionParser* a10ActionParser = GetAction(ToUtf32("A10"));
                a10ActionParser->SetAction(A10Action);
                ActionParser* a11ActionParser = GetAction(ToUtf32("A11"));
                a11ActionParser->SetAction(A11Action);
                ActionParser* a12ActionParser = GetAction(ToUtf32("A12"));
                a12ActionParser->SetAction(A12Action);
                ActionParser* a13ActionParser = GetAction(ToUtf32("A13"));
                a13ActionParser->SetAction(A13Action);
                NonterminalParser* declSpecifiersNonterminalParser = GetNonterminal(ToUtf32("DeclSpecifiers"));
                declSpecifiersNonterminalParser->SetPost(PostDeclSpecifiers);
                NonterminalParser* typeNonterminalParser = GetNonterminal(ToUtf32("type"));
                typeNonterminalParser->SetPre(Pretype);
                typeNonterminalParser->SetPost(Posttype);
                NonterminalParser* declaratorNonterminalParser = GetNonterminal(ToUtf32("declarator"));
                declaratorNonterminalParser->SetPre(Predeclarator);
                declaratorNonterminalParser->SetPost(Postdeclarator);
                NonterminalParser* virtPureSpecifiersNonterminalParser = GetNonterminal(ToUtf32("VirtPureSpecifiers"));
                virtPureSpecifiersNonterminalParser->SetPre(PreVirtPureSpecifiers);
                virtPureSpecifiersNonterminalParser->SetPost(PostVirtPureSpecifiers);
                NonterminalParser* initializerNonterminalParser = GetNonterminal(ToUtf32("initializer"));
                initializerNonterminalParser->SetPre(Preinitializer);
                initializerNonterminalParser->SetPost(Postinitializer);
                NonterminalParser* specialMemberFunctionDeclarationNonterminalParser = GetNonterminal(ToUtf32("SpecialMemberFunctionDeclaration"));
                specialMemberFunctionDeclarationNonterminalParser->SetPre(PreSpecialMemberFunctionDeclaration);
                specialMemberFunctionDeclarationNonterminalParser->SetPost(PostSpecialMemberFunctionDeclaration);
                NonterminalParser* functionDefinitionNonterminalParser = GetNonterminal(ToUtf32("FunctionDefinition"));
                functionDefinitionNonterminalParser->SetPre(PreFunctionDefinition);
                functionDefinitionNonterminalParser->SetPost(PostFunctionDefinition);
                NonterminalParser* specialMemberFunctionDefinitionNonterminalParser = GetNonterminal(ToUtf32("SpecialMemberFunctionDefinition"));
                specialMemberFunctionDefinitionNonterminalParser->SetPre(PreSpecialMemberFunctionDefinition);
                specialMemberFunctionDefinitionNonterminalParser->SetPost(PostSpecialMemberFunctionDefinition);
                NonterminalParser* usingDeclarationNonterminalParser = GetNonterminal(ToUtf32("UsingDeclaration"));
                usingDeclarationNonterminalParser->SetPre(PreUsingDeclaration);
                usingDeclarationNonterminalParser->SetPost(PostUsingDeclaration);
                NonterminalParser* typedefDeclarationNonterminalParser = GetNonterminal(ToUtf32("TypedefDeclaration"));
                typedefDeclarationNonterminalParser->SetPre(PreTypedefDeclaration);
                typedefDeclarationNonterminalParser->SetPost(PostTypedefDeclaration);
                NonterminalParser* templateDeclarationNonterminalParser = GetNonterminal(ToUtf32("TemplateDeclaration"));
                templateDeclarationNonterminalParser->SetPre(PreTemplateDeclaration);
                templateDeclarationNonterminalParser->SetPost(PostTemplateDeclaration);
                NonterminalParser* classDeclarationNonterminalParser = GetNonterminal(ToUtf32("ClassDeclaration"));
                classDeclarationNonterminalParser->SetPre(PreClassDeclaration);
                classDeclarationNonterminalParser->SetPost(PostClassDeclaration);
                NonterminalParser* enumDeclarationNonterminalParser = GetNonterminal(ToUtf32("EnumDeclaration"));
                enumDeclarationNonterminalParser->SetPre(PreEnumDeclaration);
                enumDeclarationNonterminalParser->SetPost(PostEnumDeclaration);
                NonterminalParser* aliasDeclarationNonterminalParser = GetNonterminal(ToUtf32("AliasDeclaration"));
                aliasDeclarationNonterminalParser->SetPre(PreAliasDeclaration);
                aliasDeclarationNonterminalParser->SetPost(PostAliasDeclaration);
                NonterminalParser* forwardClassDeclarationNonterminalParser = GetNonterminal(ToUtf32("ForwardClassDeclaration"));
                forwardClassDeclarationNonterminalParser->SetPre(PreForwardClassDeclaration);
                forwardClassDeclarationNonterminalParser->SetPost(PostForwardClassDeclaration);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new MemberDeclarationNode(span, cast<Specifiers>(context->accessSpecifier | context->specifiers), context->fromtype, context->fromdeclarator, context->frominitializer);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->specifiers = context->fromDeclSpecifiers;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->functionDeclarator = IsFunctionDeclaratorNode(context->fromdeclarator);
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->specifiers = cast<Specifiers>(context->specifiers | context->fromVirtPureSpecifiers);
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSpecialMemberFunctionDeclaration;
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromFunctionDefinition;
            }
            public void A6Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSpecialMemberFunctionDefinition;
            }
            public void A7Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromUsingDeclaration;
            }
            public void A8Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromTypedefDeclaration;
            }
            public void A9Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromTemplateDeclaration;
            }
            public void A10Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromClassDeclaration;
            }
            public void A11Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromEnumDeclaration;
            }
            public void A12Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromAliasDeclaration;
            }
            public void A13Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromForwardClassDeclaration;
            }
            public void PostDeclSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDeclSpecifiers_value = stack.Pop();
                    context->fromDeclSpecifiers = *cast<ValueObject<Specifiers>*>(fromDeclSpecifiers_value.Get());
                }
            }
            public void Pretype(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Posttype(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromtype_value = stack.Pop();
                    context->fromtype = *cast<ValueObject<Node*>*>(fromtype_value.Get());
                }
            }
            public void Predeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postdeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromdeclarator_value = stack.Pop();
                    context->fromdeclarator = *cast<ValueObject<Node*>*>(fromdeclarator_value.Get());
                }
            }
            public void PreVirtPureSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<bool>(context->functionDeclarator)));
            }
            public void PostVirtPureSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromVirtPureSpecifiers_value = stack.Pop();
                    context->fromVirtPureSpecifiers = *cast<ValueObject<Specifiers>*>(fromVirtPureSpecifiers_value.Get());
                }
            }
            public void Preinitializer(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postinitializer(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> frominitializer_value = stack.Pop();
                    context->frominitializer = *cast<ValueObject<Node*>*>(frominitializer_value.Get());
                }
            }
            public void PreSpecialMemberFunctionDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostSpecialMemberFunctionDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSpecialMemberFunctionDeclaration_value = stack.Pop();
                    context->fromSpecialMemberFunctionDeclaration = *cast<ValueObject<MemberDeclarationNode*>*>(fromSpecialMemberFunctionDeclaration_value.Get());
                }
            }
            public void PreFunctionDefinition(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostFunctionDefinition(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromFunctionDefinition_value = stack.Pop();
                    context->fromFunctionDefinition = *cast<ValueObject<FunctionNode*>*>(fromFunctionDefinition_value.Get());
                }
            }
            public void PreSpecialMemberFunctionDefinition(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostSpecialMemberFunctionDefinition(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSpecialMemberFunctionDefinition_value = stack.Pop();
                    context->fromSpecialMemberFunctionDefinition = *cast<ValueObject<SpecialMemberFunctionNode*>*>(fromSpecialMemberFunctionDefinition_value.Get());
                }
            }
            public void PreUsingDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostUsingDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromUsingDeclaration_value = stack.Pop();
                    context->fromUsingDeclaration = *cast<ValueObject<UsingDeclarationNode*>*>(fromUsingDeclaration_value.Get());
                }
            }
            public void PreTypedefDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostTypedefDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromTypedefDeclaration_value = stack.Pop();
                    context->fromTypedefDeclaration = *cast<ValueObject<TypedefDeclarationNode*>*>(fromTypedefDeclaration_value.Get());
                }
            }
            public void PreTemplateDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostTemplateDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromTemplateDeclaration_value = stack.Pop();
                    context->fromTemplateDeclaration = *cast<ValueObject<TemplateDeclarationNode*>*>(fromTemplateDeclaration_value.Get());
                }
            }
            public void PreClassDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostClassDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClassDeclaration_value = stack.Pop();
                    context->fromClassDeclaration = *cast<ValueObject<ClassNode*>*>(fromClassDeclaration_value.Get());
                }
            }
            public void PreEnumDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostEnumDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromEnumDeclaration_value = stack.Pop();
                    context->fromEnumDeclaration = *cast<ValueObject<EnumTypeNode*>*>(fromEnumDeclaration_value.Get());
                }
            }
            public void PreAliasDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostAliasDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromAliasDeclaration_value = stack.Pop();
                    context->fromAliasDeclaration = *cast<ValueObject<UsingTypeDeclarationNode*>*>(fromAliasDeclaration_value.Get());
                }
            }
            public void PreForwardClassDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostForwardClassDeclaration(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromForwardClassDeclaration_value = stack.Pop();
                    context->fromForwardClassDeclaration = *cast<ValueObject<ForwardClassDeclarationNode*>*>(fromForwardClassDeclaration_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), accessSpecifier(), value(), specifiers(), functionDeclarator(), fromDeclSpecifiers(), fromtype(), fromdeclarator(), fromVirtPureSpecifiers(), frominitializer(), fromSpecialMemberFunctionDeclaration(), fromFunctionDefinition(), fromSpecialMemberFunctionDefinition(), fromUsingDeclaration(), fromTypedefDeclaration(), fromTemplateDeclaration(), fromClassDeclaration(), fromEnumDeclaration(), fromAliasDeclaration(), fromForwardClassDeclaration()
                {
                }
                public ParsingContext* ctx;
                public Specifiers accessSpecifier;
                public Node* value;
                public Specifiers specifiers;
                public bool functionDeclarator;
                public Specifiers fromDeclSpecifiers;
                public Node* fromtype;
                public Node* fromdeclarator;
                public Specifiers fromVirtPureSpecifiers;
                public Node* frominitializer;
                public MemberDeclarationNode* fromSpecialMemberFunctionDeclaration;
                public FunctionNode* fromFunctionDefinition;
                public SpecialMemberFunctionNode* fromSpecialMemberFunctionDefinition;
                public UsingDeclarationNode* fromUsingDeclaration;
                public TypedefDeclarationNode* fromTypedefDeclaration;
                public TemplateDeclarationNode* fromTemplateDeclaration;
                public ClassNode* fromClassDeclaration;
                public EnumTypeNode* fromEnumDeclaration;
                public UsingTypeDeclarationNode* fromAliasDeclaration;
                public ForwardClassDeclarationNode* fromForwardClassDeclaration;
            }
        }

        public class SpecialMemberFunctionDeclarationRule : System.Text.Parsing.RuleParser
        {
            public SpecialMemberFunctionDeclarationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("MemberDeclarationNode*"));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Node>"), ToUtf32("declarator")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<MemberDeclarationNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* declSpecifiersNonterminalParser = GetNonterminal(ToUtf32("DeclSpecifiers"));
                declSpecifiersNonterminalParser->SetPost(PostDeclSpecifiers);
                NonterminalParser* declaratorNonterminalParser = GetNonterminal(ToUtf32("Declarator"));
                declaratorNonterminalParser->SetPre(PreDeclarator);
                declaratorNonterminalParser->SetPost(PostDeclarator);
                NonterminalParser* pureNonterminalParser = GetNonterminal(ToUtf32("pure"));
                pureNonterminalParser->SetPre(Prepure);
                pureNonterminalParser->SetPost(Postpure);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new MemberDeclarationNode(span, cast<Specifiers>(context->fromDeclSpecifiers | context->frompure), null, context->declarator.Release(), null);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->declarator.Reset(context->fromDeclarator);
                pass = IsFunctionDeclaratorNode(context->declarator.Get());
            }
            public void PostDeclSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDeclSpecifiers_value = stack.Pop();
                    context->fromDeclSpecifiers = *cast<ValueObject<Specifiers>*>(fromDeclSpecifiers_value.Get());
                }
            }
            public void PreDeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostDeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDeclarator_value = stack.Pop();
                    context->fromDeclarator = *cast<ValueObject<Node*>*>(fromDeclarator_value.Get());
                }
            }
            public void Prepure(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<bool>(true)));
            }
            public void Postpure(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> frompure_value = stack.Pop();
                    context->frompure = *cast<ValueObject<Specifiers>*>(frompure_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), declarator(), fromDeclSpecifiers(), fromDeclarator(), frompure()
                {
                }
                public ParsingContext* ctx;
                public MemberDeclarationNode* value;
                public UniquePtr<Node> declarator;
                public Specifiers fromDeclSpecifiers;
                public Node* fromDeclarator;
                public Specifiers frompure;
            }
        }

        public class ClassHeadRule : System.Text.Parsing.RuleParser
        {
            public ClassHeadRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("ClassNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ClassNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* classKeyNonterminalParser = GetNonterminal(ToUtf32("classKey"));
                classKeyNonterminalParser->SetPost(PostclassKey);
                NonterminalParser* classNameNonterminalParser = GetNonterminal(ToUtf32("className"));
                classNameNonterminalParser->SetPre(PreclassName);
                classNameNonterminalParser->SetPost(PostclassName);
                NonterminalParser* specifiersNonterminalParser = GetNonterminal(ToUtf32("specifiers"));
                specifiersNonterminalParser->SetPost(Postspecifiers);
                NonterminalParser* baseClauseNonterminalParser = GetNonterminal(ToUtf32("BaseClause"));
                baseClauseNonterminalParser->SetPre(PreBaseClause);
                baseClauseNonterminalParser->SetPost(PostBaseClause);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new ClassNode(span, context->fromclassKey, context->fromclassName, context->fromspecifiers, context->fromBaseClause);
            }
            public void PostclassKey(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromclassKey_value = stack.Pop();
                    context->fromclassKey = *cast<ValueObject<ClassKey>*>(fromclassKey_value.Get());
                }
            }
            public void PreclassName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostclassName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromclassName_value = stack.Pop();
                    context->fromclassName = *cast<ValueObject<Node*>*>(fromclassName_value.Get());
                }
            }
            public void Postspecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromspecifiers_value = stack.Pop();
                    context->fromspecifiers = *cast<ValueObject<Specifiers>*>(fromspecifiers_value.Get());
                }
            }
            public void PreBaseClause(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostBaseClause(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromBaseClause_value = stack.Pop();
                    context->fromBaseClause = *cast<ValueObject<BaseClassListNode*>*>(fromBaseClause_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromclassKey(), fromclassName(), fromspecifiers(), fromBaseClause()
                {
                }
                public ParsingContext* ctx;
                public ClassNode* value;
                public ClassKey fromclassKey;
                public Node* fromclassName;
                public Specifiers fromspecifiers;
                public BaseClassListNode* fromBaseClause;
            }
        }

        public class ClassKeyRule : System.Text.Parsing.RuleParser
        {
            public ClassKeyRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ClassKey"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ClassKey>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ClassKey.class_;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ClassKey.struct_;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ClassKey.union_;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ClassKey value;
            }
        }

        public class ClassNameRule : System.Text.Parsing.RuleParser
        {
            public ClassNameRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("Node*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* qualifiedIdNonterminalParser = GetNonterminal(ToUtf32("QualifiedId"));
                qualifiedIdNonterminalParser->SetPre(PreQualifiedId);
                qualifiedIdNonterminalParser->SetPost(PostQualifiedId);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromQualifiedId;
            }
            public void PreQualifiedId(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostQualifiedId(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromQualifiedId_value = stack.Pop();
                    context->fromQualifiedId = *cast<ValueObject<Node*>*>(fromQualifiedId_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromQualifiedId()
                {
                }
                public ParsingContext* ctx;
                public Node* value;
                public Node* fromQualifiedId;
            }
        }

        public class ClassVirtSpecifiersRule : System.Text.Parsing.RuleParser
        {
            public ClassVirtSpecifiersRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* classVirtSpecifierNonterminalParser = GetNonterminal(ToUtf32("ClassVirtSpecifier"));
                classVirtSpecifierNonterminalParser->SetPost(PostClassVirtSpecifier);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = cast<Specifiers>(context->value | context->fromClassVirtSpecifier);
            }
            public void PostClassVirtSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClassVirtSpecifier_value = stack.Pop();
                    context->fromClassVirtSpecifier = *cast<ValueObject<Specifiers>*>(fromClassVirtSpecifier_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromClassVirtSpecifier()
                {
                }
                public Specifiers value;
                public Specifiers fromClassVirtSpecifier;
            }
        }

        public class ClassVirtSpecifierRule : System.Text.Parsing.RuleParser
        {
            public ClassVirtSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.final;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.explicit_;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public Specifiers value;
            }
        }

        public class BaseClauseRule : System.Text.Parsing.RuleParser
        {
            public BaseClauseRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("BaseClassListNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<BaseClassListNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* baseClassSpecifierListNonterminalParser = GetNonterminal(ToUtf32("BaseClassSpecifierList"));
                baseClassSpecifierListNonterminalParser->SetPre(PreBaseClassSpecifierList);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new BaseClassListNode(span);
            }
            public void PreBaseClassSpecifierList(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<BaseClassListNode*>(context->value)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value()
                {
                }
                public ParsingContext* ctx;
                public BaseClassListNode* value;
            }
        }

        public class BaseClassSpecifierListRule : System.Text.Parsing.RuleParser
        {
            public BaseClassSpecifierListRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("BaseClassListNode*"), ToUtf32("baseClassList")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> baseClassList_value = stack.Pop();
                context->baseClassList = *cast<ValueObject<BaseClassListNode*>*>(baseClassList_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* b1NonterminalParser = GetNonterminal(ToUtf32("b1"));
                b1NonterminalParser->SetPre(Preb1);
                b1NonterminalParser->SetPost(Postb1);
                NonterminalParser* b2NonterminalParser = GetNonterminal(ToUtf32("b2"));
                b2NonterminalParser->SetPre(Preb2);
                b2NonterminalParser->SetPost(Postb2);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->baseClassList->AddNode(context->fromb1);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->baseClassList->AddNode(context->fromb2);
            }
            public void Preb1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postb1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromb1_value = stack.Pop();
                    context->fromb1 = *cast<ValueObject<BaseClassNode*>*>(fromb1_value.Get());
                }
            }
            public void Preb2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postb2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromb2_value = stack.Pop();
                    context->fromb2 = *cast<ValueObject<BaseClassNode*>*>(fromb2_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), baseClassList(), fromb1(), fromb2()
                {
                }
                public ParsingContext* ctx;
                public BaseClassListNode* baseClassList;
                public BaseClassNode* fromb1;
                public BaseClassNode* fromb2;
            }
        }

        public class BaseClassSpecifierRule : System.Text.Parsing.RuleParser
        {
            public BaseClassSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("BaseClassNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<BaseClassNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* baseSpecifiersNonterminalParser = GetNonterminal(ToUtf32("BaseSpecifiers"));
                baseSpecifiersNonterminalParser->SetPost(PostBaseSpecifiers);
                NonterminalParser* classNameNonterminalParser = GetNonterminal(ToUtf32("ClassName"));
                classNameNonterminalParser->SetPre(PreClassName);
                classNameNonterminalParser->SetPost(PostClassName);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new BaseClassNode(span, context->fromBaseSpecifiers, context->fromClassName);
            }
            public void PostBaseSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromBaseSpecifiers_value = stack.Pop();
                    context->fromBaseSpecifiers = *cast<ValueObject<Specifiers>*>(fromBaseSpecifiers_value.Get());
                }
            }
            public void PreClassName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostClassName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClassName_value = stack.Pop();
                    context->fromClassName = *cast<ValueObject<Node*>*>(fromClassName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromBaseSpecifiers(), fromClassName()
                {
                }
                public ParsingContext* ctx;
                public BaseClassNode* value;
                public Specifiers fromBaseSpecifiers;
                public Node* fromClassName;
            }
        }

        public class BaseSpecifiersRule : System.Text.Parsing.RuleParser
        {
            public BaseSpecifiersRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* baseSpecifierNonterminalParser = GetNonterminal(ToUtf32("BaseSpecifier"));
                baseSpecifierNonterminalParser->SetPost(PostBaseSpecifier);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = cast<Specifiers>(context->value | context->fromBaseSpecifier);
            }
            public void PostBaseSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromBaseSpecifier_value = stack.Pop();
                    context->fromBaseSpecifier = *cast<ValueObject<Specifiers>*>(fromBaseSpecifier_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromBaseSpecifier()
                {
                }
                public Specifiers value;
                public Specifiers fromBaseSpecifier;
            }
        }

        public class BaseSpecifierRule : System.Text.Parsing.RuleParser
        {
            public BaseSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* accessSpecifierNonterminalParser = GetNonterminal(ToUtf32("AccessSpecifier"));
                accessSpecifierNonterminalParser->SetPost(PostAccessSpecifier);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.virtual_;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromAccessSpecifier;
            }
            public void PostAccessSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromAccessSpecifier_value = stack.Pop();
                    context->fromAccessSpecifier = *cast<ValueObject<Specifiers>*>(fromAccessSpecifier_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromAccessSpecifier()
                {
                }
                public Specifiers value;
                public Specifiers fromAccessSpecifier;
            }
        }

        public class AccessSpecifierRule : System.Text.Parsing.RuleParser
        {
            public AccessSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.public_;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.protected_;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.private_;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public Specifiers value;
            }
        }

        public class VirtPureSpecifiersRule : System.Text.Parsing.RuleParser
        {
            public VirtPureSpecifiersRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("bool"), ToUtf32("functionMember")));
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> functionMember_value = stack.Pop();
                context->functionMember = *cast<ValueObject<bool>*>(functionMember_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* virtSpecifierNonterminalParser = GetNonterminal(ToUtf32("VirtSpecifier"));
                virtSpecifierNonterminalParser->SetPre(PreVirtSpecifier);
                virtSpecifierNonterminalParser->SetPost(PostVirtSpecifier);
                NonterminalParser* pureSpecifierNonterminalParser = GetNonterminal(ToUtf32("PureSpecifier"));
                pureSpecifierNonterminalParser->SetPre(PrePureSpecifier);
                pureSpecifierNonterminalParser->SetPost(PostPureSpecifier);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = cast<Specifiers>(context->value | context->fromVirtSpecifier);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = cast<Specifiers>(context->value | context->fromPureSpecifier);
            }
            public void PreVirtSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<bool>(context->functionMember)));
            }
            public void PostVirtSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromVirtSpecifier_value = stack.Pop();
                    context->fromVirtSpecifier = *cast<ValueObject<Specifiers>*>(fromVirtSpecifier_value.Get());
                }
            }
            public void PrePureSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<bool>(context->functionMember)));
            }
            public void PostPureSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromPureSpecifier_value = stack.Pop();
                    context->fromPureSpecifier = *cast<ValueObject<Specifiers>*>(fromPureSpecifier_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : functionMember(), value(), fromVirtSpecifier(), fromPureSpecifier()
                {
                }
                public bool functionMember;
                public Specifiers value;
                public Specifiers fromVirtSpecifier;
                public Specifiers fromPureSpecifier;
            }
        }

        public class VirtSpecifierRule : System.Text.Parsing.RuleParser
        {
            public VirtSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("bool"), ToUtf32("functionMember")));
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> functionMember_value = stack.Pop();
                context->functionMember = *cast<ValueObject<bool>*>(functionMember_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.override_;
                pass = context->functionMember;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.final;
                pass = context->functionMember;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.new_;
                pass = context->functionMember;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : functionMember(), value()
                {
                }
                public bool functionMember;
                public Specifiers value;
            }
        }

        public class PureSpecifierRule : System.Text.Parsing.RuleParser
        {
            public PureSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("bool"), ToUtf32("functionMember")));
                SetValueTypeName(ToUtf32("Specifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> functionMember_value = stack.Pop();
                context->functionMember = *cast<ValueObject<bool>*>(functionMember_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Specifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = Specifiers.pure;
                pass = context->functionMember;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : functionMember(), value()
                {
                }
                public bool functionMember;
                public Specifiers value;
            }
        }

        public class SpecialMemberFunctionDefinitionRule : System.Text.Parsing.RuleParser
        {
            public SpecialMemberFunctionDefinitionRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("SpecialMemberFunctionNode*"));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Node>"), ToUtf32("declarator")));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Node>"), ToUtf32("ctorInitializer")));
                AddLocalVariable(AttrOrVar(ToUtf32("Specifiers"), ToUtf32("defaultOrDeleteSpecifier")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<SpecialMemberFunctionNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                NonterminalParser* declSpecifiersNonterminalParser = GetNonterminal(ToUtf32("DeclSpecifiers"));
                declSpecifiersNonterminalParser->SetPost(PostDeclSpecifiers);
                NonterminalParser* declaratorNonterminalParser = GetNonterminal(ToUtf32("Declarator"));
                declaratorNonterminalParser->SetPre(PreDeclarator);
                declaratorNonterminalParser->SetPost(PostDeclarator);
                NonterminalParser* ctorInitializerNonterminalParser = GetNonterminal(ToUtf32("CtorInitializer"));
                ctorInitializerNonterminalParser->SetPre(PreCtorInitializer);
                ctorInitializerNonterminalParser->SetPost(PostCtorInitializer);
                NonterminalParser* functionBodyNonterminalParser = GetNonterminal(ToUtf32("FunctionBody"));
                functionBodyNonterminalParser->SetPre(PreFunctionBody);
                functionBodyNonterminalParser->SetPost(PostFunctionBody);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new SpecialMemberFunctionNode(span, cast<Specifiers>(context->fromDeclSpecifiers | context->defaultOrDeleteSpecifier), context->declarator.Release(), context->ctorInitializer.Release(), context->fromFunctionBody);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->declarator.Reset(context->fromDeclarator);
                pass = IsFunctionDeclaratorNode(context->declarator.Get());
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->ctorInitializer.Reset(context->fromCtorInitializer);
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->defaultOrDeleteSpecifier = Specifiers.default_;
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->defaultOrDeleteSpecifier = Specifiers.delete_;
            }
            public void PostDeclSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDeclSpecifiers_value = stack.Pop();
                    context->fromDeclSpecifiers = *cast<ValueObject<Specifiers>*>(fromDeclSpecifiers_value.Get());
                }
            }
            public void PreDeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostDeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDeclarator_value = stack.Pop();
                    context->fromDeclarator = *cast<ValueObject<Node*>*>(fromDeclarator_value.Get());
                }
            }
            public void PreCtorInitializer(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostCtorInitializer(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCtorInitializer_value = stack.Pop();
                    context->fromCtorInitializer = *cast<ValueObject<CtorInitializerNode*>*>(fromCtorInitializer_value.Get());
                }
            }
            public void PreFunctionBody(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostFunctionBody(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromFunctionBody_value = stack.Pop();
                    context->fromFunctionBody = *cast<ValueObject<CompoundStatementNode*>*>(fromFunctionBody_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), declarator(), ctorInitializer(), defaultOrDeleteSpecifier(), fromDeclSpecifiers(), fromDeclarator(), fromCtorInitializer(), fromFunctionBody()
                {
                }
                public ParsingContext* ctx;
                public SpecialMemberFunctionNode* value;
                public UniquePtr<Node> declarator;
                public UniquePtr<Node> ctorInitializer;
                public Specifiers defaultOrDeleteSpecifier;
                public Specifiers fromDeclSpecifiers;
                public Node* fromDeclarator;
                public CtorInitializerNode* fromCtorInitializer;
                public CompoundStatementNode* fromFunctionBody;
            }
        }

        public class CtorInitializerRule : System.Text.Parsing.RuleParser
        {
            public CtorInitializerRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("CtorInitializerNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<CtorInitializerNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* memberInitializerListNonterminalParser = GetNonterminal(ToUtf32("MemberInitializerList"));
                memberInitializerListNonterminalParser->SetPre(PreMemberInitializerList);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new CtorInitializerNode(span);
            }
            public void PreMemberInitializerList(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<CtorInitializerNode*>(context->value)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value()
                {
                }
                public ParsingContext* ctx;
                public CtorInitializerNode* value;
            }
        }

        public class MemberInitializerListRule : System.Text.Parsing.RuleParser
        {
            public MemberInitializerListRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("CtorInitializerNode*"), ToUtf32("ctorInitializer")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctorInitializer_value = stack.Pop();
                context->ctorInitializer = *cast<ValueObject<CtorInitializerNode*>*>(ctorInitializer_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* leftNonterminalParser = GetNonterminal(ToUtf32("left"));
                leftNonterminalParser->SetPre(Preleft);
                leftNonterminalParser->SetPost(Postleft);
                NonterminalParser* rightNonterminalParser = GetNonterminal(ToUtf32("right"));
                rightNonterminalParser->SetPre(Preright);
                rightNonterminalParser->SetPost(Postright);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->ctorInitializer->AddMemberInitializer(context->fromleft);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->ctorInitializer->AddMemberInitializer(context->fromright);
            }
            public void Preleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context->fromleft = *cast<ValueObject<MemberInitializerNode*>*>(fromleft_value.Get());
                }
            }
            public void Preright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context->fromright = *cast<ValueObject<MemberInitializerNode*>*>(fromright_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), ctorInitializer(), fromleft(), fromright()
                {
                }
                public ParsingContext* ctx;
                public CtorInitializerNode* ctorInitializer;
                public MemberInitializerNode* fromleft;
                public MemberInitializerNode* fromright;
            }
        }

        public class MemberInitializerRule : System.Text.Parsing.RuleParser
        {
            public MemberInitializerRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("MemberInitializerNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<MemberInitializerNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* m1NonterminalParser = GetNonterminal(ToUtf32("m1"));
                m1NonterminalParser->SetPre(Prem1);
                m1NonterminalParser->SetPost(Postm1);
                NonterminalParser* argsNonterminalParser = GetNonterminal(ToUtf32("args"));
                argsNonterminalParser->SetPre(Preargs);
                argsNonterminalParser->SetPost(Postargs);
                NonterminalParser* m2NonterminalParser = GetNonterminal(ToUtf32("m2"));
                m2NonterminalParser->SetPre(Prem2);
                m2NonterminalParser->SetPost(Postm2);
                NonterminalParser* bracedInitializerListNonterminalParser = GetNonterminal(ToUtf32("BracedInitializerList"));
                bracedInitializerListNonterminalParser->SetPre(PreBracedInitializerList);
                bracedInitializerListNonterminalParser->SetPost(PostBracedInitializerList);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new MemberInitializerNode(span, context->fromm1, context->fromargs);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new MemberInitializerNode(span, context->fromm2, context->fromBracedInitializerList);
            }
            public void Prem1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postm1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromm1_value = stack.Pop();
                    context->fromm1 = *cast<ValueObject<Node*>*>(fromm1_value.Get());
                }
            }
            public void Preargs(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postargs(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromargs_value = stack.Pop();
                    context->fromargs = *cast<ValueObject<ExpressionListNode*>*>(fromargs_value.Get());
                }
            }
            public void Prem2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postm2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromm2_value = stack.Pop();
                    context->fromm2 = *cast<ValueObject<Node*>*>(fromm2_value.Get());
                }
            }
            public void PreBracedInitializerList(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostBracedInitializerList(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromBracedInitializerList_value = stack.Pop();
                    context->fromBracedInitializerList = *cast<ValueObject<BracedInitializerListNode*>*>(fromBracedInitializerList_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromm1(), fromargs(), fromm2(), fromBracedInitializerList()
                {
                }
                public ParsingContext* ctx;
                public MemberInitializerNode* value;
                public Node* fromm1;
                public ExpressionListNode* fromargs;
                public Node* fromm2;
                public BracedInitializerListNode* fromBracedInitializerList;
            }
        }

        public class MemberInitializerIdRule : System.Text.Parsing.RuleParser
        {
            public MemberInitializerIdRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("Node*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* qualifiedIdNonterminalParser = GetNonterminal(ToUtf32("QualifiedId"));
                qualifiedIdNonterminalParser->SetPre(PreQualifiedId);
                qualifiedIdNonterminalParser->SetPost(PostQualifiedId);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromQualifiedId;
            }
            public void PreQualifiedId(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostQualifiedId(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromQualifiedId_value = stack.Pop();
                    context->fromQualifiedId = *cast<ValueObject<Node*>*>(fromQualifiedId_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromQualifiedId()
                {
                }
                public ParsingContext* ctx;
                public Node* value;
                public Node* fromQualifiedId;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("cppparser.FunctionGrammar"));
            if (grammar0 == null)
            {
                grammar0 = new cppparser.FunctionGrammar(pd);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = pd->GetGrammar(ToUtf32("cppparser.TemplateGrammar"));
            if (grammar1 == null)
            {
                grammar1 = new cppparser.TemplateGrammar(pd);
            }
            AddGrammarReference(grammar1);
            Grammar* grammar2 = pd->GetGrammar(ToUtf32("cppparser.IdentifierGrammar"));
            if (grammar2 == null)
            {
                grammar2 = new cppparser.IdentifierGrammar(pd);
            }
            AddGrammarReference(grammar2);
            Grammar* grammar3 = pd->GetGrammar(ToUtf32("cppparser.ExpressionGrammar"));
            if (grammar3 == null)
            {
                grammar3 = new cppparser.ExpressionGrammar(pd);
            }
            AddGrammarReference(grammar3);
            Grammar* grammar4 = pd->GetGrammar(ToUtf32("cppparser.EnumerationGrammar"));
            if (grammar4 == null)
            {
                grammar4 = new cppparser.EnumerationGrammar(pd);
            }
            AddGrammarReference(grammar4);
            Grammar* grammar5 = pd->GetGrammar(ToUtf32("cppparser.DeclarationGrammar"));
            if (grammar5 == null)
            {
                grammar5 = new cppparser.DeclarationGrammar(pd);
            }
            AddGrammarReference(grammar5);
            Grammar* grammar6 = pd->GetGrammar(ToUtf32("cppparser.TypeExprGrammar"));
            if (grammar6 == null)
            {
                grammar6 = new cppparser.TypeExprGrammar(pd);
            }
            AddGrammarReference(grammar6);
            Grammar* grammar7 = pd->GetGrammar(ToUtf32("cppparser.DeclaratorGrammar"));
            if (grammar7 == null)
            {
                grammar7 = new cppparser.DeclaratorGrammar(pd);
            }
            AddGrammarReference(grammar7);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("DeclSpecifiers"), this, ToUtf32("DeclarationGrammar.DeclSpecifiers")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("UsingDeclaration"), this, ToUtf32("DeclarationGrammar.UsingDeclaration")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("TypedefDeclaration"), this, ToUtf32("DeclarationGrammar.TypedefDeclaration")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("AliasDeclaration"), this, ToUtf32("DeclarationGrammar.AliasDeclaration")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("QualifiedId"), this, ToUtf32("IdentifierGrammar.QualifiedId")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("TypeExpr"), this, ToUtf32("TypeExprGrammar.TypeExpr")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("Declarator"), this, ToUtf32("DeclaratorGrammar.Declarator")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("BraceOrEqualInitializer"), this, ToUtf32("DeclaratorGrammar.BraceOrEqualInitializer")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("BracedInitializerList"), this, ToUtf32("DeclaratorGrammar.BracedInitializerList")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("FunctionDefinition"), this, ToUtf32("FunctionGrammar.FunctionDefinition")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("FunctionBody"), this, ToUtf32("FunctionGrammar.FunctionBody")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("TemplateDeclaration"), this, ToUtf32("TemplateGrammar.TemplateDeclaration")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("EnumDeclaration"), this, ToUtf32("EnumerationGrammar.EnumDeclaration")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("PossiblyEmptyArgumentList"), this, ToUtf32("ExpressionGrammar.PossiblyEmptyArgumentList")));
            AddRule(new ClassDeclarationRule(ToUtf32("ClassDeclaration"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("ClassSpecifier"), ToUtf32("ClassSpecifier"), 1),
                            new System.Text.Parsing.CharParser(';'))))));
            AddRule(new ForwardClassDeclarationRule(ToUtf32("ForwardClassDeclaration"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("ClassKey"), ToUtf32("ClassKey"), 0),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("ClassName"), ToUtf32("ClassName"), 1))),
                            new System.Text.Parsing.CharParser(';'))))));
            AddRule(new ClassSpecifierRule(ToUtf32("ClassSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("classNode"), ToUtf32("ClassHead"), 1)),
                            new System.Text.Parsing.CharParser('{')),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("MemberSpecifications"), ToUtf32("MemberSpecifications"), 2)),
                    new System.Text.Parsing.ExpectationParser(
                        new System.Text.Parsing.CharParser('}')))));
            AddRule(new MemberSpecificationsRule(ToUtf32("MemberSpecifications"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("MemberSpecification"), ToUtf32("MemberSpecification"), 2))));
            AddRule(new MemberSpecificationRule(ToUtf32("MemberSpecification"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("AccessSpecifier"), ToUtf32("AccessSpecifier"), 0),
                            new System.Text.Parsing.CharParser(':')),
                        new System.Text.Parsing.KleeneStarParser(
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("m1"), ToUtf32("MemberDeclaration"), 2))))),
                    new System.Text.Parsing.PositiveParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("m2"), ToUtf32("MemberDeclaration"), 2)))))));
            AddRule(new MemberDeclarationRule(ToUtf32("MemberDeclaration"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                                            new System.Text.Parsing.GroupingParser(
                                                                new System.Text.Parsing.SequenceParser(
                                                                    new System.Text.Parsing.SequenceParser(
                                                                        new System.Text.Parsing.SequenceParser(
                                                                            new System.Text.Parsing.SequenceParser(
                                                                                new System.Text.Parsing.SequenceParser(
                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("DeclSpecifiers"), ToUtf32("DeclSpecifiers"), 0)),
                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("type"), ToUtf32("TypeExpr"), 1)),
                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("declarator"), ToUtf32("Declarator"), 1))),
                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("VirtPureSpecifiers"), ToUtf32("VirtPureSpecifiers"), 1))),
                                                                        new System.Text.Parsing.OptionalParser(
                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("initializer"), ToUtf32("BraceOrEqualInitializer"), 1))),
                                                                    new System.Text.Parsing.CharParser(';')))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("SpecialMemberFunctionDeclaration"), ToUtf32("SpecialMemberFunctionDeclaration"), 1))),
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                                                        new System.Text.Parsing.GroupingParser(
                                                            new System.Text.Parsing.SequenceParser(
                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("FunctionDefinition"), ToUtf32("FunctionDefinition"), 1),
                                                                new System.Text.Parsing.OptionalParser(
                                                                    new System.Text.Parsing.CharParser(';')))))),
                                                new System.Text.Parsing.ActionParser(ToUtf32("A6"),
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("SpecialMemberFunctionDefinition"), ToUtf32("SpecialMemberFunctionDefinition"), 1))),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A7"),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("UsingDeclaration"), ToUtf32("UsingDeclaration"), 1))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A8"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("TypedefDeclaration"), ToUtf32("TypedefDeclaration"), 1))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A9"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("TemplateDeclaration"), ToUtf32("TemplateDeclaration"), 1))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A10"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("ClassDeclaration"), ToUtf32("ClassDeclaration"), 1))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A11"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("EnumDeclaration"), ToUtf32("EnumDeclaration"), 1))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A12"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("AliasDeclaration"), ToUtf32("AliasDeclaration"), 1))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A13"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("ForwardClassDeclaration"), ToUtf32("ForwardClassDeclaration"), 1)))));
            AddRule(new SpecialMemberFunctionDeclarationRule(ToUtf32("SpecialMemberFunctionDeclaration"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("DeclSpecifiers"), ToUtf32("DeclSpecifiers"), 0),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Declarator"), ToUtf32("Declarator"), 1))),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("pure"), ToUtf32("VirtPureSpecifiers"), 1)),
                            new System.Text.Parsing.CharParser(';'))))));
            AddRule(new ClassHeadRule(ToUtf32("ClassHead"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("classKey"), ToUtf32("ClassKey"), 0),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("className"), ToUtf32("ClassName"), 1)),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("specifiers"), ToUtf32("ClassVirtSpecifiers"), 0)),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("BaseClause"), ToUtf32("BaseClause"), 1)))))));
            AddRule(new ClassKeyRule(ToUtf32("ClassKey"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.KeywordParser(ToUtf32("class"))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                            new System.Text.Parsing.KeywordParser(ToUtf32("struct")))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("union"))))));
            AddRule(new ClassNameRule(ToUtf32("ClassName"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("QualifiedId"), ToUtf32("QualifiedId"), 1))));
            AddRule(new ClassVirtSpecifiersRule(ToUtf32("ClassVirtSpecifiers"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("ClassVirtSpecifier"), ToUtf32("ClassVirtSpecifier"), 0))))));
            AddRule(new ClassVirtSpecifierRule(ToUtf32("ClassVirtSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("final"))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("explicit"))))));
            AddRule(new BaseClauseRule(ToUtf32("BaseClause"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.CharParser(':')),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("BaseClassSpecifierList"), ToUtf32("BaseClassSpecifierList"), 2))));
            AddRule(new BaseClassSpecifierListRule(ToUtf32("BaseClassSpecifierList"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("b1"), ToUtf32("BaseClassSpecifier"), 1)),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser(','),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("b2"), ToUtf32("BaseClassSpecifier"), 1))))))));
            AddRule(new BaseClassSpecifierRule(ToUtf32("BaseClassSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("BaseSpecifiers"), ToUtf32("BaseSpecifiers"), 0),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("ClassName"), ToUtf32("ClassName"), 1))))));
            AddRule(new BaseSpecifiersRule(ToUtf32("BaseSpecifiers"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("BaseSpecifier"), ToUtf32("BaseSpecifier"), 0))))));
            AddRule(new BaseSpecifierRule(ToUtf32("BaseSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("virtual"))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("AccessSpecifier"), ToUtf32("AccessSpecifier"), 0)))));
            AddRule(new AccessSpecifierRule(ToUtf32("AccessSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.KeywordParser(ToUtf32("public"))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                            new System.Text.Parsing.KeywordParser(ToUtf32("protected")))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("private"))))));
            AddRule(new VirtPureSpecifiersRule(ToUtf32("VirtPureSpecifiers"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("VirtSpecifier"), ToUtf32("VirtSpecifier"), 1)))),
                    new System.Text.Parsing.OptionalParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("PureSpecifier"), ToUtf32("PureSpecifier"), 1)))))));
            AddRule(new VirtSpecifierRule(ToUtf32("VirtSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.KeywordParser(ToUtf32("override"))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                            new System.Text.Parsing.KeywordParser(ToUtf32("final")))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("new"))))));
            AddRule(new PureSpecifierRule(ToUtf32("PureSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('='),
                            new System.Text.Parsing.CharParser('0'))))));
            AddRule(new SpecialMemberFunctionDefinitionRule(ToUtf32("SpecialMemberFunctionDefinition"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("DeclSpecifiers"), ToUtf32("DeclSpecifiers"), 0),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Declarator"), ToUtf32("Declarator"), 1))),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("CtorInitializer"), ToUtf32("CtorInitializer"), 1))))),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("FunctionBody"), ToUtf32("FunctionBody"), 1),
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.CharParser('='),
                                            new System.Text.Parsing.GroupingParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                        new System.Text.Parsing.KeywordParser(ToUtf32("default"))),
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                        new System.Text.Parsing.KeywordParser(ToUtf32("delete")))))),
                                        new System.Text.Parsing.CharParser(';')))))))));
            AddRule(new CtorInitializerRule(ToUtf32("CtorInitializer"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.CharParser(':')),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("MemberInitializerList"), ToUtf32("MemberInitializerList"), 2))));
            AddRule(new MemberInitializerListRule(ToUtf32("MemberInitializerList"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("left"), ToUtf32("MemberInitializer"), 1)),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser(','),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("right"), ToUtf32("MemberInitializer"), 1))))))));
            AddRule(new MemberInitializerRule(ToUtf32("MemberInitializer"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("m1"), ToUtf32("MemberInitializerId"), 1),
                                        new System.Text.Parsing.CharParser('(')),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("args"), ToUtf32("PossiblyEmptyArgumentList"), 1)),
                                new System.Text.Parsing.CharParser(')')))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.GroupingParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("m2"), ToUtf32("MemberInitializerId"), 1),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("BracedInitializerList"), ToUtf32("BracedInitializerList"), 1)))))));
            AddRule(new MemberInitializerIdRule(ToUtf32("MemberInitializerId"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("QualifiedId"), ToUtf32("QualifiedId"), 1))));
        }
    }
} // cppparser
