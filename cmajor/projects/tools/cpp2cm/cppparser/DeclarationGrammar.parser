using System;
using cppast;

namespace cppparser
{
    grammar DeclarationGrammar
    {
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using FunctionGrammar.FunctionDefinition;
        using ClassGrammar.SpecialMemberFunctionDefinition;
        using ClassGrammar.ClassDeclaration;
        using ClassGrammar.ForwardClassDeclaration;
        using DeclaratorGrammar.InitDeclarator;
        using DeclaratorGrammar.Declarator;
        using TemplateGrammar.TemplateDeclaration;
        using TemplateGrammar.ExplicitInstantiation;
        using TemplateGrammar.ExplicitSpecialization;
        using TypeExprGrammar.TypeExpr;
        using EnumerationGrammar.EnumDeclaration;
        using EnumerationGrammar.OpaqueEnumDeclaration;
        using LiteralGrammar.StringLiteral;
        using ExpressionGrammar.ConstantExpression;
        
        Declarations(ParsingContext* ctx, CompositeNode<Node>* parent)
            ::= (Declaration(ctx){ parent->AddNode(Declaration); })*
            ;
            
        Declaration(ParsingContext* ctx) : Node*
            ::= NamespaceDefinition(ctx){ value = NamespaceDefinition; }
            |   LinkageSpecification(ctx){ value = LinkageSpecification; }
            |   FunctionDefinition(ctx){ value = FunctionDefinition; }
            |   SpecialMemberFunctionDefinition(ctx){ value = SpecialMemberFunctionDefinition; }
            |   TemplateDeclaration(ctx){ value = TemplateDeclaration; }
            |   ExplicitInstantiation(ctx){ value = ExplicitInstantiation; }
            |   ExplicitSpecialization(ctx){ value = ExplicitSpecialization; }
            |   ClassDeclaration(ctx){ value = ClassDeclaration; }
            |   EnumDeclaration(ctx){ value = EnumDeclaration; }
            |   BlockDeclaration(ctx){ value = BlockDeclaration; }
            ;
        
        NamespaceDefinition(ParsingContext* ctx) : NamespaceNode*
            ::= NamedNamespaceDefinition(ctx){ value = NamedNamespaceDefinition; }
            |   UnnamedNamespaceDefinition(ctx){ value = UnnamedNamespaceDefinition; }
            ;
            
        NamedNamespaceDefinition(ParsingContext* ctx) : NamespaceNode*
            ::= keyword("namespace") (Identifier:left{ value = new NamespaceNode(span, left); } 
                ("::" Identifier:right{ value->id.Reset(new ColonColonNode(span, value->id.Release(), right)); })*) '{' Declarations(ctx, value) '}'!
            ;
            
        UnnamedNamespaceDefinition(ParsingContext* ctx) : NamespaceNode*
            ::= keyword("namespace") '{'{ value = new NamespaceNode(span, null); } Declarations(ctx, value) '}'!
            ;
            
        BlockDeclaration(ParsingContext* ctx) : Node*
            ::= SimpleDeclaration(ctx){ value = SimpleDeclaration; }
            |   AliasDeclaration(ctx){ value = AliasDeclaration; }
            |   UsingDirective(ctx){ value = UsingDirective; }
            |   UsingDeclaration(ctx){ value = UsingDeclaration; }
            |   StaticAssertDeclaration(ctx){ value = StaticAssertDeclaration; }
            |   OpaqueEnumDeclaration(ctx){ value = OpaqueEnumDeclaration; }
            |   TypedefDeclaration(ctx){ value = TypedefDeclaration; }
            |   ForwardClassDeclaration(ctx){ value = ForwardClassDeclaration; }
            ;
            
        SimpleDeclaration(ParsingContext* ctx) : SimpleDeclarationNode*
            ::= (DeclSpecifiers TypeExpr(ctx) InitDeclarator(ctx) ';'){ value = new SimpleDeclarationNode(span, DeclSpecifiers, TypeExpr, InitDeclarator); }
            ;
            
        DeclSpecifiers : Specifiers
            ::= (DeclSpecifier{ value = cast<Specifiers>(value | DeclSpecifier); })*
            ;
            
        DeclSpecifier : Specifiers
            ::= StorageClassSpecifier{ value = StorageClassSpecifier; }
            |   FunctionSpecifier{ value = FunctionSpecifier; }
            |   keyword("friend"){ value = Specifiers.friend; }
            |   keyword("constexpr"){ value = Specifiers.constexpr_; }
            |   keyword("__declspec") 
                ('(' keyword("thread"){ value = Specifiers.thread_local; } ')' | '(' keyword("dllimport"){ value = Specifiers.dllimport; } ')' | '(' keyword("dllexport"){ value = Specifiers.dllexport; } ')')
            |   keyword("__thread"){ value = Specifiers.thread_local; }
            ;
            
        StorageClassSpecifier : Specifiers
            ::= keyword("register"){ value = Specifiers.register; }
            |   keyword("static"){ value = Specifiers.static_; }
            |   keyword("thread_local"){ value = Specifiers.thread_local; }
            |   keyword("extern"){ value = Specifiers.extern_; }
            |   keyword("mutable"){ value = Specifiers.mutable; }
            ;
            
        FunctionSpecifier : Specifiers
            ::= keyword("inline"){ value = Specifiers.inline_; }
            |   keyword("virtual"){ value = Specifiers.virtual_; }
            |   keyword("explicit"){ value = Specifiers.explicit_; }
            ;
            
        AliasDeclaration(ParsingContext* ctx) : UsingTypeDeclarationNode*
            ::= (keyword("using") Identifier '=' TypeExpr(ctx)! ';'!){ value = new UsingTypeDeclarationNode(span, Identifier, TypeExpr); }
            ;
            
        UsingDirective(ParsingContext* ctx) : UsingDirectiveNode*
            ::= (keyword("using") keyword("namespace") QualifiedId(ctx)! ';'!){ value = new UsingDirectiveNode(span, QualifiedId); }
            ;
            
        UsingDeclaration(ParsingContext* ctx) : UsingDeclarationNode*
            ::= (keyword("using") QualifiedId(ctx) ';'){ value = new UsingDeclarationNode(span, QualifiedId); }
            ;
            
        StaticAssertDeclaration(ParsingContext* ctx) : StaticAssertDeclarationNode*
            ::= (keyword("static_assert") '(' ConstantExpression(ctx):expr ',' StringLiteral:message ')' ';'){ value = new StaticAssertDeclarationNode(span, expr, message); }
            ;
            
        TypedefDeclaration(ParsingContext* ctx) : TypedefDeclarationNode*
            ::= (keyword("typedef") TypeExpr(ctx)! Declarator(ctx)! ';'!){ value = new TypedefDeclarationNode(span, TypeExpr, Declarator); }
            ;
            
        LinkageSpecification(ParsingContext* ctx) : LinkageSpecificationNode*
            ::= keyword("extern") StringLiteral:linkage{ value = new LinkageSpecificationNode(span, linkage); } 
                ('{' (Declaration(ctx):d1{ value->AddNode(d1); })* '}'! | Declaration(ctx):d2{ value->AddNode(d2); })
            ;
    }        
}
