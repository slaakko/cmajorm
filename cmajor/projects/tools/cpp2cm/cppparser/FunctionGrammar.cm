using System;
using System.Collections;
using System.Text.Parsing;
using cppast;

// this source file has been automatically generated from 'FunctionGrammar.parser' using cmparsergen version 2.0.0.

namespace cppparser
{
    public class FunctionGrammar : System.Text.Parsing.Grammar
    {
        public FunctionGrammar() : this(new ParsingDomain())
        {
        }
        public FunctionGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("FunctionGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("cppparser")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public FunctionNode* Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, ParsingContext* ctx)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(ctx)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            FunctionNode* result = *cast<ValueObject<FunctionNode*>*>(value.Get());
            return result;
        }

        public class FunctionDefinitionRule : System.Text.Parsing.RuleParser
        {
            public FunctionDefinitionRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("FunctionNode*"));
                AddLocalVariable(AttrOrVar(ToUtf32("Specifiers"), ToUtf32("specifiers")));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Node>"), ToUtf32("returnTypeExpr")));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Node>"), ToUtf32("declarator")));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<CompoundStatementNode>"), ToUtf32("body")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<FunctionNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                ActionParser* a6ActionParser = GetAction(ToUtf32("A6"));
                a6ActionParser->SetAction(A6Action);
                ActionParser* a7ActionParser = GetAction(ToUtf32("A7"));
                a7ActionParser->SetAction(A7Action);
                ActionParser* a8ActionParser = GetAction(ToUtf32("A8"));
                a8ActionParser->SetAction(A8Action);
                NonterminalParser* declSpecifiersNonterminalParser = GetNonterminal(ToUtf32("DeclSpecifiers"));
                declSpecifiersNonterminalParser->SetPost(PostDeclSpecifiers);
                NonterminalParser* returnTypeNonterminalParser = GetNonterminal(ToUtf32("returnType"));
                returnTypeNonterminalParser->SetPre(PrereturnType);
                returnTypeNonterminalParser->SetPost(PostreturnType);
                NonterminalParser* declaratorNonterminalParser = GetNonterminal(ToUtf32("Declarator"));
                declaratorNonterminalParser->SetPre(PreDeclarator);
                declaratorNonterminalParser->SetPost(PostDeclarator);
                NonterminalParser* virtPureSpecifiersNonterminalParser = GetNonterminal(ToUtf32("VirtPureSpecifiers"));
                virtPureSpecifiersNonterminalParser->SetPre(PreVirtPureSpecifiers);
                virtPureSpecifiersNonterminalParser->SetPost(PostVirtPureSpecifiers);
                NonterminalParser* functionBodyNonterminalParser = GetNonterminal(ToUtf32("FunctionBody"));
                functionBodyNonterminalParser->SetPre(PreFunctionBody);
                functionBodyNonterminalParser->SetPost(PostFunctionBody);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new FunctionNode(span, context->specifiers, context->returnTypeExpr.Release(), context->declarator.Release(), context->body.Release());
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->specifiers = context->fromDeclSpecifiers;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->returnTypeExpr.Reset(context->fromreturnType);
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->declarator.Reset(context->fromDeclarator);
                pass = IsFunctionDeclaratorNode(context->fromDeclarator);
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->specifiers = cast<Specifiers>(context->specifiers | context->fromVirtPureSpecifiers);
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->body.Reset(context->fromFunctionBody);
            }
            public void A6Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->specifiers = cast<Specifiers>(context->specifiers | Specifiers.default_);
            }
            public void A7Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->specifiers = cast<Specifiers>(context->specifiers | Specifiers.delete_);
            }
            public void A8Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                pass = (context->fromVirtPureSpecifiers & Specifiers.pure) != Specifiers.none;
            }
            public void PostDeclSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDeclSpecifiers_value = stack.Pop();
                    context->fromDeclSpecifiers = *cast<ValueObject<Specifiers>*>(fromDeclSpecifiers_value.Get());
                }
            }
            public void PrereturnType(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostreturnType(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromreturnType_value = stack.Pop();
                    context->fromreturnType = *cast<ValueObject<Node*>*>(fromreturnType_value.Get());
                }
            }
            public void PreDeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostDeclarator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDeclarator_value = stack.Pop();
                    context->fromDeclarator = *cast<ValueObject<Node*>*>(fromDeclarator_value.Get());
                }
            }
            public void PreVirtPureSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<bool>(true)));
            }
            public void PostVirtPureSpecifiers(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromVirtPureSpecifiers_value = stack.Pop();
                    context->fromVirtPureSpecifiers = *cast<ValueObject<Specifiers>*>(fromVirtPureSpecifiers_value.Get());
                }
            }
            public void PreFunctionBody(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostFunctionBody(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromFunctionBody_value = stack.Pop();
                    context->fromFunctionBody = *cast<ValueObject<CompoundStatementNode*>*>(fromFunctionBody_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), specifiers(), returnTypeExpr(), declarator(), body(), fromDeclSpecifiers(), fromreturnType(), fromDeclarator(), fromVirtPureSpecifiers(), fromFunctionBody()
                {
                }
                public ParsingContext* ctx;
                public FunctionNode* value;
                public Specifiers specifiers;
                public UniquePtr<Node> returnTypeExpr;
                public UniquePtr<Node> declarator;
                public UniquePtr<CompoundStatementNode> body;
                public Specifiers fromDeclSpecifiers;
                public Node* fromreturnType;
                public Node* fromDeclarator;
                public Specifiers fromVirtPureSpecifiers;
                public CompoundStatementNode* fromFunctionBody;
            }
        }

        public class ParameterListRule : System.Text.Parsing.RuleParser
        {
            public ParameterListRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("ParameterListNode*"));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<ParameterListNode>"), ToUtf32("node")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ParameterListNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                NonterminalParser* leftNonterminalParser = GetNonterminal(ToUtf32("left"));
                leftNonterminalParser->SetPre(Preleft);
                leftNonterminalParser->SetPost(Postleft);
                NonterminalParser* rightNonterminalParser = GetNonterminal(ToUtf32("right"));
                rightNonterminalParser->SetPre(Preright);
                rightNonterminalParser->SetPost(Postright);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->node.Release();
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->node.Reset(new ParameterListNode(span));
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->node->AddNode(context->fromleft);
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->node->AddNode(context->fromright);
            }
            public void Preleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postleft(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context->fromleft = *cast<ValueObject<ParameterNode*>*>(fromleft_value.Get());
                }
            }
            public void Preright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void Postright(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context->fromright = *cast<ValueObject<ParameterNode*>*>(fromright_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), node(), fromleft(), fromright()
                {
                }
                public ParsingContext* ctx;
                public ParameterListNode* value;
                public UniquePtr<ParameterListNode> node;
                public ParameterNode* fromleft;
                public ParameterNode* fromright;
            }
        }

        public class ParameterDeclarationRule : System.Text.Parsing.RuleParser
        {
            public ParameterDeclarationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("ParameterNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ParameterNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* parameterTypeNonterminalParser = GetNonterminal(ToUtf32("parameterType"));
                parameterTypeNonterminalParser->SetPre(PreparameterType);
                parameterTypeNonterminalParser->SetPost(PostparameterType);
                NonterminalParser* parameterNameNonterminalParser = GetNonterminal(ToUtf32("parameterName"));
                parameterNameNonterminalParser->SetPre(PreparameterName);
                parameterNameNonterminalParser->SetPost(PostparameterName);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new ParameterNode(span, context->fromparameterType, context->fromparameterName);
            }
            public void PreparameterType(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostparameterType(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromparameterType_value = stack.Pop();
                    context->fromparameterType = *cast<ValueObject<Node*>*>(fromparameterType_value.Get());
                }
            }
            public void PreparameterName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostparameterName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromparameterName_value = stack.Pop();
                    context->fromparameterName = *cast<ValueObject<Node*>*>(fromparameterName_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromparameterType(), fromparameterName()
                {
                }
                public ParsingContext* ctx;
                public ParameterNode* value;
                public Node* fromparameterType;
                public Node* fromparameterName;
            }
        }

        public class FunctionBodyRule : System.Text.Parsing.RuleParser
        {
            public FunctionBodyRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                SetValueTypeName(ToUtf32("CompoundStatementNode*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<CompoundStatementNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                a1ActionParser->SetFailure(A1ActionFail);
                NonterminalParser* compoundStatementNonterminalParser = GetNonterminal(ToUtf32("CompoundStatement"));
                compoundStatementNonterminalParser->SetPre(PreCompoundStatement);
                compoundStatementNonterminalParser->SetPost(PostCompoundStatement);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->ctx->BeginFunctionBody();
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromCompoundStatement;
                context->ctx->EndFunctionBody();
            }
            public void A1ActionFail(ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->ctx->EndFunctionBody();
            }
            public void PreCompoundStatement(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
            }
            public void PostCompoundStatement(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCompoundStatement_value = stack.Pop();
                    context->fromCompoundStatement = *cast<ValueObject<CompoundStatementNode*>*>(fromCompoundStatement_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), value(), fromCompoundStatement()
                {
                }
                public ParsingContext* ctx;
                public CompoundStatementNode* value;
                public CompoundStatementNode* fromCompoundStatement;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("cppparser.StatementGrammar"));
            if (grammar0 == null)
            {
                grammar0 = new cppparser.StatementGrammar(pd);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = pd->GetGrammar(ToUtf32("cppparser.DeclarationGrammar"));
            if (grammar1 == null)
            {
                grammar1 = new cppparser.DeclarationGrammar(pd);
            }
            AddGrammarReference(grammar1);
            Grammar* grammar2 = pd->GetGrammar(ToUtf32("cppparser.TypeExprGrammar"));
            if (grammar2 == null)
            {
                grammar2 = new cppparser.TypeExprGrammar(pd);
            }
            AddGrammarReference(grammar2);
            Grammar* grammar3 = pd->GetGrammar(ToUtf32("cppparser.DeclaratorGrammar"));
            if (grammar3 == null)
            {
                grammar3 = new cppparser.DeclaratorGrammar(pd);
            }
            AddGrammarReference(grammar3);
            Grammar* grammar4 = pd->GetGrammar(ToUtf32("cppparser.ClassGrammar"));
            if (grammar4 == null)
            {
                grammar4 = new cppparser.ClassGrammar(pd);
            }
            AddGrammarReference(grammar4);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("DeclSpecifiers"), this, ToUtf32("DeclarationGrammar.DeclSpecifiers")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("Declarator"), this, ToUtf32("DeclaratorGrammar.Declarator")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("TypeExpr"), this, ToUtf32("TypeExprGrammar.TypeExpr")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("VirtPureSpecifiers"), this, ToUtf32("ClassGrammar.VirtPureSpecifiers")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("CompoundStatement"), this, ToUtf32("StatementGrammar.CompoundStatement")));
            AddRule(new FunctionDefinitionRule(ToUtf32("FunctionDefinition"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("DeclSpecifiers"), ToUtf32("DeclSpecifiers"), 0)),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("returnType"), ToUtf32("TypeExpr"), 1))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Declarator"), ToUtf32("Declarator"), 1))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("VirtPureSpecifiers"), ToUtf32("VirtPureSpecifiers"), 1))),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("FunctionBody"), ToUtf32("FunctionBody"), 1)),
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.CharParser('='),
                                                new System.Text.Parsing.GroupingParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A6"),
                                                            new System.Text.Parsing.KeywordParser(ToUtf32("default"))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A7"),
                                                            new System.Text.Parsing.KeywordParser(ToUtf32("delete")))))),
                                            new System.Text.Parsing.CharParser(';'))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A8"),
                                        new System.Text.Parsing.CharParser(';')))))))));
            AddRule(new ParameterListRule(ToUtf32("ParameterList"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.CharParser('(')),
                                new System.Text.Parsing.OptionalParser(
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("left"), ToUtf32("ParameterDeclaration"), 1)),
                                            new System.Text.Parsing.KleeneStarParser(
                                                new System.Text.Parsing.GroupingParser(
                                                    new System.Text.Parsing.SequenceParser(
                                                        new System.Text.Parsing.CharParser(','),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("right"), ToUtf32("ParameterDeclaration"), 1))))))))),
                            new System.Text.Parsing.CharParser(')'))))));
            AddRule(new ParameterDeclarationRule(ToUtf32("ParameterDeclaration"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("parameterType"), ToUtf32("TypeExpr"), 1),
                            new System.Text.Parsing.OptionalParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("parameterName"), ToUtf32("Declarator"), 1)))))));
            AddRule(new FunctionBodyRule(ToUtf32("FunctionBody"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.EmptyParser()),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("CompoundStatement"), ToUtf32("CompoundStatement"), 1)))));
        }
    }
} // cppparser
