using System;
using cppast;

namespace cppparser
{
    grammar SimpleTypeGrammar
    {
        using stdlib.spaces;
        skip spaces;
        
        SimpleType(var SimpleTypeSpecifiers simpleTypeSpecifiers) : SimpleTypeNode*
            ::= ((SimpleTypeSpecifier{ simpleTypeSpecifiers = cast<SimpleTypeSpecifiers>(simpleTypeSpecifiers | SimpleTypeSpecifier); })+){ value = new SimpleTypeNode(span, simpleTypeSpecifiers); }
            ;
            
        SimpleTypeSpecifier : SimpleTypeSpecifiers
            ::= keyword("char"){ value = SimpleTypeSpecifiers.char_; }
            |   keyword("char16_t"){ value = SimpleTypeSpecifiers.char16_t; }
            |   keyword("char32_t"){ value = SimpleTypeSpecifiers.char32_t; }
            |   keyword("wchar_t"){ value = SimpleTypeSpecifiers.wchar_t; }
            |   keyword("bool"){ value = SimpleTypeSpecifiers.bool_; }
            |   keyword("short"){ value = SimpleTypeSpecifiers.short_; }
            |   keyword("int"){ value = SimpleTypeSpecifiers.int_; }
            |   keyword("long") keyword("long") { value = SimpleTypeSpecifiers.long_long; }
            |   keyword("long"){ value = SimpleTypeSpecifiers.long_; }
            |   keyword("signed"){ value = SimpleTypeSpecifiers.signed; }
            |   keyword("unsigned"){ value = SimpleTypeSpecifiers.unsigned; }
            |   keyword("float"){ value = SimpleTypeSpecifiers.float_; }
            |   keyword("double"){ value = SimpleTypeSpecifiers.double_; }
            |   keyword("void"){ value = SimpleTypeSpecifiers.void_; }
            |   keyword("auto"){ value = SimpleTypeSpecifiers.auto; }
            ;
    }
}
