using System;
using cppast;

namespace cppparser
{
    grammar IdentifierGrammar
    {
        using stdlib.identifier;
        using KeywordGrammar.Keyword;
        using TemplateGrammar.SimpleTemplateId;
        
        Identifier : IdentifierNode*
            ::= (identifier - Keyword){ value = new IdentifierNode(span, ustring(matchBegin, matchEnd)); }
            ;

        Id(ParsingContext* ctx) : Node*
            ::= SimpleTemplateId(ctx){ value = SimpleTemplateId; }
            |   Identifier{ value = Identifier; }
            ;

        NestedNameSpecifier(ParsingContext* ctx) : Node*
            ::= (Id(ctx):i1 "::"){ value = i1; } (Id(ctx):i2 "::"{ value = new ColonColonNode(span, value, i2); })*
            ;

        QualifiedId(ParsingContext* ctx) : Node*
            ::= ("::" NestedNameSpecifier(ctx):n1 Id(ctx):i1){ value = new ColonColonNode(span, null, new ColonColonNode(span, n1, i1)); }
            |   ("::" Id(ctx):i2){ value = new ColonColonNode(span, null, i2); }
            |   (NestedNameSpecifier(ctx):n2 Id(ctx):i3){ value = new ColonColonNode(span, n2, i3); }
            |   Id(ctx):i4{ value = i4; }
            ;
    }
}
