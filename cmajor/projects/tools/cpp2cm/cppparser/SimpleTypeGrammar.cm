using System;
using System.Collections;
using System.Text.Parsing;
using cppast;

// this source file has been automatically generated from 'SimpleTypeGrammar.parser' using cmparsergen version 2.0.0.

namespace cppparser
{
    public class SimpleTypeGrammar : System.Text.Parsing.Grammar
    {
        public SimpleTypeGrammar() : this(new ParsingDomain())
        {
        }
        public SimpleTypeGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("SimpleTypeGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("cppparser")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public SimpleTypeNode* Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            SimpleTypeNode* result = *cast<ValueObject<SimpleTypeNode*>*>(value.Get());
            return result;
        }

        public class SimpleTypeRule : System.Text.Parsing.RuleParser
        {
            public SimpleTypeRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("SimpleTypeNode*"));
                AddLocalVariable(AttrOrVar(ToUtf32("SimpleTypeSpecifiers"), ToUtf32("simpleTypeSpecifiers")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<SimpleTypeNode*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* simpleTypeSpecifierNonterminalParser = GetNonterminal(ToUtf32("SimpleTypeSpecifier"));
                simpleTypeSpecifierNonterminalParser->SetPost(PostSimpleTypeSpecifier);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new SimpleTypeNode(span, context->simpleTypeSpecifiers);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->simpleTypeSpecifiers = cast<SimpleTypeSpecifiers>(context->simpleTypeSpecifiers | context->fromSimpleTypeSpecifier);
            }
            public void PostSimpleTypeSpecifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSimpleTypeSpecifier_value = stack.Pop();
                    context->fromSimpleTypeSpecifier = *cast<ValueObject<SimpleTypeSpecifiers>*>(fromSimpleTypeSpecifier_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), simpleTypeSpecifiers(), fromSimpleTypeSpecifier()
                {
                }
                public SimpleTypeNode* value;
                public SimpleTypeSpecifiers simpleTypeSpecifiers;
                public SimpleTypeSpecifiers fromSimpleTypeSpecifier;
            }
        }

        public class SimpleTypeSpecifierRule : System.Text.Parsing.RuleParser
        {
            public SimpleTypeSpecifierRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("SimpleTypeSpecifiers"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<SimpleTypeSpecifiers>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                ActionParser* a6ActionParser = GetAction(ToUtf32("A6"));
                a6ActionParser->SetAction(A6Action);
                ActionParser* a7ActionParser = GetAction(ToUtf32("A7"));
                a7ActionParser->SetAction(A7Action);
                ActionParser* a8ActionParser = GetAction(ToUtf32("A8"));
                a8ActionParser->SetAction(A8Action);
                ActionParser* a9ActionParser = GetAction(ToUtf32("A9"));
                a9ActionParser->SetAction(A9Action);
                ActionParser* a10ActionParser = GetAction(ToUtf32("A10"));
                a10ActionParser->SetAction(A10Action);
                ActionParser* a11ActionParser = GetAction(ToUtf32("A11"));
                a11ActionParser->SetAction(A11Action);
                ActionParser* a12ActionParser = GetAction(ToUtf32("A12"));
                a12ActionParser->SetAction(A12Action);
                ActionParser* a13ActionParser = GetAction(ToUtf32("A13"));
                a13ActionParser->SetAction(A13Action);
                ActionParser* a14ActionParser = GetAction(ToUtf32("A14"));
                a14ActionParser->SetAction(A14Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.char_;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.char16_t;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.char32_t;
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.wchar_t;
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.bool_;
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.short_;
            }
            public void A6Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.int_;
            }
            public void A7Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.long_long;
            }
            public void A8Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.long_;
            }
            public void A9Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.signed;
            }
            public void A10Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.unsigned;
            }
            public void A11Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.float_;
            }
            public void A12Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.double_;
            }
            public void A13Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.void_;
            }
            public void A14Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = SimpleTypeSpecifiers.auto;
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public SimpleTypeSpecifiers value;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("spaces"), this, ToUtf32("System.Text.Parsing.stdlib.spaces")));
            AddRule(new SimpleTypeRule(ToUtf32("SimpleType"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.GroupingParser(
                        new System.Text.Parsing.PositiveParser(
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("SimpleTypeSpecifier"), ToUtf32("SimpleTypeSpecifier"), 0))))))));
            AddRule(new SimpleTypeSpecifierRule(ToUtf32("SimpleTypeSpecifier"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.AlternativeParser(
                                                            new System.Text.Parsing.AlternativeParser(
                                                                new System.Text.Parsing.AlternativeParser(
                                                                    new System.Text.Parsing.AlternativeParser(
                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                                                            new System.Text.Parsing.KeywordParser(ToUtf32("char"))),
                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                                            new System.Text.Parsing.KeywordParser(ToUtf32("char16_t")))),
                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                                        new System.Text.Parsing.KeywordParser(ToUtf32("char32_t")))),
                                                                new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                                    new System.Text.Parsing.KeywordParser(ToUtf32("wchar_t")))),
                                                            new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                                new System.Text.Parsing.KeywordParser(ToUtf32("bool")))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                                                            new System.Text.Parsing.KeywordParser(ToUtf32("short")))),
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A6"),
                                                        new System.Text.Parsing.KeywordParser(ToUtf32("int")))),
                                                new System.Text.Parsing.SequenceParser(
                                                    new System.Text.Parsing.KeywordParser(ToUtf32("long")),
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A7"),
                                                        new System.Text.Parsing.KeywordParser(ToUtf32("long"))))),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A8"),
                                                new System.Text.Parsing.KeywordParser(ToUtf32("long")))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A9"),
                                            new System.Text.Parsing.KeywordParser(ToUtf32("signed")))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A10"),
                                        new System.Text.Parsing.KeywordParser(ToUtf32("unsigned")))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A11"),
                                    new System.Text.Parsing.KeywordParser(ToUtf32("float")))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A12"),
                                new System.Text.Parsing.KeywordParser(ToUtf32("double")))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A13"),
                            new System.Text.Parsing.KeywordParser(ToUtf32("void")))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A14"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("auto"))))));
            SetSkipRuleName(ToUtf32("spaces"));
        }
    }
} // cppparser
