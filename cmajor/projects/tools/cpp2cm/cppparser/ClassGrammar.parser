using System;
using cppast;

namespace cppparser
{
    grammar ClassGrammar
    {
        using DeclarationGrammar.DeclSpecifiers;
        using DeclarationGrammar.UsingDeclaration;
        using DeclarationGrammar.TypedefDeclaration;
        using DeclarationGrammar.AliasDeclaration;
        using IdentifierGrammar.QualifiedId;
        using TypeExprGrammar.TypeExpr;
        using DeclaratorGrammar.Declarator;
        using DeclaratorGrammar.BraceOrEqualInitializer;
        using DeclaratorGrammar.BracedInitializerList;
        using FunctionGrammar.FunctionDefinition;
        using FunctionGrammar.FunctionBody;
        using TemplateGrammar.TemplateDeclaration;
        using EnumerationGrammar.EnumDeclaration;
        using ExpressionGrammar.PossiblyEmptyArgumentList;
        
        ClassDeclaration(ParsingContext* ctx) : ClassNode*
            ::= (ClassSpecifier(ctx) ';'){ value = ClassSpecifier; }
            ;

        ForwardClassDeclaration(ParsingContext* ctx, var UniquePtr<Node> className) : ForwardClassDeclarationNode*
            ::= (ClassKey ClassName(ctx){ className.Reset(ClassName); } ';'){ value = new ForwardClassDeclarationNode(span, ClassKey, className.Release()); }
            ;

        ClassSpecifier(ParsingContext* ctx, var Specifiers defaultAccess) : ClassNode*
            ::= ClassHead(ctx):classNode{ value = classNode; } '{' MemberSpecifications(ctx, value) '}'!
            ;

        MemberSpecifications(ParsingContext* ctx, ClassNode* classNode)
            ::= MemberSpecification(ctx, classNode)*
            ;

        MemberSpecification(ParsingContext* ctx, ClassNode* classNode)
            ::= AccessSpecifier ':' (MemberDeclaration(ctx, AccessSpecifier):m1{ classNode->AddMemberDeclaration(m1); })*
            |   (MemberDeclaration(ctx, classNode->DefaultAccess()):m2{ classNode->AddMemberDeclaration(m2); })+
            ;

        MemberDeclaration(ParsingContext* ctx, Specifiers accessSpecifier, var Specifiers specifiers, var bool functionDeclarator) : Node*
            ::= (DeclSpecifiers{ specifiers = DeclSpecifiers; } TypeExpr(ctx):type Declarator(ctx):declarator{ functionDeclarator = IsFunctionDeclaratorNode(declarator); }
                VirtPureSpecifiers(functionDeclarator){ specifiers = cast<Specifiers>(specifiers | VirtPureSpecifiers); }
                BraceOrEqualInitializer(ctx):initializer? ';'){ value = new MemberDeclarationNode(span, cast<Specifiers>(accessSpecifier | specifiers), type, declarator, initializer); }
            |   SpecialMemberFunctionDeclaration(ctx){ value = SpecialMemberFunctionDeclaration; }
            |   (FunctionDefinition(ctx) ';'?){ value = FunctionDefinition; }
            |   SpecialMemberFunctionDefinition(ctx){ value = SpecialMemberFunctionDefinition; }
            |   UsingDeclaration(ctx){ value = UsingDeclaration; }
            |   TypedefDeclaration(ctx){ value = TypedefDeclaration; }
            |   TemplateDeclaration(ctx){ value = TemplateDeclaration; }
            |   ClassDeclaration(ctx){ value = ClassDeclaration; }
            |   EnumDeclaration(ctx){ value = EnumDeclaration; }
            |   AliasDeclaration(ctx){ value = AliasDeclaration; }
            |   ForwardClassDeclaration(ctx){ value = ForwardClassDeclaration; }
            ;

        SpecialMemberFunctionDeclaration(ParsingContext* ctx, var UniquePtr<Node> declarator) : MemberDeclarationNode*
            ::= (DeclSpecifiers Declarator(ctx){ declarator.Reset(Declarator); pass = IsFunctionDeclaratorNode(declarator.Get()); } VirtPureSpecifiers(true):pure ';')
            {
                value = new MemberDeclarationNode(span, cast<Specifiers>(DeclSpecifiers | pure), null, declarator.Release(), null);
            }
            ;

        ClassHead(ParsingContext* ctx) : ClassNode*
            ::= (ClassKey:classKey ClassName(ctx):className ClassVirtSpecifiers:specifiers BaseClause(ctx)?){ value = new ClassNode(span, classKey, className, specifiers, BaseClause); }
            ;

        ClassKey : ClassKey
            ::= keyword("class"){ value = ClassKey.class_; }
            |   keyword("struct"){ value = ClassKey.struct_; }
            |   keyword("union"){ value = ClassKey.union_; }
            ;

        ClassName(ParsingContext* ctx) : Node*
            ::= QualifiedId(ctx){ value = QualifiedId; }
            ;

        ClassVirtSpecifiers : Specifiers
            ::= (ClassVirtSpecifier{ value = cast<Specifiers>(value | ClassVirtSpecifier); })*
            ;

        ClassVirtSpecifier : Specifiers
            ::= keyword("final"){ value = Specifiers.final; }
            |   keyword("explicit"){ value = Specifiers.explicit_; }
            ;

        BaseClause(ParsingContext* ctx) : BaseClassListNode*
            ::= ':'{ value = new BaseClassListNode(span); } BaseClassSpecifierList(ctx, value)
            ;

        BaseClassSpecifierList(ParsingContext* ctx, BaseClassListNode* baseClassList)
            ::= BaseClassSpecifier(ctx):b1{ baseClassList->AddNode(b1); } (',' BaseClassSpecifier(ctx):b2{ baseClassList->AddNode(b2); })*
            ;

        BaseClassSpecifier(ParsingContext* ctx) : BaseClassNode*
            ::= (BaseSpecifiers ClassName(ctx)){ value = new BaseClassNode(span, BaseSpecifiers, ClassName); }
            ;

        BaseSpecifiers : Specifiers
            ::= (BaseSpecifier{ value = cast<Specifiers>(value | BaseSpecifier); })*
            ;

        BaseSpecifier : Specifiers
            ::= keyword("virtual"){ value = Specifiers.virtual_; }
            |   AccessSpecifier{ value = AccessSpecifier; }
            ;

        AccessSpecifier : Specifiers
            ::= keyword("public"){ value = Specifiers.public_; }
            |   keyword("protected"){ value = Specifiers.protected_; }
            |   keyword("private"){ value = Specifiers.private_; }
            ;

        VirtPureSpecifiers(bool functionMember) : Specifiers
            ::= (VirtSpecifier(functionMember){ value = cast<Specifiers>(value | VirtSpecifier); })* (PureSpecifier(functionMember){ value = cast<Specifiers>(value | PureSpecifier); })?
            ;

        VirtSpecifier(bool functionMember) : Specifiers
            ::= keyword("override"){ value = Specifiers.override_; pass = functionMember; }
            |   keyword("final"){ value = Specifiers.final; pass = functionMember; }
            |   keyword("new"){ value = Specifiers.new_; pass = functionMember; }
            ;

        PureSpecifier(bool functionMember) : Specifiers
            ::= ('=' '0'){ value = Specifiers.pure; pass = functionMember; }
            ;

        SpecialMemberFunctionDefinition(ParsingContext* ctx, var UniquePtr<Node> declarator, var UniquePtr<Node> ctorInitializer, var Specifiers defaultOrDeleteSpecifier) : SpecialMemberFunctionNode*
            ::= (DeclSpecifiers Declarator(ctx){ declarator.Reset(Declarator); pass = IsFunctionDeclaratorNode(declarator.Get()); } (CtorInitializer(ctx){ ctorInitializer.Reset(CtorInitializer); })?
                (   FunctionBody(ctx)
                |   '=' (keyword("default"){ defaultOrDeleteSpecifier = Specifiers.default_; } | keyword("delete"){ defaultOrDeleteSpecifier = Specifiers.delete_; }) ';'
                )
            )
            {
                value = new SpecialMemberFunctionNode(span, cast<Specifiers>(DeclSpecifiers | defaultOrDeleteSpecifier), declarator.Release(), ctorInitializer.Release(), FunctionBody);
            }
            ;

        CtorInitializer(ParsingContext* ctx) : CtorInitializerNode*
            ::= ':'{ value = new CtorInitializerNode(span); } MemberInitializerList(ctx, value)
            ;

        MemberInitializerList(ParsingContext* ctx, CtorInitializerNode* ctorInitializer)
            ::= MemberInitializer(ctx):left{ ctorInitializer->AddMemberInitializer(left); } (',' MemberInitializer(ctx):right{ ctorInitializer->AddMemberInitializer(right); })*
            ;

        MemberInitializer(ParsingContext* ctx) : MemberInitializerNode*
            ::= (MemberInitializerId(ctx):m1 '(' PossiblyEmptyArgumentList(ctx):args ')'){ value = new MemberInitializerNode(span, m1, args); }
            |   (MemberInitializerId(ctx):m2 BracedInitializerList(ctx)){ value = new MemberInitializerNode(span, m2, BracedInitializerList); }
            ;

        MemberInitializerId(ParsingContext* ctx) : Node*
            ::= QualifiedId(ctx){ value = QualifiedId; }
            ;
    }
}
