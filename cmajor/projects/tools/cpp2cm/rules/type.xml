<?xml version="1.0" encoding="utf-8"?>
<rules>
    <type source="bool" target="bool"/>
    <type source="char" target="char"/>
    <type source="wchar_t" target="wchar"/>
    <type source="char16_t" target="wchar"/>
    <type source="char32_t" target="uchar"/>
    <type source="signed char" target="sbyte"/>
    <type source="unsigned char" target="byte"/>
    <type source="short int" target="short"/>
    <type source="unsigned short int" target="ushort"/>
    <type source="int" target="int"/>
    <type source="unsigned int" target="uint"/>
    <type source="long" target="int"/>
    <type source="unsigned long int" target="uint"/>
    <type source="long long int" target="long"/>
    <type source="unsigned long long int" target="ulong"/>
    <type source="float" target="float"/>
    <type source="double" target="double"/>
    <type source="void" target="void"/>

    <type source="std::int8_t" target="sbyte"/>
    <type source="std::uint8_t" target="byte"/>
    <type source="std::int16_t" target="short"/>
    <type source="std::uint16_t" target="ushort"/>
    <type source="std::int32_t" target="int"/>
    <type source="std::uint32_t" target="uint"/>
    <type source="std::int64_t" target="long"/>
    <type source="std::uint64_t" target="ulong"/>
	
	<type source="std::unique_ptr&lt;T>" target="System.UniquePtr&lt;T>" members="unique_ptr_members"/>
	
	<members id="unique_ptr_members">
		<member source="get" target="Get"/>
		<member source="release" target="Release"/>
		<member source="reset" target="Reset"/>
		<member source="swap" target="Swap"/>
	</members>
	
	<type source="std::shared_ptr&lt;T>" target="System.SharedPtr&lt;T>" members="shared_ptr_members"/>
	
	<members id="shared_ptr_members">
		<member source="get" target="Get"/>
		<member source="reset" target="Reset"/>
		<member source="swap" target="Swap"/>
	</members>
	
    <type source="std::string" target="System.string" members="string_members"/>
    <type source="std::basic_string&lt;CharT>" target="System.String&lt;CharT>" members="string_members"/>
    <type source="std::u16_string" target="System.wstring" members="string_members"/>
    <type source="std::u32_string" target="System.ustring" members="string_members"/>

    <members id="string_members">
        <member source="iterator" target="Iterator"/>
        <member source="const_iterator" target="ConstIterator"/>
        <member source="begin" target="Begin"/>
        <member source="cbegin" target="CBegin"/>
        <member source="end" target="End"/>
        <member source="cend" target="CEnd"/>
        <member source="data" target="Chars"/>
        <member source="c_str" target="Chars"/>
        <member source="empty" target="IsEmpty"/>
        <member source="size" target="Length"/>
        <member source="length" target="Length"/>
        <member source="append" target="Append"/>
        <member source="substr" target="Substring"/>
        <member source="find" target="Find"/>
    </members>

	<type source="std::negate&lt;T>" target="System.Negate&lt;T>"/>
	<type source="std::plus&lt;T>" target="System.Plus&lt;T>"/>
	<type source="std::minus&lt;T>" target="System.Minus&lt;T>"/>
	<type source="std::multiplies&lt;T>" target="System.Multiplies&lt;T>"/>
	<type source="std::divides&lt;T>" target="System.Divides&lt;T>"/>
	<type source="std::modulus&lt;T>" target="System.Remainder&lt;T>"/>
	<type source="std::equal_to&lt;T>" target="System.EqualTo&lt;T>"/>
	<type source="std::not_equal_to&lt;T>" target="System.NotEqualTo&lt;T>"/>
	<type source="std::less&lt;T>" target="System.Less&lt;T>"/>
	<type source="std::greater&lt;T>" target="System.Greater&lt;T>"/>
	<type source="std::less_equal&lt;T>" target="System.LessOrEqualTo&lt;T>"/>
	<type source="std::greater_equal&lt;T>" target="System.GreaterOrEqualTo&lt;T>"/>
	<type source="std::logical_and&lt;T>" target="System.LogicalAnd&lt;T>"/>
	<type source="std::logical_or&lt;T>" target="System.LogicalOr&lt;T>"/>
	<type source="std::logical_not&lt;T>" target="System.LogicalNot&lt;T>"/>

    <type source="std::vector&lt;T>" target="System.Collections.List&lt;T>" members="vector_members"/>

    <members id="vector_members">
        <member source="iterator" target="Iterator"/>
        <member source="const_iterator" target="ConstIterator"/>
        <member source="begin" target="Begin"/>
        <member source="cbegin" target="CBegin"/>
        <member source="end" target="End"/>
        <member source="cend" target="CEnd"/>
        <member source="push_back" target="Add"/>
        <member source="pop_back" target="RemoveLast"/>
        <member source="push_front" target="InsertFront"/>
        <member source="pop_front" target="RemoveFront"/>
        <member source="front" target="Front"/>
        <member source="back" target="Back"/>
        <member source="empty" target="IsEmpty"/>
        <member source="size" target="Count"/>
        <member source="reserve" target="Reserve"/>
        <member source="resize" target="Resize"/>
        <member source="capacity" target="Capacity"/>
        <member source="clear" target="Clear"/>
    </members>

    <type source="std::set&lt;T, C=std::less&lt;T>>" target="System.Collections.Set&lt;T, C=System.Less&lt;T>>" members="set_members"/>

    <members id="set_members">
        <member source="iterator" target="Iterator"/>
        <member source="const_iterator" target="ConstIterator"/>
        <member source="begin" target="Begin"/>
        <member source="cbegin" target="CBegin"/>
        <member source="end" target="End"/>
        <member source="cend" target="CEnd"/>
        <member source="empty" target="IsEmpty"/>
        <member source="size" target="Count"/>
        <member source="clear" target="Clear"/>
        <member source="insert" target="Insert"/>
        <member source="find" target="Find"/>
    </members>

    <type source="std::map&lt;Key, T, C=std::less&lt;Key>>" target="System.Collections.Map&lt;Key, T, C=System.Less&lt;Key>>" members="map_members"/>

    <members id="map_members">
        <member source="iterator" target="Iterator"/>
        <member source="const_iterator" target="ConstIterator"/>
        <member source="begin" target="Begin"/>
        <member source="cbegin" target="CBegin"/>
        <member source="end" target="End"/>
        <member source="cend" target="CEnd"/>
        <member source="empty" target="IsEmpty"/>
        <member source="size" target="Count"/>
        <member source="clear" target="Clear"/>
        <member source="insert" target="Insert"/>
        <member source="find" target="Find"/>
    </members>

    <type source="std::unordered_set&lt;Key, Hash=std::hash&lt;Key>, KeyEqual=std::equal_to&lt;Key>>"
        target="System.Collections.HashSet&lt;Key, Hash=System.Collections.Hasher&lt;Key>, KeyEqual=System.EqualTo&lt;Key>>" members="unordered_set_members"/>

    <members id="unordered_set_members">
        <member source="iterator" target="Iterator"/>
        <member source="const_iterator" target="ConstIterator"/>
        <member source="begin" target="Begin"/>
        <member source="cbegin" target="CBegin"/>
        <member source="end" target="End"/>
        <member source="cend" target="CEnd"/>
        <member source="empty" target="IsEmpty"/>
        <member source="size" target="Count"/>
        <member source="clear" target="Clear"/>
        <member source="insert" target="Insert"/>
        <member source="find" target="Find"/>
    </members>

    <type source="std::unordered_map&lt;Key, T, Hash=std::hash&lt;Key>, KeyEqual=std::equal_to&lt;Key>>"
          target="System.Collections.HashMap&lt;Key>, T, Hash=System.Collections.Hasher&lt;Key>, KeyEqual=System.EqualTo&lt;Key>>" members="unordered_map_members"/>

    <members id="unordered_map_members">
        <member source="iterator" target="Iterator"/>
        <member source="const_iterator" target="ConstIterator"/>
        <member source="begin" target="Begin"/>
        <member source="cbegin" target="CBegin"/>
        <member source="end" target="End"/>
        <member source="cend" target="CEnd"/>
        <member source="empty" target="IsEmpty"/>
        <member source="size" target="Count"/>
        <member source="clear" target="Clear"/>
        <member source="insert" target="Insert"/>
        <member source="find" target="Find"/>
    </members>
</rules>
