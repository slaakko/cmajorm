using System;
using System.Collections;
using System.IO;
using System.Text.Parsing;
using cppparser;

namespace cppsymbols
{
    public string Expand(const string& message, const Span& span)
    {
        string result = message;
        string filePath = FileRegistry.Instance().GetFilePath(span.fileIndex);
        if (!filePath.IsEmpty())
        {
            ustring errorLines;
            if (File.Exists(filePath))
            {
                ustring content = FileRegistry.Instance().GetFileContent(span.fileIndex);
                if (!content.IsEmpty())
                {
                    errorLines = GetErrorLines(content.Chars(), content.Chars() + content.Length(), span);
                }
            }        
            result.Append(" at ").Append(filePath).Append(':').Append(ToString(span.lineNumber));
            if (!errorLines.IsEmpty())
            {
                result.Append(':').Append('\n').Append(ToUtf8(errorLines));
            }
        }    
        return result;
    }
    
    public class SymbolException : Exception
    {
        public SymbolException(const string& message_, const Span& span_) : base(Expand(message_, span_)), message(message_), span(span_)
        {
        }
        public string message;
        public Span span;
    }
}
