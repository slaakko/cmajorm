using System;
using System.Collections;
using Span = System.Text.Parsing.Span;
using cppast;

namespace cppsymbols
{
    public enum TypeResolvingFlags
    {
        none = 0, resolveClassGroup = 1 << 0, noExternal = 1 << 1
    }
    
    public class TypeResolver : Visitor
    {
        public nothrow TypeResolver(SymbolTable& symbolTable_, Scope* scope_, const Span& span_, List<UniquePtr<Exception>>& errors_) : 
            symbolTable(symbolTable_), scope(scope_), span(span_), errors(errors_)
        {
        }
        public override void Visit(SimpleTypeNode& simpleTypeNode) 
        {
            type = symbolTable.MakeSimpleTypeSymbol(simpleTypeNode, simpleTypeNode.span);
        }
        public override void Visit(ConstNode& constNode)
        {
            TypeSymbol* childType = ResolveType(constNode.child.Get(), symbolTable, scope, span, errors);
            type = symbolTable.MakeConstTypeSymbol(childType, span);
        }
        public override void Visit(VolatileNode& volatileNode)
        {
            TypeSymbol* childType = ResolveType(volatileNode.child.Get(), symbolTable, scope, span, errors);
            type = symbolTable.MakeVolatileTypeSymbol(childType, span);
        }
        public override void Visit(LvalueRefNode& lvalueRefNode)
        {
            TypeSymbol* childType = ResolveType(lvalueRefNode.child.Get(), symbolTable, scope, span, errors);
            type = symbolTable.MakeLvalueRefTypeSymbol(childType, span);
        }
        public override void Visit(RvalueRefNode& rvalueRefNode)
        {
            TypeSymbol* childType = ResolveType(rvalueRefNode.child.Get(), symbolTable, scope, span, errors);
            type = symbolTable.MakeRvalueRefTypeSymbol(childType, span);
        }
        public override void Visit(PointerNode& pointerNode)
        {
            TypeSymbol* childType = ResolveType(pointerNode.child.Get(), symbolTable, scope, span, errors);
            type = symbolTable.MakePointerTypeSymbol(childType, span);
        }
        public override void Visit(IdentifierNode& identifierNode)
        {
            if (scope == null)
            {
                type = null;
            }
            else
            {
                Symbol* s = scope->Lookup(identifierNode.str, ScopeLookup.this_and_bases_and_parent, span, errors);
                if (s != null)
                {
                    ResolveSymbol(s);
                }
                else
                {
                    type = null;
                }
            }
        }
        public override void Visit(ColonColonNode& colonColonNode)
        {
            if (colonColonNode.left.IsNull())
            {
                scope = &symbolTable.globalNs.scope;
            }
            else
            {
                colonColonNode.left->Accept(*this);
            }
            colonColonNode.right->Accept(*this);
        }
        public override void Visit(TemplateIdNode& templateIdNode)
        {
            TypeSymbol* primaryType = ResolveType(templateIdNode.id.Get(), symbolTable, scope, span, TypeResolvingFlags.resolveClassGroup, errors);
            if (primaryType != null)
            {
                if (primaryType is ClassGroupTypeSymbol*)
                {
                    ClassGroupTypeSymbol* cg = cast<ClassGroupTypeSymbol*>(primaryType);
                    int arity = cast<int>(templateIdNode.nodes.Count());
                    for (const UniquePtr<Symbol>& symbol : cg->symbols)
                    {
                        if (symbol.Get() is ClassTemplateSymbol*)
                        {
                            ClassTemplateSymbol* primaryClassTemplate = cast<ClassTemplateSymbol*>(symbol.Get());
                            if (arity >= primaryClassTemplate->MinArity() && arity <= primaryClassTemplate->Arity())
                            {
                                List<TypeSymbol*> templateArgumentTypes;
                                for (const UniquePtr<Node>& templateArgNode : templateIdNode.nodes)
                                {
                                    TypeSymbol* templateArgumentType = ResolveType(templateArgNode.Get(), symbolTable, scope, span, TypeResolvingFlags.noExternal, errors);
                                    if (templateArgumentType != null)
                                    {
                                        templateArgumentTypes.Add(templateArgumentType);
                                    }
                                    else
                                    {
                                        type = null;
                                        return;
                                    }
                                }
                                type = symbolTable.MakeClassTemplateSpecialization(primaryClassTemplate, templateArgumentTypes, span);
                                break;
                            }
                        }
                    }            
                }
            }
            type = null;
        }
        private void ResolveSymbol(Symbol* s)
        {
            if (s is TypeSymbol*)
            {
                type = cast<TypeSymbol*>(s);
                scope = &type->scope;
            }
            else if (s is NamespaceSymbol*)
            {
                NamespaceSymbol* ns = cast<NamespaceSymbol*>(s);
                type = null;
                scope = &ns->scope;
            }
            else if (s is TypeAliasSymbol*)
            {
                TypeAliasSymbol* alias = cast<TypeAliasSymbol*>(s);
                type = alias->type;
                scope = &type->scope;
            }
            else if (s is TypedefSymbol*)
            {
                TypedefSymbol* typedefSymbol = cast<TypedefSymbol*>(s);
                type = typedefSymbol->type;
                scope = &type->scope;
            }
            else 
            {
                type = null;
                scope = null;
            }
        }
        private SymbolTable& symbolTable;
        private Scope* scope;
        private Span span;
        private List<UniquePtr<Exception>>& errors;
        public TypeSymbol* type;
    }
    
    public TypeSymbol* ResolveType(Node* typeExpr, SymbolTable& symbolTable, Scope* scope, const Span& span, List<UniquePtr<Exception>>& errors)
    {
        return ResolveType(typeExpr, symbolTable, scope, span, TypeResolvingFlags.none, errors);
    }
    
    public TypeSymbol* ResolveType(Node* typeExpr, SymbolTable& symbolTable, Scope* scope, const Span& span, TypeResolvingFlags flags, List<UniquePtr<Exception>>& errors)
    {
        TypeResolver resolver(symbolTable, scope, span, errors);
        typeExpr->Accept(resolver);
        if (resolver.type != null)
        {
            if ((flags & TypeResolvingFlags.resolveClassGroup) != TypeResolvingFlags.none)
            {
                return resolver.type;
            }            
            else
            {
                if (resolver.type is ClassGroupTypeSymbol*)
                {
                    ClassGroupTypeSymbol* cg = cast<ClassGroupTypeSymbol*>(resolver.type);
                    for (const UniquePtr<Symbol>& symbol : cg->symbols)
                    {
                        if (symbol.Get() is ClassTypeSymbol*)
                        {
                            ClassTypeSymbol* cls = cast<ClassTypeSymbol*>(symbol.Get());
                            if (cls->Arity() == 0)
                            {
                                return cls;
                            }                        
                        }
                    }
                }
                else
                {
                    return resolver.type;
                }
            }
        }
        if ((flags & TypeResolvingFlags.resolveClassGroup) != TypeResolvingFlags.none || (flags & TypeResolvingFlags.noExternal) != TypeResolvingFlags.none)
        {
            return null;
        }
        else
        {
            TypeSymbol* externalType = symbolTable.MakeExternalTypeSymbol(ToUtf32(MakeNodeString(typeExpr)), span);
            return externalType;
        }    
    }
}
