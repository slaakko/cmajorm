using System;
using System.Collections;
using Span = System.Text.Parsing.Span;
using cppast;

namespace cppsymbols
{
    public class SymbolTable
    {
        public SymbolTable() : globalNs(Span(), u"", false), container(&globalNs)
        {
            AddTypeSymbolToGlobalNs(new CharTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new SignedCharTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new UnsignedCharTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new Char16TypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new Char32TypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new WCharTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new BoolTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new ShortIntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new UnsignedShortIntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new IntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new LongIntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new UnsignedIntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new UnsignedLongIntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new LongLongIntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new UnsignedLongLongIntTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new FloatTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new DoubleTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new VoidTypeSymbol(Span()));
            AddTypeSymbolToGlobalNs(new AutoTypeSymbol(Span()));
        }
        public void BeginNamespace(const Span& span, Node* node, int& idCount, List<UniquePtr<Exception>>& errors)
        {
            if (node != null)
            {
                if (node is IdentifierNode*)
                {
                    ++idCount;
                    IdentifierNode* idNode = cast<IdentifierNode*>(node);
                    const ustring& namespaceName = idNode->str;
                    Symbol* s = container->scope.Lookup(namespaceName, span, errors);
                    if (s != null)
                    {
                        if (s is NamespaceSymbol*)
                        {
                            NamespaceSymbol* ns = cast<NamespaceSymbol*>(s);
                            MapNode(node, ns);
                            BeginContainer(ns);
                        }
                        else
                        {
                            throw SymbolException(string(typename(*s)) + " symbol '" + ToUtf8(s->name) + "' does not denote a namespace", span);
                        }
                    }
                    else
                    {
                        NamespaceSymbol* ns = new NamespaceSymbol(span, namespaceName, false);
                        MapNode(node, ns);
                        container->AddSymbol(ns, errors);
                        BeginContainer(ns);
                    }
                }
                else if (node is ColonColonNode*)
                {
                    ColonColonNode* colonColonNode = cast<ColonColonNode*>(node);
                    BeginNamespace(span, colonColonNode->left.Get(), idCount, errors);
                    BeginNamespace(span, colonColonNode->right.Get(), idCount, errors);
                }
                else
                {
                    errors.Add(UniquePtr<Exception>(new SymbolException("internal error : identifier or colon colon node expected", span)));
                }
            }            
            else
            {
                ustring nsName = u"ns_" + ToUtf32(ToString(Uuid.Random()));
                NamespaceSymbol* ns = new NamespaceSymbol(span, nsName, true);
                container->AddSymbol(ns, errors);
                BeginContainer(ns);
            }
        }
        public void EndNamespace()
        {
            EndContainer();
        }
        public void BeginFunctionGroup(Node* node, List<UniquePtr<Exception>>& errors)
        {
            ustring parentClassName;
            if (container is ClassTypeSymbol*)
            {
                parentClassName = container->name;
            }
            ustring functionGroupName = MakeFunctionGroupName(node, parentClassName);
            Symbol* f = container->scope.Lookup(functionGroupName, node->span, errors);
            if (f != null)
            {
                if (f is FunctionGroupSymbol*)
                {
                    FunctionGroupSymbol* fg = cast<FunctionGroupSymbol*>(f);
                    MapNode(node, fg);
                    BeginContainer(fg);
                }
                else
                {
                    errors.Add(UniquePtr<Exception>(new SymbolException("symbol '" + ToUtf8(f->FullName()) + "' does not denote a function group", node->span)));
                    return;
                }
            }
            else
            {
                FunctionGroupSymbol* fg = new FunctionGroupSymbol(node->span, functionGroupName);
                MapNode(node, fg);
                container->AddSymbol(fg, errors);
                BeginContainer(fg);
            }
        }
        public void EndFunctionGroup()
        {
            EndContainer();
        }
        public void BeginFunction(Node* node, List<UniquePtr<ParameterSymbol>>& parameterList, CVSpecifiers cvSpecifiers, const Span& span, List<UniquePtr<Exception>>& errors)
        {
            FunctionGroupSymbol* fg = container as FunctionGroupSymbol*;
            if (fg != null)
            {
                for (const UniquePtr<Symbol>& symbol : fg->symbols)
                {
                    if (symbol.Get() is FunctionSymbol*)
                    {
                        FunctionSymbol* functionSymbol = cast<FunctionSymbol*>(symbol.Get());
                        long n = functionSymbol->Arity();
                        if (n == parameterList.Count() && functionSymbol->cvSpecifiers == cvSpecifiers)
                        {
                            bool found = true;
                            for (long i = 0; i < n; ++i)
                            {
                                TypeSymbol* paramType = parameterList[i]->type;
                                TypeSymbol* functionParamType = functionSymbol->parameters[i]->type;
                                if (paramType != functionParamType) 
                                {
                                    found = false;
                                    break;
                                }
                            }
                            if (found)
                            {
                                BeginContainer(functionSymbol);
                                MapNode(node, functionSymbol);
                                return;
                            }
                        }
                    }
                }
                const ustring& functionGroupName = fg->name;
                FunctionSymbol* functionSymbol = new FunctionSymbol(span, functionGroupName, cvSpecifiers);
                for (UniquePtr<ParameterSymbol>& parameterSymbol : parameterList)
                {
                    functionSymbol->AddSymbol(parameterSymbol.Release(), errors);
                }
                fg->AddSymbol(functionSymbol, errors);
                functionSymbol->parent = fg->parent;
                BeginContainer(functionSymbol);
                MapNode(node, functionSymbol);
            }                
            else
            {
                errors.Add(UniquePtr<Exception>(new SymbolException("internal error : function group expected", container->span)));
                return;
            }
        }
        public void EndFunction()
        {
            EndContainer();
        }
        public void BeginFunctionTemplate(Node* node, List<UniquePtr<ParameterSymbol>>& parameterList, CVSpecifiers cvSpecifiers, const Span& span, 
            List<UniquePtr<TemplateParameterSymbol>>& templateParameters, List<UniquePtr<Exception>>& errors)
        {
            FunctionGroupSymbol* fg = container as FunctionGroupSymbol*;
            if (fg != null)
            {
                for (const UniquePtr<Symbol>& symbol : fg->symbols)
                {
                    if (symbol.Get() is FunctionTemplateSymbol*)
                    {
                        FunctionTemplateSymbol* functionTemplateSymbol = cast<FunctionTemplateSymbol*>(symbol.Get());
                        long n = functionTemplateSymbol->Arity();
                        if (n == parameterList.Count() && functionTemplateSymbol->cvSpecifiers == cvSpecifiers && functionTemplateSymbol->templateParameters.Count() == templateParameters.Count())
                        {
                            bool found = true;
                            for (long i = 0; i < n; ++i)
                            {
                                TypeSymbol* paramType = parameterList[i]->type;
                                TypeSymbol* functionParamType = functionTemplateSymbol->parameters[i]->type;
                                if (paramType != functionParamType) 
                                {
                                    found = false;
                                    break;
                                }
                            }
                            if (found)
                            {
                                BeginContainer(functionTemplateSymbol);
                                MapNode(node, functionTemplateSymbol);
                                return;
                            }
                        }
                    }
                }
                const ustring& functionGroupName = fg->name;
                FunctionTemplateSymbol* functionTemplateSymbol = new FunctionTemplateSymbol(span, functionGroupName, cvSpecifiers);
                for (UniquePtr<ParameterSymbol>& parameterSymbol : parameterList)
                {
                    functionTemplateSymbol->AddSymbol(parameterSymbol.Release(), errors);
                }
                for (UniquePtr<TemplateParameterSymbol>& templateParameterSymbol : templateParameters)
                {
                    functionTemplateSymbol->AddSymbol(templateParameterSymbol.Release(), errors);
                }
                fg->AddSymbol(functionTemplateSymbol, errors);
                functionTemplateSymbol->parent = fg->parent;
                BeginContainer(functionTemplateSymbol);
                MapNode(node, functionTemplateSymbol);
            }            
        }
        public void EndFunctionTemplate()
        {
            EndContainer();
        }
        public void BeginClassGroup(Node* node, List<UniquePtr<Exception>>& errors)
        {
            if (node is IdentifierNode*)
            {
                IdentifierNode* idNode = cast<IdentifierNode*>(node);
                Symbol* s = container->scope.Lookup(idNode->str, node->span, errors);
                if (s != null)
                {
                    if (s is ClassGroupTypeSymbol*)
                    {
                        ClassGroupTypeSymbol* cg = cast<ClassGroupTypeSymbol*>(s);
                        BeginContainer(cg);
                        MapNode(node, cg);
                    }
                    else
                    {
                        errors.Add(UniquePtr<Exception>(new SymbolException("symbol '" + ToUtf8(s->FullName()) + " does not denote a class group", node->span)));
                        return;
                    }
                }
                else
                {
                    ClassGroupTypeSymbol* cg = new ClassGroupTypeSymbol(node->span, idNode->str);
                    container->AddSymbol(cg, errors);
                    BeginContainer(cg);
                    MapNode(node, cg);
                }
            }
            else if (node is TemplateIdNode*)
            {
                BeginClassGroup(cast<TemplateIdNode*>(node)->id.Get(), errors);
            }
            else
            {
                errors.Add(UniquePtr<Exception>(new SymbolException("cannot open class group with '" + MakeNodeString(node) + "' node", node->span)));
                return;
            }
        }
        public void EndClassGroup()
        {
            EndContainer();
        }
        public void BeginClass(Node* node, ClassKey classKey, const Span& span, int arity, List<UniquePtr<Exception>>& errors)
        {
            ClassGroupTypeSymbol* cg = container as ClassGroupTypeSymbol*;
            if (cg != null)
            {
                for (const UniquePtr<Symbol>& symbol : cg->symbols)
                {
                    if (symbol.Get() is ClassTypeSymbol*)
                    {
                        ClassTypeSymbol* prev = cast<ClassTypeSymbol*>(symbol.Get());
                        if (prev->Arity() == arity)
                        {
                            BeginContainer(prev);
                            MapNode(node, prev);
                            return;
                        }
                    }
                }
                ClassTypeSymbol* classTypeSymbol = new ClassTypeSymbol(span, cg->name, classKey);
                cg->AddSymbol(classTypeSymbol, errors);
                classTypeSymbol->parent = cg->parent;
                BeginContainer(classTypeSymbol);
                MapNode(node, classTypeSymbol);
            }
            else
            {
                errors.Add(UniquePtr<Exception>(new SymbolException("internal error: class group expected", span)));
            }
        }
        public void EndClass()
        {
            EndContainer();
        }
        public void BeginClassTemplate(Node* node, ClassKey classKey, const Span& span, List<UniquePtr<TemplateParameterSymbol>>& templateParameterSymbols, List<UniquePtr<Exception>>& errors)
        {
            ClassGroupTypeSymbol* cg = container as ClassGroupTypeSymbol*;
            if (cg != null)
            {
                for (const UniquePtr<Symbol>& symbol : cg->symbols)
                {
                    if (symbol.Get() is ClassTemplateSymbol*)
                    {
                        ClassTemplateSymbol* prev = cast<ClassTemplateSymbol*>(symbol.Get());
                        if (prev->Arity() == templateParameterSymbols.Count())
                        {
                            BeginContainer(prev);
                            MapNode(node, prev);
                            return;
                        }
                    }
                }
                ClassTemplateSymbol* classTemplateSymbol = new ClassTemplateSymbol(span, cg->name, classKey);
                for (UniquePtr<TemplateParameterSymbol>& templateParameterSymbol : templateParameterSymbols)
                {
                    classTemplateSymbol->AddSymbol(templateParameterSymbol.Release(), errors);
                }
                cg->AddSymbol(classTemplateSymbol, errors);
                classTemplateSymbol->parent = cg->parent;
                BeginContainer(classTemplateSymbol);
                MapNode(node, classTemplateSymbol);
            }
            else
            {
                errors.Add(UniquePtr<Exception>(new SymbolException("internal error: class group expected", span)));
            }
        }
        public void EndClassTemplate()
        {
            EndContainer();
        }
        public void BeginBlock(Node* node, const Span& span, List<UniquePtr<Exception>>& errors)
        {
            BlockSymbol* block = new BlockSymbol(span, ustring());
            container->AddSymbol(block, errors);
            BeginContainer(block);
            MapNode(node, block);
        }
        public void EndBlock()
        {
            EndContainer();
        }
        public void BeginContainer(ContainerSymbol* container_)
        {
            containerStack.Push(container);
            container = container_;
        }
        public void EndContainer()
        {
            container = containerStack.Pop();
        }
        public void AddTypeSymbol(TypeSymbol* typeSymbol, List<UniquePtr<Exception>>& errors)
        {
            container->AddSymbol(typeSymbol, errors);
        }
        public void AddTypeSymbolToGlobalNs(TypeSymbol* typeSymbol)
        {
            typeSymbol->parent = &globalNs;
            typeMap[typeSymbol->name] = typeSymbol;
            types.Add(UniquePtr<TypeSymbol>(typeSymbol));
        }
        public nothrow TypeSymbol* GetTypeByNameNoThrow(const ustring& typeName, const Span& span)
        {
            HashMap<ustring, TypeSymbol*>.ConstIterator it = typeMap.CFind(typeName);
            if (it != typeMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public TypeSymbol* GetTypeByName(const ustring& typeName, const Span& span) 
        {
            TypeSymbol* type = GetTypeByNameNoThrow(typeName, span);
            if (type != null)
            {
                return type;
            }
            else
            {
                throw SymbolException("type '" + ToUtf8(typeName) + "' not found", span);
            }
        }
        public TypeSymbol* MakeSimpleTypeSymbol(const SimpleTypeNode& simpleTypeNode, const Span& span)
        {
            if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.char_) == SimpleTypeSpecifiers.char_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.char_) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@char", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & (SimpleTypeSpecifiers.char_ | SimpleTypeSpecifiers.signed)) == (SimpleTypeSpecifiers.char_ | SimpleTypeSpecifiers.signed) && 
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.char_ | SimpleTypeSpecifiers.signed)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@signed_char", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & (SimpleTypeSpecifiers.char_ | SimpleTypeSpecifiers.unsigned)) == (SimpleTypeSpecifiers.char_ | SimpleTypeSpecifiers.unsigned) && 
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.char_ | SimpleTypeSpecifiers.unsigned)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@unsigned_char", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.char16_t) == SimpleTypeSpecifiers.char16_t &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.char16_t) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@char16_t", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.char32_t) == SimpleTypeSpecifiers.char32_t &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.char32_t) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@char32_t", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.wchar_t) == SimpleTypeSpecifiers.wchar_t &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.wchar_t) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@wchar_t", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.bool_) == SimpleTypeSpecifiers.bool_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.bool_) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@bool", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.short_) == SimpleTypeSpecifiers.short_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.signed | SimpleTypeSpecifiers.short_ | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@short_int", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & (SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.short_)) == (SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.short_) &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.short_ | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@unsigned_short_int", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.int_ ) == SimpleTypeSpecifiers.int_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.signed | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@int", span);
            } 
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.long_) == SimpleTypeSpecifiers.long_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.signed | SimpleTypeSpecifiers.long_ | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@long_int", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.unsigned) == SimpleTypeSpecifiers.unsigned &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@unsigned_int", span);
            } 
            else if ((simpleTypeNode.simpleTypeSpecifiers & (SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.long_)) == (SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.long_) &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.long_ | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@unsigned_long_int", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.long_long) == SimpleTypeSpecifiers.long_long &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.signed | SimpleTypeSpecifiers.long_long | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@long_long_int", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & (SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.long_long)) == (SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.long_long) &&
                (simpleTypeNode.simpleTypeSpecifiers & ~(SimpleTypeSpecifiers.unsigned | SimpleTypeSpecifiers.long_long | SimpleTypeSpecifiers.int_)) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@unsigned_long_long_int", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.float_) == SimpleTypeSpecifiers.float_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.float_) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@float", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.double_) == SimpleTypeSpecifiers.double_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.double_) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@double", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.void_) == SimpleTypeSpecifiers.void_ &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.void_) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@void", span);
            }
            else if ((simpleTypeNode.simpleTypeSpecifiers & SimpleTypeSpecifiers.auto) == SimpleTypeSpecifiers.auto &&
                (simpleTypeNode.simpleTypeSpecifiers & ~SimpleTypeSpecifiers.auto) == SimpleTypeSpecifiers.none)
            {
                return GetTypeByName(u"@auto", span);
            }
            else
            {
                throw SymbolException("invalid combination of simple type specifiers in simple type '" + ToUtf8(SimpleTypeSpecifierStr(simpleTypeNode.simpleTypeSpecifiers)) + "'", span);
            }
        }
        public TypeSymbol* MakeConstTypeSymbol(TypeSymbol* childType, const Span& span)
        {
            if (childType is ConstTypeSymbol*) 
            {
                return childType;
            }
            ustring fullName = u"const " + childType->FullName();
            TypeSymbol* type = GetTypeByNameNoThrow(fullName, span);
            if (type != null)
            {
                return type;
            }
            TypeSymbol* constType = new ConstTypeSymbol(span, fullName, childType);
            AddTypeSymbolToGlobalNs(constType);
            return constType;
        }
        public TypeSymbol* MakeVolatileTypeSymbol(TypeSymbol* childType, const Span& span)
        {
            if (childType is VolatileTypeSymbol*)
            {
                return childType;
            }
            ustring fullName = u"volatile " + childType->FullName();
            TypeSymbol* type = GetTypeByNameNoThrow(fullName, span);
            if (type != null)
            {
                return type;
            }
            TypeSymbol* volatileType = new VolatileTypeSymbol(span, fullName, childType);
            AddTypeSymbolToGlobalNs(volatileType);
            return volatileType;
        }
        public TypeSymbol* MakeLvalueRefTypeSymbol(TypeSymbol* childType, const Span& span)
        {
            if (childType is LvalueRefTypeSymbol*)
            {
                return childType;
            }
            ustring fullName = childType->FullName() + u"&";
            TypeSymbol* type = GetTypeByNameNoThrow(fullName, span);
            if (type != null)
            {
                return type;
            }
            TypeSymbol* lvalueRefType = new LvalueRefTypeSymbol(span, fullName, childType);
            AddTypeSymbolToGlobalNs(lvalueRefType);
            return lvalueRefType;
        }
        public TypeSymbol* MakeRvalueRefTypeSymbol(TypeSymbol* childType, const Span& span)
        {
            if (childType is RvalueRefTypeSymbol*)
            {
                return childType;
            }
            ustring fullName = childType->FullName() + u"&&";
            TypeSymbol* type = GetTypeByNameNoThrow(fullName, span);
            if (type != null)
            {
                return type;
            }
            TypeSymbol* rvalueRefType = new RvalueRefTypeSymbol(span, fullName, childType);
            AddTypeSymbolToGlobalNs(rvalueRefType);
            return rvalueRefType;
        }
        public TypeSymbol* MakePointerTypeSymbol(TypeSymbol* childType, const Span& span)
        {
            ustring fullName = childType->FullName() + u"*";
            TypeSymbol* type = GetTypeByNameNoThrow(fullName, span);
            if (type != null)
            {
                return type;
            }
            TypeSymbol* pointerType = new PointerTypeSymbol(span, fullName, childType);
            AddTypeSymbolToGlobalNs(pointerType);
            return pointerType;
        }
        public TypeSymbol* MakeExternalTypeSymbol(const ustring& typeFullName, const Span& span)
        {
            TypeSymbol* type = GetTypeByNameNoThrow(typeFullName, span);
            if (type != null)
            {
                return type;
            }
            TypeSymbol* externalType = new ExternalTypeSymbol(span, typeFullName);
            AddTypeSymbolToGlobalNs(externalType);
            return externalType;
        }
        public TypeSymbol* MakeClassTemplateSpecialization(ClassTemplateSymbol* primaryClassTemplate, const List<TypeSymbol*>& templateArgumentTypes, const Span& span)
        {
            ustring typeFullName = primaryClassTemplate->FullName();
            typeFullName.Append('<');
            bool first = true;
            for (TypeSymbol* templateArgumentType : templateArgumentTypes)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    typeFullName.Append(u", ");
                }
                typeFullName.Append(templateArgumentType->FullName());
            }
            typeFullName.Append('>');
            TypeSymbol* type = GetTypeByNameNoThrow(typeFullName, span);
            if (type != null)
            {
                return type;
            }
            ClassTemplateSpecializationSymbol* specialization = new ClassTemplateSpecializationSymbol(span, typeFullName, primaryClassTemplate->classKey);
            specialization->classTemplate = primaryClassTemplate;
            specialization->templateArgumentTypes = templateArgumentTypes;
            AddTypeSymbolToGlobalNs(specialization);
            return specialization;
        }
        public void MapNode(Node* node, Symbol* symbol)
        {
            nodeSymbolMap[node] = symbol;
        }
        public Symbol* GetMappedSymbolNoThrow(Node* node) const
        {
            HashMap<Node*, Symbol*>.ConstIterator it = nodeSymbolMap.CFind(node);
            if (it != nodeSymbolMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public Symbol* GetMappedSymbol(Node* node) const
        {
            Symbol* symbol = GetMappedSymbolNoThrow(node);
            if (symbol != null)
            {
                return symbol;
            }
            else
            {
                throw Exception("mapped symbol for node not found");
            }
        }
        public NamespaceSymbol globalNs;
        public List<UniquePtr<TypeSymbol>> types;
        public ContainerSymbol* container;
        private HashMap<ustring, TypeSymbol*> typeMap;
        private Stack<ContainerSymbol*> containerStack;
        private HashMap<Node*, Symbol*> nodeSymbolMap;
    }
}
