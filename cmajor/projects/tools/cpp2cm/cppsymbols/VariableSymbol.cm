using System;
using Span = System.Text.Parsing.Span;

namespace cppsymbols
{
    public abstract class VariableSymbol : Symbol
    {
        public nothrow VariableSymbol(const Span& span_, const ustring& name_, TypeSymbol* type_) : base(span_, name_), type(type_)
        {
        }
        public TypeSymbol* type;
    }
    
    public class ParameterSymbol : VariableSymbol
    {
        public nothrow ParameterSymbol(const Span& span_, const ustring& name_, TypeSymbol* type_) : base(span_, name_, type_)
        {
        }
        public override void Accept(SymbolVisitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class LocalVariableSymbol : VariableSymbol
    {
        public nothrow LocalVariableSymbol(const Span& span_, const ustring& name_, TypeSymbol* type_) : base(span_, name_, type_)
        {
        }
        public override void Accept(SymbolVisitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class MemberVariableSymbol : VariableSymbol
    {
        public nothrow MemberVariableSymbol(const Span& span_, const ustring& name_, TypeSymbol* type_) : base(span_, name_, type_)
        {
        }
        public override void Accept(SymbolVisitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class GlobalVariableSymbol : VariableSymbol
    {
        public nothrow GlobalVariableSymbol(const Span& span_, const ustring& name_, TypeSymbol* type_) : base(span_, name_, type_)
        {
        }
        public override void Accept(SymbolVisitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
}
