using System;
using System.Collections;
using System.Dom;
using cppast;

namespace cppsymbols
{
    public class SymbolTableXmlGenerator : SymbolVisitor
    {
        public void ToXml(SymbolTable& symbolTable)
        {
            symbolTableElement.Reset(new DomElement(u"symbolTable"));
            currentElement = symbolTableElement.Get();
            symbolTable.globalNs.Accept(*this);
            DomElement* prevElement = currentElement;
            UniquePtr<DomElement> typesElement(new DomElement(u"types"));
            currentElement = typesElement.Get();
            for (const UniquePtr<TypeSymbol>& type : symbolTable.types)
            {
                type->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(typesElement.Release()));
        }
        public override void Visit(ClassGroupTypeSymbol& symbol)
        {
            UniquePtr<DomElement> classGroupElement(new DomElement(u"classGroup"));
            classGroupElement->SetAttribute(u"name", symbol.name);
            DomElement* prevElement = currentElement;
            currentElement = classGroupElement.Get();
            for (const UniquePtr<Symbol>& classSymbol : symbol.symbols)
            {
                classSymbol->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(classGroupElement.Release()));
        }
        public override void Visit(ClassTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> classElement(new DomElement(u"class"));
            classElement->SetAttribute(u"name", symbol.name);
            classElement->SetAttribute(u"key", ClassKeyStr(symbol.classKey));
            DomElement* prevElement = currentElement;
            currentElement = classElement.Get();
            if (!symbol.baseClasses.IsEmpty())
            {
                UniquePtr<DomElement> baseClassesElement(new DomElement(u"baseClasses"));
                DomElement* prevElement = currentElement;
                currentElement = baseClassesElement.Get();
                for (ClassTypeSymbol* baseClass : symbol.baseClasses)
                {
                    UniquePtr<DomElement> baseClassElement(new DomElement(u"baseClass"));
                    baseClassElement->SetAttribute(u"name", baseClass->name);
                    currentElement->AppendChild(UniquePtr<DomNode>(baseClassElement.Release()));
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(baseClassesElement.Release()));
            }
            if (!symbol.symbols.IsEmpty())
            {
                UniquePtr<DomElement> membersElement(new DomElement(u"members"));
                DomElement* prevElement = currentElement;
                currentElement = membersElement.Get();
                for (const UniquePtr<Symbol>& symbol : symbol.symbols)
                {
                    symbol->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(membersElement.Release()));
            }            
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(classElement.Release()));
        }
        public override void Visit(ClassTemplateSymbol& symbol) 
        {
            UniquePtr<DomElement> classTemplateElement(new DomElement(u"classTemplate"));
            classTemplateElement->SetAttribute(u"name", symbol.name);
            classTemplateElement->SetAttribute(u"key", ClassKeyStr(symbol.classKey));
            DomElement* prevElement = currentElement;
            currentElement = classTemplateElement.Get();
            if (!symbol.baseClasses.IsEmpty())
            {
                UniquePtr<DomElement> baseClassesElement(new DomElement(u"baseClasses"));
                DomElement* prevElement = currentElement;
                currentElement = baseClassesElement.Get();
                for (ClassTypeSymbol* baseClass : symbol.baseClasses)
                {
                    baseClass->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(baseClassesElement.Release()));
            }
            if (!symbol.symbols.IsEmpty())
            {
                UniquePtr<DomElement> membersElement(new DomElement(u"members"));
                DomElement* prevElement = currentElement;
                currentElement = membersElement.Get();
                for (const UniquePtr<Symbol>& symbol : symbol.symbols)
                {
                    symbol->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(membersElement.Release()));
            }            
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(classTemplateElement.Release()));
        }        
        public override void Visit(NamespaceSymbol& symbol) 
        {
            UniquePtr<DomElement> namespaceElement(new DomElement(u"namespace"));
            namespaceElement->SetAttribute(u"name", symbol.name);
            DomElement* prevElement = currentElement;
            currentElement = namespaceElement.Get();
            if (!symbol.symbols.IsEmpty())
            {
                UniquePtr<DomElement> membersElement(new DomElement(u"members"));
                DomElement* prevElement = currentElement;
                currentElement = membersElement.Get();
                for (const UniquePtr<Symbol>& symbol : symbol.symbols)
                {
                    symbol->Accept(*this);
                }
                currentElement = prevElement;
                currentElement->AppendChild(UniquePtr<DomNode>(membersElement.Release()));
            }            
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(namespaceElement.Release()));
        }
        public override void Visit(TypeSymbol& symbol)
        {
            UniquePtr<DomElement> typeElement(new DomElement(u"type"));
            typeElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(typeElement.Release()));
        }
        public override void Visit(CharTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(SignedCharTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(UnsignedCharTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(Char16TypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(Char32TypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(WCharTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(BoolTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(ShortIntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(UnsignedShortIntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(IntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(UnsignedIntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(LongIntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(UnsignedLongIntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(LongLongIntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(UnsignedLongLongIntTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(FloatTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(DoubleTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(VoidTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(AutoTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> simpleTypeElement(new DomElement(u"simpleType"));
            simpleTypeElement->SetAttribute(u"name", symbol.FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(simpleTypeElement.Release()));
        }
        public override void Visit(TemplateParameterSymbol& symbol) 
        {
            UniquePtr<DomElement> templateParameterElement(new DomElement(u"templateParameter"));
            templateParameterElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(templateParameterElement.Release()));
        }
        public override void Visit(FunctionGroupSymbol& symbol) 
        {
            UniquePtr<DomElement> functionGroupElement(new DomElement(u"functionGroup"));
            functionGroupElement->SetAttribute(u"name", symbol.name);
            DomElement* prevElement = currentElement;
            currentElement = functionGroupElement.Get();
            for (const UniquePtr<Symbol>& functionSymbol : symbol.symbols)
            {
                functionSymbol->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(functionGroupElement.Release()));
        }
        public override void Visit(FunctionSymbol& symbol) 
        {
            UniquePtr<DomElement> functionElement(new DomElement(u"function"));
            functionElement->SetAttribute(u"name", symbol.name);
            functionElement->SetAttribute(u"cv", CVSpecifierStr(symbol.cvSpecifiers));
            if (symbol.returnType != null)
            {
                functionElement->SetAttribute(u"returnType", symbol.returnType->FullName());
            }
            DomElement* prevElement = currentElement;
            currentElement = functionElement.Get();
            for (const UniquePtr<Symbol>& memberSymbol : symbol.symbols)
            {
                memberSymbol->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(functionElement.Release()));
        }
        public override void Visit(FunctionTemplateSymbol& symbol) 
        {
            UniquePtr<DomElement> functionTemplateElement(new DomElement(u"functionTemplate"));
            functionTemplateElement->SetAttribute(u"name", symbol.name);
            if (symbol.returnType != null)
            {
                functionTemplateElement->SetAttribute(u"returnType", symbol.returnType->FullName());
            }
            DomElement* prevElement = currentElement;
            currentElement = functionTemplateElement.Get();
            for (const UniquePtr<Symbol>& memberSymbol : symbol.symbols)
            {
                memberSymbol->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(functionTemplateElement.Release()));
        }
        public override void Visit(BlockSymbol& symbol)
        {
            UniquePtr<DomElement> blockElement(new DomElement(u"block"));
            DomElement* prevElement = currentElement;
            currentElement = blockElement.Get();
            for (const UniquePtr<Symbol>& memberSymbol : symbol.symbols)
            {
                memberSymbol->Accept(*this);
            }
            currentElement = prevElement;
            currentElement->AppendChild(UniquePtr<DomNode>(blockElement.Release()));
        }
        public override void Visit(ConstTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> constTypeElement(new DomElement(u"constType"));
            constTypeElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(constTypeElement.Release()));
        }
        public override void Visit(VolatileTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> volatileTypeElement(new DomElement(u"volatileType"));
            volatileTypeElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(volatileTypeElement.Release()));
        }
        public override void Visit(LvalueRefTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> lvalueRefTypeElement(new DomElement(u"lvalueRefType"));
            lvalueRefTypeElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(lvalueRefTypeElement.Release()));
        }
        public override void Visit(RvalueRefTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> rvalueRefTypeElement(new DomElement(u"rvalueRefType"));
            rvalueRefTypeElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(rvalueRefTypeElement.Release()));
        }
        public override void Visit(PointerTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> pointerTypeElement(new DomElement(u"pointerType"));
            pointerTypeElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(pointerTypeElement.Release()));
        }
        public override void Visit(ExternalTypeSymbol& symbol) 
        {
            UniquePtr<DomElement> externalTypeElement(new DomElement(u"externalType"));
            externalTypeElement->SetAttribute(u"name", symbol.name);
            currentElement->AppendChild(UniquePtr<DomNode>(externalTypeElement.Release()));
        }
        public override void Visit(ParameterSymbol& symbol) 
        {
            UniquePtr<DomElement> parameterElement(new DomElement(u"parameter"));
            parameterElement->SetAttribute(u"name", symbol.name);
            parameterElement->SetAttribute(u"type", symbol.type->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(parameterElement.Release()));
        }
        public override void Visit(LocalVariableSymbol& symbol) 
        {
            UniquePtr<DomElement> localVariableElement(new DomElement(u"localVariable"));
            localVariableElement->SetAttribute(u"name", symbol.name);
            localVariableElement->SetAttribute(u"type", symbol.type->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(localVariableElement.Release()));
        }
        public override void Visit(MemberVariableSymbol& symbol) 
        {
            UniquePtr<DomElement> memberVariableElement(new DomElement(u"memberVariable"));
            memberVariableElement->SetAttribute(u"name", symbol.name);
            memberVariableElement->SetAttribute(u"type", symbol.type->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(memberVariableElement.Release()));
        }
        public override void Visit(GlobalVariableSymbol& symbol) 
        {
            UniquePtr<DomElement> globalVariableElement(new DomElement(u"globalVariable"));
            globalVariableElement->SetAttribute(u"name", symbol.name);
            globalVariableElement->SetAttribute(u"type", symbol.type->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(globalVariableElement.Release()));
        }
        public override void Visit(AliasSymbol& symbol) 
        {
            UniquePtr<DomElement> aliasElement(new DomElement(u"alias"));
            aliasElement->SetAttribute(u"name", symbol.name);
            aliasElement->SetAttribute(u"target", symbol.target->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(aliasElement.Release()));
        }
        public override void Visit(NamespaceImportSymbol& symbol) 
        {
            UniquePtr<DomElement> namespaceImportElement(new DomElement(u"namespaceImport"));
            namespaceImportElement->SetAttribute(u"name", symbol.name);
            namespaceImportElement->SetAttribute(u"ns", symbol.ns->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(namespaceImportElement.Release()));
        }
        public override void Visit(TypeAliasSymbol& symbol)
        {
            UniquePtr<DomElement> typeAliasElement(new DomElement(u"typeAlias"));
            typeAliasElement->SetAttribute(u"name", symbol.name);
            typeAliasElement->SetAttribute(u"type", symbol.type->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(typeAliasElement.Release()));
        }
        public override void Visit(TypedefSymbol& symbol)
        {
            UniquePtr<DomElement> typedefElement(new DomElement(u"typedef"));
            typedefElement->SetAttribute(u"name", symbol.name);
            typedefElement->SetAttribute(u"type", symbol.type->FullName());
            currentElement->AppendChild(UniquePtr<DomNode>(typedefElement.Release()));
        }
        public UniquePtr<DomElement> symbolTableElement;
        private DomElement* currentElement;
    }
}
