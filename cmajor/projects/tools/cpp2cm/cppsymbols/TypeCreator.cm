using System;
using System.Collections;
using cppast;

namespace cppsymbols
{
    public class TypeCreator : Visitor
    {
        public nothrow TypeCreator(SymbolTable& symbolTable_) : symbolTable(symbolTable_)
        {
        }
        public nothrow inline TypeSymbol* GetType() const
        {
            return type;
        }
        public override void Visit(SimpleTypeNode& simpleTypeNode) 
        {
            type = symbolTable.MakeSimpleTypeSymbol(simpleTypeNode, simpleTypeNode.span);
        }
        public override void Visit(ColonColonNode& colonColonNode) 
        {
            ++idIndex;
            colonColonNode.left->Accept(*this);
            --idIndex;
            colonColonNode.right->Accept(*this);
            if (idIndex == 0)
            {
                for (int i = 0; i < idCount; ++i)
                {
                    symbolTable.EndNamespace();
                }
                idCount = 0;
            }
        }
        public override void Visit(IdentifierNode& identifierNode)
        {
            if (idIndex > 0)
            {
                symbolTable.BeginNamespace(identifierNode.span, &identifierNode, idCount, errors);
            }
            else
            {
                type = new TypeSymbol(identifierNode.span, identifierNode.str);
                symbolTable.AddTypeSymbol(type, errors);
            }
        }
        public override void Visit(TemplateIdNode& templateIdNode) 
        {
            type = new ClassTemplateSymbol(templateIdNode.span, templateIdNode.id->str, ClassKey.class_);
            symbolTable.AddTypeSymbol(type, errors);
            for (const UniquePtr<Node>& node : templateIdNode.nodes)
            {
                node->Accept(*this);
            }
        }
        public override void Visit(TemplateParameterNode& templateParameterNode) 
        {
            if (type is ClassTemplateSymbol*)
            {
                ClassTemplateSymbol* classTemplateSymbol = cast<ClassTemplateSymbol*>(type);
                TemplateParameterSymbol* templateParameterSymbol = new TemplateParameterSymbol(templateParameterNode.span, templateParameterNode.id->str);
                if (!templateParameterNode.defaultTemplateArgument.IsNull())
                {
                    templateParameterSymbol->hasDefault = true;
                    templateParameterSymbol->defaultArg = templateParameterNode.defaultTemplateArgument.Get();
                }            
                classTemplateSymbol->AddSymbol(templateParameterSymbol, errors);
            }
        }
        private SymbolTable& symbolTable;
        private int idIndex;
        private int idCount;
        private List<UniquePtr<Exception>> errors;
        private TypeSymbol* type;
    }
}
