using System;
using Span = System.Text.Parsing.Span;
using cppast;

namespace cppsymbols
{
    public class TypeSymbol : ContainerSymbol
    {
        public nothrow TypeSymbol(const Span& span_, const ustring& name_) : base(span_, name_)
        {
        }
        public override void Accept(SymbolVisitor& visitor)
        {
            visitor.Visit(*this);
        }
        public nothrow virtual bool IsUnsignedType() const 
        { 
            return false; 
        }
    }
    
    public class TemplateParameterSymbol : TypeSymbol
    {
        public nothrow TemplateParameterSymbol(const Span& span_, const ustring& name_) : base(span_, name_), hasDefault(false)
        {
        }
        public override void Accept(SymbolVisitor& visitor)
        {
            visitor.Visit(*this);
        }
        public TypeSymbol* type;
        public bool hasDefault;
        public TypeSymbol* defaultType;
        public Node* defaultArg;
    }
}
