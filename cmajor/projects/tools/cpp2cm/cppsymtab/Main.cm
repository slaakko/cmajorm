using System;
using System.IO;
using System.Collections;
using System.Dom;
using System.Text;
using conversion;
using cppparser;
using cppsymbols;
using cppast;
using pp;

const char* Version()
{
    return "2.5.0";
}

void PrintHelp()
{
    Console.Out() <<
        "C++ symbol table XML builder version " << Version() << endl() <<
        "Usage: cppsymtab [options] { file.hpp | file.cpp }" << endl() <<
        "Parses given C++ source files and writes symbol tables as XML." << endl() <<
        "Options:" << endl() <<
        "--cpp=CPP.XML (-c=CPP.XML)" << endl() <<
        "   Read preprocessing defitions from CPP.XML." << endl() <<
        "   By default read them from file 'cpp.xml' residing in the current directory if it exists." << endl() <<
        "--out=FILE (-o=FILE)" << endl() <<
        "   Write preprocessing output to FILE." << endl() <<
        "   By default writes output to stdout." << endl() <<
        "--include=DIRECTORIES (-I=DIRECTORIES)" << endl() <<
        "   Append DIRECTORIES with each directory separated with ';' to include directories." << endl() <<
        "--ppcl (-p)" << endl() <<
        "   Preprocess using Microsoft C++ compiler cl.exe." << endl() <<
        "   cl.exe must be in PATH." << endl() <<
        "   By default uses an internal preprocessor." << endl() << 
        "--ppleave (-l)" << endl() <<
        "   Do not remove preprocessing output file FILE.i (effective with --ppcl option)." << endl() <<
        "--help (-h)" << endl() <<
        "   Print help." << endl() <<
        "--verbose (-v)" << endl() <<
        "   Be verbose." << endl() <<
        "--debug (-d)" << endl() <<
        "   Debug parsing and generate XML debug output." << endl() <<
        "--diagnostics (-i)" << endl() <<
        "   Print diagnostic output." << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        string xmlFilePath = "cpp.xml";
        List<string> files;
        List<string> includeDirectories;
        string outputFilePath;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("-"))
            {
                if (arg == "--debug" || arg == "-d")
                {
                    Flags.SetDebug();
                }
                else if (arg == "--verbose" || arg == "-v")
                {
                    Flags.SetVerbose();
                }
                else if (arg == "--diagnostics" || arg == "-i")
                {
                    Flags.SetDiagnostics();
                }
                else if (arg == "--help" || arg == "-h")
                {
                    PrintHelp();
                    return 0;
                }
                else if (arg == "--ppcl" || arg == "-p")
                {
                    Flags.SetPreprocessUsingCl(); 
                }
                else if (arg == "--ppleave" || arg == "-l")
                {
                    Flags.SetLeavePPOutput();
                }
                else if (arg.Find('=') != -1)
                {
                    List<string> components = arg.Split('=');
                    if (components.Count() == 2)
                    {
                        if (components[0] == "--cpp" || components[0] == "-c")
                        {
                            xmlFilePath = components[1];
                        }
                        else if (components[0] == "--out" || components[0] == "-o")
                        {
                            outputFilePath = components[1];
                        }
                        else if (components[0] == "--include" || components[0] == "-I")
                        {
                            List<string> directories = components[1].Split(';');
                            for (const string& includeDir : directories)
                            {
                                includeDirectories.Add(includeDir);
                            }
                        }
                        else
                        {
                            throw Exception("unknown option '" + arg + "'");
                        }
                    }
                    else
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else
            {
                files.Add(GetFullPath(arg));
            }
        }
        if (files.IsEmpty())
        {
            PrintHelp();
            throw Exception("no input files given");
        }
        UniquePtr<DomDocument> cppDoc;
        if (!xmlFilePath.IsEmpty() && File.Exists(xmlFilePath))
        {
            cppDoc = ParseXmlFileToDomDocument(xmlFilePath);
        }
        DomElement* cppElement = null;
        if (!cppDoc.IsNull())
        {
            cppElement = cppDoc->DocumentElement();
        }
        SourceFileGrammar* sourceFileGrammar = Parser.Instance().GetSourceFileGrammar();
        if (Flags.Debug())
        {
            sourceFileGrammar->SetLog(&Console.Out());
        }
        StreamWriter* outputWriter = &Console.Out();
        UniquePtr<StreamWriter> outputFileWriter;
        if (!outputFilePath.IsEmpty())
        {
             outputFileWriter.Reset(new StreamWriter(File.CreateText(outputFilePath)));
             outputWriter = outputFileWriter.Get();
        }
        List<UniquePtr<Exception>> errors;
        UniquePtr<DomElement> sym(new DomElement(u"symbolTables"));
        for (const string& file : files)
        {
            if (Flags.Verbose())
            {
                Console.Out() << "> " << file << endl();
            }
            UniquePtr<CompileUnitNode> compileUnit(new CompileUnitNode(file));
            List<PPFile> ppFiles = DoPreprocess(file, cppElement, includeDirectories);
            if (Flags.Verbose())
            {
                Console.Out() << "Preprocessing " << file << " succeeded." << endl();
            }
            for (const PPFile& ppFile : ppFiles)
            {
                if (Flags.Verbose())
                {
                    Console.Out() << ">> " << ppFile.filePath << endl();
                }
                const ustring& content = ppFile.content;
                int fileIndex = FileRegistry.Instance().RegisterFilePath(ppFile.filePath);
                FileRegistry.Instance().SetFileContent(fileIndex, content);
                UniquePtr<SourceFileNode> sourceFile = sourceFileGrammar->Parse(content.Chars(), content.Chars() + content.Length(), fileIndex, ppFile.filePath);
                compileUnit->nodes.Add(Rvalue(sourceFile));
            }
            if (Flags.Verbose())
            {
                Console.Out() << "Parsing " << file << " succeeded." << endl();
            }
            SymbolTableXmlGenerator symbolTableXmlGenerator;
            SymbolTable symbolTable;
            ConversionTable conversionTable;
            ReadRules(symbolTable, conversionTable, Flags.Verbose());
            SymbolCreator symbolCreator(symbolTable, errors);
            compileUnit->Accept(symbolCreator);
            symbolTableXmlGenerator.ToXml(symbolTable);
            sym->AppendChild(UniquePtr<DomNode>(symbolTableXmlGenerator.symbolTableElement.Release()));
        }
        DomDocument symDoc;
        symDoc.AppendChild(UniquePtr<DomNode>(sym.Release()));
        StreamWriter& out = *outputWriter;
        CodeFormatter formatter(out);
        symDoc.Write(formatter);
        if (Flags.Verbose())
        {
            if (!outputFilePath.IsEmpty())
            {
                Console.Out() << "==> " << outputFilePath << endl();
            }
        }
        if (!errors.IsEmpty())
        {
            Console.Out() << "errors:" << endl();
            for (const UniquePtr<Exception>& error : errors)
            {
                Console.Out() << error->Message() << endl();
            }
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
