using System;
using cppast;

namespace pp
{
    public abstract class Value
    {
        public default virtual ~Value();
        public abstract int ToInteger() const;
    }
    
    public class BooleanValue : Value
    {
        public nothrow BooleanValue(bool value_) : value(value_)
        {
        }
        public override int ToInteger() const
        {
            if (value) return 1;
            return 0;
        }
        public bool value;
    }
    
    public class IntegerValue : Value
    {
        public nothrow IntegerValue(int value_) : value(value_)
        {
        }
        public override int ToInteger() const
        {
            return value;
        }
        public int value;
    }
    
    public class FloatingValue : Value
    {
        public nothrow FloatingValue(double value_) : value(value_)
        {
        }
        public override int ToInteger() const
        {
            return cast<int>(value);
        }
        public double value;
    }
    
    public class CharacterValue : Value
    {
        public nothrow CharacterValue(uchar value_) : value(value_)
        {
        }
        public override int ToInteger() const
        {
            return cast<int>(value);
        }
        public uchar value;
    }
    
    public class Evaluator : Visitor
    {
        public nothrow Evaluator(PP& pp_, int line_) : pp(pp_), line(line_)
        {
        }
        public override void Visit(IdentifierNode& identifierNode) 
        {
            throw PreprocessingException("preprocessing symbol '" + ToUtf8(identifierNode.str) + "' at line " + ToString(line) + " not defined");
        }
        public override void Visit(ParenthesizedExpressionNode& parenthesizedExpressionNode)
        {
            value = Evaluate(pp, parenthesizedExpressionNode.child.Get(), line);
        }
        public override void Visit(FloatingLiteralNode& floatingLiteralNode) 
        {
            value.Reset(new FloatingValue(floatingLiteralNode.val));
        }
        public override void Visit(IntegerLiteralNode& integerLiteralNode) 
        {
            value.Reset(new IntegerValue(cast<int>(integerLiteralNode.val)));
        }
        public override void Visit(CharacterLiteralNode& characterLiteralNode) 
        {
            value.Reset(new CharacterValue(characterLiteralNode.val));
        }
        public override void Visit(BooleanLiteralNode& booleanLiteralNode) 
        {
            value.Reset(new BooleanValue(booleanLiteralNode.val));
        }
        public override void Visit(BinaryExpressionNode& binaryExpressionNode) 
        {
            int result = 0;
            UniquePtr<Value> left = Evaluate(pp, binaryExpressionNode.left.Get(), line);
            int leftInt = left->ToInteger();
            if (binaryExpressionNode.op == Operator.logicalAnd && leftInt == 0)
            {
                result = 0;
            }
            else if (binaryExpressionNode.op == Operator.logicalOr && leftInt != 0)
            {
                result = 1;
            }
            else
            {
                UniquePtr<Value> right = Evaluate(pp, binaryExpressionNode.right.Get(), line);
                int rightInt = right->ToInteger();
                switch (binaryExpressionNode.op)
                {
                    case Operator.shiftLeft: result = leftInt << rightInt; break;
                    case Operator.shiftRight: result = leftInt >> rightInt; break;
                    case Operator.logicalAnd: result = cast<int>(leftInt != 0 && rightInt != 0); break; 
                    case Operator.logicalOr: result  = cast<int>(leftInt != 0 || rightInt != 0); break;
                    case Operator.equal: result = cast<int>(leftInt == rightInt); break;
                    case Operator.notEqual: result = cast<int>(leftInt != rightInt); break;
                    case Operator.lessOrEqual: result = cast<int>(leftInt <= rightInt); break;
                    case Operator.greaterOrEqual: result = cast<int>(leftInt >= rightInt); break;
                    case Operator.less: result = cast<int>(leftInt < rightInt); break;
                    case Operator.greater: result = cast<int>(leftInt > rightInt); break;
                    case Operator.add: result = leftInt + rightInt; break;
                    case Operator.sub: result = leftInt - rightInt; break;
                    case Operator.mul: result = leftInt * rightInt; break;
                    case Operator.div: result = leftInt / rightInt; break;
                    case Operator.rem: result = leftInt % rightInt; break;
                    case Operator.xor: result = leftInt ^ rightInt; break;
                    case Operator.and_: result = leftInt & rightInt; break;
                    case Operator.or_: result = leftInt | rightInt; break;
                }
            }            
            value.Reset(new IntegerValue(result));
        }
        public override void Visit(UnaryExpressionNode& unaryExpressionNode) 
        {
            UniquePtr<Value> operandValue = Evaluate(pp, unaryExpressionNode.child.Get(), line);
            int intValue = operandValue->ToInteger();
            int result = 0;
            switch (unaryExpressionNode.op)
            {
                case Operator.neg: result = ~intValue; break;
                case Operator.not_: result = cast<int>(!(intValue != 0)); break;
                case Operator.unaryMinus: result = -intValue; break;
            }
            value.Reset(new IntegerValue(result));
        }
        public override void Visit(ConditionalExpressionNode& conditionalExpressionNode) 
        {
            UniquePtr<Value> exprValue = Evaluate(pp, conditionalExpressionNode.expr.Get(), line);
            int intValue = exprValue->ToInteger();
            if (intValue != 0)
            {
                value = Evaluate(pp, conditionalExpressionNode.thenExpr.Get(), line);
            }
            else
            {
                value = Evaluate(pp, conditionalExpressionNode.elseExpr.Get(), line);
            }
        }
        public override void Visit(DefinedNode& definedNode) 
        {
            bool defined = pp.Defined(definedNode.identifier);
            if (defined)
            {
                value.Reset(new IntegerValue(1));
            }            
            else
            {
                value.Reset(new IntegerValue(0));
            }
        }
        public UniquePtr<Value> value;
        private PP& pp;
        private int line;
    }
    
    public UniquePtr<Value> Evaluate(PP& pp, Node* expression, int line)
    {
        Evaluator evaluator(pp, line);
        if (expression != null)
        {
            if (Flags.Diagnostics())
            {
                Console.Out() << "> evaluating " << typename(*expression) << " node" << endl();
            }
            expression->Accept(evaluator);
        }
        if (evaluator.value.Get() != null)
        {
            return Rvalue(evaluator.value);
        }        
        else
        {
            throw PreprocessingException("cannot evaluate constant expression at line " + ToString(line));
        }
    }
}
