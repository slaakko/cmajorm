using System;
using System.Collections;
using System.Text.Parsing;
using cppparser;
using ast;

// this source file has been automatically generated from 'PPLineGrammar.parser' using cmparsergen version 2.0.0.

namespace pp
{
    public class PPLineGrammar : System.Text.Parsing.Grammar
    {
        public PPLineGrammar() : this(new ParsingDomain())
        {
        }
        public PPLineGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("PPLineGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("pp")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public void Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, ustring* result, PP* pp)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<ustring*>(result)));
            stack.Push(UniquePtr<Object>(new ValueObject<PP*>(pp)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
        }

        public class PPLineRule : System.Text.Parsing.RuleParser
        {
            public PPLineRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ustring*"), ToUtf32("result")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("PP*"), ToUtf32("pp")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> pp_value = stack.Pop();
                context->pp = *cast<ValueObject<PP*>*>(pp_value.Get());
                UniquePtr<Object> result_value = stack.Pop();
                context->result = *cast<ValueObject<ustring*>*>(result_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* pPDirectiveNonterminalParser = GetNonterminal(ToUtf32("PPDirective"));
                pPDirectiveNonterminalParser->SetPre(PrePPDirective);
                NonterminalParser* pPTokenNonterminalParser = GetNonterminal(ToUtf32("PPToken"));
                pPTokenNonterminalParser->SetPre(PrePPToken);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                pass = context->pp->process;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->result->Append('\n');
            }
            public void PrePPDirective(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ustring*>(context->result)));
                stack.Push(UniquePtr<Object>(new ValueObject<PP*>(context->pp)));
            }
            public void PrePPToken(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ustring*>(context->result)));
                stack.Push(UniquePtr<Object>(new ValueObject<PP*>(context->pp)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : result(), pp()
                {
                }
                public ustring* result;
                public PP* pp;
            }
        }

        public class PPDirectiveRule : System.Text.Parsing.RuleParser
        {
            public PPDirectiveRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ustring*"), ToUtf32("result")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("PP*"), ToUtf32("pp")));
                AddLocalVariable(AttrOrVar(ToUtf32("ustring"), ToUtf32("replacementList")));
                AddLocalVariable(AttrOrVar(ToUtf32("ParsingContext"), ToUtf32("ctx")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> pp_value = stack.Pop();
                context->pp = *cast<ValueObject<PP*>*>(pp_value.Get());
                UniquePtr<Object> result_value = stack.Pop();
                context->result = *cast<ValueObject<ustring*>*>(result_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                ActionParser* a6ActionParser = GetAction(ToUtf32("A6"));
                a6ActionParser->SetAction(A6Action);
                NonterminalParser* headerNameNonterminalParser = GetNonterminal(ToUtf32("headerName"));
                headerNameNonterminalParser->SetPost(PostheaderName);
                NonterminalParser* id0NonterminalParser = GetNonterminal(ToUtf32("id0"));
                id0NonterminalParser->SetPost(Postid0);
                NonterminalParser* pPTokenNonterminalParser = GetNonterminal(ToUtf32("PPToken"));
                pPTokenNonterminalParser->SetPre(PrePPToken);
                NonterminalParser* id1NonterminalParser = GetNonterminal(ToUtf32("id1"));
                id1NonterminalParser->SetPost(Postid1);
                NonterminalParser* id2NonterminalParser = GetNonterminal(ToUtf32("id2"));
                id2NonterminalParser->SetPost(Postid2);
                NonterminalParser* id3NonterminalParser = GetNonterminal(ToUtf32("id3"));
                id3NonterminalParser->SetPost(Postid3);
                NonterminalParser* constantExpressionNonterminalParser = GetNonterminal(ToUtf32("ConstantExpression"));
                constantExpressionNonterminalParser->SetPre(PreConstantExpression);
                constantExpressionNonterminalParser->SetPost(PostConstantExpression);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                string headerFilePath = context->pp->ResolveHeaderFilePath(ToUtf8(context->fromheaderName));
                if (!headerFilePath.IsEmpty()) Preprocess(*context->pp, headerFilePath);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->pp->Define(context->fromid0, context->replacementList);
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->pp->Undefine(context->fromid1);
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->pp->Push(context->pp->Defined(context->fromid2));
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->pp->Push(!context->pp->Defined(context->fromid3));
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                bool val = Evaluate(*context->pp, context->fromConstantExpression);
                context->pp->Push(val);
            }
            public void A6Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->pp->Pop();
            }
            public void PostheaderName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromheaderName_value = stack.Pop();
                    context->fromheaderName = *cast<ValueObject<ustring>*>(fromheaderName_value.Get());
                }
            }
            public void Postid0(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromid0_value = stack.Pop();
                    context->fromid0 = *cast<ValueObject<ustring>*>(fromid0_value.Get());
                }
            }
            public void PrePPToken(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ustring*>(&context->replacementList)));
                stack.Push(UniquePtr<Object>(new ValueObject<PP*>(context->pp)));
            }
            public void Postid1(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromid1_value = stack.Pop();
                    context->fromid1 = *cast<ValueObject<ustring>*>(fromid1_value.Get());
                }
            }
            public void Postid2(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromid2_value = stack.Pop();
                    context->fromid2 = *cast<ValueObject<ustring>*>(fromid2_value.Get());
                }
            }
            public void Postid3(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromid3_value = stack.Pop();
                    context->fromid3 = *cast<ValueObject<ustring>*>(fromid3_value.Get());
                }
            }
            public void PreConstantExpression(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(&context->ctx)));
            }
            public void PostConstantExpression(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromConstantExpression_value = stack.Pop();
                    context->fromConstantExpression = *cast<ValueObject<Node*>*>(fromConstantExpression_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : result(), pp(), replacementList(), ctx(), fromheaderName(), fromid0(), fromid1(), fromid2(), fromid3(), fromConstantExpression()
                {
                }
                public ustring* result;
                public PP* pp;
                public ustring replacementList;
                public ParsingContext ctx;
                public ustring fromheaderName;
                public ustring fromid0;
                public ustring fromid1;
                public ustring fromid2;
                public ustring fromid3;
                public Node* fromConstantExpression;
            }
        }

        public class PPTokenRule : System.Text.Parsing.RuleParser
        {
            public PPTokenRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ustring*"), ToUtf32("result")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("PP*"), ToUtf32("pp")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> pp_value = stack.Pop();
                context->pp = *cast<ValueObject<PP*>*>(pp_value.Get());
                UniquePtr<Object> result_value = stack.Pop();
                context->result = *cast<ValueObject<ustring*>*>(result_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                NonterminalParser* identifierNonterminalParser = GetNonterminal(ToUtf32("identifier"));
                identifierNonterminalParser->SetPost(Postidentifier);
                NonterminalParser* pPNumberNonterminalParser = GetNonterminal(ToUtf32("PPNumber"));
                pPNumberNonterminalParser->SetPost(PostPPNumber);
                NonterminalParser* characterLiteralNonterminalParser = GetNonterminal(ToUtf32("CharacterLiteral"));
                characterLiteralNonterminalParser->SetPost(PostCharacterLiteral);
                NonterminalParser* stringLiteralNonterminalParser = GetNonterminal(ToUtf32("StringLiteral"));
                stringLiteralNonterminalParser->SetPost(PostStringLiteral);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->result->Append(context->pp->Substitute(context->fromidentifier));
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->result->Append(context->fromPPNumber);
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->result->Append(ustring(matchBegin, matchEnd));
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->result->Append(ustring(matchBegin, matchEnd));
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->result->Append(*matchBegin);
            }
            public void Postidentifier(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromidentifier_value = stack.Pop();
                    context->fromidentifier = *cast<ValueObject<ustring>*>(fromidentifier_value.Get());
                }
            }
            public void PostPPNumber(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromPPNumber_value = stack.Pop();
                    context->fromPPNumber = *cast<ValueObject<ustring>*>(fromPPNumber_value.Get());
                }
            }
            public void PostCharacterLiteral(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCharacterLiteral_value = stack.Pop();
                    context->fromCharacterLiteral = *cast<ValueObject<CharacterLiteralNode*>*>(fromCharacterLiteral_value.Get());
                }
            }
            public void PostStringLiteral(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromStringLiteral_value = stack.Pop();
                    context->fromStringLiteral = *cast<ValueObject<StringLiteralNode*>*>(fromStringLiteral_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : result(), pp(), fromidentifier(), fromPPNumber(), fromCharacterLiteral(), fromStringLiteral()
                {
                }
                public ustring* result;
                public PP* pp;
                public ustring fromidentifier;
                public ustring fromPPNumber;
                public CharacterLiteralNode* fromCharacterLiteral;
                public StringLiteralNode* fromStringLiteral;
            }
        }

        public class PPNumberRule : System.Text.Parsing.RuleParser
        {
            public PPNumberRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ustring value;
            }
        }

        public class HeaderNameRule : System.Text.Parsing.RuleParser
        {
            public HeaderNameRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = ustring(matchBegin, matchEnd);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public ustring value;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("cppparser.LiteralGrammar"));
            if (grammar0 == null)
            {
                grammar0 = new cppparser.LiteralGrammar(pd);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = pd->GetGrammar(ToUtf32("cppparser.ExpressionGrammar"));
            if (grammar1 == null)
            {
                grammar1 = new cppparser.ExpressionGrammar(pd);
            }
            AddGrammarReference(grammar1);
            Grammar* grammar2 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar2 == null)
            {
                grammar2 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar2);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("ConstantExpression"), this, ToUtf32("cppparser.ExpressionGrammar.ConstantExpression")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("CharacterLiteral"), this, ToUtf32("cppparser.LiteralGrammar.CharacterLiteral")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("StringLiteral"), this, ToUtf32("cppparser.LiteralGrammar.StringLiteral")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("spaces"), this, ToUtf32("System.Text.Parsing.stdlib.spaces")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("identifier"), this, ToUtf32("System.Text.Parsing.stdlib.identifier")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("sign"), this, ToUtf32("System.Text.Parsing.stdlib.sign")));
            AddRule(new PPLineRule(ToUtf32("PPLine"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('#'),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("PPDirective"), ToUtf32("PPDirective"), 2)),
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.EmptyParser()),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("PPToken"), ToUtf32("PPToken"), 2))))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.EmptyParser()))));
            AddRule(new PPDirectiveRule(ToUtf32("PPDirective"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                            new System.Text.Parsing.GroupingParser(
                                                new System.Text.Parsing.SequenceParser(
                                                    new System.Text.Parsing.KeywordParser(ToUtf32("include")),
                                                    new System.Text.Parsing.ExpectationParser(
                                                        new System.Text.Parsing.GroupingParser(
                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("headerName"), ToUtf32("HeaderName"), 0)))))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                            new System.Text.Parsing.GroupingParser(
                                                new System.Text.Parsing.SequenceParser(
                                                    new System.Text.Parsing.SequenceParser(
                                                        new System.Text.Parsing.KeywordParser(ToUtf32("define")),
                                                        new System.Text.Parsing.ExpectationParser(
                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("id0"), ToUtf32("identifier"), 0))),
                                                    new System.Text.Parsing.KleeneStarParser(
                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("PPToken"), ToUtf32("PPToken"), 2)))))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                        new System.Text.Parsing.GroupingParser(
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.KeywordParser(ToUtf32("undef")),
                                                new System.Text.Parsing.ExpectationParser(
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("id1"), ToUtf32("identifier"), 0)))))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.KeywordParser(ToUtf32("ifdef")),
                                            new System.Text.Parsing.ExpectationParser(
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("id2"), ToUtf32("identifier"), 0)))))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.KeywordParser(ToUtf32("ifndef")),
                                        new System.Text.Parsing.ExpectationParser(
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("id3"), ToUtf32("identifier"), 0)))))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.KeywordParser(ToUtf32("if")),
                                    new System.Text.Parsing.ExpectationParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("ConstantExpression"), ToUtf32("ConstantExpression"), 1)))))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A6"),
                        new System.Text.Parsing.KeywordParser(ToUtf32("endif"))))));
            AddRule(new PPTokenRule(ToUtf32("PPToken"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("identifier"), ToUtf32("identifier"), 0)),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("PPNumber"), ToUtf32("PPNumber"), 0))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("CharacterLiteral"), ToUtf32("CharacterLiteral"), 0))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("StringLiteral"), ToUtf32("StringLiteral"), 0))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                        new System.Text.Parsing.AnyCharParser()))));
            AddRule(new PPNumberRule(ToUtf32("PPNumber"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.TokenParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.GroupingParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.DigitParser(),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.SequenceParser(
                                            new System.Text.Parsing.CharParser('.'),
                                            new System.Text.Parsing.DigitParser())))),
                            new System.Text.Parsing.KleeneStarParser(
                                new System.Text.Parsing.GroupingParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.DigitParser(),
                                                new System.Text.Parsing.CharParser('.')),
                                            new System.Text.Parsing.SequenceParser(
                                                new System.Text.Parsing.CharSetParser(ToUtf32("eE")),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("sign"), ToUtf32("sign"), 0))),
                                        new System.Text.Parsing.CharSetParser(ToUtf32("a-zA-Z_"))))))))));
            AddRule(new HeaderNameRule(ToUtf32("HeaderName"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.TokenParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('<'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.PositiveParser(
                                            new System.Text.Parsing.CharSetParser(ToUtf32(">"), true))))),
                            new System.Text.Parsing.CharParser('>'))),
                    new System.Text.Parsing.TokenParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('\"'),
                                new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                    new System.Text.Parsing.GroupingParser(
                                        new System.Text.Parsing.PositiveParser(
                                            new System.Text.Parsing.CharSetParser(ToUtf32("\""), true))))),
                            new System.Text.Parsing.CharParser('\"'))))));
            SetSkipRuleName(ToUtf32("spaces"));
        }
    }
} // pp
