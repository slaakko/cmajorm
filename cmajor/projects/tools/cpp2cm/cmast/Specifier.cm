using System;

namespace cmast
{
    public enum Specifiers
    {
        none = 0, public_ = 1 << 0, protected_ = 1 << 1, private_ = 1 << 2, internal_ = 1 << 3,
        static_ = 1 << 4, const_ = 1 << 5, virtual_ = 1 << 6, abstract_ = 1 << 7, override_ = 1 << 8,
        inline_ = 1 << 9, explicit_ = 1 << 10, external_ = 1 << 11, suppress_ = 1 << 12, default_ = 1 << 13,
        constexpr_ = 1 << 14, cdecl_ = 1 << 15, nothrow_ = 1 << 16, throw_ = 1 << 17, new_ = 1 << 18
    }
    
    public nothrow string SpecifierStr(Specifiers specifiers)
    {
        string s;
        if ((specifiers & Specifiers.public_) != Specifiers.none)
        {
            s.Append("public");
        }
        else if ((specifiers & Specifiers.protected_) != Specifiers.none)
        {
            s.Append("protected");
        }
        else if ((specifiers & Specifiers.private_) != Specifiers.none)
        {
            s.Append("private");
        }
        else if ((specifiers & Specifiers.internal_) != Specifiers.none)
        {
            s.Append("internal");
        }
        if ((specifiers & Specifiers.static_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("static");
        }
        if ((specifiers & Specifiers.const_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("const");
        }
        if ((specifiers & Specifiers.virtual_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("virtual");
        }
        if ((specifiers & Specifiers.abstract_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("abstract");
        }
        if ((specifiers & Specifiers.override_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("override");
        }
        if ((specifiers & Specifiers.inline_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("inline");
        }
        if ((specifiers & Specifiers.explicit_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("explicit");
        }
        if ((specifiers & Specifiers.external_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("extern");
        }
        if ((specifiers & Specifiers.suppress_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("suppress");
        }
        if ((specifiers & Specifiers.default_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("default");
        }
        if ((specifiers & Specifiers.constexpr_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("constexpr");
        }
        if ((specifiers & Specifiers.cdecl_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("cdecl");
        }
        if ((specifiers & Specifiers.nothrow_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("nothrow");
        }
        if ((specifiers & Specifiers.throw_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("throw");
        }
        if ((specifiers & Specifiers.new_) != Specifiers.none)
        {
            if (!s.IsEmpty())
            {
                s.Append(' ');
            }
            s.Append("new");
        }
        return s;
    }
}
