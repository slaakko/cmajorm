using System;

namespace cmast
{
    public class Visitor
    {
        public default virtual ~Visitor();
        public virtual void Visit(BoolNode& boolNode) {}
        public virtual void Visit(SByteNode& sbyteNode) {}
        public virtual void Visit(ByteNode& byteNode) {}
        public virtual void Visit(ShortNode& shortNode) {}
        public virtual void Visit(UShortNode& ushortNode) {}
        public virtual void Visit(IntNode& intNode) {}
        public virtual void Visit(UIntNode& uintNode) {}
        public virtual void Visit(LongNode& longNode) {}
        public virtual void Visit(ULongNode& ulongNode) {}
        public virtual void Visit(FloatNode& floatNode) {}
        public virtual void Visit(DoubleNode& doubleNode) {}
        public virtual void Visit(CharNode& charNode) {}
        public virtual void Visit(WCharNode& wcharNode) {}
        public virtual void Visit(UCharNode& ucharNode) {}
        public virtual void Visit(VoidNode& voidNode) {}
        public virtual void Visit(CompileUnitNode& compileUnitNode) {}
        public virtual void Visit(NamespaceNode& namespaceNode) {}
        public virtual void Visit(AliasNode& aliasNode) {}
        public virtual void Visit(NamespaceImportNode& namespaceImportNode) {}
        public virtual void Visit(EnumTypeNode& enumTypeNode) {}
        public virtual void Visit(EnumeratorNode& enumeratorNode) {}
        public virtual void Visit(IdentifierNode& identifierNode) {}
        public virtual void Visit(DotNode& dotNode) {}
        public virtual void Visit(ArrowNode& arrowNode) {}
        public virtual void Visit(ConstNode& constNode) {}
        public virtual void Visit(LvalueRefNode& lvalueRefNode) {}
        public virtual void Visit(RvalueRefNode& rvalueRefNode) {}
        public virtual void Visit(PointerNode& pointerNode) {}
        public virtual void Visit(ArrayNode& arrayNode) {}
        public virtual void Visit(TypedefNode& typedefNode) {}
        public virtual void Visit(ParameterNode& parameterNode) {}
        public virtual void Visit(BinaryExpressionNode& binaryExpressionNode) {}
        public virtual void Visit(UnaryExpressionNode& unaryExpressionNode) {}
        public virtual void Visit(IsNode& isNode) {}
        public virtual void Visit(AsNode& asNode) {}
        public virtual void Visit(SubscriptExpressionNode& subscriptExpressionNode) {}
        public virtual void Visit(InvokeNode& invokeNode) {}
        public virtual void Visit(PostfixIncrementNode& postfixIncrementNode) {}
        public virtual void Visit(PostfixDecrementNode& postfixDecrementNode) {}
        public virtual void Visit(SizeOfNode& sizeOfNode) {}
        public virtual void Visit(TypeNameNode& typeNameNode) {}
        public virtual void Visit(CastNode& castNode) {}
        public virtual void Visit(ParenthesizedExpressionNode& parenthesizedExpressionNode) {}
        public virtual void Visit(LabeledStatementNode& labeledStatementNode) {}
        public virtual void Visit(CompoundStatementNode& compoundStatementNode) {}
        public virtual void Visit(ReturnStatementNode& returnStatementNode) {}
        public virtual void Visit(IfStatementNode& ifStatementNode) {}
        public virtual void Visit(WhileStatementNode& whileStatementNode) {}
        public virtual void Visit(DoStatementNode& doStatementNode) {}
        public virtual void Visit(ForStatementNode& forStatementNode) {}
        public virtual void Visit(BreakStatementNode& breakStatementNode) {}
        public virtual void Visit(ContinueStatementNode& continueStatementNode) {}
        public virtual void Visit(GotoStatementNode& gotoStatementNode) {}
        public virtual void Visit(ConstructionStatementNode& constructionStatementNode) {}
        public virtual void Visit(DeleteStatementNode& deleteStatementNode) {}
        public virtual void Visit(DestroyStatementNode& destroyStatementNode) {}
        public virtual void Visit(AssignmentStatementNode& assignmentStatementNode) {}
        public virtual void Visit(ExpressionStatementNode& expressionStatementNode) {}
        public virtual void Visit(EmptyStatementNode& emptyStatementNode) {}
        public virtual void Visit(RangeForStatementNode& rangeForStatementNode) {}
        public virtual void Visit(SwitchStatementNode& switchStatementNode) {}
        public virtual void Visit(CaseStatementNode& caseStatementNode) {}
        public virtual void Visit(DefaultStatementNode& defautStatementNode) {}
        public virtual void Visit(GotoCaseStatementNode& gotoCaseStatementNode) {}
        public virtual void Visit(GotoDefaultStatementNode& gotoDefaultStatementNode) {}
        public virtual void Visit(ThrowStatementNode& throwStatementNode) {}
        public virtual void Visit(TryStatementNode& tryStatementNode) {}
        public virtual void Visit(CatchNode& catchNode) {}
        public virtual void Visit(ConstantNode& constantNode) {}
        public virtual void Visit(FunctionNode& functionNode) {}
        public virtual void Visit(TemplateParameterNode& templateParameterNode) {}
        public virtual void Visit(TemplateIdNode& templateIdNode) {}
        public virtual void Visit(ClassNode& classNode) {}
        public virtual void Visit(ThisInitializerNode& thisInitializerNode) {}
        public virtual void Visit(BaseInitializerNode& baseInitializerNode) {}
        public virtual void Visit(MemberInitializerNode& memberInitializerNode) {}
        public virtual void Visit(StaticConstructorNode& staticConstructorNode) {}
        public virtual void Visit(ConstructorNode& constructorNode) {}
        public virtual void Visit(DestructorNode& destructorNode) {}
        public virtual void Visit(MemberFunctionNode& memberFunctionNode) {}
        public virtual void Visit(ConversionFunctionNode& conversionFunctionNode) {}
        public virtual void Visit(MemberVariableNode& memberVariableNode) {}
    }
}
