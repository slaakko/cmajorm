using System;
using System.Collections;

namespace cmast
{
    public abstract class StatementNode : Node
    {
    }
    
    public class LabeledStatementNode : StatementNode
    {
        public nothrow LabeledStatementNode(const ustring& label_, StatementNode* statement_) : label(label_), statement(statement_)
        {
            statement->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public ustring label;
        public UniquePtr<StatementNode> statement;
    }
    
    public class CompoundStatementNode : StatementNode
    {
        public nothrow CompoundStatementNode() 
        {
        }
        public void AddStatement(StatementNode* statement)
        {
            statement->parent = this;
            statements.Add(UniquePtr<StatementNode>(statement));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public List<UniquePtr<StatementNode>> statements;
    }
    
    public class ReturnStatementNode : StatementNode
    {
        public nothrow ReturnStatementNode(Node* expr_) : expr(expr_)
        {
            if (!expr.IsNull())
            {
                expr->parent = this;
            }            
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> expr;
    }
    
    public class IfStatementNode : StatementNode
    {
        public nothrow IfStatementNode(Node* condition_, StatementNode* thenS_, StatementNode* elseS_) : condition(condition_), thenS(thenS_), elseS(elseS_)
        {
            condition->parent = this;
            thenS->parent = this;
            if (!elseS.IsNull())
            {
                elseS->parent = this;
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> condition;
        public UniquePtr<StatementNode> thenS;
        public UniquePtr<StatementNode> elseS;
    }
    
    public class WhileStatementNode : StatementNode
    {
        public nothrow WhileStatementNode(Node* condition_, StatementNode* statement_) : condition(condition_), statement(statement_)
        {
            condition->parent = this;
            statement->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> condition;
        public UniquePtr<StatementNode> statement;
    }
    
    public class DoStatementNode : StatementNode
    {
        public nothrow DoStatementNode(StatementNode* statement_, Node* expression_) : statement(statement_), expression(expression_)
        {
            statement->parent = this;
            expression->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<StatementNode> statement;
        public UniquePtr<Node> expression;
    }
    
    public class ForStatementNode : StatementNode
    {
        public nothrow ForStatementNode(StatementNode* initS_, Node* condition_, StatementNode* loopS_, StatementNode* actionS_) : initS(initS_), condition(condition_), loopS(loopS_), actionS(actionS_)
        {
            if (!initS.IsNull())
            {
                initS->parent = this;
            }
            if (!condition.IsNull())
            {
                condition->parent = this;
            }
            if (!loopS.IsNull())
            {
                loopS->parent = this;
            }
            actionS->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<StatementNode> initS;
        public UniquePtr<Node> condition;
        public UniquePtr<StatementNode> loopS;
        public UniquePtr<StatementNode> actionS;
    }
    
    public class BreakStatementNode : StatementNode
    {
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class ContinueStatementNode : StatementNode
    {
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class GotoStatementNode : StatementNode
    {
        public nothrow GotoStatementNode(const ustring& target_) : target(target_) 
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public ustring target;
    }
    
    public class ConstructionStatementNode : StatementNode
    {
        public nothrow ConstructionStatementNode(Node* typeExpr_, IdentifierNode* id_) : typeExpr(typeExpr_), id(id_)
        {
            typeExpr->parent = this;
            id->parent = this;
        }
        public void AddArgument(Node* argument)
        {
            argument->parent = this;
            arguments.Add(UniquePtr<Node>(argument));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> typeExpr;
        public UniquePtr<IdentifierNode> id;
        public List<UniquePtr<Node>> arguments;
    }
    
    public class DeleteStatementNode : StatementNode
    {
        public nothrow DeleteStatementNode(Node* expression_) : expression(expression_)
        {
            expression->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> expression;
    }
    
    public class DestroyStatementNode : StatementNode
    {
        public nothrow DestroyStatementNode(Node* expression_) : expression(expression_)
        {
            expression->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> expression;
    }
    
    public class AssignmentStatementNode : StatementNode
    {
        public nothrow AssignmentStatementNode(Node* targetExpr_, Node* sourceExpr_) : targetExpr(targetExpr_), sourceExpr(sourceExpr_)
        {
            targetExpr->parent = this;
            sourceExpr->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> targetExpr;
        public UniquePtr<Node> sourceExpr;
    }
    
    public class ExpressionStatementNode : StatementNode
    {
        public nothrow ExpressionStatementNode(Node* expression_) : expression(expression_)
        {
            expression->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> expression;
    }
    
    public class EmptyStatementNode : StatementNode
    {
        public nothrow EmptyStatementNode()
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class RangeForStatementNode : StatementNode
    {
        public nothrow RangeForStatementNode(Node* typeExpr_, IdentifierNode* id_, Node* container_, StatementNode* action_) : typeExpr(typeExpr_), id(id_), container(container_), action(action_)
        {
            typeExpr->parent = this;
            id->parent = this;
            container->parent = this;
            action->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> typeExpr;
        public UniquePtr<IdentifierNode> id;
        public UniquePtr<Node> container;
        public UniquePtr<StatementNode> action;
    }
    
    public class SwitchStatementNode : StatementNode
    {
        public nothrow SwitchStatementNode(Node* condition_) : condition(condition_)
        {
            condition->parent = this;
        }
        public void AddCase(CaseStatementNode* caseStatement)
        {
            caseStatement->parent = this;
            cases.Add(UniquePtr<CaseStatementNode>(caseStatement));
        }
        public void SetDefault(DefaultStatementNode* defaultStatement)
        {
            defaultStatement->parent = this;
            defaultS.Reset(defaultStatement);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> condition;
        public List<UniquePtr<CaseStatementNode>> cases;
        public UniquePtr<DefaultStatementNode> defaultS;
    }
    
    public class CaseStatementNode : StatementNode
    {
        public void AddCaseExpr(Node* caseExpr)
        {
            caseExpr->parent = this;
            caseExprs.Add(UniquePtr<Node>(caseExpr));
        }
        public void AddStatement(StatementNode* statement)
        {
            statement->parent = this;
            statements.Add(UniquePtr<StatementNode>(statement));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public List<UniquePtr<Node>> caseExprs;
        public List<UniquePtr<StatementNode>> statements;
    }
    
    public class DefaultStatementNode : StatementNode
    {
        public void AddStatement(StatementNode* statement)
        {
            statement->parent = this;
            statements.Add(UniquePtr<StatementNode>(statement));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public List<UniquePtr<StatementNode>> statements;
    }
    
    public class GotoCaseStatementNode : StatementNode
    {
        public nothrow GotoCaseStatementNode(Node* caseExpr_) : caseExpr(caseExpr_)
        {
            caseExpr->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> caseExpr;
    }
    
    public class GotoDefaultStatementNode : StatementNode
    {
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class ThrowStatementNode : StatementNode
    {
        public nothrow ThrowStatementNode(Node* expression_) : expression(expression_)
        {
            expression->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> expression;
    }
    
    public class TryStatementNode : StatementNode
    {
        public nothrow TryStatementNode(CompoundStatementNode* tryBlock_) : tryBlock(tryBlock_)
        {
            tryBlock->parent = this;
        }
        public void AddCatch(CatchNode* catch_)
        {
            catch_->parent = this;
            catches.Add(UniquePtr<CatchNode>(catch_));
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<CompoundStatementNode> tryBlock;
        public List<UniquePtr<CatchNode>> catches;
    }
    
    public class CatchNode : Node
    {
        public nothrow CatchNode(Node* typeExpr_, IdentifierNode* id_, CompoundStatementNode* catchBlock_) : typeExpr(typeExpr_), id(id_), catchBlock(catchBlock_)
        {
            typeExpr->parent = this;
            if (!id.IsNull())
            {
                id->parent = this;
            }
            catchBlock->parent = this;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> typeExpr;
        public UniquePtr<IdentifierNode> id;
        public UniquePtr<CompoundStatementNode> catchBlock;
    }
}
