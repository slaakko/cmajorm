using System;
using System.Collections;

namespace cmast
{
    public class FunctionNode : Node
    {
        public nothrow FunctionNode(Specifiers specifiers_, Node* returnTypeExpr_, IdentifierNode* groupId_) : specifiers(specifiers_), returnTypeExpr(returnTypeExpr_), groupId(groupId_)
        {
            if (!returnTypeExpr.IsNull())
            {
                returnTypeExpr->parent = this;
            }
            groupId->parent = this;
        }
        public void AddTemplateParameter(TemplateParameterNode* templateParameter)
        {
            templateParameter->parent = this;
            templateParameters.Add(UniquePtr<TemplateParameterNode>(templateParameter));
        }
        public void AddParameter(ParameterNode* parameter)
        {
            parameter->parent = this;
            parameters.Add(UniquePtr<ParameterNode>(parameter));
        }
        public void SetBody(CompoundStatementNode* body_)
        {
            body_->parent = this;
            body.Reset(body_);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public Specifiers specifiers;
        public UniquePtr<Node> returnTypeExpr;
        public UniquePtr<IdentifierNode> groupId;
        public List<UniquePtr<TemplateParameterNode>> templateParameters;
        public List<UniquePtr<ParameterNode>> parameters;
        public UniquePtr<CompoundStatementNode> body;
    }
}
