using System;
using cmast;

namespace cmparser
{
    grammar TemplateGrammar
    {
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using TypeExprGrammar.TypeExpr;
        
        RuleTemplateParameter(ParsingContext* ctx) : Node*
            ::= (Identifier ('=' TypeExpr(ctx))?){ value = new TemplateParameterNode(Identifier, TypeExpr); }
            ;
        
        TemplateId(ParsingContext* ctx, var UniquePtr<TemplateIdNode> templateId) : TemplateIdNode*
            ::= 
            (   QualifiedId:primary{ templateId.Reset(new TemplateIdNode(primary)); }
                (   empty{ pass = ctx->TypeRule(); } '<' (RuleTemplateParameter(ctx):tp{ templateId->AddTemplateArgument(tp); } % ',') '>'
                |   empty{ pass = !ctx->TypeRule(); } '<' (TypeExpr(ctx):typeArg{ templateId->AddTemplateArgument(typeArg); } % ',') '>'
                )
            )
            {
                value = templateId.Release();
            }
            ;
    }
}
