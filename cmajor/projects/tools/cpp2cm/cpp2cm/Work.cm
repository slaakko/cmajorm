using System;
using System.IO;
using System.Collections;
using System.Dom;
using System.XPath;
using System.Text;
using System.Text.RegularExpressions;

namespace cpp2cm
{
    internal nothrow ustring ItemKindStr(Item.Kind kind)
    {
        switch (kind)
        {
            case Item.Kind.work: return u"work"; 
            case Item.Kind.solution: return u"solution"; 
            case Item.Kind.project: return u"project";
            case Item.Kind.source: return u"source"; 
        }
        return ustring();
    }
    
    internal class Item
    {
        public enum Kind { work, solution, project, source }
        
        public nothrow Item(Kind kind_, const string& name_, const string& filePath_) : kind(kind_), name(name_), filePath(filePath_), included(true)
        {
        }
        public nothrow ustring KindStr() const
        {
            return ItemKindStr(kind);
        }
        public UniquePtr<DomElement> ToDomElement()
        {
            ustring elementName = KindStr();
            UniquePtr<DomElement> element(new DomElement(elementName));
            if (!name.IsEmpty())
            {
                element->SetAttribute(u"name", ToUtf32(name));
            }
            if (!filePath.IsEmpty())
            {
                element->SetAttribute(u"filePath", ToUtf32(filePath));
            }
            for (const Item& item : items)
            {
                if (!item.included) continue;
                UniquePtr<DomElement> itemElement = item.ToDomElement();
                element->AppendChild(UniquePtr<DomNode>(itemElement.Release()));
            }
            return element;
        }
        public Kind kind;
        public string name;
        public string filePath;
        public bool included;
        public List<Item> items;
    }
    
    internal string ToRegExPattern(const string& filePattern)
    {
        string regExPattern;
        for (char c : filePattern)
        {
            if (c == '.')
            {
                regExPattern.Append("\\.");
            }
            else if (c == '*')
            {
                regExPattern.Append(".*");
            }
            else if (c == '?')
            {
                regExPattern.Append(".");
            }
            else
            {
                regExPattern.Append(c);
            }
        }
        return regExPattern;
    }
    
    internal class Filter
    {
        public enum Kind { include, exclude }
        
        public Filter(Item.Kind itemKind_, Kind kind_, const string& filePattern_) : itemKind(itemKind_), kind(kind_), filePattern(filePattern_), regEx(ToRegExPattern(filePattern))
        {
        }
        public void ApplyTo(Item& item)
        {
            if (item.kind == itemKind)
            {
                if (regEx.Matches(item.name))
                {
                    if (kind == Kind.include)
                    {
                        item.included = true;
                        if (Flags.Diagnostics())
                        {
                            Console.Out() << "include " << ItemKindStr(itemKind) << " '" << filePattern << "' applied to " << item.name << endl();
                        }
                        for (Item& subitem : item.items)
                        {
                            for (Filter& filter : filters)
                            {
                                filter.ApplyTo(subitem);
                            }
                        }
                    }
                    else if (kind == Kind.exclude)
                    {
                        item.included = false;
                        if (Flags.Diagnostics())
                        {
                            Console.Out() << "exclude " << ItemKindStr(itemKind) << " '" << filePattern << "' applied to " << item.name << endl();
                        }
                    }   
                }
            }            
        }
        public Item.Kind itemKind;
        public Kind kind;
        public string filePattern;
        public RegEx regEx;
        public List<Filter> filters;
    }
    
    internal bool ContainsWildCards(const string& filePath)
    {
        return filePath.Find('*') != -1 || filePath.Find('?') != -1;
    }
    
    internal List<string> GetFiles(const string& filePath)
    {
        List<string> files;
        if (ContainsWildCards(filePath))
        {
            List<string> allFiles = Directory.GetFiles(Path.GetDirectoryName(filePath));
            string filePattern = Path.GetFileName(filePath);
            RegEx regEx(ToRegExPattern(filePattern), RegExFlags.compiled);
            for (const string& file : allFiles)
            {
                if (regEx.Matches(Path.GetFileName(file)))
                {
                    files.Add(file);
                }
            }
        }
        else
        {
            files.Add(filePath);
        }
        return files;
    }
    
    internal void ApplyFilters(List<Item>& items, const List<Filter>& filters)
    {
        for (Item& item : items)
        {
            for (const Filter& filter : filters)
            {
                filter.ApplyTo(item);
            }
        }
    }
    
    internal static class SolutionParser
    {
        static SolutionParser() : solutionGrammar(new SolutionGrammar())
        {
        }
        public static nothrow SolutionGrammar* GetGrammar() 
        {
            return solutionGrammar;
        }
        static SolutionGrammar* solutionGrammar;
    }
    
    internal List<Item> ReadItems(Item.Kind itemKind, const string& filePath, const string& name)
    {
        if (Flags.Diagnostics())
        {
            Console.Out() << "reading " << ItemKindStr(itemKind) << " items from " << filePath << " : " << name << endl();
        }
        List<Item> items;
        if (itemKind == Item.Kind.solution)
        {
            Item solutionItem(Item.Kind.solution, Path.GetFileNameWithoutExtension(filePath), string());
            ustring solutionFileContent = ToUtf32(File.ReadAllText(filePath));
            UniquePtr<Solution> solution(SolutionParser.GetGrammar()->Parse(solutionFileContent.Chars(), solutionFileContent.Chars() + solutionFileContent.Length(), 0, filePath));
            List<Project*> buildOrder = solution->BuildOrder();
            for (Project* project : buildOrder)
            {
                string fullProjectFilePath = GetFullPath(Path.Combine(Path.GetDirectoryName(filePath), project->filePath));
                List<Item> projectItems = ReadItems(Item.Kind.project, fullProjectFilePath, ToUtf8(project->name));
                for (Item& projectItem : projectItems)
                {
                    solutionItem.items.Add(Rvalue(projectItem));
                }
            }
            items.Add(Rvalue(solutionItem));
        }
        else if (itemKind == Item.Kind.project)
        {
            UniquePtr<DomDocument> projectDoc = ParseXmlFileToDomDocument(filePath);
            Item projectItem(Item.Kind.project, name, string());
            UniquePtr<XPathObject> headerFilesObject = Evaluate(u"/Project/ItemGroup/ClInclude", projectDoc.Get());
            XPathNodeSet* headerFilesNodeSet = headerFilesObject.Get() as XPathNodeSet*;
            if (headerFilesNodeSet != null)
            {
                long n = headerFilesNodeSet->Length();
                for (long i = 0; i < n; ++i)
                {
                    DomNode* headerFileNode = (*headerFilesNodeSet)[i];
                    DomElement* headerFileElement = headerFileNode as DomElement*;
                    if (headerFileElement != null)
                    {
                        string headerFileName = ToUtf8(headerFileElement->GetAttribute(u"Include"));
                        string fullSourceFilePath = GetFullPath(Path.Combine(Path.GetDirectoryName(filePath), headerFileName));
                        Item sourceItem(Item.Kind.source, Path.GetFileName(headerFileName), fullSourceFilePath);
                        projectItem.items.Add(Rvalue(sourceItem));
                    }
                }
            }
            UniquePtr<XPathObject> sourceFilesObject = Evaluate(u"/Project/ItemGroup/ClCompile", projectDoc.Get());
            XPathNodeSet* sourceFilesNodeSet = sourceFilesObject.Get() as XPathNodeSet*;
            if (sourceFilesNodeSet != null)
            {
                long n = sourceFilesNodeSet->Length();
                for (long i = 0; i < n; ++i)
                {
                    DomNode* sourceFileNode = (*sourceFilesNodeSet)[i];
                    DomElement* sourceFileElement = sourceFileNode as DomElement*;
                    if (sourceFileElement != null)
                    {
                        string sourceFileName = ToUtf8(sourceFileElement->GetAttribute(u"Include"));
                        string fullSourceFilePath = GetFullPath(Path.Combine(Path.GetDirectoryName(filePath), sourceFileName));
                        Item sourceItem(Item.Kind.source, Path.GetFileName(sourceFileName), fullSourceFilePath);
                        projectItem.items.Add(Rvalue(sourceItem));
                    }
                }
            }
            items.Add(Rvalue(projectItem));
        }
        else if (itemKind == Item.Kind.source)
        {
            List<string> files = GetFiles(filePath);
            for (const string& file : files)
            {
                Item sourceItem(Item.Kind.source, Path.GetFileName(file), file);
                items.Add(Rvalue(sourceItem));
            }
        }
        if (Flags.Diagnostics())
        {
            Console.Out() << ItemKindStr(itemKind) << " items read" << endl();
        }
        return items;
    }
    
    internal void CreateSubFilters(Filter& parentFilter, DomNode* parentNode)
    {
        Item.Kind itemKind = Item.Kind.work;
        ustring itemType;
        if (parentFilter.itemKind == Item.Kind.solution)
        {
           itemKind = Item.Kind.project;
           itemType = u"project";
        }
        else if (parentFilter.itemKind == Item.Kind.project)
        {
            itemKind = Item.Kind.source;
            itemType = u"source";
        }
        else
        {
            return;
        }
        UniquePtr<XPathObject> xpathObject = Evaluate(itemType, parentNode);
        XPathNodeSet* nodeSet = xpathObject.Get() as XPathNodeSet*;
        if (nodeSet != null)
        {
            long n = nodeSet->Length();
            for (long i = 0; i < n; ++i)
            {
                DomNode* node = (*nodeSet)[i];
                DomElement* element = node as DomElement*;
                if (element != null)
                {
                    string name = ToUtf8(element->GetAttribute(u"name"));
                    string file = ToUtf8(element->GetAttribute(u"file"));
                    string include = ToUtf8(element->GetAttribute(u"include"));
                    string exclude = ToUtf8(element->GetAttribute(u"exclude"));
                    if (!name.IsEmpty())
                    {
                        throw Exception("a filter element cannot contain other than filter elements (" + 
                            ToUtf8(ItemKindStr(parentFilter.itemKind)) + " filter contains element '" + ToUtf8(element->Name()) + "' with 'name' attribute)");
                    }
                    if (!file.IsEmpty())
                    {
                        throw Exception("a filter element cannot contain other than filter elements (" + 
                            ToUtf8(ItemKindStr(parentFilter.itemKind)) + " filter contains element '" + ToUtf8(element->Name()) + "' with 'file' attribute");
                    }
                    if (!include.IsEmpty())
                    {
                        if (Flags.Diagnostics())
                        {
                            Console.Out() << "creating include " << ItemKindStr(itemKind) << " subfilter " << include << endl();
                        }
                        Filter includeFilter(itemKind, Filter.Kind.include, include);
                        parentFilter.filters.Add(includeFilter);
                    }
                    else if (!exclude.IsEmpty())
                    {
                        if (Flags.Diagnostics())
                        {
                            Console.Out() << "creating exclude " << ItemKindStr(itemKind) << " subfilter " << exclude << endl();
                        }
                        Filter excludeFilter(itemKind, Filter.Kind.exclude, exclude);
                        parentFilter.filters.Add(excludeFilter);
                    }
                }
            }
        }
    }
    
    internal void PopulateItems(Item& parentItem, DomNode* parentNode, Item.Kind itemKind, const string& baseDir)
    {
        if (Flags.Diagnostics())
        {
            Console.Out() << "populating " << parentItem.KindStr() << " : " << parentItem.name << " : " << parentItem.filePath << " : " << ItemKindStr(itemKind) << endl();
        }
        List<Filter> filters;
        ustring itemType;
        if (itemKind == Item.Kind.solution)
        {
            itemType = u"solution";
        }
        else if (itemKind == Item.Kind.project)
        {
            itemType = u"project";
        }
        else if (itemKind == Item.Kind.source)
        {
            itemType = u"source";
        }
        UniquePtr<XPathObject> xpathObject = Evaluate(itemType, parentNode);
        XPathNodeSet* nodeSet = xpathObject.Get() as XPathNodeSet*;
        if (nodeSet != null)
        {
            long n = nodeSet->Length();
            for (long i = 0; i < n; ++i)
            {
                DomNode* node = (*nodeSet)[i];
                DomElement* element = node as DomElement*;
                if (element != null)
                {
                    int numAttributesSet = 0;
                    string name = ToUtf8(element->GetAttribute(u"name"));
                    string file = ToUtf8(element->GetAttribute(u"file"));
                    string include = ToUtf8(element->GetAttribute(u"include"));
                    string exclude = ToUtf8(element->GetAttribute(u"exclude"));
                    if (!name.IsEmpty())
                    {
                        ++numAttributesSet;
                    }
                    if (!file.IsEmpty())
                    {
                        ++numAttributesSet;
                    }
                    if (!include.IsEmpty())
                    {
                        ++numAttributesSet;
                    }
                    if (!exclude.IsEmpty())
                    {
                        ++numAttributesSet;
                    }
                    if (numAttributesSet == 0)
                    {
                        throw Exception(ToUtf8(element->Name()) + " element must have one of the following attributes set: 'name', 'file', 'include', or 'exclude'");
                    }
                    else if (numAttributesSet > 1)
                    {
                        throw Exception(ToUtf8(element->Name()) + " element cannot have more than one of these attributes set: 'name', 'file', 'include', and 'exclude'");
                    }
                    if (!name.IsEmpty())
                    {
                        if (itemKind == Item.Kind.source)
                        {
                            throw Exception(ToUtf8(element->Name()) + " source element cannot have 'name' attribute");
                        }
                        Item item(itemKind, name, string());
                        if (itemKind == Item.Kind.solution)
                        {
                            PopulateItems(item, node, Item.Kind.project, baseDir);
                        }
                        else if (itemKind == Item.Kind.project)
                        {
                            PopulateItems(item, node, Item.Kind.source, baseDir);
                        }
                        parentItem.items.Add(Rvalue(item));
                    }
                    else if (!include.IsEmpty())
                    {
                        if (Flags.Diagnostics())
                        {
                            Console.Out() << "creating include filter for " << ItemKindStr(itemKind) << " : " << include << endl();
                        }
                        Filter includeFilter(itemKind, Filter.Kind.include, include);
                        CreateSubFilters(includeFilter, node);
                        filters.Add(includeFilter);
                    }
                    else if (!exclude.IsEmpty())
                    {
                        if (Flags.Diagnostics())
                        {
                            Console.Out() << "creating exclude filter for " << ItemKindStr(itemKind) << " : " << exclude << endl();
                        }
                        Filter excludeFilter(itemKind, Filter.Kind.exclude, exclude);
                        CreateSubFilters(excludeFilter, node);
                        filters.Add(excludeFilter);
                    }
                    else if (!file.IsEmpty())
                    {
                        string name = Path.GetFileName(file);
                        if (itemKind == Item.Kind.solution || itemKind == Item.Kind.project)
                        {
                            name = Path.GetFileNameWithoutExtension(file);
                        }
                        string filePath = GetFullPath(Path.Combine(baseDir, file));
                        List<Item> items = ReadItems(itemKind, filePath, name);
                        for (Item& item : items)
                        {
                            if (itemKind == Item.Kind.solution)
                            {
                                PopulateItems(item, node, Item.Kind.project, Path.GetDirectoryName(filePath));
                            }
                            else if (itemKind == Item.Kind.project)
                            {
                                PopulateItems(item, node, Item.Kind.source, Path.GetDirectoryName(filePath));
                            }
                            parentItem.items.Add(Rvalue(item));
                        }
                    }
                }
            }
            if (Flags.Diagnostics())
            {
                Console.Out() << "applying filters" << endl();
            }
            ApplyFilters(parentItem.items, filters);
        }        
    }
    
    internal string MakeWorkXml(const string& inputXmlFilePath)
    {
        if (Flags.Verbose())
        {
            Console.Out() << "> " << inputXmlFilePath << endl();
        }
        string workXmlFilePath = Path.ChangeExtension(inputXmlFilePath, ".work.xml");
        bool make = Flags.Force();
        if (!make)
        {
            if (!File.Exists(workXmlFilePath))
            {
                make = true;
            }
            else
            {
                if (File.LastWriteTimeLess(workXmlFilePath, inputXmlFilePath))
                {
                    make = true;
                }
            }
        }
        if (!make)
        {
            if (Flags.Verbose())
            {
                Console.Out() << workXmlFilePath << " is up-to-date" << endl();
            }
            return workXmlFilePath;
        }
        string inputBaseDir = Path.GetDirectoryName(inputXmlFilePath);
        UniquePtr<DomDocument> inputXmlDoc = ParseXmlFileToDomDocument(inputXmlFilePath);
        string targetDir = ToUtf8(inputXmlDoc->DocumentElement()->GetAttribute(u"targetDir"));
        if (targetDir.IsEmpty())
        {
            targetDir = inputBaseDir;
        }
        Item workItem(Item.Kind.work, string(), targetDir);
        PopulateItems(workItem, inputXmlDoc->DocumentElement(), Item.Kind.solution, inputBaseDir); 
        if (workItem.items.IsEmpty())
        {
            PopulateItems(workItem, inputXmlDoc->DocumentElement(), Item.Kind.project, inputBaseDir); 
            if (workItem.items.IsEmpty())
            {
                PopulateItems(workItem, inputXmlDoc->DocumentElement(), Item.Kind.source, inputBaseDir);
            }
        }
        DomDocument workXmlDoc;
        workXmlDoc.AppendChild(UniquePtr<DomNode>(workItem.ToDomElement().Release()));
        StreamWriter writer = File.CreateText(workXmlFilePath);
        CodeFormatter formatter(writer);
        formatter.SetIndentSize(1);
        workXmlDoc.Write(formatter);
        if (Flags.Verbose())
        {
            Console.Out() << "==> " << workXmlFilePath << endl();
        }
        return workXmlFilePath;
    }
}
