using System;
using System.IO;
using System.Collections;
using System.Dom;
using System.XPath;
using System.Text;

namespace cpp2cm
{   
    internal class Project
    {
        public nothrow Project(const ustring& languageGuid_, const ustring& name_, const string& filePath_, const ustring& guid_) : 
            languageGuid(languageGuid_), name(name_), filePath(filePath_), guid(guid_)
        {
        }
        public void AddDependency(const ustring& guid)
        {
            dependencies.Add(guid);
        }
        public void AddSourceFileName(const string& sourceFileName)
        {
            sourceFileNames.Add(Path.MakeCanonical(sourceFileName));
        }
        public string baseDir;
        public ustring languageGuid;
        public ustring name;
        public string filePath;
        public ustring guid;
        public List<string> sourceFileNames;
        public List<ustring> dependencies;
    }
    
    internal void Visit(List<Project*>& buildOrder, Project* project, HashSet<Project*>& visited, HashSet<Project*>& tempVisit, Solution* solution)
    {
        if (tempVisit.CFind(project) == tempVisit.CEnd())
        {
            if (visited.CFind(project) == visited.CEnd())
            {
                tempVisit.Insert(project);
                for (const ustring& dependendsOnGuid : project->dependencies)
                {
                    Project* dependsOnProject = solution->GetProject(dependendsOnGuid);
                    Visit(buildOrder, dependsOnProject, visited, tempVisit, solution);
                }
                tempVisit.Remove(project);
                visited.Insert(project);
                buildOrder.Add(project);
            }
        }
    }
    
    internal class Solution
    {
        public nothrow Solution(const ustring& formatVersion_, const ustring& visualStudioVersion_, const ustring& minimumVisualStudioVersion_) : 
            formatVersion(formatVersion_), visualStudioVersion(visualStudioVersion_), minimumVisualStudioVersion(minimumVisualStudioVersion_)
        {
        }
        public nothrow void AddProject(Project* project)
        {
            projects.Add(UniquePtr<Project>(project));
        }
        public List<Project*> BuildOrder()
        {
            for (const UniquePtr<Project>& project : projects)
            {
                guidProjectMap[project->guid] = project.Get();
            }
            List<Project*> buildOrder;
            HashSet<Project*> visited;
            HashSet<Project*> tempVisit;
            for (const UniquePtr<Project>& project : projects)
            {
                if (visited.CFind(project.Get()) == visited.CEnd())
                {
                    Visit(buildOrder, project.Get(), visited, tempVisit, this);
                }
            }        
            return buildOrder;
        }
        public Project* GetProject(const ustring& projectGuid) const
        {
            HashMap<ustring, Project*>.ConstIterator it = guidProjectMap.CFind(projectGuid);
            if (it != guidProjectMap.CEnd())
            {
                return it->second;
            }
            else
            {
                throw Exception("project id " + ToUtf8(projectGuid) + " not found");
            }
        }
        public string baseDir;
        public ustring formatVersion;
        public ustring visualStudioVersion;
        public ustring minimumVisualStudioVersion;
        public List<UniquePtr<Project>> projects;
        public HashMap<ustring, Project*> guidProjectMap;
    }
}    
