using System;

namespace cpp2cm
{
    grammar SolutionGrammar
    {
        using stdlib.digit_sequence;
        using stdlib.newline;
        using stdlib.string;
        skip SpacesAndComments;
        
        Solution : Solution*
            ::= SolutionHeader{ value = SolutionHeader;  }
                Projects(value)
                Global
            ;
            
        SolutionHeader : Solution*
            ::= ("Microsoft Visual Studio Solution File" ',' FormatVersion newline VisualStudioVersion newline MinimumVisualStudioVersion newline)
            { 
                value = new Solution(FormatVersion, VisualStudioVersion, MinimumVisualStudioVersion);
            }
            ;
            
        Projects(Solution* solution)
            ::= (Project{ solution->AddProject(Project); })*
            ;
            
        Project : Project*
            ::= ProjectHeader{ value = ProjectHeader; } ProjectSection(value)* keyword("EndProject") newline
            ;
            
        ProjectHeader : Project*
            ::= (keyword("Project") '(' LanguageGuidString ')' '=' ProjectNameString ',' ProjectFilePathString ',' ProjectGuidString newline)
            {
                value = new Project(LanguageGuidString, ProjectNameString, ProjectFilePathString, ProjectGuidString);
            }
            ;
            
        ProjectSection(Project* project)
            ::= ProjectDependencySection(project)
            ;
            
        ProjectDependencySection(Project* project)
            ::= ProjectDependencySectionHeader (GuidLine{ project->AddDependency(GuidLine); })* keyword("EndProjectSection") newline
            ;
            
        ProjectDependencySectionHeader
            ::= keyword("ProjectSection") '(' keyword("ProjectDependencies") ')' '=' (keyword("postProject") | keyword("preProject")) newline
            ;
            
        Global
            ::= keyword("Global") newline GlobalSections keyword("EndGlobal") newline
            ;
            
        GlobalSections
            ::= GlobalSection*
            ;
            
        GlobalSection
            ::= SolutionConfigurationPlatformsSection
            |   ProjectConfigurationPlatformsSection
            |   SolutionPropertiesSection
            |   EntensibilityGlobalsSection
            |   PerformanceSection
            ;   
        
        SolutionConfigurationPlatformsSection
            ::= SolutionConfigurationPlatformsSectionHeader ConfigurationLine* keyword("EndGlobalSection") newline
            ;
                    
        SolutionConfigurationPlatformsSectionHeader
            ::= keyword("GlobalSection") '(' keyword("SolutionConfigurationPlatforms") ')' '=' (keyword("preSolution") | keyword("postSolution")) newline
            ;
        
        SolutionPropertiesSection
            ::= SolutionPropertiesSectionHeader ConfigurationLine* keyword("EndGlobalSection") newline
            ;
                    
        SolutionPropertiesSectionHeader
            ::= keyword("GlobalSection") '(' keyword("SolutionProperties") ')' '=' (keyword("preSolution") | keyword("postSolution")) newline
            ;
            
        EntensibilityGlobalsSection
            ::= EntensibilityGlobalsSectionHeader ConfigurationLine* keyword("EndGlobalSection") newline
            ;
            
        EntensibilityGlobalsSectionHeader
            ::= keyword("GlobalSection") '(' keyword("ExtensibilityGlobals") ')' '=' (keyword("preSolution") | keyword("postSolution")) newline
            ;
            
        PerformanceSection
            ::= PerformanceSectionHeader ConfigurationLine* keyword("EndGlobalSection") newline
            ;
            
        PerformanceSectionHeader
            ::= keyword("GlobalSection") '(' keyword("Performance") ')' '=' (keyword("preSolution") | keyword("postSolution")) newline
            ;
            
        ConfigurationLine
            ::= (((anychar - newline)* - keyword("EndGlobalSection")) newline)
            ;
            
        ProjectConfigurationPlatformsSection
            ::= ProjectConfigurationPlatformsSectionHeader ConfigurationLine* keyword("EndGlobalSection") newline
            ;
            
        ProjectConfigurationPlatformsSectionHeader
            ::= keyword("GlobalSection") '(' keyword("ProjectConfigurationPlatforms") ')' '=' (keyword("preSolution") | keyword("postSolution")) newline
            ;
            
        GuidLine : ustring
            ::= (Guid:left '=' Guid:right newline){ value = left; }
            ;
            
        LanguageGuidString : ustring
            ::= GuidString{ value = GuidString; }
            ;
            
        ProjectNameString : ustring
            ::= string{ value = string; }
            ;
            
        ProjectFilePathString : string
            ::= token('"' FilePath '"'){ value = ToUtf8(FilePath); }
            ;
            
        FilePath : ustring
            ::= token((anychar - '"')+){ value = ustring(matchBegin, matchEnd); }
            ;
            
        ProjectGuidString : ustring
            ::= GuidString{ value = GuidString; }
            ;
            
        GuidString : ustring
            ::= token('"' Guid '"'){ value = Guid; }
            ;
            
        Guid : ustring
            ::= token('{' HexDigit8 '-' HexDigit4 '-' HexDigit4 '-' HexDigit4 '-' HexDigit12 '}'){ value = ustring(matchBegin, matchEnd); }
            ;
            
        HexDigit4
            ::= hexdigit hexdigit hexdigit hexdigit
            ;
            
        HexDigit8
            ::= HexDigit4 HexDigit4
            ;
            
        HexDigit12
            ::= HexDigit4 HexDigit4 HexDigit4
            ;
            
        FormatVersion : ustring
            ::= ("Format Version" MajorMinorVersion){ value = MajorMinorVersion; }
            ;
            
        VisualStudioVersion : ustring
            ::= ("VisualStudioVersion" '=' FullVersion){ value = FullVersion; }
            ;
            
        MinimumVisualStudioVersion : ustring
            ::= ("MinimumVisualStudioVersion" '=' FullVersion){ value = FullVersion; }
            ;
            
        FullVersion : ustring
            ::= token(VersionNumber '.' VersionNumber '.' VersionNumber '.' VersionNumber){ value = ustring(matchBegin, matchEnd); }
            ;
            
        MajorMinorVersion : ustring
            ::= token(VersionNumber '.' VersionNumber){ value = ustring(matchBegin, matchEnd); }
            ;
            
        VersionNumber
            ::= token(digit_sequence)
            ;
            
        SpacesAndComments
            ::= ([\t ] | Comment)+
            ;
            
        Comment
            ::= '#' (anychar - newline)* newline
            ;
    }
}
