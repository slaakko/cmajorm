using System;
using System.Dom;
using System.XPath;
using System.IO;
using cppparser;

namespace cpp2cm
{
    internal string MakeDirectoryPath(DomElement* element)
    {
        DomParentNode* parentNode = element->Parent();
        DomElement* parentElement = parentNode as DomElement*;
        if (parentElement != null && parentElement->Name() != u"work")
        {
            string directoryName = MakeDirectoryPath(parentElement);
            string name = ToUtf8(parentElement->GetAttribute(u"name"));
            if (!name.IsEmpty())
            {
                if (directoryName.IsEmpty())
                {
                    return name;
                }
                else
                {
                    directoryName.Append('/').Append(name);
                    return directoryName;
                }
            }
            else
            {
                throw Exception("'name' attribute expected for element '" + ToUtf8(parentElement->Name()) + "'");
            }
        }
        else
        {
            return string();
        }
    }
    
    internal void ParseSourceFile(const string& filePath, const string& fileName, const string& localDirectory, const string& localFilePath)
    {
        bool parsingFailed = false;
        string errorMessage;
        try
        {
            SourceFileGrammar* grammar = Parser.Instance().GetSourceFileGrammar();
            ustring fileContent = ToUtf32(File.ReadAllText(filePath));
            if (Flags.Verbose())
            {
                Console.Out() << "> " << filePath << endl();
            }
            int fileIndex = FileRegistry.Instance().RegisterFilePath(filePath);
            grammar->Parse(fileContent.Chars(), fileContent.Chars() + fileContent.Length(), fileIndex, filePath);
        }
        catch (const Exception& ex)
        {
            parsingFailed = true;
            errorMessage = ex.Message();
        }
        if (parsingFailed)
        {
            if (Flags.Verbose())
            {
                Console.Out() << errorMessage << endl();
            }
            Directory.CreateDirectories(localDirectory);
            if (Flags.Verbose())
            {
                Console.Out() << filePath << " -> " << localFilePath << endl();
            }
            if (File.Exists(localFilePath))
            {
                File.Remove(localFilePath);
            }
            File.Copy(filePath, localFilePath);
            string errorFilePath = localFilePath + ".error.txt";
            if (Flags.Verbose())
            {
                Console.Out() << "=> " << errorFilePath << endl();
            }
            StreamWriter writer = File.CreateText(errorFilePath);
            writer << "parsing " << filePath << " failed:" << endl() << errorMessage << endl();
        }
    }
    
    internal void Process(const string& workXmlFilePath)
    {
        string baseDir = Path.GetDirectoryName(workXmlFilePath);
        UniquePtr<DomDocument> workXmlDoc = ParseXmlFileToDomDocument(workXmlFilePath);
        UniquePtr<XPathObject> sourceFilesObject = Evaluate(u"//source", workXmlDoc.Get());
        XPathNodeSet* sourceFilesNodeSet = sourceFilesObject.Get() as XPathNodeSet*;
        if (sourceFilesNodeSet != null)
        {
            long n = sourceFilesNodeSet->Length();
            for (long i = 0; i < n; ++i)
            {
                DomNode* sourceFileNode = (*sourceFilesNodeSet)[i];
                DomElement* sourceFileElement = sourceFileNode as DomElement*;
                if (sourceFileElement != null)
                {
                    string filePath = ToUtf8(sourceFileElement->GetAttribute(u"filePath"));
                    string fileName = ToUtf8(sourceFileElement->GetAttribute(u"name"));
                    string localDirectory = Path.Combine(baseDir, Path.Combine("local", MakeDirectoryPath(sourceFileElement)));
                    string localFilePath = Path.Combine(localDirectory, fileName);
                    ParseSourceFile(filePath, fileName, localDirectory, localFilePath);
                }
            }
        }
    }
}

