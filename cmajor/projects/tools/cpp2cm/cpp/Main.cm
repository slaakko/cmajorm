using System;
using System.IO;
using System.Collections;
using System.Dom;
using pp;

const char* Version()
{
    return "2.5.0";
}

void PrintHelp()
{
    Console.Out() <<
        "C/C++ preprocessor version " << Version() << endl() <<
        "Usage: cpp [options] { filename }" << endl() <<
        "Preprocesses given C or C++ source or header files and print preprocessed content to stdout or to a file." << endl() <<
        "Options:" << endl() <<
        "--cpp=CPP.XML (-c=CPP.XML)" << endl() <<
        "   Read preprocessing defitions from CPP.XML." << endl() <<
        "   By default read them from file 'cpp.xml' residing in the current directory if it exists." << endl() <<
        "--out=FILE (-o=FILE)" << endl() <<
        "   Write preprocessing output to FILE." << endl() <<
        "   By default writes output to stdout." << endl() <<
        "--include=DIRECTORIES (-I=DIRECTORIES)" << endl() <<
        "   Append DIRECTORIES with each directory separated with ';' to include directories." << endl() <<
        "--help (-h)" << endl() <<
        "   Print help." << endl() <<
        "--verbose (-v)" << endl() <<
        "   Be verbose." << endl() <<
        "--debug (-d)" << endl() <<
        "   Debug parsing and generate XML debug output." << endl() <<
        "--diagnostics (-i)" << endl() <<
        "   Print diagnostic output." << endl();
        ;
}

int main(int argc, const char** argv)
{
    try
    {
        string xmlFilePath = "cpp.xml";
        List<string> includeDirectories;
        List<string> sourceFilePaths;
        string outputFilePath;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("-"))
            {
                if (arg == "--debug" || arg == "-d")
                {
                    Flags.SetDebug();
                }
                else if (arg == "--diagnostics" || arg == "-i")
                {
                    Flags.SetDiagnostics();
                }
                else if (arg == "--verbose" || arg == "-v")
                {
                    Flags.SetVerbose();
                }
                else if (arg == "--help" || arg == "-h")
                {
                    PrintHelp();
                    return 0;
                }
                else if (arg.Find('=') != -1)
                {
                    List<string> components = arg.Split('=');
                    if (components.Count() == 2)
                    {
                        if (components[0] == "--cpp" || components[0] == "-c")
                        {
                            xmlFilePath = components[1];
                        }
                        else if (components[0] == "--out" || components[0] == "-o")
                        {
                            outputFilePath = components[1];
                        }
                        else if (components[0] == "--include" || components[0] == "-I")
                        {
                            List<string> directories = components[1].Split(';');
                            for (const string& includeDir : directories)
                            {
                                includeDirectories.Add(includeDir);
                            }
                        }
                        else
                        {
                            throw Exception("unknown option '" + arg + "'");
                        }
                    }
                    else
                    {
                        throw Exception("unknown option '" + arg + "'");
                    }
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else
            {
                sourceFilePaths.Add(arg);
            }
        }
        if (sourceFilePaths.IsEmpty())
        {
            PrintHelp();
            throw Exception("no source files given");
        }
        StreamWriter* outputWriter = &Console.Out();
        UniquePtr<StreamWriter> outputFileWriter;
        if (!outputFilePath.IsEmpty())
        {
             outputFileWriter.Reset(new StreamWriter(File.CreateText(outputFilePath)));
             outputWriter = outputFileWriter.Get();
        }
        UniquePtr<DomDocument> cppDoc;
        if (!xmlFilePath.IsEmpty() && File.Exists(xmlFilePath))
        {
            cppDoc = ParseXmlFileToDomDocument(xmlFilePath);
        }
        DomElement* cppElement = null;
        if (!cppDoc.IsNull())
        {
            cppElement = cppDoc->DocumentElement();
        }
        for (const string& sourceFilePath : sourceFilePaths)
        {
            if (Flags.Verbose())
            {
                Console.Out() << "> " << sourceFilePath << endl();
            }
            List<PPFile> ppFiles = Preprocess(sourceFilePath, cppElement, includeDirectories);
            for (const PPFile& ppFile : ppFiles)
            {
                if (Flags.Verbose())
                {
                    Console.Out() << "==> " << ppFile.filePath << ":" << endl();
                }
                StreamWriter& out = *outputWriter;
                out << ppFile.content << endl();
            }
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0; 
}
