using System;
using System.Collections;
using System.Text.Parsing;

namespace Calc
{
    public class CalculatorGrammar : System.Text.Parsing.Grammar
    {
        public CalculatorGrammar() : this(new ParsingDomain())
        {
        }
        public CalculatorGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("CalculatorGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("Calc")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("num"), this, ToUtf32("System.Text.Parsing.stdlib.num")));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Expr"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Term"), ToUtf32("Term"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.CharParser('+'),
                                new System.Text.Parsing.CharParser('-')),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Term"), ToUtf32("Term"), 0))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Term"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Factor"), ToUtf32("Factor"), 0),
                    new System.Text.Parsing.KleeneStarParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.CharParser('*'),
                                new System.Text.Parsing.CharParser('/')),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Factor"), ToUtf32("Factor"), 0))))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Factor"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('+'),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Primary"), ToUtf32("Primary"), 0)),
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('-'),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Primary"), ToUtf32("Primary"), 0))),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("Primary"), ToUtf32("Primary"), 0))));
            AddRule(new System.Text.Parsing.RuleParser(ToUtf32("Primary"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('('),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Expr"), ToUtf32("Expr"), 0)),
                        new System.Text.Parsing.CharParser(')')),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("num"), ToUtf32("num"), 0))));
        }
    }
} // Calc
