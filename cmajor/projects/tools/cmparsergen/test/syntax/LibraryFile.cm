using System;
using System.Collections;
using System.Text.Parsing;
using ParsingContext = Code.ParsingContext;

namespace Syntax
{
    public class LibraryFileGrammar : System.Text.Parsing.Grammar
    {
        public LibraryFileGrammar() : this(new ParsingDomain())
        {
        }
        public LibraryFileGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("LibraryFileGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("Syntax")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public void Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName, ParsingContext* ctx, System.Text.Parsing.ParsingDomain* parsingDomain)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(ctx)));
            stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.ParsingDomain*>(parsingDomain)));
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
        }

        public class LibraryFileRule : System.Text.Parsing.RuleParser
        {
            public LibraryFileRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("System.Text.Parsing.ParsingDomain*"), ToUtf32("parsingDomain")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> parsingDomain_value = stack.Pop();
                context->parsingDomain = *cast<ValueObject<System.Text.Parsing.ParsingDomain*>*>(parsingDomain_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                NonterminalParser* namespaceContentNonterminalParser = GetNonterminal(ToUtf32("NamespaceContent"));
                namespaceContentNonterminalParser->SetPre(PreNamespaceContent);
            }
            public void PreNamespaceContent(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.ParsingDomain*>(context->parsingDomain)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), parsingDomain()
                {
                }
                public ParsingContext* ctx;
                public System.Text.Parsing.ParsingDomain* parsingDomain;
            }
        }

        public class NamespaceContentRule : System.Text.Parsing.RuleParser
        {
            public NamespaceContentRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("System.Text.Parsing.ParsingDomain*"), ToUtf32("parsingDomain")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> parsingDomain_value = stack.Pop();
                context->parsingDomain = *cast<ValueObject<System.Text.Parsing.ParsingDomain*>*>(parsingDomain_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* grammarNonterminalParser = GetNonterminal(ToUtf32("Grammar"));
                grammarNonterminalParser->SetPre(PreGrammar);
                grammarNonterminalParser->SetPost(PostGrammar);
                NonterminalParser* namespaceNonterminalParser = GetNonterminal(ToUtf32("Namespace"));
                namespaceNonterminalParser->SetPre(PreNamespace);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->parsingDomain->AddGrammar(context->fromGrammar);
            }
            public void PreGrammar(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Scope*>(context->parsingDomain->CurrentNamespace()->GetScope())));
            }
            public void PostGrammar(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromGrammar_value = stack.Pop();
                    context->fromGrammar = *cast<ValueObject<System.Text.Parsing.Grammar*>*>(fromGrammar_value.Get());
                }
            }
            public void PreNamespace(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.ParsingDomain*>(context->parsingDomain)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), parsingDomain(), fromGrammar()
                {
                }
                public ParsingContext* ctx;
                public System.Text.Parsing.ParsingDomain* parsingDomain;
                public System.Text.Parsing.Grammar* fromGrammar;
            }
        }

        public class NamespaceRule : System.Text.Parsing.RuleParser
        {
            public NamespaceRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("System.Text.Parsing.ParsingDomain*"), ToUtf32("parsingDomain")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> parsingDomain_value = stack.Pop();
                context->parsingDomain = *cast<ValueObject<System.Text.Parsing.ParsingDomain*>*>(parsingDomain_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* nsNonterminalParser = GetNonterminal(ToUtf32("ns"));
                nsNonterminalParser->SetPost(Postns);
                NonterminalParser* namespaceContentNonterminalParser = GetNonterminal(ToUtf32("NamespaceContent"));
                namespaceContentNonterminalParser->SetPre(PreNamespaceContent);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->parsingDomain->BeginNamespace(context->fromns);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->parsingDomain->EndNamespace();
            }
            public void Postns(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromns_value = stack.Pop();
                    context->fromns = *cast<ValueObject<ustring>*>(fromns_value.Get());
                }
            }
            public void PreNamespaceContent(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.ParsingDomain*>(context->parsingDomain)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), parsingDomain(), fromns()
                {
                }
                public ParsingContext* ctx;
                public System.Text.Parsing.ParsingDomain* parsingDomain;
                public ustring fromns;
            }
        }

        public class GrammarRule : System.Text.Parsing.RuleParser
        {
            public GrammarRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("System.Text.Parsing.Scope*"), ToUtf32("enclosingScope")));
                SetValueTypeName(ToUtf32("System.Text.Parsing.Grammar*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context->enclosingScope = *cast<ValueObject<System.Text.Parsing.Scope*>*>(enclosingScope_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Grammar*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* grammarNameNonterminalParser = GetNonterminal(ToUtf32("grammarName"));
                grammarNameNonterminalParser->SetPost(PostgrammarName);
                NonterminalParser* grammarContentNonterminalParser = GetNonterminal(ToUtf32("GrammarContent"));
                grammarContentNonterminalParser->SetPre(PreGrammarContent);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.Grammar(context->fromgrammarName, context->enclosingScope);
                context->value->SetNs(context->enclosingScope->Ns());
            }
            public void PostgrammarName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromgrammarName_value = stack.Pop();
                    context->fromgrammarName = *cast<ValueObject<ustring>*>(fromgrammarName_value.Get());
                }
            }
            public void PreGrammarContent(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Grammar*>(context->value)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), enclosingScope(), value(), fromgrammarName()
                {
                }
                public ParsingContext* ctx;
                public System.Text.Parsing.Scope* enclosingScope;
                public System.Text.Parsing.Grammar* value;
                public ustring fromgrammarName;
            }
        }

        public class GrammarContentRule : System.Text.Parsing.RuleParser
        {
            public GrammarContentRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("System.Text.Parsing.Grammar*"), ToUtf32("grammar")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> grammar_value = stack.Pop();
                context->grammar = *cast<ValueObject<System.Text.Parsing.Grammar*>*>(grammar_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* ruleNonterminalParser = GetNonterminal(ToUtf32("Rule"));
                ruleNonterminalParser->SetPre(PreRule);
                ruleNonterminalParser->SetPost(PostRule);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->grammar->AddRule(context->fromRule);
            }
            public void PreRule(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Scope*>(context->grammar->GetScope())));
            }
            public void PostRule(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromRule_value = stack.Pop();
                    context->fromRule = *cast<ValueObject<System.Text.Parsing.RuleParser*>*>(fromRule_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), grammar(), fromRule()
                {
                }
                public ParsingContext* ctx;
                public System.Text.Parsing.Grammar* grammar;
                public System.Text.Parsing.RuleParser* fromRule;
            }
        }

        public class RuleRule : System.Text.Parsing.RuleParser
        {
            public RuleRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                AddInheritedAttribute(AttrOrVar(ToUtf32("ParsingContext*"), ToUtf32("ctx")));
                AddInheritedAttribute(AttrOrVar(ToUtf32("System.Text.Parsing.Scope*"), ToUtf32("enclosingScope")));
                SetValueTypeName(ToUtf32("System.Text.Parsing.RuleParser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context->enclosingScope = *cast<ValueObject<System.Text.Parsing.Scope*>*>(enclosingScope_value.Get());
                UniquePtr<Object> ctx_value = stack.Pop();
                context->ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.Get());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.RuleParser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* ruleNameNonterminalParser = GetNonterminal(ToUtf32("ruleName"));
                ruleNameNonterminalParser->SetPost(PostruleName);
                NonterminalParser* signatureNonterminalParser = GetNonterminal(ToUtf32("Signature"));
                signatureNonterminalParser->SetPre(PreSignature);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.RuleParser(context->fromruleName, context->enclosingScope);
            }
            public void PostruleName(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromruleName_value = stack.Pop();
                    context->fromruleName = *cast<ValueObject<ustring>*>(fromruleName_value.Get());
                }
            }
            public void PreSignature(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context->ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.RuleParser*>(context->value)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : ctx(), enclosingScope(), value(), fromruleName()
                {
                }
                public ParsingContext* ctx;
                public System.Text.Parsing.Scope* enclosingScope;
                public System.Text.Parsing.RuleParser* value;
                public ustring fromruleName;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = pd->GetGrammar(ToUtf32("Syntax.ElementGrammar"));
            if (grammar1 == null)
            {
                grammar1 = new Syntax.ElementGrammar(pd);
            }
            AddGrammarReference(grammar1);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("qualified_id"), this, ToUtf32("System.Text.Parsing.stdlib.qualified_id")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("spaces_and_comments"), this, ToUtf32("System.Text.Parsing.stdlib.spaces_and_comments")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("Identifier"), this, ToUtf32("ElementGrammar.Identifier")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("Signature"), this, ToUtf32("ElementGrammar.Signature")));
            AddRule(new LibraryFileRule(ToUtf32("LibraryFile"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.NonterminalParser(ToUtf32("NamespaceContent"), ToUtf32("NamespaceContent"), 2)));
            AddRule(new NamespaceContentRule(ToUtf32("NamespaceContent"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("Grammar"), ToUtf32("Grammar"), 2)),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Namespace"), ToUtf32("Namespace"), 2)))));
            AddRule(new NamespaceRule(ToUtf32("Namespace"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.KeywordParser(ToUtf32("namespace")),
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.ExpectationParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("ns"), ToUtf32("qualified_id"), 0)))),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.CharParser('{'))),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("NamespaceContent"), ToUtf32("NamespaceContent"), 2)),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.ExpectationParser(
                            new System.Text.Parsing.CharParser('}'))))));
            AddRule(new GrammarRule(ToUtf32("Grammar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.KeywordParser(ToUtf32("grammar")),
                                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                    new System.Text.Parsing.ExpectationParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("grammarName"), ToUtf32("Identifier"), 0)))),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.CharParser('{'))),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("GrammarContent"), ToUtf32("GrammarContent"), 2)),
                    new System.Text.Parsing.ExpectationParser(
                        new System.Text.Parsing.CharParser('}')))));
            AddRule(new GrammarContentRule(ToUtf32("GrammarContent"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.KleeneStarParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Rule"), ToUtf32("Rule"), 2)))));
            AddRule(new RuleRule(ToUtf32("Rule"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("ruleName"), ToUtf32("Identifier"), 0)),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("Signature"), ToUtf32("Signature"), 2)),
                    new System.Text.Parsing.CharParser(';'))));
            SetSkipRuleName(ToUtf32("spaces_and_comments"));
        }
    }
} // Syntax
