using System;
using System.Collections;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Syntax
{
    public class PrimitiveGrammar : System.Text.Parsing.Grammar
    {
        public PrimitiveGrammar() : this(new ParsingDomain())
        {
        }
        public PrimitiveGrammar(ParsingDomain* parsingDomain) : base(ToUtf32("PrimitiveGrammar"), parsingDomain->GetNamespaceScope(ToUtf32("Syntax")), parsingDomain)
        {
            SetOwner(0);
            RegisterParsingDomain(parsingDomain);
            parsingDomain->AddGrammar(this);
            CreateRules();
            Link();
        }
        public System.Text.Parsing.Parser* Parse(const uchar* start, const uchar* end, int fileIndex, const string& fileName)
        {
            Scanner scanner(start, end, fileName, fileIndex, SkipRule());
            UniquePtr<XmlLog> xmlLog;
            if (Log() != null)
            {
                xmlLog.Reset(new XmlLog(*Log(), MaxLogLineLength()));
                scanner.SetLog(xmlLog.Get());
                xmlLog->WriteBeginRule(u"parse");
                xmlLog->IncIndent();
            }
            Stack<UniquePtr<Object>> stack;
            UniquePtr<ParsingData> parsingData(new ParsingData(Domain()->NumRules()));
            scanner.SetParsingData(parsingData.Get());
            Match match = base->Parse(scanner, stack, parsingData.Get());
            Span stop = scanner.GetSpan();
            if (Log() != null)
            {
                xmlLog->DecIndent();
                xmlLog->WriteEndRule(u"parse");
            }
            if (!match.Hit() || stop.start != cast<int>(end - start))
            {
                if (StartRule() != null)
                {
                    throw ExpectationFailure(StartRule()->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + ToUtf8(Name()) + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            System.Text.Parsing.Parser* result = *cast<ValueObject<System.Text.Parsing.Parser*>*>(value.Get());
            return result;
        }

        public class PrimitiveRule : System.Text.Parsing.RuleParser
        {
            public PrimitiveRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                ActionParser* a3ActionParser = GetAction(ToUtf32("A3"));
                a3ActionParser->SetAction(A3Action);
                ActionParser* a4ActionParser = GetAction(ToUtf32("A4"));
                a4ActionParser->SetAction(A4Action);
                ActionParser* a5ActionParser = GetAction(ToUtf32("A5"));
                a5ActionParser->SetAction(A5Action);
                ActionParser* a6ActionParser = GetAction(ToUtf32("A6"));
                a6ActionParser->SetAction(A6Action);
                ActionParser* a7ActionParser = GetAction(ToUtf32("A7"));
                a7ActionParser->SetAction(A7Action);
                ActionParser* a8ActionParser = GetAction(ToUtf32("A8"));
                a8ActionParser->SetAction(A8Action);
                ActionParser* a9ActionParser = GetAction(ToUtf32("A9"));
                a9ActionParser->SetAction(A9Action);
                ActionParser* a10ActionParser = GetAction(ToUtf32("A10"));
                a10ActionParser->SetAction(A10Action);
                ActionParser* a11ActionParser = GetAction(ToUtf32("A11"));
                a11ActionParser->SetAction(A11Action);
                ActionParser* a12ActionParser = GetAction(ToUtf32("A12"));
                a12ActionParser->SetAction(A12Action);
                ActionParser* a13ActionParser = GetAction(ToUtf32("A13"));
                a13ActionParser->SetAction(A13Action);
                ActionParser* a14ActionParser = GetAction(ToUtf32("A14"));
                a14ActionParser->SetAction(A14Action);
                ActionParser* a15ActionParser = GetAction(ToUtf32("A15"));
                a15ActionParser->SetAction(A15Action);
                ActionParser* a16ActionParser = GetAction(ToUtf32("A16"));
                a16ActionParser->SetAction(A16Action);
                ActionParser* a17ActionParser = GetAction(ToUtf32("A17"));
                a17ActionParser->SetAction(A17Action);
                ActionParser* a18ActionParser = GetAction(ToUtf32("A18"));
                a18ActionParser->SetAction(A18Action);
                ActionParser* a19ActionParser = GetAction(ToUtf32("A19"));
                a19ActionParser->SetAction(A19Action);
                ActionParser* a20ActionParser = GetAction(ToUtf32("A20"));
                a20ActionParser->SetAction(A20Action);
                ActionParser* a21ActionParser = GetAction(ToUtf32("A21"));
                a21ActionParser->SetAction(A21Action);
                ActionParser* a22ActionParser = GetAction(ToUtf32("A22"));
                a22ActionParser->SetAction(A22Action);
                ActionParser* a23ActionParser = GetAction(ToUtf32("A23"));
                a23ActionParser->SetAction(A23Action);
                ActionParser* a24ActionParser = GetAction(ToUtf32("A24"));
                a24ActionParser->SetAction(A24Action);
                ActionParser* a25ActionParser = GetAction(ToUtf32("A25"));
                a25ActionParser->SetAction(A25Action);
                ActionParser* a26ActionParser = GetAction(ToUtf32("A26"));
                a26ActionParser->SetAction(A26Action);
                ActionParser* a27ActionParser = GetAction(ToUtf32("A27"));
                a27ActionParser->SetAction(A27Action);
                ActionParser* a28ActionParser = GetAction(ToUtf32("A28"));
                a28ActionParser->SetAction(A28Action);
                ActionParser* a29ActionParser = GetAction(ToUtf32("A29"));
                a29ActionParser->SetAction(A29Action);
                ActionParser* a30ActionParser = GetAction(ToUtf32("A30"));
                a30ActionParser->SetAction(A30Action);
                ActionParser* a31ActionParser = GetAction(ToUtf32("A31"));
                a31ActionParser->SetAction(A31Action);
                ActionParser* a32ActionParser = GetAction(ToUtf32("A32"));
                a32ActionParser->SetAction(A32Action);
                ActionParser* a33ActionParser = GetAction(ToUtf32("A33"));
                a33ActionParser->SetAction(A33Action);
                ActionParser* a34ActionParser = GetAction(ToUtf32("A34"));
                a34ActionParser->SetAction(A34Action);
                ActionParser* a35ActionParser = GetAction(ToUtf32("A35"));
                a35ActionParser->SetAction(A35Action);
                ActionParser* a36ActionParser = GetAction(ToUtf32("A36"));
                a36ActionParser->SetAction(A36Action);
                ActionParser* a37ActionParser = GetAction(ToUtf32("A37"));
                a37ActionParser->SetAction(A37Action);
                ActionParser* a38ActionParser = GetAction(ToUtf32("A38"));
                a38ActionParser->SetAction(A38Action);
                ActionParser* a39ActionParser = GetAction(ToUtf32("A39"));
                a39ActionParser->SetAction(A39Action);
                ActionParser* a40ActionParser = GetAction(ToUtf32("A40"));
                a40ActionParser->SetAction(A40Action);
                ActionParser* a41ActionParser = GetAction(ToUtf32("A41"));
                a41ActionParser->SetAction(A41Action);
                ActionParser* a42ActionParser = GetAction(ToUtf32("A42"));
                a42ActionParser->SetAction(A42Action);
                ActionParser* a43ActionParser = GetAction(ToUtf32("A43"));
                a43ActionParser->SetAction(A43Action);
                ActionParser* a44ActionParser = GetAction(ToUtf32("A44"));
                a44ActionParser->SetAction(A44Action);
                ActionParser* a45ActionParser = GetAction(ToUtf32("A45"));
                a45ActionParser->SetAction(A45Action);
                ActionParser* a46ActionParser = GetAction(ToUtf32("A46"));
                a46ActionParser->SetAction(A46Action);
                ActionParser* a47ActionParser = GetAction(ToUtf32("A47"));
                a47ActionParser->SetAction(A47Action);
                ActionParser* a48ActionParser = GetAction(ToUtf32("A48"));
                a48ActionParser->SetAction(A48Action);
                ActionParser* a49ActionParser = GetAction(ToUtf32("A49"));
                a49ActionParser->SetAction(A49Action);
                ActionParser* a50ActionParser = GetAction(ToUtf32("A50"));
                a50ActionParser->SetAction(A50Action);
                ActionParser* a51ActionParser = GetAction(ToUtf32("A51"));
                a51ActionParser->SetAction(A51Action);
                ActionParser* a52ActionParser = GetAction(ToUtf32("A52"));
                a52ActionParser->SetAction(A52Action);
                ActionParser* a53ActionParser = GetAction(ToUtf32("A53"));
                a53ActionParser->SetAction(A53Action);
                NonterminalParser* charNonterminalParser = GetNonterminal(ToUtf32("Char"));
                charNonterminalParser->SetPost(PostChar);
                NonterminalParser* stringNonterminalParser = GetNonterminal(ToUtf32("String"));
                stringNonterminalParser->SetPost(PostString);
                NonterminalParser* charSetNonterminalParser = GetNonterminal(ToUtf32("CharSet"));
                charSetNonterminalParser->SetPost(PostCharSet);
                NonterminalParser* keywordNonterminalParser = GetNonterminal(ToUtf32("Keyword"));
                keywordNonterminalParser->SetPost(PostKeyword);
                NonterminalParser* keywordListNonterminalParser = GetNonterminal(ToUtf32("KeywordList"));
                keywordListNonterminalParser->SetPost(PostKeywordList);
                NonterminalParser* rangeNonterminalParser = GetNonterminal(ToUtf32("Range"));
                rangeNonterminalParser->SetPost(PostRange);
                NonterminalParser* emptyNonterminalParser = GetNonterminal(ToUtf32("Empty"));
                emptyNonterminalParser->SetPost(PostEmpty);
                NonterminalParser* spaceNonterminalParser = GetNonterminal(ToUtf32("Space"));
                spaceNonterminalParser->SetPost(PostSpace);
                NonterminalParser* anyCharNonterminalParser = GetNonterminal(ToUtf32("AnyChar"));
                anyCharNonterminalParser->SetPost(PostAnyChar);
                NonterminalParser* letterNonterminalParser = GetNonterminal(ToUtf32("Letter"));
                letterNonterminalParser->SetPost(PostLetter);
                NonterminalParser* digitNonterminalParser = GetNonterminal(ToUtf32("Digit"));
                digitNonterminalParser->SetPost(PostDigit);
                NonterminalParser* hexDigitNonterminalParser = GetNonterminal(ToUtf32("HexDigit"));
                hexDigitNonterminalParser->SetPost(PostHexDigit);
                NonterminalParser* upperLetterNonterminalParser = GetNonterminal(ToUtf32("UpperLetter"));
                upperLetterNonterminalParser->SetPost(PostUpperLetter);
                NonterminalParser* lowerLetterNonterminalParser = GetNonterminal(ToUtf32("LowerLetter"));
                lowerLetterNonterminalParser->SetPost(PostLowerLetter);
                NonterminalParser* titleLetterNonterminalParser = GetNonterminal(ToUtf32("TitleLetter"));
                titleLetterNonterminalParser->SetPost(PostTitleLetter);
                NonterminalParser* modifierLetterNonterminalParser = GetNonterminal(ToUtf32("ModifierLetter"));
                modifierLetterNonterminalParser->SetPost(PostModifierLetter);
                NonterminalParser* otherLetterNonterminalParser = GetNonterminal(ToUtf32("OtherLetter"));
                otherLetterNonterminalParser->SetPost(PostOtherLetter);
                NonterminalParser* casedLetterNonterminalParser = GetNonterminal(ToUtf32("CasedLetter"));
                casedLetterNonterminalParser->SetPost(PostCasedLetter);
                NonterminalParser* markNonterminalParser = GetNonterminal(ToUtf32("Mark"));
                markNonterminalParser->SetPost(PostMark);
                NonterminalParser* nonspacingMarkNonterminalParser = GetNonterminal(ToUtf32("NonspacingMark"));
                nonspacingMarkNonterminalParser->SetPost(PostNonspacingMark);
                NonterminalParser* enclosingMarkNonterminalParser = GetNonterminal(ToUtf32("EnclosingMark"));
                enclosingMarkNonterminalParser->SetPost(PostEnclosingMark);
                NonterminalParser* spacingMarkNonterminalParser = GetNonterminal(ToUtf32("SpacingMark"));
                spacingMarkNonterminalParser->SetPost(PostSpacingMark);
                NonterminalParser* numberNonterminalParser = GetNonterminal(ToUtf32("Number"));
                numberNonterminalParser->SetPost(PostNumber);
                NonterminalParser* decimalNumberNonterminalParser = GetNonterminal(ToUtf32("DecimalNumber"));
                decimalNumberNonterminalParser->SetPost(PostDecimalNumber);
                NonterminalParser* letterNumberNonterminalParser = GetNonterminal(ToUtf32("LetterNumber"));
                letterNumberNonterminalParser->SetPost(PostLetterNumber);
                NonterminalParser* otherNumberNonterminalParser = GetNonterminal(ToUtf32("OtherNumber"));
                otherNumberNonterminalParser->SetPost(PostOtherNumber);
                NonterminalParser* punctuationNonterminalParser = GetNonterminal(ToUtf32("Punctuation"));
                punctuationNonterminalParser->SetPost(PostPunctuation);
                NonterminalParser* connectorPunctuationNonterminalParser = GetNonterminal(ToUtf32("ConnectorPunctuation"));
                connectorPunctuationNonterminalParser->SetPost(PostConnectorPunctuation);
                NonterminalParser* dashPunctuationNonterminalParser = GetNonterminal(ToUtf32("DashPunctuation"));
                dashPunctuationNonterminalParser->SetPost(PostDashPunctuation);
                NonterminalParser* openPunctuationNonterminalParser = GetNonterminal(ToUtf32("OpenPunctuation"));
                openPunctuationNonterminalParser->SetPost(PostOpenPunctuation);
                NonterminalParser* closePunctuationNonterminalParser = GetNonterminal(ToUtf32("ClosePunctuation"));
                closePunctuationNonterminalParser->SetPost(PostClosePunctuation);
                NonterminalParser* initialPunctuationNonterminalParser = GetNonterminal(ToUtf32("InitialPunctuation"));
                initialPunctuationNonterminalParser->SetPost(PostInitialPunctuation);
                NonterminalParser* finalPunctuationNonterminalParser = GetNonterminal(ToUtf32("FinalPunctuation"));
                finalPunctuationNonterminalParser->SetPost(PostFinalPunctuation);
                NonterminalParser* otherPunctuationNonterminalParser = GetNonterminal(ToUtf32("OtherPunctuation"));
                otherPunctuationNonterminalParser->SetPost(PostOtherPunctuation);
                NonterminalParser* symbolNonterminalParser = GetNonterminal(ToUtf32("Symbol"));
                symbolNonterminalParser->SetPost(PostSymbol);
                NonterminalParser* mathSymbolNonterminalParser = GetNonterminal(ToUtf32("MathSymbol"));
                mathSymbolNonterminalParser->SetPost(PostMathSymbol);
                NonterminalParser* currencySymbolNonterminalParser = GetNonterminal(ToUtf32("CurrencySymbol"));
                currencySymbolNonterminalParser->SetPost(PostCurrencySymbol);
                NonterminalParser* modifierSymbolNonterminalParser = GetNonterminal(ToUtf32("ModifierSymbol"));
                modifierSymbolNonterminalParser->SetPost(PostModifierSymbol);
                NonterminalParser* otherSymbolNonterminalParser = GetNonterminal(ToUtf32("OtherSymbol"));
                otherSymbolNonterminalParser->SetPost(PostOtherSymbol);
                NonterminalParser* separatorNonterminalParser = GetNonterminal(ToUtf32("Separator"));
                separatorNonterminalParser->SetPost(PostSeparator);
                NonterminalParser* spaceSeparatorNonterminalParser = GetNonterminal(ToUtf32("SpaceSeparator"));
                spaceSeparatorNonterminalParser->SetPost(PostSpaceSeparator);
                NonterminalParser* lineSeparatorNonterminalParser = GetNonterminal(ToUtf32("LineSeparator"));
                lineSeparatorNonterminalParser->SetPost(PostLineSeparator);
                NonterminalParser* paragraphSeparatorNonterminalParser = GetNonterminal(ToUtf32("ParagraphSeparator"));
                paragraphSeparatorNonterminalParser->SetPost(PostParagraphSeparator);
                NonterminalParser* otherNonterminalParser = GetNonterminal(ToUtf32("Other"));
                otherNonterminalParser->SetPost(PostOther);
                NonterminalParser* controlNonterminalParser = GetNonterminal(ToUtf32("Control"));
                controlNonterminalParser->SetPost(PostControl);
                NonterminalParser* formatNonterminalParser = GetNonterminal(ToUtf32("Format"));
                formatNonterminalParser->SetPost(PostFormat);
                NonterminalParser* surrogateNonterminalParser = GetNonterminal(ToUtf32("Surrogate"));
                surrogateNonterminalParser->SetPost(PostSurrogate);
                NonterminalParser* privateUseNonterminalParser = GetNonterminal(ToUtf32("PrivateUse"));
                privateUseNonterminalParser->SetPost(PostPrivateUse);
                NonterminalParser* unassignedNonterminalParser = GetNonterminal(ToUtf32("Unassigned"));
                unassignedNonterminalParser->SetPost(PostUnassigned);
                NonterminalParser* graphicNonterminalParser = GetNonterminal(ToUtf32("Graphic"));
                graphicNonterminalParser->SetPost(PostGraphic);
                NonterminalParser* baseCharNonterminalParser = GetNonterminal(ToUtf32("BaseChar"));
                baseCharNonterminalParser->SetPost(PostBaseChar);
                NonterminalParser* alphabeticNonterminalParser = GetNonterminal(ToUtf32("Alphabetic"));
                alphabeticNonterminalParser->SetPost(PostAlphabetic);
                NonterminalParser* idStartNonterminalParser = GetNonterminal(ToUtf32("IdStart"));
                idStartNonterminalParser->SetPost(PostIdStart);
                NonterminalParser* idContNonterminalParser = GetNonterminal(ToUtf32("IdCont"));
                idContNonterminalParser->SetPost(PostIdCont);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromChar;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromString;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromCharSet;
            }
            public void A3Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromKeyword;
            }
            public void A4Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromKeywordList;
            }
            public void A5Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromRange;
            }
            public void A6Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromEmpty;
            }
            public void A7Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSpace;
            }
            public void A8Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromAnyChar;
            }
            public void A9Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromLetter;
            }
            public void A10Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromDigit;
            }
            public void A11Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromHexDigit;
            }
            public void A12Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromUpperLetter;
            }
            public void A13Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromLowerLetter;
            }
            public void A14Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromTitleLetter;
            }
            public void A15Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromModifierLetter;
            }
            public void A16Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromOtherLetter;
            }
            public void A17Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromCasedLetter;
            }
            public void A18Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromMark;
            }
            public void A19Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromNonspacingMark;
            }
            public void A20Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromEnclosingMark;
            }
            public void A21Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSpacingMark;
            }
            public void A22Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromNumber;
            }
            public void A23Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromDecimalNumber;
            }
            public void A24Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromLetterNumber;
            }
            public void A25Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromOtherNumber;
            }
            public void A26Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromPunctuation;
            }
            public void A27Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromConnectorPunctuation;
            }
            public void A28Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromDashPunctuation;
            }
            public void A29Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromOpenPunctuation;
            }
            public void A30Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromClosePunctuation;
            }
            public void A31Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromInitialPunctuation;
            }
            public void A32Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromFinalPunctuation;
            }
            public void A33Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromOtherPunctuation;
            }
            public void A34Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSymbol;
            }
            public void A35Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromMathSymbol;
            }
            public void A36Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromCurrencySymbol;
            }
            public void A37Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromModifierSymbol;
            }
            public void A38Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromOtherSymbol;
            }
            public void A39Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSeparator;
            }
            public void A40Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSpaceSeparator;
            }
            public void A41Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromLineSeparator;
            }
            public void A42Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromParagraphSeparator;
            }
            public void A43Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromOther;
            }
            public void A44Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromControl;
            }
            public void A45Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromFormat;
            }
            public void A46Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromSurrogate;
            }
            public void A47Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromPrivateUse;
            }
            public void A48Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromUnassigned;
            }
            public void A49Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromGraphic;
            }
            public void A50Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromBaseChar;
            }
            public void A51Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromAlphabetic;
            }
            public void A52Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromIdStart;
            }
            public void A53Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromIdCont;
            }
            public void PostChar(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromChar_value = stack.Pop();
                    context->fromChar = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromChar_value.Get());
                }
            }
            public void PostString(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromString_value = stack.Pop();
                    context->fromString = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromString_value.Get());
                }
            }
            public void PostCharSet(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCharSet_value = stack.Pop();
                    context->fromCharSet = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromCharSet_value.Get());
                }
            }
            public void PostKeyword(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromKeyword_value = stack.Pop();
                    context->fromKeyword = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromKeyword_value.Get());
                }
            }
            public void PostKeywordList(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromKeywordList_value = stack.Pop();
                    context->fromKeywordList = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromKeywordList_value.Get());
                }
            }
            public void PostRange(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromRange_value = stack.Pop();
                    context->fromRange = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromRange_value.Get());
                }
            }
            public void PostEmpty(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromEmpty_value = stack.Pop();
                    context->fromEmpty = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromEmpty_value.Get());
                }
            }
            public void PostSpace(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSpace_value = stack.Pop();
                    context->fromSpace = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromSpace_value.Get());
                }
            }
            public void PostAnyChar(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromAnyChar_value = stack.Pop();
                    context->fromAnyChar = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromAnyChar_value.Get());
                }
            }
            public void PostLetter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromLetter_value = stack.Pop();
                    context->fromLetter = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromLetter_value.Get());
                }
            }
            public void PostDigit(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDigit_value = stack.Pop();
                    context->fromDigit = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromDigit_value.Get());
                }
            }
            public void PostHexDigit(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromHexDigit_value = stack.Pop();
                    context->fromHexDigit = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromHexDigit_value.Get());
                }
            }
            public void PostUpperLetter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromUpperLetter_value = stack.Pop();
                    context->fromUpperLetter = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromUpperLetter_value.Get());
                }
            }
            public void PostLowerLetter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromLowerLetter_value = stack.Pop();
                    context->fromLowerLetter = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromLowerLetter_value.Get());
                }
            }
            public void PostTitleLetter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromTitleLetter_value = stack.Pop();
                    context->fromTitleLetter = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromTitleLetter_value.Get());
                }
            }
            public void PostModifierLetter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromModifierLetter_value = stack.Pop();
                    context->fromModifierLetter = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromModifierLetter_value.Get());
                }
            }
            public void PostOtherLetter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromOtherLetter_value = stack.Pop();
                    context->fromOtherLetter = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromOtherLetter_value.Get());
                }
            }
            public void PostCasedLetter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCasedLetter_value = stack.Pop();
                    context->fromCasedLetter = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromCasedLetter_value.Get());
                }
            }
            public void PostMark(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromMark_value = stack.Pop();
                    context->fromMark = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromMark_value.Get());
                }
            }
            public void PostNonspacingMark(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromNonspacingMark_value = stack.Pop();
                    context->fromNonspacingMark = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromNonspacingMark_value.Get());
                }
            }
            public void PostEnclosingMark(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromEnclosingMark_value = stack.Pop();
                    context->fromEnclosingMark = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromEnclosingMark_value.Get());
                }
            }
            public void PostSpacingMark(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSpacingMark_value = stack.Pop();
                    context->fromSpacingMark = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromSpacingMark_value.Get());
                }
            }
            public void PostNumber(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromNumber_value = stack.Pop();
                    context->fromNumber = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromNumber_value.Get());
                }
            }
            public void PostDecimalNumber(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDecimalNumber_value = stack.Pop();
                    context->fromDecimalNumber = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromDecimalNumber_value.Get());
                }
            }
            public void PostLetterNumber(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromLetterNumber_value = stack.Pop();
                    context->fromLetterNumber = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromLetterNumber_value.Get());
                }
            }
            public void PostOtherNumber(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromOtherNumber_value = stack.Pop();
                    context->fromOtherNumber = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromOtherNumber_value.Get());
                }
            }
            public void PostPunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromPunctuation_value = stack.Pop();
                    context->fromPunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromPunctuation_value.Get());
                }
            }
            public void PostConnectorPunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromConnectorPunctuation_value = stack.Pop();
                    context->fromConnectorPunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromConnectorPunctuation_value.Get());
                }
            }
            public void PostDashPunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromDashPunctuation_value = stack.Pop();
                    context->fromDashPunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromDashPunctuation_value.Get());
                }
            }
            public void PostOpenPunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromOpenPunctuation_value = stack.Pop();
                    context->fromOpenPunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromOpenPunctuation_value.Get());
                }
            }
            public void PostClosePunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromClosePunctuation_value = stack.Pop();
                    context->fromClosePunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromClosePunctuation_value.Get());
                }
            }
            public void PostInitialPunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromInitialPunctuation_value = stack.Pop();
                    context->fromInitialPunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromInitialPunctuation_value.Get());
                }
            }
            public void PostFinalPunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromFinalPunctuation_value = stack.Pop();
                    context->fromFinalPunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromFinalPunctuation_value.Get());
                }
            }
            public void PostOtherPunctuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromOtherPunctuation_value = stack.Pop();
                    context->fromOtherPunctuation = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromOtherPunctuation_value.Get());
                }
            }
            public void PostSymbol(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSymbol_value = stack.Pop();
                    context->fromSymbol = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromSymbol_value.Get());
                }
            }
            public void PostMathSymbol(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromMathSymbol_value = stack.Pop();
                    context->fromMathSymbol = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromMathSymbol_value.Get());
                }
            }
            public void PostCurrencySymbol(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCurrencySymbol_value = stack.Pop();
                    context->fromCurrencySymbol = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromCurrencySymbol_value.Get());
                }
            }
            public void PostModifierSymbol(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromModifierSymbol_value = stack.Pop();
                    context->fromModifierSymbol = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromModifierSymbol_value.Get());
                }
            }
            public void PostOtherSymbol(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromOtherSymbol_value = stack.Pop();
                    context->fromOtherSymbol = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromOtherSymbol_value.Get());
                }
            }
            public void PostSeparator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSeparator_value = stack.Pop();
                    context->fromSeparator = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromSeparator_value.Get());
                }
            }
            public void PostSpaceSeparator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSpaceSeparator_value = stack.Pop();
                    context->fromSpaceSeparator = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromSpaceSeparator_value.Get());
                }
            }
            public void PostLineSeparator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromLineSeparator_value = stack.Pop();
                    context->fromLineSeparator = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromLineSeparator_value.Get());
                }
            }
            public void PostParagraphSeparator(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromParagraphSeparator_value = stack.Pop();
                    context->fromParagraphSeparator = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromParagraphSeparator_value.Get());
                }
            }
            public void PostOther(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromOther_value = stack.Pop();
                    context->fromOther = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromOther_value.Get());
                }
            }
            public void PostControl(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromControl_value = stack.Pop();
                    context->fromControl = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromControl_value.Get());
                }
            }
            public void PostFormat(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromFormat_value = stack.Pop();
                    context->fromFormat = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromFormat_value.Get());
                }
            }
            public void PostSurrogate(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromSurrogate_value = stack.Pop();
                    context->fromSurrogate = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromSurrogate_value.Get());
                }
            }
            public void PostPrivateUse(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromPrivateUse_value = stack.Pop();
                    context->fromPrivateUse = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromPrivateUse_value.Get());
                }
            }
            public void PostUnassigned(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromUnassigned_value = stack.Pop();
                    context->fromUnassigned = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromUnassigned_value.Get());
                }
            }
            public void PostGraphic(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromGraphic_value = stack.Pop();
                    context->fromGraphic = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromGraphic_value.Get());
                }
            }
            public void PostBaseChar(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromBaseChar_value = stack.Pop();
                    context->fromBaseChar = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromBaseChar_value.Get());
                }
            }
            public void PostAlphabetic(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromAlphabetic_value = stack.Pop();
                    context->fromAlphabetic = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromAlphabetic_value.Get());
                }
            }
            public void PostIdStart(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromIdStart_value = stack.Pop();
                    context->fromIdStart = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromIdStart_value.Get());
                }
            }
            public void PostIdCont(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromIdCont_value = stack.Pop();
                    context->fromIdCont = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromIdCont_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromChar(), fromString(), fromCharSet(), fromKeyword(), fromKeywordList(), fromRange(), fromEmpty(), fromSpace(), fromAnyChar(), fromLetter(), fromDigit(), fromHexDigit(), fromUpperLetter(), fromLowerLetter(), fromTitleLetter(), fromModifierLetter(), fromOtherLetter(), fromCasedLetter(), fromMark(), fromNonspacingMark(), fromEnclosingMark(), fromSpacingMark(), fromNumber(), fromDecimalNumber(), fromLetterNumber(), fromOtherNumber(), fromPunctuation(), fromConnectorPunctuation(), fromDashPunctuation(), fromOpenPunctuation(), fromClosePunctuation(), fromInitialPunctuation(), fromFinalPunctuation(), fromOtherPunctuation(), fromSymbol(), fromMathSymbol(), fromCurrencySymbol(), fromModifierSymbol(), fromOtherSymbol(), fromSeparator(), fromSpaceSeparator(), fromLineSeparator(), fromParagraphSeparator(), fromOther(), fromControl(), fromFormat(), fromSurrogate(), fromPrivateUse(), fromUnassigned(), fromGraphic(), fromBaseChar(), fromAlphabetic(), fromIdStart(), fromIdCont()
                {
                }
                public System.Text.Parsing.Parser* value;
                public System.Text.Parsing.Parser* fromChar;
                public System.Text.Parsing.Parser* fromString;
                public System.Text.Parsing.Parser* fromCharSet;
                public System.Text.Parsing.Parser* fromKeyword;
                public System.Text.Parsing.Parser* fromKeywordList;
                public System.Text.Parsing.Parser* fromRange;
                public System.Text.Parsing.Parser* fromEmpty;
                public System.Text.Parsing.Parser* fromSpace;
                public System.Text.Parsing.Parser* fromAnyChar;
                public System.Text.Parsing.Parser* fromLetter;
                public System.Text.Parsing.Parser* fromDigit;
                public System.Text.Parsing.Parser* fromHexDigit;
                public System.Text.Parsing.Parser* fromUpperLetter;
                public System.Text.Parsing.Parser* fromLowerLetter;
                public System.Text.Parsing.Parser* fromTitleLetter;
                public System.Text.Parsing.Parser* fromModifierLetter;
                public System.Text.Parsing.Parser* fromOtherLetter;
                public System.Text.Parsing.Parser* fromCasedLetter;
                public System.Text.Parsing.Parser* fromMark;
                public System.Text.Parsing.Parser* fromNonspacingMark;
                public System.Text.Parsing.Parser* fromEnclosingMark;
                public System.Text.Parsing.Parser* fromSpacingMark;
                public System.Text.Parsing.Parser* fromNumber;
                public System.Text.Parsing.Parser* fromDecimalNumber;
                public System.Text.Parsing.Parser* fromLetterNumber;
                public System.Text.Parsing.Parser* fromOtherNumber;
                public System.Text.Parsing.Parser* fromPunctuation;
                public System.Text.Parsing.Parser* fromConnectorPunctuation;
                public System.Text.Parsing.Parser* fromDashPunctuation;
                public System.Text.Parsing.Parser* fromOpenPunctuation;
                public System.Text.Parsing.Parser* fromClosePunctuation;
                public System.Text.Parsing.Parser* fromInitialPunctuation;
                public System.Text.Parsing.Parser* fromFinalPunctuation;
                public System.Text.Parsing.Parser* fromOtherPunctuation;
                public System.Text.Parsing.Parser* fromSymbol;
                public System.Text.Parsing.Parser* fromMathSymbol;
                public System.Text.Parsing.Parser* fromCurrencySymbol;
                public System.Text.Parsing.Parser* fromModifierSymbol;
                public System.Text.Parsing.Parser* fromOtherSymbol;
                public System.Text.Parsing.Parser* fromSeparator;
                public System.Text.Parsing.Parser* fromSpaceSeparator;
                public System.Text.Parsing.Parser* fromLineSeparator;
                public System.Text.Parsing.Parser* fromParagraphSeparator;
                public System.Text.Parsing.Parser* fromOther;
                public System.Text.Parsing.Parser* fromControl;
                public System.Text.Parsing.Parser* fromFormat;
                public System.Text.Parsing.Parser* fromSurrogate;
                public System.Text.Parsing.Parser* fromPrivateUse;
                public System.Text.Parsing.Parser* fromUnassigned;
                public System.Text.Parsing.Parser* fromGraphic;
                public System.Text.Parsing.Parser* fromBaseChar;
                public System.Text.Parsing.Parser* fromAlphabetic;
                public System.Text.Parsing.Parser* fromIdStart;
                public System.Text.Parsing.Parser* fromIdCont;
            }
        }

        public class CharRule : System.Text.Parsing.RuleParser
        {
            public CharRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* chrNonterminalParser = GetNonterminal(ToUtf32("chr"));
                chrNonterminalParser->SetPost(Postchr);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.CharParser(context->fromchr);
            }
            public void Postchr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromchr_value = stack.Pop();
                    context->fromchr = *cast<ValueObject<uchar>*>(fromchr_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromchr()
                {
                }
                public System.Text.Parsing.Parser* value;
                public uchar fromchr;
            }
        }

        public class StringRule : System.Text.Parsing.RuleParser
        {
            public StringRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* strNonterminalParser = GetNonterminal(ToUtf32("str"));
                strNonterminalParser->SetPost(Poststr);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.StringParser(context->fromstr);
            }
            public void Poststr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromstr_value = stack.Pop();
                    context->fromstr = *cast<ValueObject<ustring>*>(fromstr_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromstr()
                {
                }
                public System.Text.Parsing.Parser* value;
                public ustring fromstr;
            }
        }

        public class CharSetRule : System.Text.Parsing.RuleParser
        {
            public CharSetRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
                AddLocalVariable(AttrOrVar(ToUtf32("bool"), ToUtf32("inverse")));
                AddLocalVariable(AttrOrVar(ToUtf32("ustring"), ToUtf32("s")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                ActionParser* a2ActionParser = GetAction(ToUtf32("A2"));
                a2ActionParser->SetAction(A2Action);
                NonterminalParser* charSetRangeNonterminalParser = GetNonterminal(ToUtf32("CharSetRange"));
                charSetRangeNonterminalParser->SetPost(PostCharSetRange);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.CharSetParser(context->s, context->inverse);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->inverse = true;
            }
            public void A2Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->s.Append(context->fromCharSetRange);
            }
            public void PostCharSetRange(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromCharSetRange_value = stack.Pop();
                    context->fromCharSetRange = *cast<ValueObject<ustring>*>(fromCharSetRange_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), inverse(), s(), fromCharSetRange()
                {
                }
                public System.Text.Parsing.Parser* value;
                public bool inverse;
                public ustring s;
                public ustring fromCharSetRange;
            }
        }

        public class CharSetRangeRule : System.Text.Parsing.RuleParser
        {
            public CharSetRangeRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("ustring"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ustring>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* firstNonterminalParser = GetNonterminal(ToUtf32("first"));
                firstNonterminalParser->SetPost(Postfirst);
                NonterminalParser* lastNonterminalParser = GetNonterminal(ToUtf32("last"));
                lastNonterminalParser->SetPost(Postlast);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(context->fromfirst);
                context->value.Append(u'-');
                context->value.Append(context->fromlast);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value.Append(context->fromfirst);
            }
            public void Postfirst(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromfirst_value = stack.Pop();
                    context->fromfirst = *cast<ValueObject<uchar>*>(fromfirst_value.Get());
                }
            }
            public void Postlast(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromlast_value = stack.Pop();
                    context->fromlast = *cast<ValueObject<uchar>*>(fromlast_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromfirst(), fromlast()
                {
                }
                public ustring value;
                public uchar fromfirst;
                public uchar fromlast;
            }
        }

        public class CharSetCharRule : System.Text.Parsing.RuleParser
        {
            public CharSetCharRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("uchar"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<uchar>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* escapeNonterminalParser = GetNonterminal(ToUtf32("escape"));
                escapeNonterminalParser->SetPost(Postescape);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = *matchBegin;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromescape;
            }
            public void Postescape(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromescape_value = stack.Pop();
                    context->fromescape = *cast<ValueObject<uchar>*>(fromescape_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromescape()
                {
                }
                public uchar value;
                public uchar fromescape;
            }
        }

        public class KeywordRule : System.Text.Parsing.RuleParser
        {
            public KeywordRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* keywordBodyNonterminalParser = GetNonterminal(ToUtf32("KeywordBody"));
                keywordBodyNonterminalParser->SetPost(PostKeywordBody);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromKeywordBody;
            }
            public void PostKeywordBody(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromKeywordBody_value = stack.Pop();
                    context->fromKeywordBody = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromKeywordBody_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromKeywordBody()
                {
                }
                public System.Text.Parsing.Parser* value;
                public System.Text.Parsing.Parser* fromKeywordBody;
            }
        }

        public class KeywordBodyRule : System.Text.Parsing.RuleParser
        {
            public KeywordBodyRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Identifier>"), ToUtf32("qid")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* strNonterminalParser = GetNonterminal(ToUtf32("str"));
                strNonterminalParser->SetPost(Poststr);
                NonterminalParser* continuationNonterminalParser = GetNonterminal(ToUtf32("continuation"));
                continuationNonterminalParser->SetPost(Postcontinuation);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->qid.Reset(context->fromcontinuation);
                context->value = new KeywordParser(context->fromstr, context->fromcontinuation->Name());
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new KeywordParser(context->fromstr);
            }
            public void Poststr(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromstr_value = stack.Pop();
                    context->fromstr = *cast<ValueObject<ustring>*>(fromstr_value.Get());
                }
            }
            public void Postcontinuation(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromcontinuation_value = stack.Pop();
                    context->fromcontinuation = *cast<ValueObject<Identifier*>*>(fromcontinuation_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), qid(), fromstr(), fromcontinuation()
                {
                }
                public System.Text.Parsing.Parser* value;
                public UniquePtr<Identifier> qid;
                public ustring fromstr;
                public Identifier* fromcontinuation;
            }
        }

        public class KeywordListRule : System.Text.Parsing.RuleParser
        {
            public KeywordListRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* keywordListBodyNonterminalParser = GetNonterminal(ToUtf32("KeywordListBody"));
                keywordListBodyNonterminalParser->SetPost(PostKeywordListBody);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromKeywordListBody;
            }
            public void PostKeywordListBody(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromKeywordListBody_value = stack.Pop();
                    context->fromKeywordListBody = *cast<ValueObject<System.Text.Parsing.Parser*>*>(fromKeywordListBody_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromKeywordListBody()
                {
                }
                public System.Text.Parsing.Parser* value;
                public System.Text.Parsing.Parser* fromKeywordListBody;
            }
        }

        public class KeywordListBodyRule : System.Text.Parsing.RuleParser
        {
            public KeywordListBodyRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
                AddLocalVariable(AttrOrVar(ToUtf32("UniquePtr<Identifier>"), ToUtf32("qid")));
                AddLocalVariable(AttrOrVar(ToUtf32("List<ustring>"), ToUtf32("keywords")));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* selectorNonterminalParser = GetNonterminal(ToUtf32("selector"));
                selectorNonterminalParser->SetPost(Postselector);
                NonterminalParser* stringArrayNonterminalParser = GetNonterminal(ToUtf32("StringArray"));
                stringArrayNonterminalParser->SetPre(PreStringArray);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new KeywordListParser(context->fromselector->Name(), context->keywords);
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->qid.Reset(context->fromselector);
            }
            public void Postselector(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromselector_value = stack.Pop();
                    context->fromselector = *cast<ValueObject<Identifier*>*>(fromselector_value.Get());
                }
            }
            public void PreStringArray(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                stack.Push(UniquePtr<Object>(new ValueObject<List<ustring>*>(&context->keywords)));
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), qid(), keywords(), fromselector()
                {
                }
                public System.Text.Parsing.Parser* value;
                public UniquePtr<Identifier> qid;
                public List<ustring> keywords;
                public Identifier* fromselector;
            }
        }

        public class RangeRule : System.Text.Parsing.RuleParser
        {
            public RangeRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                NonterminalParser* sNonterminalParser = GetNonterminal(ToUtf32("s"));
                sNonterminalParser->SetPost(Posts);
                NonterminalParser* eNonterminalParser = GetNonterminal(ToUtf32("e"));
                eNonterminalParser->SetPost(Poste);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.RangeParser(context->froms, context->frome);
            }
            public void Posts(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> froms_value = stack.Pop();
                    context->froms = *cast<ValueObject<uint>*>(froms_value.Get());
                }
            }
            public void Poste(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> frome_value = stack.Pop();
                    context->frome = *cast<ValueObject<uint>*>(frome_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), froms(), frome()
                {
                }
                public System.Text.Parsing.Parser* value;
                public uint froms;
                public uint frome;
            }
        }

        public class CodePointRule : System.Text.Parsing.RuleParser
        {
            public CodePointRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("uint"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<uint>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
                ActionParser* a1ActionParser = GetAction(ToUtf32("A1"));
                a1ActionParser->SetAction(A1Action);
                NonterminalParser* xNonterminalParser = GetNonterminal(ToUtf32("x"));
                xNonterminalParser->SetPost(Postx);
                NonterminalParser* dNonterminalParser = GetNonterminal(ToUtf32("d"));
                dNonterminalParser->SetPost(Postd);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromx;
            }
            public void A1Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = context->fromd;
            }
            public void Postx(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromx_value = stack.Pop();
                    context->fromx = *cast<ValueObject<uint>*>(fromx_value.Get());
                }
            }
            public void Postd(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    UniquePtr<Object> fromd_value = stack.Pop();
                    context->fromd = *cast<ValueObject<uint>*>(fromd_value.Get());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value(), fromx(), fromd()
                {
                }
                public uint value;
                public uint fromx;
                public uint fromd;
            }
        }

        public class EmptyRule : System.Text.Parsing.RuleParser
        {
            public EmptyRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.EmptyParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class SpaceRule : System.Text.Parsing.RuleParser
        {
            public SpaceRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.SpaceParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class AnyCharRule : System.Text.Parsing.RuleParser
        {
            public AnyCharRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.AnyCharParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class LetterRule : System.Text.Parsing.RuleParser
        {
            public LetterRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.LetterParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class DigitRule : System.Text.Parsing.RuleParser
        {
            public DigitRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.DigitParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class HexDigitRule : System.Text.Parsing.RuleParser
        {
            public HexDigitRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.HexDigitParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class UpperLetterRule : System.Text.Parsing.RuleParser
        {
            public UpperLetterRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.UpperLetterParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class LowerLetterRule : System.Text.Parsing.RuleParser
        {
            public LowerLetterRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.LowerLetterParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class TitleLetterRule : System.Text.Parsing.RuleParser
        {
            public TitleLetterRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.TitleLetterParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class ModifierLetterRule : System.Text.Parsing.RuleParser
        {
            public ModifierLetterRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.ModifierLetterParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class OtherLetterRule : System.Text.Parsing.RuleParser
        {
            public OtherLetterRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.OtherLetterParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class CasedLetterRule : System.Text.Parsing.RuleParser
        {
            public CasedLetterRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.CasedLetterParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class MarkRule : System.Text.Parsing.RuleParser
        {
            public MarkRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.MarkParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class NonspacingMarkRule : System.Text.Parsing.RuleParser
        {
            public NonspacingMarkRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.NonspacingMarkParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class SpacingMarkRule : System.Text.Parsing.RuleParser
        {
            public SpacingMarkRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.SpacingMarkParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class EnclosingMarkRule : System.Text.Parsing.RuleParser
        {
            public EnclosingMarkRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.EnclosingMarkParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class NumberRule : System.Text.Parsing.RuleParser
        {
            public NumberRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.NumberParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class DecimalNumberRule : System.Text.Parsing.RuleParser
        {
            public DecimalNumberRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.DecimalNumberParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class LetterNumberRule : System.Text.Parsing.RuleParser
        {
            public LetterNumberRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.LetterNumberParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class OtherNumberRule : System.Text.Parsing.RuleParser
        {
            public OtherNumberRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.OtherNumberParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class PunctuationRule : System.Text.Parsing.RuleParser
        {
            public PunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.PunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class ConnectorPunctuationRule : System.Text.Parsing.RuleParser
        {
            public ConnectorPunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.ConnectorPunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class DashPunctuationRule : System.Text.Parsing.RuleParser
        {
            public DashPunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.DashPunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class OpenPunctuationRule : System.Text.Parsing.RuleParser
        {
            public OpenPunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.OpenPunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class ClosePunctuationRule : System.Text.Parsing.RuleParser
        {
            public ClosePunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.ClosePunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class InitialPunctuationRule : System.Text.Parsing.RuleParser
        {
            public InitialPunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.InitialPunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class FinalPunctuationRule : System.Text.Parsing.RuleParser
        {
            public FinalPunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.FinalPunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class OtherPunctuationRule : System.Text.Parsing.RuleParser
        {
            public OtherPunctuationRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.OtherPunctuationParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class SymbolRule : System.Text.Parsing.RuleParser
        {
            public SymbolRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.SymbolParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class MathSymbolRule : System.Text.Parsing.RuleParser
        {
            public MathSymbolRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.MathSymbolParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class CurrencySymbolRule : System.Text.Parsing.RuleParser
        {
            public CurrencySymbolRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.CurrencySymbolParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class ModifierSymbolRule : System.Text.Parsing.RuleParser
        {
            public ModifierSymbolRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.ModifierSymbolParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class OtherSymbolRule : System.Text.Parsing.RuleParser
        {
            public OtherSymbolRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.OtherSymbolParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class SeparatorRule : System.Text.Parsing.RuleParser
        {
            public SeparatorRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.SeparatorParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class SpaceSeparatorRule : System.Text.Parsing.RuleParser
        {
            public SpaceSeparatorRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.SpaceSeparatorParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class LineSeparatorRule : System.Text.Parsing.RuleParser
        {
            public LineSeparatorRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.LineSeparatorParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class ParagraphSeparatorRule : System.Text.Parsing.RuleParser
        {
            public ParagraphSeparatorRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.ParagraphSeparatorParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class OtherRule : System.Text.Parsing.RuleParser
        {
            public OtherRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.OtherParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class ControlRule : System.Text.Parsing.RuleParser
        {
            public ControlRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.ControlParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class FormatRule : System.Text.Parsing.RuleParser
        {
            public FormatRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.FormatParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class SurrogateRule : System.Text.Parsing.RuleParser
        {
            public SurrogateRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.SurrogateParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class PrivateUseRule : System.Text.Parsing.RuleParser
        {
            public PrivateUseRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.PrivateUseParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class UnassignedRule : System.Text.Parsing.RuleParser
        {
            public UnassignedRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.UnassignedParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class GraphicRule : System.Text.Parsing.RuleParser
        {
            public GraphicRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.GraphicParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class BaseCharRule : System.Text.Parsing.RuleParser
        {
            public BaseCharRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.BaseCharParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class AlphabeticRule : System.Text.Parsing.RuleParser
        {
            public AlphabeticRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.AlphabeticParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class IdStartRule : System.Text.Parsing.RuleParser
        {
            public IdStartRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.IdStartParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public class IdContRule : System.Text.Parsing.RuleParser
        {
            public IdContRule(const ustring& name_, Scope* enclosingScope_, int id_, Parser* definition_) : base(name_, enclosingScope_, id_, definition_)
            {
                SetValueTypeName(ToUtf32("System.Text.Parsing.Parser*"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData)
            {
                parsingData->PushContext(Id(), new Context());
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, ParsingData* parsingData, bool matched)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<System.Text.Parsing.Parser*>(context->value)));
                }
                parsingData->PopContext(Id());
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction(ToUtf32("A0"));
                a0ActionParser->SetAction(A0Action);
            }
            public void A0Action(const uchar* matchBegin, const uchar* matchEnd, const Span& span, const string& fileName, ParsingData* parsingData, bool& pass)
            {
                Context* context = cast<Context*>(parsingData->GetContext(Id()));
                context->value = new System.Text.Parsing.IdContParser();
            }
            public class Context : System.Text.Parsing.Context
            {
                public Context() : value()
                {
                }
                public System.Text.Parsing.Parser* value;
            }
        }

        public override void GetReferencedGrammars()
        {
            ParsingDomain* pd = Domain();
            Grammar* grammar0 = pd->GetGrammar(ToUtf32("Code.IdentifierGrammar"));
            if (grammar0 == null)
            {
                grammar0 = new Code.IdentifierGrammar(pd);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = pd->GetGrammar(ToUtf32("System.Text.Parsing.stdlib"));
            if (grammar1 == null)
            {
                grammar1 = new System.Text.Parsing.stdlib(pd);
            }
            AddGrammarReference(grammar1);
            Grammar* grammar2 = pd->GetGrammar(ToUtf32("Syntax.ElementGrammar"));
            if (grammar2 == null)
            {
                grammar2 = new Syntax.ElementGrammar(pd);
            }
            AddGrammarReference(grammar2);
        }
        public override void CreateRules()
        {
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("char"), this, ToUtf32("System.Text.Parsing.stdlib.char")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("string"), this, ToUtf32("System.Text.Parsing.stdlib.string")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("escape"), this, ToUtf32("System.Text.Parsing.stdlib.escape")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("hexdword"), this, ToUtf32("System.Text.Parsing.stdlib.hexdword")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("uint"), this, ToUtf32("System.Text.Parsing.stdlib.uint")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("QualifiedId"), this, ToUtf32("Code.IdentifierGrammar.QualifiedId")));
            AddRuleLink(new System.Text.Parsing.RuleLink(ToUtf32("StringArray"), this, ToUtf32("ElementGrammar.StringArray")));
            AddRule(new PrimitiveRule(ToUtf32("Primitive"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.AlternativeParser(
                            new System.Text.Parsing.AlternativeParser(
                                new System.Text.Parsing.AlternativeParser(
                                    new System.Text.Parsing.AlternativeParser(
                                        new System.Text.Parsing.AlternativeParser(
                                            new System.Text.Parsing.AlternativeParser(
                                                new System.Text.Parsing.AlternativeParser(
                                                    new System.Text.Parsing.AlternativeParser(
                                                        new System.Text.Parsing.AlternativeParser(
                                                            new System.Text.Parsing.AlternativeParser(
                                                                new System.Text.Parsing.AlternativeParser(
                                                                    new System.Text.Parsing.AlternativeParser(
                                                                        new System.Text.Parsing.AlternativeParser(
                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                                    new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                                        new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                                            new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                                                new System.Text.Parsing.AlternativeParser(
                                                                                                                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                                                                                                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Char"), ToUtf32("Char"), 0)),
                                                                                                                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                                                                                                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("String"), ToUtf32("String"), 0))),
                                                                                                                                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                                                                                                                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("CharSet"), ToUtf32("CharSet"), 0))),
                                                                                                                                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A3"),
                                                                                                                                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("Keyword"), ToUtf32("Keyword"), 0))),
                                                                                                                                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A4"),
                                                                                                                                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("KeywordList"), ToUtf32("KeywordList"), 0))),
                                                                                                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A5"),
                                                                                                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Range"), ToUtf32("Range"), 0))),
                                                                                                                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A6"),
                                                                                                                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Empty"), ToUtf32("Empty"), 0))),
                                                                                                                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A7"),
                                                                                                                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("Space"), ToUtf32("Space"), 0))),
                                                                                                                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A8"),
                                                                                                                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("AnyChar"), ToUtf32("AnyChar"), 0))),
                                                                                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A9"),
                                                                                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Letter"), ToUtf32("Letter"), 0))),
                                                                                                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A10"),
                                                                                                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Digit"), ToUtf32("Digit"), 0))),
                                                                                                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A11"),
                                                                                                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("HexDigit"), ToUtf32("HexDigit"), 0))),
                                                                                                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A12"),
                                                                                                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("UpperLetter"), ToUtf32("UpperLetter"), 0))),
                                                                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A13"),
                                                                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("LowerLetter"), ToUtf32("LowerLetter"), 0))),
                                                                                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A14"),
                                                                                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("TitleLetter"), ToUtf32("TitleLetter"), 0))),
                                                                                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A15"),
                                                                                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("ModifierLetter"), ToUtf32("ModifierLetter"), 0))),
                                                                                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A16"),
                                                                                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("OtherLetter"), ToUtf32("OtherLetter"), 0))),
                                                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A17"),
                                                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("CasedLetter"), ToUtf32("CasedLetter"), 0))),
                                                                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A18"),
                                                                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Mark"), ToUtf32("Mark"), 0))),
                                                                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A19"),
                                                                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("NonspacingMark"), ToUtf32("NonspacingMark"), 0))),
                                                                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A20"),
                                                                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("EnclosingMark"), ToUtf32("EnclosingMark"), 0))),
                                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A21"),
                                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("SpacingMark"), ToUtf32("SpacingMark"), 0))),
                                                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A22"),
                                                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Number"), ToUtf32("Number"), 0))),
                                                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A23"),
                                                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("DecimalNumber"), ToUtf32("DecimalNumber"), 0))),
                                                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A24"),
                                                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("LetterNumber"), ToUtf32("LetterNumber"), 0))),
                                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A25"),
                                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("OtherNumber"), ToUtf32("OtherNumber"), 0))),
                                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A26"),
                                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Punctuation"), ToUtf32("Punctuation"), 0))),
                                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A27"),
                                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("ConnectorPunctuation"), ToUtf32("ConnectorPunctuation"), 0))),
                                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A28"),
                                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("DashPunctuation"), ToUtf32("DashPunctuation"), 0))),
                                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A29"),
                                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("OpenPunctuation"), ToUtf32("OpenPunctuation"), 0))),
                                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A30"),
                                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("ClosePunctuation"), ToUtf32("ClosePunctuation"), 0))),
                                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A31"),
                                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("InitialPunctuation"), ToUtf32("InitialPunctuation"), 0))),
                                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A32"),
                                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("FinalPunctuation"), ToUtf32("FinalPunctuation"), 0))),
                                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A33"),
                                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("OtherPunctuation"), ToUtf32("OtherPunctuation"), 0))),
                                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A34"),
                                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Symbol"), ToUtf32("Symbol"), 0))),
                                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A35"),
                                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("MathSymbol"), ToUtf32("MathSymbol"), 0))),
                                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A36"),
                                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("CurrencySymbol"), ToUtf32("CurrencySymbol"), 0))),
                                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A37"),
                                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("ModifierSymbol"), ToUtf32("ModifierSymbol"), 0))),
                                                                                new System.Text.Parsing.ActionParser(ToUtf32("A38"),
                                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("OtherSymbol"), ToUtf32("OtherSymbol"), 0))),
                                                                            new System.Text.Parsing.ActionParser(ToUtf32("A39"),
                                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("Separator"), ToUtf32("Separator"), 0))),
                                                                        new System.Text.Parsing.ActionParser(ToUtf32("A40"),
                                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("SpaceSeparator"), ToUtf32("SpaceSeparator"), 0))),
                                                                    new System.Text.Parsing.ActionParser(ToUtf32("A41"),
                                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("LineSeparator"), ToUtf32("LineSeparator"), 0))),
                                                                new System.Text.Parsing.ActionParser(ToUtf32("A42"),
                                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("ParagraphSeparator"), ToUtf32("ParagraphSeparator"), 0))),
                                                            new System.Text.Parsing.ActionParser(ToUtf32("A43"),
                                                                new System.Text.Parsing.NonterminalParser(ToUtf32("Other"), ToUtf32("Other"), 0))),
                                                        new System.Text.Parsing.ActionParser(ToUtf32("A44"),
                                                            new System.Text.Parsing.NonterminalParser(ToUtf32("Control"), ToUtf32("Control"), 0))),
                                                    new System.Text.Parsing.ActionParser(ToUtf32("A45"),
                                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Format"), ToUtf32("Format"), 0))),
                                                new System.Text.Parsing.ActionParser(ToUtf32("A46"),
                                                    new System.Text.Parsing.NonterminalParser(ToUtf32("Surrogate"), ToUtf32("Surrogate"), 0))),
                                            new System.Text.Parsing.ActionParser(ToUtf32("A47"),
                                                new System.Text.Parsing.NonterminalParser(ToUtf32("PrivateUse"), ToUtf32("PrivateUse"), 0))),
                                        new System.Text.Parsing.ActionParser(ToUtf32("A48"),
                                            new System.Text.Parsing.NonterminalParser(ToUtf32("Unassigned"), ToUtf32("Unassigned"), 0))),
                                    new System.Text.Parsing.ActionParser(ToUtf32("A49"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("Graphic"), ToUtf32("Graphic"), 0))),
                                new System.Text.Parsing.ActionParser(ToUtf32("A50"),
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("BaseChar"), ToUtf32("BaseChar"), 0))),
                            new System.Text.Parsing.ActionParser(ToUtf32("A51"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("Alphabetic"), ToUtf32("Alphabetic"), 0))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A52"),
                            new System.Text.Parsing.NonterminalParser(ToUtf32("IdStart"), ToUtf32("IdStart"), 0))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A53"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("IdCont"), ToUtf32("IdCont"), 0)))));
            AddRule(new CharRule(ToUtf32("Char"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("chr"), ToUtf32("char"), 0))));
            AddRule(new StringRule(ToUtf32("String"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.NonterminalParser(ToUtf32("str"), ToUtf32("string"), 0))));
            AddRule(new CharSetRule(ToUtf32("CharSet"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.TokenParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.CharParser('['),
                                    new System.Text.Parsing.OptionalParser(
                                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                            new System.Text.Parsing.CharParser('^')))),
                                new System.Text.Parsing.KleeneStarParser(
                                    new System.Text.Parsing.ActionParser(ToUtf32("A2"),
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("CharSetRange"), ToUtf32("CharSetRange"), 0)))),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.CharParser(']')))))));
            AddRule(new CharSetRangeRule(ToUtf32("CharSetRange"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("first"), ToUtf32("CharSetChar"), 0),
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser('-'),
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("last"), ToUtf32("CharSetChar"), 0))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                            new System.Text.Parsing.EmptyParser())))));
            AddRule(new CharSetCharRule(ToUtf32("CharSetChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.CharSetParser(ToUtf32("\\]"), true)),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("escape"), ToUtf32("escape"), 0)))));
            AddRule(new KeywordRule(ToUtf32("Keyword"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.KeywordParser(ToUtf32("keyword")),
                                new System.Text.Parsing.ExpectationParser(
                                    new System.Text.Parsing.CharParser('('))),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("KeywordBody"), ToUtf32("KeywordBody"), 0))),
                        new System.Text.Parsing.ExpectationParser(
                            new System.Text.Parsing.CharParser(')'))))));
            AddRule(new KeywordBodyRule(ToUtf32("KeywordBody"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.SequenceParser(
                    new System.Text.Parsing.NonterminalParser(ToUtf32("str"), ToUtf32("string"), 0),
                    new System.Text.Parsing.AlternativeParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.CharParser(','),
                            new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                                new System.Text.Parsing.ExpectationParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("continuation"), ToUtf32("QualifiedId"), 0)))),
                        new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                            new System.Text.Parsing.EmptyParser())))));
            AddRule(new KeywordListRule(ToUtf32("KeywordList"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.KeywordParser(ToUtf32("keyword_list")),
                                new System.Text.Parsing.ExpectationParser(
                                    new System.Text.Parsing.CharParser('('))),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("KeywordListBody"), ToUtf32("KeywordListBody"), 0))),
                        new System.Text.Parsing.ExpectationParser(
                            new System.Text.Parsing.CharParser(')'))))));
            AddRule(new KeywordListBodyRule(ToUtf32("KeywordListBody"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                                new System.Text.Parsing.ExpectationParser(
                                    new System.Text.Parsing.NonterminalParser(ToUtf32("selector"), ToUtf32("QualifiedId"), 0))),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.CharParser(','))),
                        new System.Text.Parsing.ExpectationParser(
                            new System.Text.Parsing.NonterminalParser(ToUtf32("StringArray"), ToUtf32("StringArray"), 1))))));
            AddRule(new RangeRule(ToUtf32("Range"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.SequenceParser(
                        new System.Text.Parsing.SequenceParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.SequenceParser(
                                    new System.Text.Parsing.SequenceParser(
                                        new System.Text.Parsing.KeywordParser(ToUtf32("range")),
                                        new System.Text.Parsing.ExpectationParser(
                                            new System.Text.Parsing.CharParser('('))),
                                    new System.Text.Parsing.ExpectationParser(
                                        new System.Text.Parsing.NonterminalParser(ToUtf32("s"), ToUtf32("CodePoint"), 0))),
                                new System.Text.Parsing.CharParser(',')),
                            new System.Text.Parsing.ExpectationParser(
                                new System.Text.Parsing.NonterminalParser(ToUtf32("e"), ToUtf32("CodePoint"), 0))),
                        new System.Text.Parsing.ExpectationParser(
                            new System.Text.Parsing.CharParser(')'))))));
            AddRule(new CodePointRule(ToUtf32("CodePoint"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.AlternativeParser(
                    new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                        new System.Text.Parsing.TokenParser(
                            new System.Text.Parsing.SequenceParser(
                                new System.Text.Parsing.CharParser('x'),
                                new System.Text.Parsing.NonterminalParser(ToUtf32("x"), ToUtf32("hexdword"), 0)))),
                    new System.Text.Parsing.ActionParser(ToUtf32("A1"),
                        new System.Text.Parsing.NonterminalParser(ToUtf32("d"), ToUtf32("uint"), 0)))));
            AddRule(new EmptyRule(ToUtf32("Empty"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("empty")))));
            AddRule(new SpaceRule(ToUtf32("Space"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("space")))));
            AddRule(new AnyCharRule(ToUtf32("AnyChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("anychar")))));
            AddRule(new LetterRule(ToUtf32("Letter"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("letter")))));
            AddRule(new DigitRule(ToUtf32("Digit"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("digit")))));
            AddRule(new HexDigitRule(ToUtf32("HexDigit"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("hexdigit")))));
            AddRule(new UpperLetterRule(ToUtf32("UpperLetter"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("upper_letter")))));
            AddRule(new LowerLetterRule(ToUtf32("LowerLetter"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("lower_letter")))));
            AddRule(new TitleLetterRule(ToUtf32("TitleLetter"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("title_letter")))));
            AddRule(new ModifierLetterRule(ToUtf32("ModifierLetter"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("modifier_letter")))));
            AddRule(new OtherLetterRule(ToUtf32("OtherLetter"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("other_letter")))));
            AddRule(new CasedLetterRule(ToUtf32("CasedLetter"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("cased_letter")))));
            AddRule(new MarkRule(ToUtf32("Mark"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("mark")))));
            AddRule(new NonspacingMarkRule(ToUtf32("NonspacingMark"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("nonspacing_mark")))));
            AddRule(new SpacingMarkRule(ToUtf32("SpacingMark"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("spacing_mark")))));
            AddRule(new EnclosingMarkRule(ToUtf32("EnclosingMark"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("enclosing_mark")))));
            AddRule(new NumberRule(ToUtf32("Number"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("number")))));
            AddRule(new DecimalNumberRule(ToUtf32("DecimalNumber"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("decimal_number")))));
            AddRule(new LetterNumberRule(ToUtf32("LetterNumber"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("letter_number")))));
            AddRule(new OtherNumberRule(ToUtf32("OtherNumber"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("other_number")))));
            AddRule(new PunctuationRule(ToUtf32("Punctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("punctuation")))));
            AddRule(new ConnectorPunctuationRule(ToUtf32("ConnectorPunctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("connector_punctuation")))));
            AddRule(new DashPunctuationRule(ToUtf32("DashPunctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("dash_punctuation")))));
            AddRule(new OpenPunctuationRule(ToUtf32("OpenPunctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("open_punctuation")))));
            AddRule(new ClosePunctuationRule(ToUtf32("ClosePunctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("close_punctuation")))));
            AddRule(new InitialPunctuationRule(ToUtf32("InitialPunctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("initial_punctuation")))));
            AddRule(new FinalPunctuationRule(ToUtf32("FinalPunctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("final_punctuation")))));
            AddRule(new OtherPunctuationRule(ToUtf32("OtherPunctuation"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("other_punctuation")))));
            AddRule(new SymbolRule(ToUtf32("Symbol"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("symbol")))));
            AddRule(new MathSymbolRule(ToUtf32("MathSymbol"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("math_symbol")))));
            AddRule(new CurrencySymbolRule(ToUtf32("CurrencySymbol"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("currency_symbol")))));
            AddRule(new ModifierSymbolRule(ToUtf32("ModifierSymbol"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("modifier_symbol")))));
            AddRule(new OtherSymbolRule(ToUtf32("OtherSymbol"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("other_symbol")))));
            AddRule(new SeparatorRule(ToUtf32("Separator"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("separator")))));
            AddRule(new SpaceSeparatorRule(ToUtf32("SpaceSeparator"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("space_separator")))));
            AddRule(new LineSeparatorRule(ToUtf32("LineSeparator"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("line_separator")))));
            AddRule(new ParagraphSeparatorRule(ToUtf32("ParagraphSeparator"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("paragraph_separator")))));
            AddRule(new OtherRule(ToUtf32("Other"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("other")))));
            AddRule(new ControlRule(ToUtf32("Control"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("control")))));
            AddRule(new FormatRule(ToUtf32("Format"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("format")))));
            AddRule(new SurrogateRule(ToUtf32("Surrogate"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("surrogate")))));
            AddRule(new PrivateUseRule(ToUtf32("PrivateUse"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("private_use")))));
            AddRule(new UnassignedRule(ToUtf32("Unassigned"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("unassigned")))));
            AddRule(new GraphicRule(ToUtf32("Graphic"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("graphic")))));
            AddRule(new BaseCharRule(ToUtf32("BaseChar"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("basechar")))));
            AddRule(new AlphabeticRule(ToUtf32("Alphabetic"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("alphabetic")))));
            AddRule(new IdStartRule(ToUtf32("IdStart"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("idstart")))));
            AddRule(new IdContRule(ToUtf32("IdCont"), GetScope(), Domain()->GetNextRuleId(),
                new System.Text.Parsing.ActionParser(ToUtf32("A0"),
                    new System.Text.Parsing.KeywordParser(ToUtf32("idcont")))));
        }
    }
} // Syntax
