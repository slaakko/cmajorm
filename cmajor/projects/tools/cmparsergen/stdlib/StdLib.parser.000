// =================================
// Copyright (c) 2018 Seppo Laakko
// Distributed under the MIT license
// =================================
 
using System;

namespace System.Text.Parsing
{
    grammar stdlib
    {
        spaces
            ::= space+
            ;

        newline
            ::= "\r\n" | "\n" | "\r"
            ;

        comment
            ::= line_comment
            |   block_comment
            ;

        line_comment
            ::= "//" [^\r\n]* newline
            ;

        block_comment
            ::= "/*" (string | char | (anychar - "*/"))* "*/"
            ;

        spaces_and_comments
            ::= (space | comment)+
            ;

        digit_sequence
            ::= token(digit+)
            ;

        sign
            ::= '+'
            |   '-'
            ;

        sbyte : sbyte
            ::= token(sign? digit_sequence)
            {
                value = ParseSByte(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        byte : byte
            ::= token(digit_sequence)
            {
                value = ParseByte(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        short : short
            ::= token(sign? digit_sequence)
            {
                value = ParseShort(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        ushort : ushort
            ::= token(digit_sequence)
            {
                value = ParseUShort(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        int : int
            ::= token(sign? digit_sequence)
            {
                value = ParseInt(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        uint : uint
            ::= token(digit_sequence)
            {
                value = ParseUInt(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        long : long
            ::= token(sign? digit_sequence)
            {
                value = ParseLong(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        ulong : ulong
            ::= token(digit_sequence)
            {
                value = ParseULong(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        hexbyte : byte
            ::= token(hexdigit+)
            {
                value = ParseHexByte(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        hexword : ushort
            ::= token(hexdigit+)
            {
                value = ParseHexUShort(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        hexdword : uint
            ::= token(hexdigit+)
            {
                value = ParseHexUInt(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        hexqword : ulong
            ::= token(hexdigit+)
            {
                value = ParseHexULong(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        hex : ulong
            ::= hexqword
            {
                value = hexqword;
            }
            ;

        hex_literal : ulong
            ::= token(("0x" | "0X") hex!)
            {
                value = hex;
            }
            ;

        octal_digit : int
            ::= [0-7]
            {
                value = cast<int>(*matchBegin) - cast<int>(u'0');
            }
            ;

        float : float
            ::= token(sign? fractional_real exponent_part? | sign? digit_sequence exponent_part)
            {
                value = ParseFloat(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        double : double
            ::= token(sign? fractional_real exponent_part? | sign? digit_sequence exponent_part)
            {
                value = ParseDouble(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;

        ureal : double
            ::= token(fractional_real exponent_part? | digit_sequence exponent_part)
            {
                value = ParseDouble(ToUtf8(ustring(matchBegin, matchEnd)));
            }
            ;


        fractional_real
            ::= token(digit_sequence? '.' digit_sequence)
            |   token(digit_sequence '.')
            ;

        exponent_part
            ::= token([eE] sign? digit_sequence)
            ;

        num : double
            ::= double:r{ value = r; }
            |   int:i{ value = i; }
            ;

        bool : bool
            ::= keyword("true"){ value = true; }
            |   keyword("false"){ value = false; }
            ;

        identifier : ustring
            ::= token(idstart idcont*)
            {
                value = ustring(matchBegin, matchEnd);
            }
            ;

        qualified_id : ustring
            ::= token(identifier:first ('.' identifier:rest)*)
            {
                value = ustring(matchBegin, matchEnd);
            }
            ;

        escape : uchar
            ::= token('\\'
            (   [xX] hexdword:x{ value = cast<uchar>(x); }
            |   (octal_digit:o1 octal_digit:o2 octal_digit:o3){ value = cast<uchar>(64 * o1 + 8 * o2 + o3); }
            |   [dD] uint:d{ value = cast<uchar>(d); }
            |   [^dDxX]
            {
                uchar c = *matchBegin;
                switch (c)
                {
                    case u'a': value = u'\a'; break;
                    case u'b': value = u'\b'; break;
                    case u'f': value = u'\f'; break;
                    case u'n': value = u'\n'; break;
                    case u'r': value = u'\r'; break;
                    case u't': value = u'\t'; break;
                    case u'v': value = u'\v'; break;
                    case u'0': value = u'\0'; break;
                    default: value = c; break;
                }
            }
            )   )
            ;

        char : uchar
            ::= token('\''
            (   [^\\\r\n]{ value = *matchBegin; }
            |   escape{ value = escape; }
            )   '\''!)
            ;

        string : ustring
            ::= token('"'
            (   ([^"\\\r\n]+){ value.Append(ustring(matchBegin, matchEnd)); }
            |   escape{ value.Append(escape); }
            )* '"'!)
            ;
    }
}
