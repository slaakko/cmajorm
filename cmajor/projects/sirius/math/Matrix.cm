// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace Sirius.Math
{
    public class Matrix
    {
        public static nothrow Matrix Identity()
        {
            Matrix identity;
            identity[0][0] = 1;
            identity[1][1] = 1;
            identity[2][2] = 1;
            identity[3][3] = 1;
            return identity;
        }
        public nothrow const float[4]& operator[](int i) const
        {
            return m[i];
        }
        public nothrow float[4]& operator[](int i)
        {
            return m[i];
        }
        private float[4][4] m;
    }

    public TextWriter& operator<<(TextWriter& w, const Matrix& m)
    {
        w << "[";
        for (int i = 0; i < 4; ++i)
        {
            w << "(";
            for (int j = 0; j < 4; ++j)
            {
                if (j > 0)
                {
                    w << ", ";
                }
                w << m[i][j];
            }
            w << ")";
            if (i < 3)
            {
                w << endl();
            }
        }
        return w << "]" << endl();
    }

    public nothrow Matrix operator+(const Matrix& left, const Matrix& right)
    {
        Matrix s;
        s[0][0] = left[0][0] + right[0][0];
        s[0][1] = left[0][1] + right[0][1];
        s[0][2] = left[0][2] + right[0][2];
        s[0][3] = left[0][3] + right[0][3];
        s[1][0] = left[1][0] + right[1][0];
        s[1][1] = left[1][1] + right[1][1];
        s[1][2] = left[1][2] + right[1][2];
        s[1][3] = left[1][3] + right[1][3];
        s[2][0] = left[2][0] + right[2][0];
        s[2][1] = left[2][1] + right[2][1];
        s[2][2] = left[2][2] + right[2][2];
        s[2][3] = left[2][3] + right[2][3];
        s[3][0] = left[3][0] + right[3][0];
        s[3][1] = left[3][1] + right[3][1];
        s[3][2] = left[3][2] + right[3][2];
        s[3][3] = left[3][3] + right[3][3];
        return s;
    }

    public nothrow Matrix operator-(const Matrix& left, const Matrix& right)
    {
        Matrix s;
        s[0][0] = left[0][0] - right[0][0];
        s[0][1] = left[0][1] - right[0][1];
        s[0][2] = left[0][2] - right[0][2];
        s[0][3] = left[0][3] - right[0][3];
        s[1][0] = left[1][0] - right[1][0];
        s[1][1] = left[1][1] - right[1][1];
        s[1][2] = left[1][2] - right[1][2];
        s[1][3] = left[1][3] - right[1][3];
        s[2][0] = left[2][0] - right[2][0];
        s[2][1] = left[2][1] - right[2][1];
        s[2][2] = left[2][2] - right[2][2];
        s[2][3] = left[2][3] - right[2][3];
        s[3][0] = left[3][0] - right[3][0];
        s[3][1] = left[3][1] - right[3][1];
        s[3][2] = left[3][2] - right[3][2];
        s[3][3] = left[3][3] - right[3][3];
        return s;
    }

    public nothrow Vector operator*(const Matrix& m, const Vector& v)
    {
        return Vector(
            m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z + m[0][3] * v.w,
            m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z + m[1][3] * v.w,
            m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z + m[2][3] * v.w,
            m[3][0] * v.x + m[3][1] * v.y + m[3][2] * v.z + m[3][3] * v.w);
    }

    public nothrow Matrix operator*(const Matrix& left, const Matrix& right)
    {
        Matrix result;
        for (int i = 0; i < 4; ++i)
        {
            for (int j = 0; j < 4; ++j)
            {
                float s = 0;
                for (int k = 0; k < 4; ++k)
                {
                    s = s + left[i][k] * right[k][j];
                }
                result[i][j] = s;
            }
        }
        return result;
    }
}

