using System;
using System.Collections;
using Sirius.Math;

void testScale()
{
    Matrix sm = Scaling(2, 3, 4, 1, 1, 1);
    Console.Out() << sm << endl();
    Vector v(2, 2, 2);
    Vector u = sm * v;
    Console.Out() << u << endl() << endl();
}

void testYawAndPitch()
{
    Matrix rm = Rotation(0, cast<float>(DegToRad(90)), cast<float>(DegToRad(90)));
    Console.Out() << rm << endl();
    Vector v(1, 1, 1);
    Vector u = rm * v;
    Console.Out() << u << endl() << endl();
}

void testView()
{
    Matrix cm = View(cast<float>(DegToRad(180.0f)), cast<float>(DegToRad(0.0f)), cast<float>(DegToRad(180.0f)), -10.0f, 0, 0);
    Console.Out() << cm << endl();
    Vector v1(0, 0, 0);
    Vector vc1 = cm * v1;
    Console.Out() << vc1 << endl();
    Vector v2(0, 1, 0);
    Vector vc2 = cm * v2;
    Console.Out() << vc2 << endl() << endl();
}

void testRotate()
{
    Matrix rm = Rotation(0.0f, cast<float>(1 / Sqrt(2)), cast<float>(1 / Sqrt(2)), cast<float>(DegToRad(180.0f)));
    Console.Out() << rm << endl();
    Vector v(1, 0, 0);
    Vector u = rm * v;
    Console.Out() << u << endl() << endl();;
}

void testProject()
{
    Matrix pm = Projection(20);
    Console.Out() << pm << endl();
    List<Vector> vertices;
    vertices.Add(Vector(0, 0, 10));
    vertices.Add(Vector(10, 0, 10));
    vertices.Add(Vector(10, 10, 10));
    vertices.Add(Vector(0, 10, 10));
    vertices.Add(Vector(0, 0, 20));
    vertices.Add(Vector(10, 0, 20));
    vertices.Add(Vector(10, 10, 20));
    vertices.Add(Vector(0, 10, 20));
    for (const Vector& v : vertices)
    {
        Vector vp = pm * v;
        float xp = -vp.x / vp.w;
        float yp = vp.y / vp.w;
        Console.Out() << "(" << xp << ", " << yp << ")" << endl();
    }
    Console.Out() << endl();
}

void testViewLookAt()
{
    Matrix cm = View(Vector(0, 0, 20), Vector(0, 0, 0), J());
    Console.Out() << cm << endl();
}

int main()
{
    try
    {
        testScale();
        testYawAndPitch();
        testView();
        testRotate();
        testProject();
        testViewLookAt();
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
