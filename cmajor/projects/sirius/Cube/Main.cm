// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Sirius.Graphics;
using Sirius.Math;

public enum DrawKind
{
    wireFrame, shading
}

class MainWindow : System.Windows.Window
{
    public nothrow MainWindow() :
        base("Cube"),
        whitePen(System.Windows.Color.White()),
        camera(Sirius.Math.Vector(0, 0, 0), Sirius.Math.Vector(0, 0, 0), J(), 200.0f),
        screen(800, 600),
        frame(0),
        frameIntervalMs(40u),
        minUs(MaxValue<int>()),
        maxUs(MinValue<int>()),
        drawKind(DrawKind.shading),
        zbuffer(new ZBuffer(screen.width, screen.height))
    {
        SetBackgroundColor(Color.Black());
        SetSize(Size(screen.width, screen.height));
        UniquePtr<Cube> cube(new Cube(100, 0, 0, 0, Sirius.Math.Vector(0, 0, 0)));
        cube->SetLightingFactors(20, 40, 20, 10);
        cube->TransformWorld();
        this->cube = cube.Get();
        scene.AddObject(cube.Release());
        UniquePtr<Grid> grid(new Grid(8, 400, 0, cast<float>(PI() / 2), 0, Sirius.Math.Vector(0, -100, 0)));
        grid->TransformWorld();
        scene.AddObject(grid.Release());
        bool debug = true;
        if (debug)
        {
            camera.Move(Sirius.Math.Vector(0, 0, 256), camera.PointAt(), camera.Up(), camera.Distance());
            scene.View(camera, screen);
            Invalidate();
        }
        else
        {
            SetTimer(0u, frameIntervalMs);
        }
    }
    protected override void OnSizeChanged(uint windowState)
    {
        base->OnSizeChanged(windowState);
        Size size = GetSize();
        screen.width = size.w;
        screen.height = size.h;
        zbuffer.Reset(new ZBuffer(screen.width, screen.height));
    }
    protected override void OnTimer(TimerEventArgs& args)
    {
        if (frame < 200)
        {
            TimePoint start = Now();
            float angle = 50 - 360.0f * frame / 100.0f;
            float t = cast<float>(DegToRad(angle));
            float radius = 256;
            float x = cast<float>(radius * Cos(t));
            float y = 100;
            float z = cast<float>(radius * Sin(t));
            camera.Move(Sirius.Math.Vector(x, y, z), camera.PointAt(), camera.Up(), camera.Distance());
            scene.View(camera, screen);
            TimePoint end = Now();
            Duration duration = end - start;
            int us = cast<int>(duration.Microseconds());
            if (us > maxUs)
            {
                maxUs = us;
            }
            if (us < minUs)
            {
                minUs = us;
            }
            ++frame;
            Invalidate();
        }
        else
        {
            KillTimer(0u);
        }
    }
    protected override void OnPaint(PaintEventArgs& args)
    {
        BufferPtr bufferPtr = BufferPool.Instance().GetBufferPtr();
        switch (drawKind)
        {
            case DrawKind.wireFrame: scene.Draw(whitePen, System.Windows.Color.Black(), bufferPtr->BitmapGraphics()); break;
            case DrawKind.shading: scene.Paint(System.Windows.Color.Black(), bufferPtr->GetBitmap(), bufferPtr->BitmapGraphics(), *zbuffer, camera, screen); break;
        }
        bufferPtr->Draw(args.graphics);
    }
    protected override void OnKeyPress(KeyPressEventArgs& args)
    {
        base->OnKeyPress(args);
        if (!args.handled)
        {
            if (args.keyChar == w't')
            {
                frame = 0;
                maxUs = MinValue<int>();
                minUs = MaxValue<int>();
                SetTimer(0u, frameIntervalMs);
            }
            else if (args.keyChar == w'm')
            {
                MessageBox.Show("max=" + ToString(maxUs) + ", min=" + ToString(minUs), "Map duration");
            }
        }
    }
    private System.Windows.Pen whitePen;
    private Camera camera;
    private Screen screen;
    private Scene scene;
    private Cube* cube;
    private int frame;
    private uint frameIntervalMs;
    private int minUs;
    private int maxUs;
    private DrawKind drawKind;
    private UniquePtr<ZBuffer> zbuffer;
}

int main()
{
    try
    {
        MainWindow mainWindow;
        return System.Windows.Application.Run(mainWindow);
    }
    catch (const Exception& ex)
    {
        System.Windows.MessageBox.Show(ex.Message());
        return 1;
    }
    return 0;
}

