// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using Sirius.Graphics;
using Sirius.Math;

public enum DrawKind
{
    wireframe, shading
}

class MainWindow : System.Windows.Window
{
    public nothrow MainWindow() :
        base("Sphere"),
        whitePen(System.Windows.Color.White()),
        lightSource(Sirius.Math.Vector(200, 2000, 200), 1),
        camera(Sirius.Math.Vector(0, 0, 0), Sirius.Math.Vector(0, 0, 0), J(), 200.0f),
        screen(800, 600),
        frame(0),
        frameIntervalMs(40u),
        minUs(MaxValue<int>()),
        maxUs(MinValue<int>()),
        drawKind(DrawKind.wireframe),
        zbuffer(new ZBuffer(screen.width, screen.height)),
        shadingAlgorithm(ShadingAlgorithm.gouraudShading)
    {
        SetBackgroundColor(Color.Black());
        SetSize(Size(screen.width, screen.height));
        UniquePtr<Sphere> sphere(new Sphere(16, 16, 100, Sirius.Math.Vector(0, 50, 0)));
        //UniquePtr<Sphere> sphere(new Sphere(4, 4, 100, Sirius.Math.Vector(0, 50, 0)));
        sphere->SetLightingFactors(0.2f, 0.6f, 0.2f, 10);
        sphere->SetColor(System.Windows.Color.Red());
        sphere->TransformWorld();
        scene.AddObject(sphere.Release());
        UniquePtr<Grid> grid(new Grid(8, 400, 0, cast<float>(PI() / 2), 0, Sirius.Math.Vector(0, -100, 0)));
        grid->TransformWorld();
        scene.AddObject(grid.Release());
        Invalidate();
    }
    protected override void OnSizeChanged(uint windowState)
    {
        base->OnSizeChanged(windowState);
        Size size = GetSize();
        screen.width = size.w;
        screen.height = size.h;
    }
    protected override void OnTimer(TimerEventArgs& args)
    {
        Invalidate();
        Update();
    }
    protected override void OnPaint(PaintEventArgs& args)
    {
        if (!bufferPtr.HasBuffer())
        {
            DrawFrame();
        }
        bufferPtr->Draw(args.graphics);
        ++frame;
        DrawFrame();
    }
    private void DrawFrame()
    {
        if (frame < 200)
        {
            TimePoint start = Now();
            float angle = 50 - 360.0f * frame / 100.0f;
            float t = cast<float>(DegToRad(angle));
            float radius = 256;
            float x = cast<float>(radius * Cos(t));
            float y = 100;
            float z = cast<float>(radius * Sin(t));
            camera.Move(Sirius.Math.Vector(x, y, z), camera.PointAt(), camera.Up(), camera.Distance());
            scene.View(camera, lightSource, screen);
            if (!bufferPtr.HasBuffer())
            {
                bufferPtr = BufferPool.Instance().GetBufferPtr();
            }
            switch (drawKind)
            {
                case DrawKind.wireframe:
                {
                    scene.Draw(whitePen, System.Windows.Color.Black(), bufferPtr->BitmapGraphics());
                    break;
                }
                case DrawKind.shading:
                {
                    scene.Paint(System.Windows.Color.Black(), bufferPtr->GetBitmap(), bufferPtr->BitmapGraphics(), *zbuffer, lightSource, camera, screen,
                        shadingAlgorithm, null);
                    break;
                }
            }
            TimePoint end = Now();
            Duration duration = end - start;
            int us = cast<int>(duration.Microseconds());
            if (us > maxUs)
            {
                maxUs = us;
            }
            if (us < minUs)
            {
                minUs = us;
            }
            int ms = cast<int>(duration.Milliseconds());
            uint waitMs = cast<uint>(Max(cast<int>(0), frameIntervalMs - ms));
            SetTimer(0u, waitMs);
        }
        else
        {
            KillTimer(0u);
        }
    }
    protected override void OnKeyPress(KeyPressEventArgs& args)
    {
        base->OnKeyPress(args);
        if (!args.handled)
        {
            switch (args.keyChar)
            {
                case w't':
                {
                    frame = 0;
                    maxUs = MinValue<int>();
                    minUs = MaxValue<int>();
                    DrawFrame();
                    break;
                }
                case w'm':
                {
                    MessageBox.Show("max=" + ToString(maxUs) + ", min=" + ToString(minUs), "Durations");
                    break;
                }
                case w'w':
                {
                    drawKind = DrawKind.wireframe;
                    break;
                }
                case w's':
                {
                    drawKind = DrawKind.shading;
                    break;
                }
                case w'g':
                {
                    shadingAlgorithm = ShadingAlgorithm.gouraudShading;
                    break;
                }
                case w'p':
                {
                    shadingAlgorithm = ShadingAlgorithm.phongShading;
                    break;
                }
            }
        }
    }
    private System.Windows.Pen whitePen;
    private BufferPtr bufferPtr;
    private PointLightSource lightSource;
    private Camera camera;
    private Screen screen;
    private Scene scene;
    private int frame;
    private int frameIntervalMs;
    private int minUs;
    private int maxUs;
    private DrawKind drawKind;
    private UniquePtr<ZBuffer> zbuffer;
    private ShadingAlgorithm shadingAlgorithm;
}

int main()
{
    try
    {
        MainWindow mainWindow;
        return System.Windows.Application.Run(mainWindow);
    }
    catch (const Exception& ex)
    {
        System.Windows.MessageBox.Show(ex.Message());
        return 1;
    }
    return 0;
}


