// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace Sirius.Graphics
{
    public class Cone : PolygonMeshObject
    {
        public nothrow Cone() : this(4)
        {
        }
        public explicit nothrow Cone(int count) : this(count, 1)
        {
        }
        public nothrow Cone(int count, float height) : this(count, height, 1)
        {
        }
        public nothrow Cone(int count, float height, float radius) : this(count, height, radius, 0, 0, 0)
        {
        }
        public nothrow Cone(int count, float height, float radius, float roll, float pitch, float yaw) :
            this(count, height, radius, roll, pitch, yaw, Vector(0, 0, 0))
        {
        }
        public nothrow Cone(int count, float height, float radius, float roll, float pitch, float yaw, const Vector& location) : base()
        {
            AddVertex(Vertex(Vector(0, 1, 0)));
            float t = cast<float>(2 * PI() / count);
            for (int i = 0; i < count; ++i)
            {
                float angle = t * i;
                float x = cast<float>(Cos(angle));
                float y = 0;
                float z = cast<float>(Sin(angle));
                AddVertex(Vertex(Vector(x, y, z)));
                AddEdge(Edge(0, i + 1));
                if (i < count - 1)
                {
                    AddEdge(Edge(i + 1, i + 2));
                }
                else
                {
                    AddEdge(Edge(i + 1, 1));
                }
            }
            Matrix moveToOrigin = Translation(0, -0.5f, 0);
            Matrix scaling = Scaling(radius, height, radius);
            Matrix orientation = Rotation(roll, pitch, yaw);
            Matrix moveToLocation = Translation(location.x, location.y, location.z);
            Matrix transformation = moveToLocation * orientation * scaling * moveToOrigin;
            TransformLocal(transformation);
        }
        public nothrow Cone(const Cone& that) : base(that.Vertices(), that.Edges(), that.Polygons(), that.GetColor())
        {
        }
        public override nothrow Object* Clone() const
        {
            return new Cone(*this);
        }
    }
}

