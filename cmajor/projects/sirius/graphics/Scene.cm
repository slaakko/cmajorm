// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;

namespace Sirius.Graphics
{
    public class Scene : CompositeObject
    {
        public nothrow Scene() : base()
        {
        }
        public nothrow Scene(const Scene& that) : base(that.CloneComponents())
        {
        }
        public nothrow override Object* Clone() const
        {
            return new Scene(*this);
        }
        public nothrow inline void AddObject(Object* object)
        {
            object->id = cast<int>(Components().Count());
            AddComponent(object);
        }
        public void Draw(const System.Windows.Pen& pen, const System.Windows.Color& backgroundColor, System.Windows.Graphics& graphics)
        {
            graphics.Clear(backgroundColor);
            Draw(pen, graphics);
        }
        public void Paint(const System.Windows.Color& backgroundColor, System.Windows.Bitmap& bitmap, System.Windows.Graphics& graphics,
            ZBuffer& zbuffer, const LightSource& lightSource, const Camera& camera, const Screen& screen, ShadingAlgorithm shadingAlgorithm, LogWriter* log)
        {
            graphics.Clear(backgroundColor);
            zbuffer.Clear();
            Paint(bitmap, zbuffer, lightSource, camera, screen, shadingAlgorithm, log);
            if (log != null && !Components().IsEmpty())
            {
                Components()[0]->Write(log->GetStreamWriter());
            }
        }
    }
}
