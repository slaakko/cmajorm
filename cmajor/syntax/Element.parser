// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/parsing/Scope.hpp>
[hpp]#include <cmajor/parsing/Grammar.hpp>
[cpp]#include <cmajor/parsing/Rule.hpp>
[cpp]#include <cmajor/codedom/Type.hpp>
[cpp]#include <cmajor/code/Declarator.hpp>

namespace cmajor.syntax
{
    grammar Element
    {
        using stdlib.qualified_id;
        using stdlib.identifier;
        using stdlib.string;
        using cmajor.code.Declarator.TypeId;
        using cmajor.code.Declarator.Declarator;

        RuleLink(cmajor::parsing::Grammar* grammar)
                            ::= (keyword("using") identifier:aliasName '=' qualified_id:ruleName ';')
                                { 
                                    RuleLink* link(new RuleLink(aliasName, grammar, ruleName)); 
                                    link->SetSpan(span); 
                                    grammar->AddRuleLink(link); 
                                }
                            |   (keyword("using") qualified_id ';')
                                { 
                                    RuleLink* link(new RuleLink(grammar, qualified_id)); 
                                    link->SetSpan(span);
                                    grammar->AddRuleLink(link);  
                                }
                            ;

        Signature(cmajor::parsing::Rule* rule)
                            ::= ParameterList(rule)? ReturnType(rule)?
                            ;

        ParameterList(cmajor::parsing::Rule* rule)
                            ::= '(' ((Variable(rule) | Parameter(rule)) % ',') ')'!
                            ;

        Variable(cmajor::parsing::Rule* rule)
                            ::= keyword("var") TypeId Declarator{ rule->AddLocalVariable(AttrOrVariable(TypeId->ToString(), Declarator)); delete TypeId; }
                            ;

        Parameter(cmajor::parsing::Rule* rule)
                            ::= TypeId Declarator{ rule->AddInheritedAttribute(AttrOrVariable(TypeId->ToString(), Declarator)); delete TypeId; }
                            ;

        ReturnType(cmajor::parsing::Rule* rule)
                            ::= (':' - "::") TypeId{ rule->SetValueTypeName(TypeId->ToString()); delete TypeId; }
                            ;

        Keyword             ::= keyword_list(identifier, 
                                [   "using", "grammar", "start", "end", "skip", "token", "keyword", "keyword_list", 
                                    "empty", "space", "anychar", "letter", "digit", "hexdigit", "var", "range",
                                    "upper_letter", "lower_letter", "title_letter", "modifier_letter", "other_letter",
                                    "cased_letter", "mark", "nonspacing_mark", "spacing_mark", "enclosing_mark", 
                                    "number", "decimal_number", "letter_number", "other_number", "punctuation", 
                                    "connector_punctuation", "dash_punctuation", "open_punctuation", "close_punctuation",
                                    "initial_punctuation", "final_punctuation", "other_punctuation", 
                                    "symbol", "math_symbol", "currency_symbol", "modifier_symbol", "other_symbol",
                                    "separator", "space_separator", "line_separator", "paragraph_separator", 
                                    "other", "control", "format", "surrogate", "private_use", "unassigned",
                                    "graphic", "basechar", "alphabetic", "idstart", "idcont", "value"
                                ])
                            ;

        Identifier: std::u32string
                            ::= (identifier - Keyword){ value = std::u32string(matchBegin, matchEnd); }
                            ;

        QualifiedId: std::u32string
                            ::= token(Identifier:first('.' Identifier:rest)*){ value = std::u32string(matchBegin, matchEnd); }
                            ;

        StringArray(std::vector<std::u32string>* array)
                            ::= '[' (string:str{ array->push_back(str); } % ',') ']'!
                            ;
    }
}
