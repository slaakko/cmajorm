using System;

unit_test void wstringTest()
{
    wstring empty;
    #assert(empty.IsEmpty());
    #assert(empty.Length() == 0);
    #assert(*empty.Chars() == w'\0');
    #assert(empty == w"");
    #assert(empty.StartsWith(w"a") == false);
    #assert(empty.EndsWith(w"a") == false);
    #assert(empty.Find(w'a') == -1);
    #assert(empty.RFind(w'a') == -1);
    #assert(empty.Find(w"a") == -1);
    #assert(empty.RFind(w"a") == -1);
    wstring emptyCopy = empty;
    #assert(emptyCopy.IsEmpty());
    #assert(emptyCopy.Length() == 0);
    #assert(*emptyCopy.Chars() == w'\0');
    #assert(emptyCopy == empty);
    #assert(emptyCopy == w"");
    wstring emptyRvalue = Rvalue(empty);
    #assert(empty.IsEmpty());
    #assert(empty.Length() == 0);
    #assert(*empty.Chars() == w'\0');
    #assert(emptyRvalue.IsEmpty());
    #assert(emptyRvalue.Length() == 0);
    #assert(*emptyRvalue.Chars() == w'\0');
    #assert(emptyRvalue == empty);
    #assert(emptyRvalue == w"");
    
    wstring one(w'a');
    #assert(!one.IsEmpty());
    #assert(one.Length() == 1);
    #assert(*one.Chars() == w'a');
    #assert(one == w"a");
    #assert(one[0] == w'a');
    #assert(one.StartsWith(w"a") == true);
    #assert(one.StartsWith(w"b") == false);
    #assert(one.StartsWith(w"ab") == false);
    #assert(one.EndsWith(w"a") == true);
    #assert(one.EndsWith(w"b") == false);
    #assert(one.EndsWith(w"ab") == false);
    #assert(one.Find(w'a') == 0);
    #assert(one.Find(w'b') == -1);
    #assert(one.RFind(w'a') == 0);
    #assert(one.RFind(w'b') == -1);
    #assert(one.Find(w"a") == 0);
    #assert(one.Find(w"b") == -1);
    #assert(one.Find(w"ab") == -1);
    #assert(one.RFind(w"a") == 0);
    #assert(one.RFind(w"b") == -1);
    #assert(one.RFind(w"ab") == -1);
    wstring oneCopy = one;
    #assert(!oneCopy.IsEmpty());
    #assert(oneCopy.Length() == 1);
    #assert(*oneCopy.Chars() == w'a');
    #assert(oneCopy == one);
    #assert(oneCopy == w"a");
    #assert(oneCopy[0] == w'a');
    wstring oneRvalue = Rvalue(one);
    #assert(one.IsEmpty());
    #assert(one.Length() == 0);
    #assert(*one.Chars() == w'\0');
    #assert(one == w"");
    #assert(!oneRvalue.IsEmpty());
    #assert(oneRvalue.Length() == 1);
    #assert(*oneRvalue.Chars() == w'a');
    #assert(oneRvalue[0] == w'a');
    
    wstring two(w"ab");
    #assert(!two.IsEmpty());
    #assert(two.Length() == 2);
    #assert(*two.Chars() == w'a');
    #assert(two == w"ab");
    #assert(two[0] == w'a');
    #assert(two[1] == w'b');
    #assert(two.StartsWith(w"a") == true);
    #assert(two.StartsWith(w"ab") == true);
    #assert(two.StartsWith(w"b") == false);
    #assert(two.StartsWith(w"abc") == false);
    #assert(two.EndsWith(w"a") == false);
    #assert(two.EndsWith(w"b") == true);
    #assert(two.EndsWith(w"ab") == true);
    #assert(two.EndsWith(w"abc") == false);
    #assert(two.Find(w'a') == 0);
    #assert(two.Find(w'b') == 1);
    #assert(two.Find(w'c') == -1);
    #assert(two.RFind(w'a') == 0);
    #assert(two.RFind(w'b') == 1);
    #assert(two.RFind(w'c') == -1);
    #assert(two.Find(w"a") == 0);
    #assert(two.Find(w"ab") == 0);
    #assert(two.Find(w"abc") == -1);
    #assert(two.Find(w"b") == 1);
    #assert(two.Find(w"c") == -1);
    #assert(two.RFind(w"a") == 0);
    #assert(two.RFind(w"ab") == 0);
    #assert(two.RFind(w"abc") == -1);
    #assert(two.RFind(w"b") == 1);
    #assert(two.RFind(w"c") == -1);
    wstring twoCopy = two;
    #assert(!twoCopy.IsEmpty());
    #assert(twoCopy.Length() == 2);
    #assert(*twoCopy.Chars() == w'a');
    #assert(twoCopy == w"ab");
    #assert(twoCopy[0] == w'a');
    #assert(twoCopy[1] == w'b');
    #assert(twoCopy == two);
    wstring twoRvalue = Rvalue(two);
    #assert(two.IsEmpty());
    #assert(two.Length() == 0);
    #assert(*two.Chars() == w'\0');
    #assert(two == w"");
    #assert(twoRvalue.Length() == 2);
    #assert(*twoRvalue.Chars() == w'a');
    #assert(twoRvalue == w"ab");
    #assert(twoRvalue[0] == w'a');
    #assert(twoRvalue[1] == w'b');
    #assert(twoRvalue == twoCopy);
    wstring ten;
    for (int i = 0; i < 10; ++i)
    {
        ten.Append(cast<wchar>(cast<int>(w'0') + i));
    }
    #assert(!ten.IsEmpty());
    #assert(ten.Length() == 10);
    for (int i = 0; i < 10; ++i)
    {
        #assert(ten[i] == cast<wchar>(cast<int>(w'0') + i));
    }
    #assert(ten.StartsWith(w"0") == true);
    #assert(ten.StartsWith(w"01") == true);
    #assert(ten.StartsWith(w"012") == true);
    #assert(ten.StartsWith(w"1") == false);
    #assert(ten.StartsWith(w"12") == false);
    #assert(ten.StartsWith(w"123") == false);
    #assert(ten.EndsWith(w"9") == true);
    #assert(ten.EndsWith(w"89") == true);
    #assert(ten.EndsWith(w"789") == true);
    #assert(ten.EndsWith(w"8") == false);
    #assert(ten.EndsWith(w"78") == false);
    #assert(ten.EndsWith(w"678") == false);
    #assert(ten.Find(w'0') == 0);
    #assert(ten.Find(w'1') == 1);
    #assert(ten.Find(w'9') == 9);
    #assert(ten.Find(w'a') == -1);
    #assert(ten.RFind(w'0') == 0);
    #assert(ten.RFind(w'1') == 1);
    #assert(ten.RFind(w'9') == 9);
    #assert(ten.RFind(w'a') == -1);
    wstring tenCopy = ten;
    #assert(!tenCopy.IsEmpty());
    #assert(tenCopy.Length() == 10);
    #assert(*tenCopy.Chars() == w'0');
    #assert(tenCopy == ten);
    wstring tenRvalue = Rvalue(ten);
    #assert(ten.IsEmpty());
    #assert(!tenRvalue.IsEmpty());
    #assert(tenRvalue.Length() == 10);
    #assert(*tenRvalue.Chars() == w'0');
    #assert(tenRvalue == tenCopy);
    wstring abradacabra = w"abradacabra";
    #assert(!abradacabra.IsEmpty());
    #assert(abradacabra.Length() == 11);
    #assert(abradacabra.StartsWith(w"a"));
    #assert(abradacabra.StartsWith(w"abra"));
    #assert(!abradacabra.StartsWith(w"bra"));
    #assert(abradacabra.EndsWith(w"a"));
    #assert(abradacabra.EndsWith(w"abra"));
    #assert(!abradacabra.EndsWith(w"abr"));
    #assert(abradacabra.Find(w'a') == 0);
    #assert(abradacabra.Find(w'b') == 1);
    #assert(abradacabra.Find(w'r') == 2);
    #assert(abradacabra.Find(w"a") == 0);
    #assert(abradacabra.Find(w"abra") == 0);
    #assert(abradacabra.Find(w"daca") == 4);
    #assert(abradacabra.RFind(w'a') == 10);
    #assert(abradacabra.RFind(w'r') == 9);
    #assert(abradacabra.RFind(w'b') == 8);
    #assert(abradacabra.RFind(w"a") == 10);
    #assert(abradacabra.RFind(w"abra") == 7);
    #assert(abradacabra.RFind(w"daca") == 4);
    abradacabra[0] = w'i';
    #assert(abradacabra == w"ibradacabra");
    wstring öhkömömmö = w"öhkömömmö";
    #assert(!öhkömömmö.IsEmpty());
    #assert(öhkömömmö.Length() == 9); // UTF-16 encoded so length == number of chars
    #assert(öhkömömmö.StartsWith(w"öhkö")); 
    #assert(öhkömömmö.EndsWith(w"mömmö")); 
    #assert(öhkömömmö.Find(w'ö') == 0);
    #assert(öhkömömmö.Find(w"ö") == 0);
    #assert(öhkömömmö.Find(w"öhkö") == 0);
    #assert(öhkömömmö.Find(w"mömmö") == 4);
    #assert(öhkömömmö.RFind(w'ö') == 8);
    #assert(öhkömömmö.RFind(w"ö") == 8);
    #assert(öhkömömmö.RFind(w"öhkö") == 0);
    #assert(öhkömömmö.RFind(w"mömmö") == 4);
    öhkömömmö[0] = w'ä';
    #assert(öhkömömmö == w"ähkömömmö");
}
