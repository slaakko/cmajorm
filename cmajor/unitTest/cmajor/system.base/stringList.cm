using System;
using System.Collections;

unit_test void stringListTest()
{
    List<string> empty;
    #assert(empty.IsEmpty());
    #assert(empty.Count() == 0);
    List<string> emptyCopy = empty;
    #assert(emptyCopy.IsEmpty());
    #assert(emptyCopy.Count() == 0);
    #assert(emptyCopy == empty);
    List<string> emptyMoved = Rvalue(empty);
    #assert(emptyMoved.IsEmpty());
    #assert(emptyMoved.Count() == 0);
    #assert(emptyMoved == emptyCopy);
    List<string> emptyCopyAssign;
    emptyCopyAssign = emptyCopy;
    #assert(emptyCopyAssign.IsEmpty());
    #assert(emptyCopyAssign.Count() == 0);
    #assert(emptyCopyAssign == emptyCopy);
    List<string> emptyMoveAssign;
    emptyMoveAssign = Rvalue(empty);
    #assert(emptyMoveAssign.IsEmpty());
    #assert(emptyMoveAssign.Count() == 0);
    #assert(emptyMoveAssign == emptyCopy);
    
    List<string> one(1, "one");
    #assert(!one.IsEmpty());
    #assert(one.Count() == 1);
    #assert(one[0] == "one");
    #assert(one.Front() == "one");
    #assert(one.Back() == "one");
    List<string> oneCopy = one;
    #assert(!oneCopy.IsEmpty());
    #assert(oneCopy.Count() == 1);
    #assert(oneCopy[0] == "one");
    #assert(oneCopy == one);
    List<string> oneMoved = Rvalue(one);
    #assert(one.IsEmpty());
    #assert(one.Count() == 0);
    #assert(!oneMoved.IsEmpty());
    #assert(oneMoved.Count() == 1);
    #assert(oneMoved[0] == "one");
    #assert(oneMoved == oneCopy);
    List<string> oneCopyAssign;
    oneCopyAssign = oneCopy;
    #assert(!oneCopyAssign.IsEmpty());
    #assert(oneCopyAssign.Count() == 1);
    #assert(oneCopyAssign[0] == "one");
    #assert(oneCopyAssign == oneCopy);
    List<string> oneMoveAssign;
    one = oneCopy;
    oneMoveAssign = Rvalue(one);
    #assert(one.IsEmpty());
    #assert(one.Count() == 0);
    #assert(!oneMoveAssign.IsEmpty());
    #assert(oneMoveAssign.Count() == 1);
    #assert(oneMoveAssign[0] == "one");
    #assert(oneMoveAssign == oneCopy);
    string r = oneCopy.RemoveFirst();
    #assert(!r.IsEmpty());
    #assert(r == "one");
    #assert(oneCopy.IsEmpty());
    #assert(oneCopy.Count() == 0);
    
    List<string> two;
    two.Add("one");
    string t = "two";
    two.Add(Rvalue(t));
    #assert(t.IsEmpty());
    #assert(t.Length() == 0);
    #assert(!two.IsEmpty());
    #assert(two.Count() == 2);
    #assert(two[0] == "one");
    #assert(two[1] == "two");
    #assert(two.Front() == "one");
    #assert(two.Back() == "two");
    List<string> twoCopy = two;
    #assert(!twoCopy.IsEmpty());
    #assert(twoCopy.Count() == 2);
    #assert(twoCopy[0] == "one");
    #assert(twoCopy[1] == "two");
    #assert(twoCopy == two);
    List<string> twoMoved = Rvalue(two);
    #assert(two.IsEmpty());
    #assert(two.Count() == 0);
    #assert(!twoMoved.IsEmpty());
    #assert(twoMoved.Count() == 2);
    #assert(twoMoved == twoCopy);
    two = twoCopy;
    List<string> twoCopyAssigned;
    twoCopyAssigned = two;
    #assert(!twoCopyAssigned.IsEmpty());
    #assert(twoCopyAssigned.Count() == 2);
    #assert(twoCopyAssigned[0] == "one");
    #assert(twoCopyAssigned[1] == "two");
    #assert(twoCopyAssigned == two);
    List<string> twoMoveAssigned;
    twoMoveAssigned = Rvalue(two);
    #assert(two.IsEmpty());
    #assert(two.Count() == 0);
    #assert(!twoMoveAssigned.IsEmpty());
    #assert(twoMoveAssigned.Count() == 2);
    #assert(twoMoveAssigned == twoCopy);
    two = twoCopy;
    string first = two.RemoveFirst();
    #assert(first == "one");
    #assert(!two.IsEmpty());
    #assert(two.Count() == 1);
    #assert(two[0] == "two");
    string last = two.RemoveLast();
    #assert(last == "two");
    #assert(two.IsEmpty());
    #assert(two.Count() == 0);
    
    List<string> ten;
    for (int i = 0; i < 10; ++i)
    {
        ten.Add(ToString(i));
    }
    #assert(!ten.IsEmpty());
    #assert(ten.Count() == 10);
    for (int i = 0; i < 10; ++i)
    {
        #assert(ten[i] == ToString(i));
    }
    List<string> tenCopy = ten;
    #assert(ten == tenCopy);
    List<string> tenMoved = Rvalue(ten);
    #assert(tenMoved == tenCopy);
    ten = tenCopy;
    List<string> tenCopyAssigned;
    tenCopyAssigned = ten;
    #assert(tenCopyAssigned == ten);
    List<string> tenMoveAssigned;
    tenMoveAssigned = Rvalue(ten);
    #assert(tenMoveAssigned == tenCopy);
    ten = tenCopy;
    string firstTen = ten.RemoveFirst();
    #assert(firstTen == "0");
    #assert(ten.Count() == 9);
    #assert(ten[0] == "1");
    string lastTen = ten.RemoveLast();
    #assert(lastTen == "9");
    #assert(ten.Count() == 8);
    #assert(ten[7] == "8");
    string middle = ten.Remove(ten.Begin() + 4);
    #assert(middle == "5");
    #assert(ten.Count() == 7);
    #assert(ten[4] == "6");
    ten.Insert(ten.Begin(), "0");
    #assert(ten.Count() == 8);
    #assert(ten[0] == "0");
    #assert(ten[1] == "1");
}
