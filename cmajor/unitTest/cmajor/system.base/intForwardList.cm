using System;
using System.Collections;

unit_test void intForwardListTest()
{
    ForwardList<int> empty;
    #assert(empty.IsEmpty());
    #assert(empty.Count() == 0);
    #assert(empty.Begin() == empty.End());
    #assert(empty.CBegin() == empty.CEnd());
    #assert(empty == empty);
    #assert(!(empty < empty));
    ForwardList<int> emptyCopy = empty;
    #assert(emptyCopy == empty);
    ForwardList<int> emptyMoved = Rvalue(empty);
    #assert(emptyMoved == emptyCopy);
    ForwardList<int> emptyCopyAssigned;
    emptyCopyAssigned = emptyCopy;
    #assert(emptyCopyAssigned == emptyCopy);
    empty = emptyCopy;
    ForwardList<int> emptyMoveAssigned;
    emptyMoveAssigned = Rvalue(empty);
    #assert(emptyMoveAssigned == emptyCopy);
    
    ForwardList<int> one;
    ForwardList<int>.Iterator oneIt = one.InsertFront(10);
    #assert(oneIt == one.Begin());
    #assert(*oneIt == 10);
    #assert(!one.IsEmpty());
    #assert(one.Count() == 1);
    #assert(one == one);
    #assert(!(one < one));
    ForwardList<int> oneCopy = one;
    #assert(oneCopy == one);
    ForwardList<int> oneMoved = Rvalue(one);
    #assert(one.IsEmpty());
    #assert(oneMoved == oneCopy);
    ForwardList<int> oneCopyAssigned;
    oneCopyAssigned = oneCopy;
    #assert(oneCopyAssigned == oneCopy);
    one = oneCopy;
    ForwardList<int> oneMoveAssigned;
    oneMoveAssigned = Rvalue(one);
    #assert(oneMoveAssigned == oneCopy);
    oneCopy.RemoveFront();
    #assert(oneCopy.IsEmpty());
    #assert(oneCopy.Count() == 0);
    
    ForwardList<int> two;
    ForwardList<int>.Iterator twoIt1 = two.InsertAfter(two.Begin(), 10);
    #assert(twoIt1 == two.Begin());
    #assert(*twoIt1 == 10);
    ForwardList<int>.Iterator twoIt2 = two.InsertFront(20);
    #assert(twoIt2 == two.Begin());
    #assert(*twoIt2 == 20);
    #assert(two == two);
    #assert(!(two < two));
    ForwardList<int> twoCopy = two;
    #assert(twoCopy == two);
    ForwardList<int> twoMoved = Rvalue(two);
    #assert(two.IsEmpty());
    #assert(twoMoved == twoCopy);
    ForwardList<int> twoCopyAssigned;
    twoCopyAssigned = twoCopy;
    #assert(twoCopyAssigned == twoCopy);
    two = twoCopy;
    ForwardList<int> twoMovedAssigned;
    twoMovedAssigned = Rvalue(two);
    #assert(twoMovedAssigned == twoCopy);
    twoCopy.Remove(10);
    #assert(!twoCopy.IsEmpty());
    #assert(twoCopy.Count() == 1);
    twoCopy.Remove(20);
    #assert(twoCopy.IsEmpty());
    #assert(twoCopy.Count() == 0);
    
    ForwardList<int> ten;
    ForwardList<int>.Iterator tenIt = ten.Begin();
    int n = 10;
    for (int i = 0; i < n; ++i)
    {
        tenIt = ten.InsertAfter(tenIt, i);
    }
    for (int i = 0; i < n; ++i)
    {
        #assert(Find(ten.CBegin(), ten.CEnd(), i) != ten.CEnd());
    }
    ForwardList<int> tenCopy = ten;
    #assert(tenCopy == ten);
    ForwardList<int> tenMoved = Rvalue(ten);
    #assert(tenMoved == tenCopy);
    ForwardList<int> tenCopyAssigned;
    tenCopyAssigned = tenCopy;
    #assert(tenCopyAssigned == tenCopy);
    ten = tenCopy;
    ForwardList<int> tenMoveAssigned;
    tenMoveAssigned = Rvalue(ten);
    #assert(tenMoveAssigned == tenCopy);
}
