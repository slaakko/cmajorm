using System;
using System.Collections;

unit_test void stringMapTest()
{
    Map<string, string> empty;
    #assert(empty.IsEmpty());
    #assert(empty.Count() == 0);
    #assert(empty.Begin() == empty.End());
    #assert(empty.CBegin() == empty.CEnd());
    #assert(empty.Find("10") == empty.End());
    #assert(empty.CFind("10") == empty.CEnd());
    #assert(empty.Remove("10") == false);
    #assert(empty == empty);
    #assert(!(empty < empty));
    Map<string, string> emptyCopy = empty;
    #assert(emptyCopy == empty);
    Map<string, string> emptyMoved = Rvalue(empty);
    #assert(emptyMoved == emptyCopy);
    Map<string, string> emptyCopyAssigned;
    emptyCopyAssigned = emptyCopy;
    #assert(emptyCopyAssigned == emptyCopy);
    empty = emptyCopy;
    Map<string, string> emptyMoveAssigned;
    emptyMoveAssigned = Rvalue(empty);
    #assert(emptyMoveAssigned == emptyCopy);
    
    Map<string, string> one;
    Pair<string, string> oneP = MakePair(ToString(10), ToString(10));
    one.Insert(oneP);
    #assert(!one.IsEmpty());
    #assert(one.Count() == 1);
    #assert(one.Find("10") == one.Begin());
    #assert(*one.Begin() == oneP);
    #assert(one.CFind("10") == one.CBegin());
    #assert(*one.CBegin() == oneP);
    string& oneX = one["10"];
    #assert(oneX == "10");
    Map<string, string> oneCopy = one;
    #assert(oneCopy == one);
    Map<string, string> oneMoved = Rvalue(one);
    #assert(oneMoved == oneCopy);
    Map<string, string> oneCopyAssigned;
    oneCopyAssigned = oneCopy;
    #assert(oneCopyAssigned == oneCopy);
    one = oneCopy;
    Map<string, string> oneMoveAssigned;
    oneMoveAssigned = Rvalue(one);
    #assert(oneMoveAssigned == oneCopy);
    
    Map<string, string> two;
    Pair<string, string> twoP1 = MakePair(ToString(10), ToString(10));
    Pair<string, string> twoP2 = MakePair(ToString(20), ToString(20));
    two.Insert(twoP2);
    two.Insert(twoP1);
    #assert(!two.IsEmpty());
    #assert(two.Count() == 2);
    Map<string, string>.Iterator twoIt = two.Begin();
    #assert(two.Find("10") == twoIt);
    #assert(*twoIt == twoP1);
    ++twoIt;
    #assert(two.Find("20") == twoIt);
    #assert(*twoIt == twoP2);
    Map<string, string>.ConstIterator twoCit = two.CBegin();
    #assert(two.CFind("10") == twoCit);
    #assert(*twoCit == twoP1);
    ++twoCit;
    #assert(two.CFind("20") == twoCit);
    #assert(*twoCit == twoP2);
    string& twoX1 = two["10"];
    #assert(twoX1 == "10");
    string& twoX2 = two["20"];
    #assert(twoX2 == "20");
    Map<string, string> twoCopy = two;
    #assert(twoCopy == two);
    Map<string, string> twoMoved = Rvalue(two);
    #assert(twoMoved == twoCopy);
    Map<string, string> twoCopyAssigned; 
    twoCopyAssigned = twoCopy;
    #assert(twoCopyAssigned == twoCopy);
    Map<string, string> twoMoveAssigned; 
    two = twoCopy;
    twoMoveAssigned = Rvalue(two);
    #assert(twoMoveAssigned == twoCopy);

    List<string> tenBase;
    while (tenBase.Count() < 10)
    {
        string x = ToString(Random());
        if (Find(tenBase.CBegin(), tenBase.CEnd(), x) == tenBase.CEnd())
        {
            tenBase.Add(x);
        }
    }
    Map<string, string> ten;
    for (int i = 0; i < 10; ++i)
    {
        Pair<string, string> tenP = MakePair(tenBase[i], tenBase[i]);
        ten.Insert(tenP);
    }
    List<string> tenSorted = tenBase;
    Sort(tenSorted);
    List<Pair<string, string>> tenSortedP;
    for (int i = 0; i < 10; ++i)
    {
        tenSortedP.Add(MakePair(tenSorted[i], tenSorted[i]));
    }
    #assert(Equal(tenSortedP.CBegin(), tenSortedP.CEnd(), ten.CBegin(), ten.CEnd()));
    Map<string, string> tenCopy = ten;
    #assert(tenCopy == ten);
    Map<string, string> tenMoved = Rvalue(ten);
    #assert(tenMoved == tenCopy);
    Map<string, string> tenCopyAssigned;
    tenCopyAssigned = tenCopy;
    #assert(tenCopyAssigned == tenCopy);
    ten = tenCopy;
    Map<string, string> tenMoveAssigned;
    tenMoveAssigned = Rvalue(ten);
    #assert(tenMoveAssigned == tenCopy);
}
