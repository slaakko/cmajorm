using System;
using System.Collections;

unit_test void intListTest()
{
    List<int> empty;
    #assert(empty.IsEmpty());
    #assert(empty.Count() == 0);
    List<int> emptyCopy = empty;
    #assert(emptyCopy.IsEmpty());
    #assert(emptyCopy.Count() == 0);
    #assert(emptyCopy == empty);
    List<int> emptyMoved = Rvalue(empty);
    #assert(emptyMoved.IsEmpty());
    #assert(emptyMoved.Count() == 0);
    #assert(emptyMoved == emptyCopy);
    List<int> emptyCopyAssign;
    emptyCopyAssign = emptyCopy;
    #assert(emptyCopyAssign.IsEmpty());
    #assert(emptyCopyAssign.Count() == 0);
    #assert(emptyCopyAssign == emptyCopy);
    empty = emptyCopy;
    List<int> emptyMoveAssign;
    emptyMoveAssign = Rvalue(empty);
    #assert(emptyMoveAssign.IsEmpty());
    #assert(emptyMoveAssign.Count() == 0);
    #assert(emptyMoveAssign == emptyCopy);
    List<int> one(1, 10);
    #assert(!one.IsEmpty());
    #assert(one.Count() == 1);
    #assert(one[0] == 10);
    #assert(one.Front() == 10);
    #assert(one.Back() == 10);
    List<int> oneCopy = one;
    #assert(!oneCopy.IsEmpty());
    #assert(oneCopy.Count() == 1);
    #assert(oneCopy[0] == 10);
    #assert(oneCopy == one);
    #assert(oneCopy.Front() == 10);
    #assert(oneCopy.Back() == 10);
    List<int> oneMoved = Rvalue(one);
    #assert(one.IsEmpty());
    #assert(one.Count() == 0);
    #assert(!oneMoved.IsEmpty());
    #assert(oneMoved.Count() == 1);
    #assert(oneMoved[0] == 10);
    #assert(oneMoved == oneCopy);
    List<int> oneCopyAssign;
    oneCopyAssign = oneCopy;
    #assert(!oneCopyAssign.IsEmpty());
    #assert(oneCopyAssign.Count() == 1);
    #assert(oneCopyAssign[0] == 10);
    #assert(oneCopyAssign == oneCopy);
    one = oneCopy;
    List<int> oneMoveAssign;
    oneMoveAssign = Rvalue(one);
    #assert(!oneMoveAssign.IsEmpty());
    #assert(oneMoveAssign.Count() == 1);
    #assert(oneMoveAssign[0] == 10);
    #assert(oneMoveAssign == oneCopy);
    #assert(oneCopy.RemoveFirst() == 10);
    #assert(oneCopy.IsEmpty());
    List<int> two;
    two.Add(10);
    two.Add(20);
    #assert(!two.IsEmpty());
    #assert(two.Count() == 2);
    #assert(two[0] == 10);
    #assert(two[1] == 20);
    #assert(two.Front() == 10);
    #assert(two.Back() == 20);
    List<int> twoCopy = two;
    #assert(!twoCopy.IsEmpty());
    #assert(twoCopy.Count() == 2);
    #assert(twoCopy[0] == 10);
    #assert(twoCopy[1] == 20);
    #assert(twoCopy == two);
    #assert(twoCopy.Front() == 10);
    #assert(twoCopy.Back() == 20);
    List<int> twoMoved = Rvalue(two);
    #assert(two.IsEmpty());
    #assert(two.Count() == 0);
    #assert(!twoMoved.IsEmpty());
    #assert(twoMoved.Count() == 2);
    #assert(twoMoved[0] == 10);
    #assert(twoMoved[1] == 20);
    #assert(twoMoved == twoCopy);
    two = twoCopy;
    List<int> twoAssigned;
    twoAssigned = two;
    #assert(!twoAssigned.IsEmpty());
    #assert(twoAssigned.Count() == 2);
    #assert(twoAssigned[0] == 10);
    #assert(twoAssigned[1] == 20);
    #assert(twoAssigned == two);
    #assert(twoAssigned.Front() == 10);
    #assert(twoAssigned.Back() == 20);
    List<int> twoMoveAssigned;
    twoMoveAssigned = Rvalue(two);
    #assert(two.IsEmpty());
    #assert(two.Count() == 0);
    #assert(!twoMoveAssigned.IsEmpty());
    #assert(twoMoveAssigned.Count() == 2);
    #assert(twoMoveAssigned[0] == 10);
    #assert(twoMoveAssigned[1] == 20);
    #assert(twoMoveAssigned == twoCopy);
    #assert(twoCopy.RemoveLast() == 20);
    #assert(!twoCopy.IsEmpty());
    #assert(twoCopy.Count() == 1);
    #assert(twoCopy.RemoveFirst() == 10);
    #assert(twoCopy.IsEmpty());
    #assert(twoCopy.Count() == 0);
    List<int> ten;
    for (int i = 0; i < 10; ++i)
    {
        ten.Add(i);
    }
    #assert(!ten.IsEmpty());
    #assert(ten.Count() == 10);
    for (int i = 0; i < 10; ++i)
    {
        #assert(ten[i] == i);
    }
    #assert(ten.Front() == 0);
    #assert(ten.Back() == 9);
    List<int> tenCopy = ten;
    #assert(ten == tenCopy);
    List<int> tenAssigned;
    tenAssigned = ten;
    #assert(ten == tenAssigned);
    List<int> tenMoved = Rvalue(ten);
    #assert(ten.IsEmpty());
    #assert(ten.Count() == 0);
    #assert(tenMoved == tenCopy);
    List<int> tenMoveAssigned;
    ten = tenCopy;
    tenMoveAssigned = Rvalue(ten);
    #assert(ten.IsEmpty());
    #assert(ten.Count() == 0);
    #assert(tenMoveAssigned == tenCopy);
    ten = tenCopy;
    #assert(ten.RemoveFirst() == 0);
    #assert(!ten.IsEmpty());
    #assert(ten.Count() == 9);
    #assert(ten.RemoveLast() == 9);
    #assert(!ten.IsEmpty());
    #assert(ten.Count() == 8);
    #assert(ten.Remove(ten.Begin() + 1) == 2);
    #assert(!ten.IsEmpty());
    #assert(ten.Count() == 7);
    #assert(ten.Remove(ten.End() - 2) == 7);
    #assert(!ten.IsEmpty());
    #assert(ten.Count() == 6);
    ten.Insert(ten.Begin(), 0);
    #assert(ten.Count() == 7);
    #assert(ten[0] == 0);
    #assert(ten[1] == 1);
    ten.Clear();
    #assert(ten.IsEmpty());
    #assert(ten.Count() == 0);
}
