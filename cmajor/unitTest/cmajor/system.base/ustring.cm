using System;

unit_test void ustringTest()
{
    ustring empty;
    #assert(empty.IsEmpty());
    #assert(empty.Length() == 0);
    #assert(*empty.Chars() == u'\0');
    #assert(empty == u"");
    #assert(empty.StartsWith(u"a") == false);
    #assert(empty.EndsWith(u"a") == false);
    #assert(empty.Find(u'a') == -1);
    #assert(empty.RFind(u'a') == -1);
    #assert(empty.Find(u"a") == -1);
    #assert(empty.RFind(u"a") == -1);
    ustring emptyCopy = empty;
    #assert(emptyCopy.IsEmpty());
    #assert(emptyCopy.Length() == 0);
    #assert(*emptyCopy.Chars() == u'\0');
    #assert(emptyCopy == empty);
    #assert(emptyCopy == u"");
    ustring emptyRvalue = Rvalue(empty);
    #assert(empty.IsEmpty());
    #assert(empty.Length() == 0);
    #assert(*empty.Chars() == u'\0');
    #assert(emptyRvalue.IsEmpty());
    #assert(emptyRvalue.Length() == 0);
    #assert(*emptyRvalue.Chars() == u'\0');
    #assert(emptyRvalue == empty);
    #assert(emptyRvalue == u"");
    
    ustring one(u'a');
    #assert(!one.IsEmpty());
    #assert(one.Length() == 1);
    #assert(*one.Chars() == u'a');
    #assert(one == u"a");
    #assert(one[0] == u'a');
    #assert(one.StartsWith(u"a") == true);
    #assert(one.StartsWith(u"b") == false);
    #assert(one.StartsWith(u"ab") == false);
    #assert(one.EndsWith(u"a") == true);
    #assert(one.EndsWith(u"b") == false);
    #assert(one.EndsWith(u"ab") == false);
    #assert(one.Find(u'a') == 0);
    #assert(one.Find(u'b') == -1);
    #assert(one.RFind(u'a') == 0);
    #assert(one.RFind(u'b') == -1);
    #assert(one.Find(u"a") == 0);
    #assert(one.Find(u"b") == -1);
    #assert(one.Find(u"ab") == -1);
    #assert(one.RFind(u"a") == 0);
    #assert(one.RFind(u"b") == -1);
    #assert(one.RFind(u"ab") == -1);
    ustring oneCopy = one;
    #assert(!oneCopy.IsEmpty());
    #assert(oneCopy.Length() == 1);
    #assert(*oneCopy.Chars() == u'a');
    #assert(oneCopy == one);
    #assert(oneCopy == u"a");
    #assert(oneCopy[0] == u'a');
    ustring oneRvalue = Rvalue(one);
    #assert(one.IsEmpty());
    #assert(one.Length() == 0);
    #assert(*one.Chars() == u'\0');
    #assert(one == u"");
    #assert(!oneRvalue.IsEmpty());
    #assert(oneRvalue.Length() == 1);
    #assert(*oneRvalue.Chars() == u'a');
    #assert(oneRvalue[0] == u'a');
    
    ustring two(u"ab");
    #assert(!two.IsEmpty());
    #assert(two.Length() == 2);
    #assert(*two.Chars() == u'a');
    #assert(two == u"ab");
    #assert(two[0] == u'a');
    #assert(two[1] == u'b');
    #assert(two.StartsWith(u"a") == true);
    #assert(two.StartsWith(u"ab") == true);
    #assert(two.StartsWith(u"b") == false);
    #assert(two.StartsWith(u"abc") == false);
    #assert(two.EndsWith(u"a") == false);
    #assert(two.EndsWith(u"b") == true);
    #assert(two.EndsWith(u"ab") == true);
    #assert(two.EndsWith(u"abc") == false);
    #assert(two.Find(u'a') == 0);
    #assert(two.Find(u'b') == 1);
    #assert(two.Find(u'c') == -1);
    #assert(two.RFind(u'a') == 0);
    #assert(two.RFind(u'b') == 1);
    #assert(two.RFind(u'c') == -1);
    #assert(two.Find(u"a") == 0);
    #assert(two.Find(u"ab") == 0);
    #assert(two.Find(u"abc") == -1);
    #assert(two.Find(u"b") == 1);
    #assert(two.Find(u"c") == -1);
    #assert(two.RFind(u"a") == 0);
    #assert(two.RFind(u"ab") == 0);
    #assert(two.RFind(u"abc") == -1);
    #assert(two.RFind(u"b") == 1);
    #assert(two.RFind(u"c") == -1);
    ustring twoCopy = two;
    #assert(!twoCopy.IsEmpty());
    #assert(twoCopy.Length() == 2);
    #assert(*twoCopy.Chars() == u'a');
    #assert(twoCopy == u"ab");
    #assert(twoCopy[0] == u'a');
    #assert(twoCopy[1] == u'b');
    #assert(twoCopy == two);
    ustring twoRvalue = Rvalue(two);
    #assert(two.IsEmpty());
    #assert(two.Length() == 0);
    #assert(*two.Chars() == u'\0');
    #assert(two == u"");
    #assert(twoRvalue.Length() == 2);
    #assert(*twoRvalue.Chars() == u'a');
    #assert(twoRvalue == u"ab");
    #assert(twoRvalue[0] == u'a');
    #assert(twoRvalue[1] == u'b');
    #assert(twoRvalue == twoCopy);
    ustring ten;
    for (int i = 0; i < 10; ++i)
    {
        ten.Append(cast<uchar>(cast<int>(u'0') + i));
    }
    #assert(!ten.IsEmpty());
    #assert(ten.Length() == 10);
    for (int i = 0; i < 10; ++i)
    {
        #assert(ten[i] == cast<uchar>(cast<int>(u'0') + i));
    }
    #assert(ten.StartsWith(u"0") == true);
    #assert(ten.StartsWith(u"01") == true);
    #assert(ten.StartsWith(u"012") == true);
    #assert(ten.StartsWith(u"1") == false);
    #assert(ten.StartsWith(u"12") == false);
    #assert(ten.StartsWith(u"123") == false);
    #assert(ten.EndsWith(u"9") == true);
    #assert(ten.EndsWith(u"89") == true);
    #assert(ten.EndsWith(u"789") == true);
    #assert(ten.EndsWith(u"8") == false);
    #assert(ten.EndsWith(u"78") == false);
    #assert(ten.EndsWith(u"678") == false);
    #assert(ten.Find(u'0') == 0);
    #assert(ten.Find(u'1') == 1);
    #assert(ten.Find(u'9') == 9);
    #assert(ten.Find(u'a') == -1);
    #assert(ten.RFind(u'0') == 0);
    #assert(ten.RFind(u'1') == 1);
    #assert(ten.RFind(u'9') == 9);
    #assert(ten.RFind(u'a') == -1);
    ustring tenCopy = ten;
    #assert(!tenCopy.IsEmpty());
    #assert(tenCopy.Length() == 10);
    #assert(*tenCopy.Chars() == u'0');
    #assert(tenCopy == ten);
    ustring tenRvalue = Rvalue(ten);
    #assert(ten.IsEmpty());
    #assert(!tenRvalue.IsEmpty());
    #assert(tenRvalue.Length() == 10);
    #assert(*tenRvalue.Chars() == u'0');
    #assert(tenRvalue == tenCopy);
    ustring abradacabra = u"abradacabra";
    #assert(!abradacabra.IsEmpty());
    #assert(abradacabra.Length() == 11);
    #assert(abradacabra.StartsWith(u"a"));
    #assert(abradacabra.StartsWith(u"abra"));
    #assert(!abradacabra.StartsWith(u"bra"));
    #assert(abradacabra.EndsWith(u"a"));
    #assert(abradacabra.EndsWith(u"abra"));
    #assert(!abradacabra.EndsWith(u"abr"));
    #assert(abradacabra.Find(u'a') == 0);
    #assert(abradacabra.Find(u'b') == 1);
    #assert(abradacabra.Find(u'r') == 2);
    #assert(abradacabra.Find(u"a") == 0);
    #assert(abradacabra.Find(u"abra") == 0);
    #assert(abradacabra.Find(u"daca") == 4);
    #assert(abradacabra.RFind(u'a') == 10);
    #assert(abradacabra.RFind(u'r') == 9);
    #assert(abradacabra.RFind(u'b') == 8);
    #assert(abradacabra.RFind(u"a") == 10);
    #assert(abradacabra.RFind(u"abra") == 7);
    #assert(abradacabra.RFind(u"daca") == 4);
    abradacabra[0] = u'i';
    #assert(abradacabra == u"ibradacabra");
    ustring öhkömömmö = u"öhkömömmö";
    #assert(!öhkömömmö.IsEmpty());
    #assert(öhkömömmö.Length() == 9); // UTF-32 encoded so length == number of chars
    #assert(öhkömömmö.StartsWith(u"öhkö")); 
    #assert(öhkömömmö.EndsWith(u"mömmö")); 
    #assert(öhkömömmö.Find(u'ö') == 0);
    #assert(öhkömömmö.Find(u"ö") == 0);
    #assert(öhkömömmö.Find(u"öhkö") == 0);
    #assert(öhkömömmö.Find(u"mömmö") == 4);
    #assert(öhkömömmö.RFind(u'ö') == 8);
    #assert(öhkömömmö.RFind(u"ö") == 8);
    #assert(öhkömömmö.RFind(u"öhkö") == 0);
    #assert(öhkömömmö.RFind(u"mömmö") == 4);
    öhkömömmö[0] = u'ä';
    #assert(öhkömömmö == u"ähkömömmö");
}
