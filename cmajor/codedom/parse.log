<parse>
<CommentsAndSpacesAndPPLines>
 <try>// =================================</try>
  <PPLine>
   <try>// =================================</try>
    <S>
     <try>// =================================</try>
     <fail/>
    </S>
   <fail/>
  </PPLine>
  <comment>
   <try>// =================================</try>
    <line_comment>
     <try>// =================================</try>
      <newline>
       <try></try>
       <fail/>
      </newline>
     <fail/>
    </line_comment>
    <block_comment>
     <try>// =================================</try>
     <fail/>
    </block_comment>
   <fail/>
  </comment>
 <fail/>
</CommentsAndSpacesAndPPLines>
<SourceFile>
 <try>namespace cmajor { namespace codedom {</try>
  <Declarations>
   <try>namespace cmajor { namespace codedom {</try>
    <Declaration>
     <try>namespace cmajor { namespace codedom {</try>
      <NamespaceDefinition>
       <try>namespace cmajor { namespace codedom {</try>
        <NamedNamespaceDefinition>
         <try>namespace cmajor { namespace codedom {</try>
          <namespace>
           <try>namespace cmajor { namespace codedom {</try>
            <identifier_chars>
             <try> cmajor { namespace codedom {</try>
             <fail/>
            </identifier_chars>
           <success>namespace</success>
          </namespace>
          <Identifier>
           <try>cmajor { namespace codedom {</try>
            <identifier>
             <try>cmajor { namespace codedom {</try>
             <success>cmajor</success>
            </identifier>
            <Keyword>
             <try>cmajor { namespace codedom {</try>
              <identifier>
               <try>cmajor { namespace codedom {</try>
               <success>cmajor</success>
              </identifier>
             <fail/>
            </Keyword>
           <success>cmajor</success>
          </Identifier>
          <Declarations>
           <try>namespace codedom {</try>
            <Declaration>
             <try>namespace codedom {</try>
              <NamespaceDefinition>
               <try>namespace codedom {</try>
                <NamedNamespaceDefinition>
                 <try>namespace codedom {</try>
                  <namespace>
                   <try>namespace codedom {</try>
                    <identifier_chars>
                     <try> codedom {</try>
                     <fail/>
                    </identifier_chars>
                   <success>namespace</success>
                  </namespace>
                  <Identifier>
                   <try>codedom {</try>
                    <identifier>
                     <try>codedom {</try>
                     <success>codedom</success>
                    </identifier>
                    <Keyword>
                     <try>codedom {</try>
                      <identifier>
                       <try>codedom {</try>
                       <success>codedom</success>
                      </identifier>
                     <fail/>
                    </Keyword>
                   <success>codedom</success>
                  </Identifier>
                  <Declarations>
                   <try>using namespace cmajor::util;</try>
                    <Declaration>
                     <try>using namespace cmajor::util;</try>
                      <NamespaceDefinition>
                       <try>using namespace cmajor::util;</try>
                        <NamedNamespaceDefinition>
                         <try>using namespace cmajor::util;</try>
                          <namespace>
                           <try>using namespace cmajor::util;</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>using namespace cmajor::util;</try>
                          <namespace>
                           <try>using namespace cmajor::util;</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>using namespace cmajor::util;</try>
                        <SimpleDeclaration>
                         <try>using namespace cmajor::util;</try>
                          <DeclSpecifiers>
                           <try>using namespace cmajor::util;</try>
                            <DeclSpecifier>
                             <try>using namespace cmajor::util;</try>
                              <StorageClassSpecifier>
                               <try>using namespace cmajor::util;</try>
                                <register>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>using namespace cmajor::util;</try>
                                <inline>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>using namespace cmajor::util;</try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>using namespace cmajor::util;</try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>using namespace cmajor::util;</try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>using namespace cmajor::util;</try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>using namespace cmajor::util;</try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>using namespace cmajor::util;</try>
                            <PrefixTypeExpr>
                             <try>using namespace cmajor::util;</try>
                              <CVSpecifierSequence>
                               <try>using namespace cmajor::util;</try>
                                <CVSpecifier>
                                 <try>using namespace cmajor::util;</try>
                                  <const>
                                   <try>using namespace cmajor::util;</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>using namespace cmajor::util;</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>using namespace cmajor::util;</try>
                                <PrimaryTypeExpr>
                                 <try>using namespace cmajor::util;</try>
                                  <SimpleType>
                                   <try>using namespace cmajor::util;</try>
                                    <SimpleTypeSpecifier>
                                     <try>using namespace cmajor::util;</try>
                                      <char>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>using namespace cmajor::util;</try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>using namespace cmajor::util;</try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>using namespace cmajor::util;</try>
                                    <class>
                                     <try>using namespace cmajor::util;</try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>using namespace cmajor::util;</try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>using namespace cmajor::util;</try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>using namespace cmajor::util;</try>
                                    <NestedNameSpecifier>
                                     <try>using namespace cmajor::util;</try>
                                      <IdNode>
                                       <try>using namespace cmajor::util;</try>
                                        <SimpleTemplateId>
                                         <try>using namespace cmajor::util;</try>
                                          <TemplateName>
                                           <try>using namespace cmajor::util;</try>
                                            <Identifier>
                                             <try>using namespace cmajor::util;</try>
                                              <identifier>
                                               <try>using namespace cmajor::util;</try>
                                               <success>using</success>
                                              </identifier>
                                              <Keyword>
                                               <try>using namespace cmajor::util;</try>
                                                <identifier>
                                                 <try>using namespace cmajor::util;</try>
                                                 <success>using</success>
                                                </identifier>
                                               <success>using</success>
                                              </Keyword>
                                             <fail/>
                                            </Identifier>
                                           <fail/>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>using namespace cmajor::util;</try>
                                          <identifier>
                                           <try>using namespace cmajor::util;</try>
                                           <success>using</success>
                                          </identifier>
                                          <Keyword>
                                           <try>using namespace cmajor::util;</try>
                                            <identifier>
                                             <try>using namespace cmajor::util;</try>
                                             <success>using</success>
                                            </identifier>
                                           <success>using</success>
                                          </Keyword>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>using namespace cmajor::util;</try>
                                      <SimpleTemplateId>
                                       <try>using namespace cmajor::util;</try>
                                        <TemplateName>
                                         <try>using namespace cmajor::util;</try>
                                          <Identifier>
                                           <try>using namespace cmajor::util;</try>
                                            <identifier>
                                             <try>using namespace cmajor::util;</try>
                                             <success>using</success>
                                            </identifier>
                                            <Keyword>
                                             <try>using namespace cmajor::util;</try>
                                              <identifier>
                                               <try>using namespace cmajor::util;</try>
                                               <success>using</success>
                                              </identifier>
                                             <success>using</success>
                                            </Keyword>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>using namespace cmajor::util;</try>
                                        <identifier>
                                         <try>using namespace cmajor::util;</try>
                                         <success>using</success>
                                        </identifier>
                                        <Keyword>
                                         <try>using namespace cmajor::util;</try>
                                          <identifier>
                                           <try>using namespace cmajor::util;</try>
                                           <success>using</success>
                                          </identifier>
                                         <success>using</success>
                                        </Keyword>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </QualifiedIdNode>
                                 <fail/>
                                </PrimaryTypeExpr>
                               <fail/>
                              </PostfixTypeExpr>
                             <fail/>
                            </PrefixTypeExpr>
                           <fail/>
                          </TypeExpr>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>using namespace cmajor::util;</try>
                          <using>
                           <try>using namespace cmajor::util;</try>
                            <identifier_chars>
                             <try> namespace cmajor::util;</try>
                             <fail/>
                            </identifier_chars>
                           <success>using</success>
                          </using>
                          <Identifier>
                           <try>namespace cmajor::util;</try>
                            <identifier>
                             <try>namespace cmajor::util;</try>
                             <success>namespace</success>
                            </identifier>
                            <Keyword>
                             <try>namespace cmajor::util;</try>
                              <identifier>
                               <try>namespace cmajor::util;</try>
                               <success>namespace</success>
                              </identifier>
                             <success>namespace</success>
                            </Keyword>
                           <fail/>
                          </Identifier>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>using namespace cmajor::util;</try>
                          <using>
                           <try>using namespace cmajor::util;</try>
                            <identifier_chars>
                             <try> namespace cmajor::util;</try>
                             <fail/>
                            </identifier_chars>
                           <success>using</success>
                          </using>
                          <namespace>
                           <try>namespace cmajor::util;</try>
                            <identifier_chars>
                             <try> cmajor::util;</try>
                             <fail/>
                            </identifier_chars>
                           <success>namespace</success>
                          </namespace>
                          <QualifiedIdNode>
                           <try>cmajor::util;</try>
                            <NestedNameSpecifier>
                             <try>cmajor::util;</try>
                              <IdNode>
                               <try>cmajor::util;</try>
                                <SimpleTemplateId>
                                 <try>cmajor::util;</try>
                                  <TemplateName>
                                   <try>cmajor::util;</try>
                                    <Identifier>
                                     <try>cmajor::util;</try>
                                      <identifier>
                                       <try>cmajor::util;</try>
                                       <success>cmajor</success>
                                      </identifier>
                                      <Keyword>
                                       <try>cmajor::util;</try>
                                        <identifier>
                                         <try>cmajor::util;</try>
                                         <success>cmajor</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>cmajor</success>
                                    </Identifier>
                                   <success>cmajor</success>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                                <Identifier>
                                 <try>cmajor::util;</try>
                                  <identifier>
                                   <try>cmajor::util;</try>
                                   <success>cmajor</success>
                                  </identifier>
                                  <Keyword>
                                   <try>cmajor::util;</try>
                                    <identifier>
                                     <try>cmajor::util;</try>
                                     <success>cmajor</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>cmajor</success>
                                </Identifier>
                               <success>cmajor</success>
                              </IdNode>
                              <IdNode>
                               <try>util;</try>
                                <SimpleTemplateId>
                                 <try>util;</try>
                                  <TemplateName>
                                   <try>util;</try>
                                    <Identifier>
                                     <try>util;</try>
                                      <identifier>
                                       <try>util;</try>
                                       <success>util</success>
                                      </identifier>
                                      <Keyword>
                                       <try>util;</try>
                                        <identifier>
                                         <try>util;</try>
                                         <success>util</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>util</success>
                                    </Identifier>
                                   <success>util</success>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                                <Identifier>
                                 <try>util;</try>
                                  <identifier>
                                   <try>util;</try>
                                   <success>util</success>
                                  </identifier>
                                  <Keyword>
                                   <try>util;</try>
                                    <identifier>
                                     <try>util;</try>
                                     <success>util</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>util</success>
                                </Identifier>
                               <success>util</success>
                              </IdNode>
                             <success>cmajor::</success>
                            </NestedNameSpecifier>
                            <IdNode>
                             <try>util;</try>
                              <SimpleTemplateId>
                               <try>util;</try>
                                <TemplateName>
                                 <try>util;</try>
                                  <Identifier>
                                   <try>util;</try>
                                    <identifier>
                                     <try>util;</try>
                                     <success>util</success>
                                    </identifier>
                                    <Keyword>
                                     <try>util;</try>
                                      <identifier>
                                       <try>util;</try>
                                       <success>util</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>util</success>
                                  </Identifier>
                                 <success>util</success>
                                </TemplateName>
                               <fail/>
                              </SimpleTemplateId>
                              <Identifier>
                               <try>util;</try>
                                <identifier>
                                 <try>util;</try>
                                 <success>util</success>
                                </identifier>
                                <Keyword>
                                 <try>util;</try>
                                  <identifier>
                                   <try>util;</try>
                                   <success>util</success>
                                  </identifier>
                                 <fail/>
                                </Keyword>
                               <success>util</success>
                              </Identifier>
                             <success>util</success>
                            </IdNode>
                           <success>cmajor::util</success>
                          </QualifiedIdNode>
                         <success>using namespace cmajor::util;</success>
                        </UsingDirective>
                       <success>using namespace cmajor::util;</success>
                      </BlockDeclaration>
                     <success>using namespace cmajor::util;</success>
                    </Declaration>
                    <Declaration>
                     <try>using namespace cmajor::unicode;</try>
                      <NamespaceDefinition>
                       <try>using namespace cmajor::unicode;</try>
                        <NamedNamespaceDefinition>
                         <try>using namespace cmajor::unicode;</try>
                          <namespace>
                           <try>using namespace cmajor::unicode;</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>using namespace cmajor::unicode;</try>
                          <namespace>
                           <try>using namespace cmajor::unicode;</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>using namespace cmajor::unicode;</try>
                        <SimpleDeclaration>
                         <try>using namespace cmajor::unicode;</try>
                          <DeclSpecifiers>
                           <try>using namespace cmajor::unicode;</try>
                            <DeclSpecifier>
                             <try>using namespace cmajor::unicode;</try>
                              <StorageClassSpecifier>
                               <try>using namespace cmajor::unicode;</try>
                                <register>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>using namespace cmajor::unicode;</try>
                                <inline>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>using namespace cmajor::unicode;</try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>using namespace cmajor::unicode;</try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>using namespace cmajor::unicode;</try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>using namespace cmajor::unicode;</try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>using namespace cmajor::unicode;</try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>using namespace cmajor::unicode;</try>
                            <PrefixTypeExpr>
                             <try>using namespace cmajor::unicode;</try>
                              <CVSpecifierSequence>
                               <try>using namespace cmajor::unicode;</try>
                                <CVSpecifier>
                                 <try>using namespace cmajor::unicode;</try>
                                  <const>
                                   <try>using namespace cmajor::unicode;</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>using namespace cmajor::unicode;</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>using namespace cmajor::unicode;</try>
                                <PrimaryTypeExpr>
                                 <try>using namespace cmajor::unicode;</try>
                                  <SimpleType>
                                   <try>using namespace cmajor::unicode;</try>
                                    <SimpleTypeSpecifier>
                                     <try>using namespace cmajor::unicode;</try>
                                      <char>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>using namespace cmajor::unicode;</try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>using namespace cmajor::unicode;</try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>using namespace cmajor::unicode;</try>
                                    <class>
                                     <try>using namespace cmajor::unicode;</try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>using namespace cmajor::unicode;</try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>using namespace cmajor::unicode;</try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>using namespace cmajor::unicode;</try>
                                    <NestedNameSpecifier>
                                     <try>using namespace cmajor::unicode;</try>
                                      <IdNode>
                                       <try>using namespace cmajor::unicode;</try>
                                        <SimpleTemplateId>
                                         <try>using namespace cmajor::unicode;</try>
                                          <TemplateName>
                                           <try>using namespace cmajor::unicode;</try>
                                            <Identifier>
                                             <try>using namespace cmajor::unicode;</try>
                                              <identifier>
                                               <try>using namespace cmajor::unicode;</try>
                                               <success>using</success>
                                              </identifier>
                                              <Keyword>
                                               <try>using namespace cmajor::unicode;</try>
                                                <identifier>
                                                 <try>using namespace cmajor::unicode;</try>
                                                 <success>using</success>
                                                </identifier>
                                               <success>using</success>
                                              </Keyword>
                                             <fail/>
                                            </Identifier>
                                           <fail/>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>using namespace cmajor::unicode;</try>
                                          <identifier>
                                           <try>using namespace cmajor::unicode;</try>
                                           <success>using</success>
                                          </identifier>
                                          <Keyword>
                                           <try>using namespace cmajor::unicode;</try>
                                            <identifier>
                                             <try>using namespace cmajor::unicode;</try>
                                             <success>using</success>
                                            </identifier>
                                           <success>using</success>
                                          </Keyword>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>using namespace cmajor::unicode;</try>
                                      <SimpleTemplateId>
                                       <try>using namespace cmajor::unicode;</try>
                                        <TemplateName>
                                         <try>using namespace cmajor::unicode;</try>
                                          <Identifier>
                                           <try>using namespace cmajor::unicode;</try>
                                            <identifier>
                                             <try>using namespace cmajor::unicode;</try>
                                             <success>using</success>
                                            </identifier>
                                            <Keyword>
                                             <try>using namespace cmajor::unicode;</try>
                                              <identifier>
                                               <try>using namespace cmajor::unicode;</try>
                                               <success>using</success>
                                              </identifier>
                                             <success>using</success>
                                            </Keyword>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>using namespace cmajor::unicode;</try>
                                        <identifier>
                                         <try>using namespace cmajor::unicode;</try>
                                         <success>using</success>
                                        </identifier>
                                        <Keyword>
                                         <try>using namespace cmajor::unicode;</try>
                                          <identifier>
                                           <try>using namespace cmajor::unicode;</try>
                                           <success>using</success>
                                          </identifier>
                                         <success>using</success>
                                        </Keyword>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </QualifiedIdNode>
                                 <fail/>
                                </PrimaryTypeExpr>
                               <fail/>
                              </PostfixTypeExpr>
                             <fail/>
                            </PrefixTypeExpr>
                           <fail/>
                          </TypeExpr>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>using namespace cmajor::unicode;</try>
                          <using>
                           <try>using namespace cmajor::unicode;</try>
                            <identifier_chars>
                             <try> namespace cmajor::unicode;</try>
                             <fail/>
                            </identifier_chars>
                           <success>using</success>
                          </using>
                          <Identifier>
                           <try>namespace cmajor::unicode;</try>
                            <identifier>
                             <try>namespace cmajor::unicode;</try>
                             <success>namespace</success>
                            </identifier>
                            <Keyword>
                             <try>namespace cmajor::unicode;</try>
                              <identifier>
                               <try>namespace cmajor::unicode;</try>
                               <success>namespace</success>
                              </identifier>
                             <success>namespace</success>
                            </Keyword>
                           <fail/>
                          </Identifier>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>using namespace cmajor::unicode;</try>
                          <using>
                           <try>using namespace cmajor::unicode;</try>
                            <identifier_chars>
                             <try> namespace cmajor::unicode;</try>
                             <fail/>
                            </identifier_chars>
                           <success>using</success>
                          </using>
                          <namespace>
                           <try>namespace cmajor::unicode;</try>
                            <identifier_chars>
                             <try> cmajor::unicode;</try>
                             <fail/>
                            </identifier_chars>
                           <success>namespace</success>
                          </namespace>
                          <QualifiedIdNode>
                           <try>cmajor::unicode;</try>
                            <NestedNameSpecifier>
                             <try>cmajor::unicode;</try>
                              <IdNode>
                               <try>cmajor::unicode;</try>
                                <SimpleTemplateId>
                                 <try>cmajor::unicode;</try>
                                  <TemplateName>
                                   <try>cmajor::unicode;</try>
                                    <Identifier>
                                     <try>cmajor::unicode;</try>
                                      <identifier>
                                       <try>cmajor::unicode;</try>
                                       <success>cmajor</success>
                                      </identifier>
                                      <Keyword>
                                       <try>cmajor::unicode;</try>
                                        <identifier>
                                         <try>cmajor::unicode;</try>
                                         <success>cmajor</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>cmajor</success>
                                    </Identifier>
                                   <success>cmajor</success>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                                <Identifier>
                                 <try>cmajor::unicode;</try>
                                  <identifier>
                                   <try>cmajor::unicode;</try>
                                   <success>cmajor</success>
                                  </identifier>
                                  <Keyword>
                                   <try>cmajor::unicode;</try>
                                    <identifier>
                                     <try>cmajor::unicode;</try>
                                     <success>cmajor</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>cmajor</success>
                                </Identifier>
                               <success>cmajor</success>
                              </IdNode>
                              <IdNode>
                               <try>unicode;</try>
                                <SimpleTemplateId>
                                 <try>unicode;</try>
                                  <TemplateName>
                                   <try>unicode;</try>
                                    <Identifier>
                                     <try>unicode;</try>
                                      <identifier>
                                       <try>unicode;</try>
                                       <success>unicode</success>
                                      </identifier>
                                      <Keyword>
                                       <try>unicode;</try>
                                        <identifier>
                                         <try>unicode;</try>
                                         <success>unicode</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>unicode</success>
                                    </Identifier>
                                   <success>unicode</success>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                                <Identifier>
                                 <try>unicode;</try>
                                  <identifier>
                                   <try>unicode;</try>
                                   <success>unicode</success>
                                  </identifier>
                                  <Keyword>
                                   <try>unicode;</try>
                                    <identifier>
                                     <try>unicode;</try>
                                     <success>unicode</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>unicode</success>
                                </Identifier>
                               <success>unicode</success>
                              </IdNode>
                             <success>cmajor::</success>
                            </NestedNameSpecifier>
                            <IdNode>
                             <try>unicode;</try>
                              <SimpleTemplateId>
                               <try>unicode;</try>
                                <TemplateName>
                                 <try>unicode;</try>
                                  <Identifier>
                                   <try>unicode;</try>
                                    <identifier>
                                     <try>unicode;</try>
                                     <success>unicode</success>
                                    </identifier>
                                    <Keyword>
                                     <try>unicode;</try>
                                      <identifier>
                                       <try>unicode;</try>
                                       <success>unicode</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>unicode</success>
                                  </Identifier>
                                 <success>unicode</success>
                                </TemplateName>
                               <fail/>
                              </SimpleTemplateId>
                              <Identifier>
                               <try>unicode;</try>
                                <identifier>
                                 <try>unicode;</try>
                                 <success>unicode</success>
                                </identifier>
                                <Keyword>
                                 <try>unicode;</try>
                                  <identifier>
                                   <try>unicode;</try>
                                   <success>unicode</success>
                                  </identifier>
                                 <fail/>
                                </Keyword>
                               <success>unicode</success>
                              </Identifier>
                             <success>unicode</success>
                            </IdNode>
                           <success>cmajor::unicode</success>
                          </QualifiedIdNode>
                         <success>using namespace cmajor::unicode;</success>
                        </UsingDirective>
                       <success>using namespace cmajor::unicode;</success>
                      </BlockDeclaration>
                     <success>using namespace cmajor::unicode;</success>
                    </Declaration>
                    <Declaration>
                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                      <NamespaceDefinition>
                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                        <NamedNamespaceDefinition>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <namespace>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <namespace>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                        <SimpleDeclaration>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <DeclSpecifiers>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <DeclSpecifier>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <StorageClassSpecifier>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <register>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <inline>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <PrefixTypeExpr>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <CVSpecifierSequence>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <CVSpecifier>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <const>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <PrimaryTypeExpr>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <SimpleType>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <SimpleTypeSpecifier>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <char>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <class>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <NestedNameSpecifier>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <IdNode>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <SimpleTemplateId>
                                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <TemplateName>
                                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <Identifier>
                                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                               <success>DeclSpecifier</success>
                                              </identifier>
                                              <Keyword>
                                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                                <identifier>
                                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                                 <success>DeclSpecifier</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>DeclSpecifier</success>
                                            </Identifier>
                                           <success>DeclSpecifier</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>DeclSpecifier</success>
                                        </Identifier>
                                       <success>DeclSpecifier</success>
                                      </IdNode>
                                      <IdNode>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <SimpleTemplateId>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <TemplateName>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <Identifier>
                                             <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                               <success>DeclSpecifier</success>
                                              </identifier>
                                              <Keyword>
                                               <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                                <identifier>
                                                 <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                                 <success>DeclSpecifier</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>DeclSpecifier</success>
                                            </Identifier>
                                           <success>DeclSpecifier</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>DeclSpecifier</success>
                                        </Identifier>
                                       <success>DeclSpecifier</success>
                                      </IdNode>
                                     <success>DeclSpecifier::</success>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <SimpleTemplateId>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <TemplateName>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <Identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                               <success>DeclSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>DeclSpecifier</success>
                                          </Identifier>
                                         <success>DeclSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </IdNode>
                                   <success>DeclSpecifier::DeclSpecifier</success>
                                  </QualifiedIdNode>
                                 <success>DeclSpecifier::DeclSpecifier</success>
                                </PrimaryTypeExpr>
                               <success>DeclSpecifier::DeclSpecifier</success>
                              </PostfixTypeExpr>
                             <success>DeclSpecifier::DeclSpecifier</success>
                            </PrefixTypeExpr>
                           <success>DeclSpecifier::DeclSpecifier</success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                            <Declarator>
                             <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                              <IdExpression>
                               <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                <QualifiedId>
                                 <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <NestedNameSpecifier>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <IdNode>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <SimpleTemplateId>
                                       <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <TemplateName>
                                         <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <Identifier>
                                           <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                 <fail/>
                                </QualifiedId>
                                <UnqualifiedId>
                                 <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <TemplateId>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <SimpleTemplateId>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <TemplateName>
                                       <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <Identifier>
                                         <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </identifier>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                   <fail/>
                                  </TemplateId>
                                  <Identifier>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <identifier>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                  <OperatorFunctionId>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <operator>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </OperatorFunctionId>
                                  <ConversionFunctionId>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <operator>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </ConversionFunctionId>
                                 <fail/>
                                </UnqualifiedId>
                               <fail/>
                              </IdExpression>
                             <fail/>
                            </Declarator>
                           <fail/>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <using>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <using>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <using>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <EnumKey>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <enum>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <typedef>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <ClassKey>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <class>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </class>
                            <struct>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </struct>
                            <union>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                        <DeclSpecifiers>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <DeclSpecifier>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <StorageClassSpecifier>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <register>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </register>
                              <static>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <inline>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <PrefixTypeExpr>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <CVSpecifierSequence>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <CVSpecifier>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <const>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <PrimaryTypeExpr>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <SimpleType>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <SimpleTypeSpecifier>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <char>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <fail/>
                                </SimpleType>
                                <typename>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </typename>
                                <ClassKey>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <class>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                   <fail/>
                                  </class>
                                  <struct>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                   <fail/>
                                  </struct>
                                  <union>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                   <fail/>
                                  </union>
                                 <fail/>
                                </ClassKey>
                                <QualifiedIdNode>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <NestedNameSpecifier>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <IdNode>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <SimpleTemplateId>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <TemplateName>
                                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <Identifier>
                                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                               <success>DeclSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>DeclSpecifier</success>
                                          </Identifier>
                                         <success>DeclSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <SimpleTemplateId>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <TemplateName>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <Identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                               <success>DeclSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>DeclSpecifier</success>
                                          </Identifier>
                                         <success>DeclSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </IdNode>
                                   <success>DeclSpecifier::</success>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <SimpleTemplateId>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <TemplateName>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <Identifier>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>DeclSpecifier</success>
                                        </Identifier>
                                       <success>DeclSpecifier</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <identifier>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <success>DeclSpecifier</success>
                                      </identifier>
                                      <Keyword>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>DeclSpecifier</success>
                                    </Identifier>
                                   <success>DeclSpecifier</success>
                                  </IdNode>
                                 <success>DeclSpecifier::DeclSpecifier</success>
                                </QualifiedIdNode>
                               <success>DeclSpecifier::DeclSpecifier</success>
                              </PrimaryTypeExpr>
                             <success>DeclSpecifier::DeclSpecifier</success>
                            </PostfixTypeExpr>
                           <success>DeclSpecifier::DeclSpecifier</success>
                          </PrefixTypeExpr>
                         <success>DeclSpecifier::DeclSpecifier</success>
                        </TypeExpr>
                        <Declarator>
                         <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                          <IdExpression>
                           <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                            <QualifiedId>
                             <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                              <NestedNameSpecifier>
                               <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                <IdNode>
                                 <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <SimpleTemplateId>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <TemplateName>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <Identifier>
                                       <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <identifier>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                 <fail/>
                                </IdNode>
                               <fail/>
                              </NestedNameSpecifier>
                             <fail/>
                            </QualifiedId>
                            <UnqualifiedId>
                             <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                              <TemplateId>
                               <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                <SimpleTemplateId>
                                 <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <TemplateName>
                                   <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <Identifier>
                                     <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <identifier>
                                       <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </identifier>
                                     <fail/>
                                    </Identifier>
                                   <fail/>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                               <fail/>
                              </TemplateId>
                              <Identifier>
                               <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                <identifier>
                                 <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </identifier>
                               <fail/>
                              </Identifier>
                              <OperatorFunctionId>
                               <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                <operator>
                                 <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </OperatorFunctionId>
                              <ConversionFunctionId>
                               <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                <operator>
                                 <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </ConversionFunctionId>
                             <fail/>
                            </UnqualifiedId>
                           <fail/>
                          </IdExpression>
                         <fail/>
                        </Declarator>
                       <fail/>
                      </FunctionDefinition>
                      <SpecialMemberFunctionDefinition>
                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                        <DeclSpecifiers>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <DeclSpecifier>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <StorageClassSpecifier>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <register>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </register>
                              <static>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <inline>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <Declarator>
                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                          <IdExpression>
                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                            <QualifiedId>
                             <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                              <NestedNameSpecifier>
                               <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <IdNode>
                                 <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <SimpleTemplateId>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <TemplateName>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <Identifier>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <identifier>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <success>DeclSpecifier</success>
                                    </identifier>
                                    <Keyword>
                                     <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <identifier>
                                       <try>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <success>DeclSpecifier</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>DeclSpecifier</success>
                                  </Identifier>
                                 <success>DeclSpecifier</success>
                                </IdNode>
                                <IdNode>
                                 <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <SimpleTemplateId>
                                   <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <TemplateName>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <Identifier>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <identifier>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <success>DeclSpecifier</success>
                                    </identifier>
                                    <Keyword>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <identifier>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                       <success>DeclSpecifier</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>DeclSpecifier</success>
                                  </Identifier>
                                 <success>DeclSpecifier</success>
                                </IdNode>
                               <success>DeclSpecifier::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                <TemplateId>
                                 <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <SimpleTemplateId>
                                   <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <TemplateName>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                      <Identifier>
                                       <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                  <identifier>
                                   <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                   <success>DeclSpecifier</success>
                                  </identifier>
                                  <Keyword>
                                   <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                    <identifier>
                                     <try>DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) </try>
                                     <success>DeclSpecifier</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>DeclSpecifier</success>
                                </Identifier>
                               <success>DeclSpecifier</success>
                              </UnqualifiedId>
                             <success>DeclSpecifier::DeclSpecifier</success>
                            </QualifiedId>
                           <success>DeclSpecifier::DeclSpecifier</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(const std::u32string&amp; name_): CppObject(name_) </try>
                            <ParameterDeclaration>
                             <try>const std::u32string&amp; name_): CppObject(name_) </try>
                              <TypeExpr>
                               <try>const std::u32string&amp; name_): CppObject(name_) </try>
                                <PrefixTypeExpr>
                                 <try>const std::u32string&amp; name_): CppObject(name_) </try>
                                  <CVSpecifierSequence>
                                   <try>const std::u32string&amp; name_): CppObject(name_) </try>
                                    <CVSpecifier>
                                     <try>const std::u32string&amp; name_): CppObject(name_) </try>
                                      <const>
                                       <try>const std::u32string&amp; name_): CppObject(name_) </try>
                                        <identifier_chars>
                                         <try> std::u32string&amp; name_): CppObject(name_) </try>
                                         <fail/>
                                        </identifier_chars>
                                       <success>const</success>
                                      </const>
                                     <success>const</success>
                                    </CVSpecifier>
                                    <CVSpecifier>
                                     <try>std::u32string&amp; name_): CppObject(name_) </try>
                                      <const>
                                       <try>std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success>const</success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>std::u32string&amp; name_): CppObject(name_) </try>
                                    <PrimaryTypeExpr>
                                     <try>std::u32string&amp; name_): CppObject(name_) </try>
                                      <SimpleType>
                                       <try>std::u32string&amp; name_): CppObject(name_) </try>
                                        <SimpleTypeSpecifier>
                                         <try>std::u32string&amp; name_): CppObject(name_) </try>
                                          <char>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>std::u32string&amp; name_): CppObject(name_) </try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>std::u32string&amp; name_): CppObject(name_) </try>
                                        <class>
                                         <try>std::u32string&amp; name_): CppObject(name_) </try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>std::u32string&amp; name_): CppObject(name_) </try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>std::u32string&amp; name_): CppObject(name_) </try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>std::u32string&amp; name_): CppObject(name_) </try>
                                        <NestedNameSpecifier>
                                         <try>std::u32string&amp; name_): CppObject(name_) </try>
                                          <IdNode>
                                           <try>std::u32string&amp; name_): CppObject(name_) </try>
                                            <SimpleTemplateId>
                                             <try>std::u32string&amp; name_): CppObject(name_) </try>
                                              <TemplateName>
                                               <try>std::u32string&amp; name_): CppObject(name_) </try>
                                                <Identifier>
                                                 <try>std::u32string&amp; name_): CppObject(name_) </try>
                                                  <identifier>
                                                   <try>std::u32string&amp; name_): CppObject(name_) </try>
                                                   <success>std</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>std::u32string&amp; name_): CppObject(name_) </try>
                                                    <identifier>
                                                     <try>std::u32string&amp; name_): CppObject(name_) </try>
                                                     <success>std</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>std</success>
                                                </Identifier>
                                               <success>std</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>std::u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>std::u32string&amp; name_): CppObject(name_) </try>
                                               <success>std</success>
                                              </identifier>
                                              <Keyword>
                                               <try>std::u32string&amp; name_): CppObject(name_) </try>
                                                <identifier>
                                                 <try>std::u32string&amp; name_): CppObject(name_) </try>
                                                 <success>std</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>std</success>
                                            </Identifier>
                                           <success>std</success>
                                          </IdNode>
                                          <IdNode>
                                           <try>u32string&amp; name_): CppObject(name_) </try>
                                            <SimpleTemplateId>
                                             <try>u32string&amp; name_): CppObject(name_) </try>
                                              <TemplateName>
                                               <try>u32string&amp; name_): CppObject(name_) </try>
                                                <Identifier>
                                                 <try>u32string&amp; name_): CppObject(name_) </try>
                                                  <identifier>
                                                   <try>u32string&amp; name_): CppObject(name_) </try>
                                                   <success>u32string</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>u32string&amp; name_): CppObject(name_) </try>
                                                    <identifier>
                                                     <try>u32string&amp; name_): CppObject(name_) </try>
                                                     <success>u32string</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>u32string</success>
                                                </Identifier>
                                               <success>u32string</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>u32string&amp; name_): CppObject(name_) </try>
                                               <success>u32string</success>
                                              </identifier>
                                              <Keyword>
                                               <try>u32string&amp; name_): CppObject(name_) </try>
                                                <identifier>
                                                 <try>u32string&amp; name_): CppObject(name_) </try>
                                                 <success>u32string</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>u32string</success>
                                            </Identifier>
                                           <success>u32string</success>
                                          </IdNode>
                                         <success>std::</success>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>u32string&amp; name_): CppObject(name_) </try>
                                          <SimpleTemplateId>
                                           <try>u32string&amp; name_): CppObject(name_) </try>
                                            <TemplateName>
                                             <try>u32string&amp; name_): CppObject(name_) </try>
                                              <Identifier>
                                               <try>u32string&amp; name_): CppObject(name_) </try>
                                                <identifier>
                                                 <try>u32string&amp; name_): CppObject(name_) </try>
                                                 <success>u32string</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>u32string&amp; name_): CppObject(name_) </try>
                                                  <identifier>
                                                   <try>u32string&amp; name_): CppObject(name_) </try>
                                                   <success>u32string</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>u32string</success>
                                              </Identifier>
                                             <success>u32string</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>u32string&amp; name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>u32string&amp; name_): CppObject(name_) </try>
                                             <success>u32string</success>
                                            </identifier>
                                            <Keyword>
                                             <try>u32string&amp; name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>u32string&amp; name_): CppObject(name_) </try>
                                               <success>u32string</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>u32string</success>
                                          </Identifier>
                                         <success>u32string</success>
                                        </IdNode>
                                       <success>std::u32string</success>
                                      </QualifiedIdNode>
                                     <success>std::u32string</success>
                                    </PrimaryTypeExpr>
                                   <success>std::u32string&amp;</success>
                                  </PostfixTypeExpr>
                                 <success>const std::u32string&amp;</success>
                                </PrefixTypeExpr>
                               <success>const std::u32string&amp;</success>
                              </TypeExpr>
                              <Declarator>
                               <try>name_): CppObject(name_) </try>
                                <IdExpression>
                                 <try>name_): CppObject(name_) </try>
                                  <QualifiedId>
                                   <try>name_): CppObject(name_) </try>
                                    <NestedNameSpecifier>
                                     <try>name_): CppObject(name_) </try>
                                      <IdNode>
                                       <try>name_): CppObject(name_) </try>
                                        <SimpleTemplateId>
                                         <try>name_): CppObject(name_) </try>
                                          <TemplateName>
                                           <try>name_): CppObject(name_) </try>
                                            <Identifier>
                                             <try>name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>name_): CppObject(name_) </try>
                                               <success>name_</success>
                                              </identifier>
                                              <Keyword>
                                               <try>name_): CppObject(name_) </try>
                                                <identifier>
                                                 <try>name_): CppObject(name_) </try>
                                                 <success>name_</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>name_</success>
                                            </Identifier>
                                           <success>name_</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>name_): CppObject(name_) </try>
                                          <identifier>
                                           <try>name_): CppObject(name_) </try>
                                           <success>name_</success>
                                          </identifier>
                                          <Keyword>
                                           <try>name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>name_): CppObject(name_) </try>
                                             <success>name_</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>name_</success>
                                        </Identifier>
                                       <success>name_</success>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                   <fail/>
                                  </QualifiedId>
                                  <UnqualifiedId>
                                   <try>name_): CppObject(name_) </try>
                                    <TemplateId>
                                     <try>name_): CppObject(name_) </try>
                                      <SimpleTemplateId>
                                       <try>name_): CppObject(name_) </try>
                                        <TemplateName>
                                         <try>name_): CppObject(name_) </try>
                                          <Identifier>
                                           <try>name_): CppObject(name_) </try>
                                            <identifier>
                                             <try>name_): CppObject(name_) </try>
                                             <success>name_</success>
                                            </identifier>
                                            <Keyword>
                                             <try>name_): CppObject(name_) </try>
                                              <identifier>
                                               <try>name_): CppObject(name_) </try>
                                               <success>name_</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>name_</success>
                                          </Identifier>
                                         <success>name_</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>name_): CppObject(name_) </try>
                                      <identifier>
                                       <try>name_): CppObject(name_) </try>
                                       <success>name_</success>
                                      </identifier>
                                      <Keyword>
                                       <try>name_): CppObject(name_) </try>
                                        <identifier>
                                         <try>name_): CppObject(name_) </try>
                                         <success>name_</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>name_</success>
                                    </Identifier>
                                   <success>name_</success>
                                  </UnqualifiedId>
                                 <success>name_</success>
                                </IdExpression>
                                <ParameterList>
                                 <try>): CppObject(name_) </try>
                                 <fail/>
                                </ParameterList>
                               <success>name_</success>
                              </Declarator>
                             <success>const std::u32string&amp; name_</success>
                            </ParameterDeclaration>
                           <success>(const std::u32string&amp; name_)</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>: CppObject(name_) </try>
                            <CVSpecifier>
                             <try>: CppObject(name_) </try>
                              <const>
                               <try>: CppObject(name_) </try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>: CppObject(name_) </try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_)</success>
                        </Declarator>
                        <CtorInitializer>
                         <try>: CppObject(name_) </try>
                          <MemberInitializerList>
                           <try>CppObject(name_) </try>
                            <MemberInitializer>
                             <try>CppObject(name_) </try>
                              <MemberInitializerId>
                               <try>CppObject(name_) </try>
                                <QualifiedIdNode>
                                 <try>CppObject(name_) </try>
                                  <NestedNameSpecifier>
                                   <try>CppObject(name_) </try>
                                    <IdNode>
                                     <try>CppObject(name_) </try>
                                      <SimpleTemplateId>
                                       <try>CppObject(name_) </try>
                                        <TemplateName>
                                         <try>CppObject(name_) </try>
                                          <Identifier>
                                           <try>CppObject(name_) </try>
                                            <identifier>
                                             <try>CppObject(name_) </try>
                                             <success>CppObject</success>
                                            </identifier>
                                            <Keyword>
                                             <try>CppObject(name_) </try>
                                              <identifier>
                                               <try>CppObject(name_) </try>
                                               <success>CppObject</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>CppObject</success>
                                          </Identifier>
                                         <success>CppObject</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>CppObject(name_) </try>
                                        <identifier>
                                         <try>CppObject(name_) </try>
                                         <success>CppObject</success>
                                        </identifier>
                                        <Keyword>
                                         <try>CppObject(name_) </try>
                                          <identifier>
                                           <try>CppObject(name_) </try>
                                           <success>CppObject</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>CppObject</success>
                                      </Identifier>
                                     <success>CppObject</success>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>CppObject(name_) </try>
                                    <SimpleTemplateId>
                                     <try>CppObject(name_) </try>
                                      <TemplateName>
                                       <try>CppObject(name_) </try>
                                        <Identifier>
                                         <try>CppObject(name_) </try>
                                          <identifier>
                                           <try>CppObject(name_) </try>
                                           <success>CppObject</success>
                                          </identifier>
                                          <Keyword>
                                           <try>CppObject(name_) </try>
                                            <identifier>
                                             <try>CppObject(name_) </try>
                                             <success>CppObject</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>CppObject</success>
                                        </Identifier>
                                       <success>CppObject</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>CppObject(name_) </try>
                                      <identifier>
                                       <try>CppObject(name_) </try>
                                       <success>CppObject</success>
                                      </identifier>
                                      <Keyword>
                                       <try>CppObject(name_) </try>
                                        <identifier>
                                         <try>CppObject(name_) </try>
                                         <success>CppObject</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>CppObject</success>
                                    </Identifier>
                                   <success>CppObject</success>
                                  </IdNode>
                                 <success>CppObject</success>
                                </QualifiedIdNode>
                               <success>CppObject</success>
                              </MemberInitializerId>
                              <ExpressionList>
                               <try>name_) </try>
                                <InitializerList>
                                 <try>name_) </try>
                                  <InitializerClause>
                                   <try>name_) </try>
                                    <AssignmentExpression>
                                     <try>name_) </try>
                                      <LogicalOrExpression>
                                       <try>name_) </try>
                                        <LogicalAndExpression>
                                         <try>name_) </try>
                                          <InclusiveOrExpression>
                                           <try>name_) </try>
                                            <ExclusiveOrExpression>
                                             <try>name_) </try>
                                              <AndExpression>
                                               <try>name_) </try>
                                                <EqualityExpression>
                                                 <try>name_) </try>
                                                  <RelationalExpression>
                                                   <try>name_) </try>
                                                    <ShiftExpression>
                                                     <try>name_) </try>
                                                      <AdditiveExpression>
                                                       <try>name_) </try>
                                                        <MultiplicativeExpression>
                                                         <try>name_) </try>
                                                          <PMExpression>
                                                           <try>name_) </try>
                                                            <CastExpression>
                                                             <try>name_) </try>
                                                              <UnaryExpression>
                                                               <try>name_) </try>
                                                                <UnaryOperator>
                                                                 <try>name_) </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>name_) </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>name_) </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>name_) </try>
                                                                  <new>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>name_) </try>
                                                                  <delete>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>name_) </try>
                                                                  <PrimaryExpression>
                                                                   <try>name_) </try>
                                                                    <Literal>
                                                                     <try>name_) </try>
                                                                      <FloatingLiteral>
                                                                       <try>name_) </try>
                                                                        <FractionalConstant>
                                                                         <try>name_) </try>
                                                                          <digit_sequence>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>name_) </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>name_) </try>
                                                                        <EncodingPrefix>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>name_) </try>
                                                                        <true>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>name_) </try>
                                                                        <nullptr>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>name_) </try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>name_) </try>
                                                                      <dynamic_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>name_) </try>
                                                                      <typeid>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>name_) </try>
                                                                      <QualifiedId>
                                                                       <try>name_) </try>
                                                                        <NestedNameSpecifier>
                                                                         <try>name_) </try>
                                                                          <IdNode>
                                                                           <try>name_) </try>
                                                                            <SimpleTemplateId>
                                                                             <try>name_) </try>
                                                                              <TemplateName>
                                                                               <try>name_) </try>
                                                                                <Identifier>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>name_) </try>
                                                                                    <identifier>
                                                                                     <try>name_) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>name_</success>
                                                                                </Identifier>
                                                                               <success>name_</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>name_) </try>
                                                                              <identifier>
                                                                               <try>name_) </try>
                                                                               <success>name_</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>name_) </try>
                                                                                <identifier>
                                                                                 <try>name_) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>name_</success>
                                                                            </Identifier>
                                                                           <success>name_</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>name_) </try>
                                                                        <TemplateId>
                                                                         <try>name_) </try>
                                                                          <SimpleTemplateId>
                                                                           <try>name_) </try>
                                                                            <TemplateName>
                                                                             <try>name_) </try>
                                                                              <Identifier>
                                                                               <try>name_) </try>
                                                                                <identifier>
                                                                                 <try>name_) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>name_</success>
                                                                              </Identifier>
                                                                             <success>name_</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>name_) </try>
                                                                          <identifier>
                                                                           <try>name_) </try>
                                                                           <success>name_</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>name_) </try>
                                                                            <identifier>
                                                                             <try>name_) </try>
                                                                             <success>name_</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>name_</success>
                                                                        </Identifier>
                                                                       <success>name_</success>
                                                                      </UnqualifiedId>
                                                                     <success>name_</success>
                                                                    </IdExpression>
                                                                   <success>name_</success>
                                                                  </PrimaryExpression>
                                                                 <success>name_</success>
                                                                </PostfixExpression>
                                                               <success>name_</success>
                                                              </UnaryExpression>
                                                             <success>name_</success>
                                                            </CastExpression>
                                                           <success>name_</success>
                                                          </PMExpression>
                                                         <success>name_</success>
                                                        </MultiplicativeExpression>
                                                       <success>name_</success>
                                                      </AdditiveExpression>
                                                     <success>name_</success>
                                                    </ShiftExpression>
                                                   <success>name_</success>
                                                  </RelationalExpression>
                                                 <success>name_</success>
                                                </EqualityExpression>
                                               <success>name_</success>
                                              </AndExpression>
                                             <success>name_</success>
                                            </ExclusiveOrExpression>
                                           <success>name_</success>
                                          </InclusiveOrExpression>
                                         <success>name_</success>
                                        </LogicalAndExpression>
                                       <success>name_</success>
                                      </LogicalOrExpression>
                                      <AssignmentOperator>
                                       <try>) </try>
                                       <fail/>
                                      </AssignmentOperator>
                                      <ConditionalExpression>
                                       <try>name_) </try>
                                        <LogicalOrExpression>
                                         <try>name_) </try>
                                          <LogicalAndExpression>
                                           <try>name_) </try>
                                            <InclusiveOrExpression>
                                             <try>name_) </try>
                                              <ExclusiveOrExpression>
                                               <try>name_) </try>
                                                <AndExpression>
                                                 <try>name_) </try>
                                                  <EqualityExpression>
                                                   <try>name_) </try>
                                                    <RelationalExpression>
                                                     <try>name_) </try>
                                                      <ShiftExpression>
                                                       <try>name_) </try>
                                                        <AdditiveExpression>
                                                         <try>name_) </try>
                                                          <MultiplicativeExpression>
                                                           <try>name_) </try>
                                                            <PMExpression>
                                                             <try>name_) </try>
                                                              <CastExpression>
                                                               <try>name_) </try>
                                                                <UnaryExpression>
                                                                 <try>name_) </try>
                                                                  <UnaryOperator>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </UnaryOperator>
                                                                  <sizeof>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </sizeof>
                                                                  <alignof>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </alignof>
                                                                  <NewExpression>
                                                                   <try>name_) </try>
                                                                    <new>
                                                                     <try>name_) </try>
                                                                     <fail/>
                                                                    </new>
                                                                   <fail/>
                                                                  </NewExpression>
                                                                  <DeleteExpression>
                                                                   <try>name_) </try>
                                                                    <delete>
                                                                     <try>name_) </try>
                                                                     <fail/>
                                                                    </delete>
                                                                   <fail/>
                                                                  </DeleteExpression>
                                                                  <PostfixExpression>
                                                                   <try>name_) </try>
                                                                    <PrimaryExpression>
                                                                     <try>name_) </try>
                                                                      <Literal>
                                                                       <try>name_) </try>
                                                                        <FloatingLiteral>
                                                                         <try>name_) </try>
                                                                          <FractionalConstant>
                                                                           <try>name_) </try>
                                                                            <digit_sequence>
                                                                             <try>name_) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                            <digit_sequence>
                                                                             <try>name_) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                           <fail/>
                                                                          </FractionalConstant>
                                                                          <digit_sequence>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FloatingLiteral>
                                                                        <IntegerLiteral>
                                                                         <try>name_) </try>
                                                                          <HexadecimalLiteral>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </HexadecimalLiteral>
                                                                          <OctalLiteral>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </OctalLiteral>
                                                                          <DecimalLiteral>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </DecimalLiteral>
                                                                         <fail/>
                                                                        </IntegerLiteral>
                                                                        <CharacterLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </CharacterLiteral>
                                                                        <StringLiteral>
                                                                         <try>name_) </try>
                                                                          <EncodingPrefix>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                          <EncodingPrefix>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                         <fail/>
                                                                        </StringLiteral>
                                                                        <BooleanLiteral>
                                                                         <try>name_) </try>
                                                                          <true>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </true>
                                                                          <false>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </false>
                                                                         <fail/>
                                                                        </BooleanLiteral>
                                                                        <PointerLiteral>
                                                                         <try>name_) </try>
                                                                          <nullptr>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </nullptr>
                                                                         <fail/>
                                                                        </PointerLiteral>
                                                                       <fail/>
                                                                      </Literal>
                                                                      <this>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </this>
                                                                      <CppCastExpression>
                                                                       <try>name_) </try>
                                                                        <dynamic_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </dynamic_cast>
                                                                        <static_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </static_cast>
                                                                        <reinterpret_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </reinterpret_cast>
                                                                        <const_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </const_cast>
                                                                       <fail/>
                                                                      </CppCastExpression>
                                                                      <TypeIdExpression>
                                                                       <try>name_) </try>
                                                                        <typeid>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </typeid>
                                                                        <typeid>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </typeid>
                                                                       <fail/>
                                                                      </TypeIdExpression>
                                                                      <IdExpression>
                                                                       <try>name_) </try>
                                                                        <QualifiedId>
                                                                         <try>name_) </try>
                                                                          <NestedNameSpecifier>
                                                                           <try>name_) </try>
                                                                            <IdNode>
                                                                             <try>name_) </try>
                                                                              <SimpleTemplateId>
                                                                               <try>name_) </try>
                                                                                <TemplateName>
                                                                                 <try>name_) </try>
                                                                                  <Identifier>
                                                                                   <try>name_) </try>
                                                                                    <identifier>
                                                                                     <try>name_) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                    <Keyword>
                                                                                     <try>name_) </try>
                                                                                      <identifier>
                                                                                       <try>name_) </try>
                                                                                       <success>name_</success>
                                                                                      </identifier>
                                                                                     <fail/>
                                                                                    </Keyword>
                                                                                   <success>name_</success>
                                                                                  </Identifier>
                                                                                 <success>name_</success>
                                                                                </TemplateName>
                                                                               <fail/>
                                                                              </SimpleTemplateId>
                                                                              <Identifier>
                                                                               <try>name_) </try>
                                                                                <identifier>
                                                                                 <try>name_) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>name_</success>
                                                                              </Identifier>
                                                                             <success>name_</success>
                                                                            </IdNode>
                                                                           <fail/>
                                                                          </NestedNameSpecifier>
                                                                         <fail/>
                                                                        </QualifiedId>
                                                                        <UnqualifiedId>
                                                                         <try>name_) </try>
                                                                          <TemplateId>
                                                                           <try>name_) </try>
                                                                            <SimpleTemplateId>
                                                                             <try>name_) </try>
                                                                              <TemplateName>
                                                                               <try>name_) </try>
                                                                                <Identifier>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>name_) </try>
                                                                                    <identifier>
                                                                                     <try>name_) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>name_</success>
                                                                                </Identifier>
                                                                               <success>name_</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                           <fail/>
                                                                          </TemplateId>
                                                                          <Identifier>
                                                                           <try>name_) </try>
                                                                            <identifier>
                                                                             <try>name_) </try>
                                                                             <success>name_</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>name_) </try>
                                                                              <identifier>
                                                                               <try>name_) </try>
                                                                               <success>name_</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>name_</success>
                                                                          </Identifier>
                                                                         <success>name_</success>
                                                                        </UnqualifiedId>
                                                                       <success>name_</success>
                                                                      </IdExpression>
                                                                     <success>name_</success>
                                                                    </PrimaryExpression>
                                                                   <success>name_</success>
                                                                  </PostfixExpression>
                                                                 <success>name_</success>
                                                                </UnaryExpression>
                                                               <success>name_</success>
                                                              </CastExpression>
                                                             <success>name_</success>
                                                            </PMExpression>
                                                           <success>name_</success>
                                                          </MultiplicativeExpression>
                                                         <success>name_</success>
                                                        </AdditiveExpression>
                                                       <success>name_</success>
                                                      </ShiftExpression>
                                                     <success>name_</success>
                                                    </RelationalExpression>
                                                   <success>name_</success>
                                                  </EqualityExpression>
                                                 <success>name_</success>
                                                </AndExpression>
                                               <success>name_</success>
                                              </ExclusiveOrExpression>
                                             <success>name_</success>
                                            </InclusiveOrExpression>
                                           <success>name_</success>
                                          </LogicalAndExpression>
                                         <success>name_</success>
                                        </LogicalOrExpression>
                                       <success>name_</success>
                                      </ConditionalExpression>
                                     <success>name_</success>
                                    </AssignmentExpression>
                                   <success>name_</success>
                                  </InitializerClause>
                                 <success>name_</success>
                                </InitializerList>
                               <success>name_</success>
                              </ExpressionList>
                             <success>CppObject(name_)</success>
                            </MemberInitializer>
                           <success>CppObject(name_) \r\n</success>
                          </MemberInitializerList>
                         <success>: CppObject(name_) \r\n</success>
                        </CtorInitializer>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n}</success>
                        </FunctionBody>
                       <success>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) \r\n{\r\n}</success>
                      </SpecialMemberFunctionDefinition>
                     <success>DeclSpecifier::DeclSpecifier(const std::u32string&amp; name_): CppObject(name_) \r\n{\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                      <NamespaceDefinition>
                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                        <NamedNamespaceDefinition>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <namespace>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <namespace>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                        <SimpleDeclaration>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <DeclSpecifiers>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <DeclSpecifier>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <StorageClassSpecifier>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                <register>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                <inline>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <PrefixTypeExpr>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <CVSpecifierSequence>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                <CVSpecifier>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                  <const>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                <PrimaryTypeExpr>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                  <SimpleType>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                    <SimpleTypeSpecifier>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                      <char>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                    <class>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                    <NestedNameSpecifier>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                      <IdNode>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                        <SimpleTemplateId>
                                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                          <TemplateName>
                                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                            <Identifier>
                                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                              <identifier>
                                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                               <success>Typedef</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                                <identifier>
                                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                                 <success>Typedef</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Typedef</success>
                                            </Identifier>
                                           <success>Typedef</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                             <success>Typedef</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Typedef</success>
                                        </Identifier>
                                       <success>Typedef</success>
                                      </IdNode>
                                      <IdNode>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <SimpleTemplateId>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <TemplateName>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                            <Identifier>
                                             <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                              <identifier>
                                               <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                               <success>Typedef</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                                <identifier>
                                                 <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                                 <success>Typedef</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Typedef</success>
                                            </Identifier>
                                           <success>Typedef</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                             <success>Typedef</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Typedef</success>
                                        </Identifier>
                                       <success>Typedef</success>
                                      </IdNode>
                                     <success>Typedef::</success>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                      <SimpleTemplateId>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <TemplateName>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <Identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                             <success>Typedef</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                              <identifier>
                                               <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                               <success>Typedef</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Typedef</success>
                                          </Identifier>
                                         <success>Typedef</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </IdNode>
                                   <success>Typedef::Typedef</success>
                                  </QualifiedIdNode>
                                 <success>Typedef::Typedef</success>
                                </PrimaryTypeExpr>
                               <success>Typedef::Typedef</success>
                              </PostfixTypeExpr>
                             <success>Typedef::Typedef</success>
                            </PrefixTypeExpr>
                           <success>Typedef::Typedef</success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>(): DeclSpecifier(U"typedef") </try>
                            <Declarator>
                             <try>(): DeclSpecifier(U"typedef") </try>
                              <IdExpression>
                               <try>(): DeclSpecifier(U"typedef") </try>
                                <QualifiedId>
                                 <try>(): DeclSpecifier(U"typedef") </try>
                                  <NestedNameSpecifier>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <IdNode>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                      <SimpleTemplateId>
                                       <try>(): DeclSpecifier(U"typedef") </try>
                                        <TemplateName>
                                         <try>(): DeclSpecifier(U"typedef") </try>
                                          <Identifier>
                                           <try>(): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>(): DeclSpecifier(U"typedef") </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>(): DeclSpecifier(U"typedef") </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                 <fail/>
                                </QualifiedId>
                                <UnqualifiedId>
                                 <try>(): DeclSpecifier(U"typedef") </try>
                                  <TemplateId>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <SimpleTemplateId>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                      <TemplateName>
                                       <try>(): DeclSpecifier(U"typedef") </try>
                                        <Identifier>
                                         <try>(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>(): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </identifier>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                   <fail/>
                                  </TemplateId>
                                  <Identifier>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <identifier>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                  <OperatorFunctionId>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <operator>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </OperatorFunctionId>
                                  <ConversionFunctionId>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <operator>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </ConversionFunctionId>
                                 <fail/>
                                </UnqualifiedId>
                               <fail/>
                              </IdExpression>
                             <fail/>
                            </Declarator>
                           <fail/>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <using>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <using>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <using>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <EnumKey>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <enum>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <typedef>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <ClassKey>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <class>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </class>
                            <struct>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </struct>
                            <union>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                        <DeclSpecifiers>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <DeclSpecifier>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <StorageClassSpecifier>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <register>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </register>
                              <static>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <inline>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <PrefixTypeExpr>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <CVSpecifierSequence>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <CVSpecifier>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                <const>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <PrimaryTypeExpr>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                <SimpleType>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                  <SimpleTypeSpecifier>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                    <char>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <fail/>
                                </SimpleType>
                                <typename>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </typename>
                                <ClassKey>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                  <class>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                   <fail/>
                                  </class>
                                  <struct>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                   <fail/>
                                  </struct>
                                  <union>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                   <fail/>
                                  </union>
                                 <fail/>
                                </ClassKey>
                                <QualifiedIdNode>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                  <NestedNameSpecifier>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                    <IdNode>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                      <SimpleTemplateId>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                        <TemplateName>
                                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                          <Identifier>
                                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                             <success>Typedef</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                              <identifier>
                                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                               <success>Typedef</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Typedef</success>
                                          </Identifier>
                                         <success>Typedef</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                      <SimpleTemplateId>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <TemplateName>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <Identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                             <success>Typedef</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                              <identifier>
                                               <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                               <success>Typedef</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Typedef</success>
                                          </Identifier>
                                         <success>Typedef</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </IdNode>
                                   <success>Typedef::</success>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                    <SimpleTemplateId>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                      <TemplateName>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <Identifier>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                             <success>Typedef</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Typedef</success>
                                        </Identifier>
                                       <success>Typedef</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                      <identifier>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                       <success>Typedef</success>
                                      </identifier>
                                      <Keyword>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                         <success>Typedef</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>Typedef</success>
                                    </Identifier>
                                   <success>Typedef</success>
                                  </IdNode>
                                 <success>Typedef::Typedef</success>
                                </QualifiedIdNode>
                               <success>Typedef::Typedef</success>
                              </PrimaryTypeExpr>
                             <success>Typedef::Typedef</success>
                            </PostfixTypeExpr>
                           <success>Typedef::Typedef</success>
                          </PrefixTypeExpr>
                         <success>Typedef::Typedef</success>
                        </TypeExpr>
                        <Declarator>
                         <try>(): DeclSpecifier(U"typedef") </try>
                          <IdExpression>
                           <try>(): DeclSpecifier(U"typedef") </try>
                            <QualifiedId>
                             <try>(): DeclSpecifier(U"typedef") </try>
                              <NestedNameSpecifier>
                               <try>(): DeclSpecifier(U"typedef") </try>
                                <IdNode>
                                 <try>(): DeclSpecifier(U"typedef") </try>
                                  <SimpleTemplateId>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <TemplateName>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                      <Identifier>
                                       <try>(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>(): DeclSpecifier(U"typedef") </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <identifier>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                 <fail/>
                                </IdNode>
                               <fail/>
                              </NestedNameSpecifier>
                             <fail/>
                            </QualifiedId>
                            <UnqualifiedId>
                             <try>(): DeclSpecifier(U"typedef") </try>
                              <TemplateId>
                               <try>(): DeclSpecifier(U"typedef") </try>
                                <SimpleTemplateId>
                                 <try>(): DeclSpecifier(U"typedef") </try>
                                  <TemplateName>
                                   <try>(): DeclSpecifier(U"typedef") </try>
                                    <Identifier>
                                     <try>(): DeclSpecifier(U"typedef") </try>
                                      <identifier>
                                       <try>(): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </identifier>
                                     <fail/>
                                    </Identifier>
                                   <fail/>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                               <fail/>
                              </TemplateId>
                              <Identifier>
                               <try>(): DeclSpecifier(U"typedef") </try>
                                <identifier>
                                 <try>(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </identifier>
                               <fail/>
                              </Identifier>
                              <OperatorFunctionId>
                               <try>(): DeclSpecifier(U"typedef") </try>
                                <operator>
                                 <try>(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </OperatorFunctionId>
                              <ConversionFunctionId>
                               <try>(): DeclSpecifier(U"typedef") </try>
                                <operator>
                                 <try>(): DeclSpecifier(U"typedef") </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </ConversionFunctionId>
                             <fail/>
                            </UnqualifiedId>
                           <fail/>
                          </IdExpression>
                         <fail/>
                        </Declarator>
                       <fail/>
                      </FunctionDefinition>
                      <SpecialMemberFunctionDefinition>
                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                        <DeclSpecifiers>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <DeclSpecifier>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <StorageClassSpecifier>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <register>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </register>
                              <static>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <inline>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <Declarator>
                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                          <IdExpression>
                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                            <QualifiedId>
                             <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                              <NestedNameSpecifier>
                               <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                <IdNode>
                                 <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                  <SimpleTemplateId>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                    <TemplateName>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                      <Identifier>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                    <identifier>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                     <success>Typedef</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                      <identifier>
                                       <try>Typedef::Typedef(): DeclSpecifier(U"typedef") </try>
                                       <success>Typedef</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Typedef</success>
                                  </Identifier>
                                 <success>Typedef</success>
                                </IdNode>
                                <IdNode>
                                 <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                  <SimpleTemplateId>
                                   <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                    <TemplateName>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                      <Identifier>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                    <identifier>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                     <success>Typedef</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                      <identifier>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                       <success>Typedef</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Typedef</success>
                                  </Identifier>
                                 <success>Typedef</success>
                                </IdNode>
                               <success>Typedef::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                <TemplateId>
                                 <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                  <SimpleTemplateId>
                                   <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                    <TemplateName>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                      <Identifier>
                                       <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                  <identifier>
                                   <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                   <success>Typedef</success>
                                  </identifier>
                                  <Keyword>
                                   <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                    <identifier>
                                     <try>Typedef(): DeclSpecifier(U"typedef") </try>
                                     <success>Typedef</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>Typedef</success>
                                </Identifier>
                               <success>Typedef</success>
                              </UnqualifiedId>
                             <success>Typedef::Typedef</success>
                            </QualifiedId>
                           <success>Typedef::Typedef</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(): DeclSpecifier(U"typedef") </try>
                            <ParameterDeclaration>
                             <try>): DeclSpecifier(U"typedef") </try>
                              <TypeExpr>
                               <try>): DeclSpecifier(U"typedef") </try>
                                <PrefixTypeExpr>
                                 <try>): DeclSpecifier(U"typedef") </try>
                                  <CVSpecifierSequence>
                                   <try>): DeclSpecifier(U"typedef") </try>
                                    <CVSpecifier>
                                     <try>): DeclSpecifier(U"typedef") </try>
                                      <const>
                                       <try>): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success></success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>): DeclSpecifier(U"typedef") </try>
                                    <PrimaryTypeExpr>
                                     <try>): DeclSpecifier(U"typedef") </try>
                                      <SimpleType>
                                       <try>): DeclSpecifier(U"typedef") </try>
                                        <SimpleTypeSpecifier>
                                         <try>): DeclSpecifier(U"typedef") </try>
                                          <char>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>): DeclSpecifier(U"typedef") </try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>): DeclSpecifier(U"typedef") </try>
                                        <class>
                                         <try>): DeclSpecifier(U"typedef") </try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>): DeclSpecifier(U"typedef") </try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>): DeclSpecifier(U"typedef") </try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>): DeclSpecifier(U"typedef") </try>
                                        <NestedNameSpecifier>
                                         <try>): DeclSpecifier(U"typedef") </try>
                                          <IdNode>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                            <SimpleTemplateId>
                                             <try>): DeclSpecifier(U"typedef") </try>
                                              <TemplateName>
                                               <try>): DeclSpecifier(U"typedef") </try>
                                                <Identifier>
                                                 <try>): DeclSpecifier(U"typedef") </try>
                                                  <identifier>
                                                   <try>): DeclSpecifier(U"typedef") </try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>): DeclSpecifier(U"typedef") </try>
                                              <identifier>
                                               <try>): DeclSpecifier(U"typedef") </try>
                                               <fail/>
                                              </identifier>
                                             <fail/>
                                            </Identifier>
                                           <fail/>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>): DeclSpecifier(U"typedef") </try>
                                          <SimpleTemplateId>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                            <TemplateName>
                                             <try>): DeclSpecifier(U"typedef") </try>
                                              <Identifier>
                                               <try>): DeclSpecifier(U"typedef") </try>
                                                <identifier>
                                                 <try>): DeclSpecifier(U"typedef") </try>
                                                 <fail/>
                                                </identifier>
                                               <fail/>
                                              </Identifier>
                                             <fail/>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>): DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>): DeclSpecifier(U"typedef") </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </IdNode>
                                       <fail/>
                                      </QualifiedIdNode>
                                     <fail/>
                                    </PrimaryTypeExpr>
                                   <fail/>
                                  </PostfixTypeExpr>
                                 <fail/>
                                </PrefixTypeExpr>
                               <fail/>
                              </TypeExpr>
                             <fail/>
                            </ParameterDeclaration>
                           <success>()</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>: DeclSpecifier(U"typedef") </try>
                            <CVSpecifier>
                             <try>: DeclSpecifier(U"typedef") </try>
                              <const>
                               <try>: DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>: DeclSpecifier(U"typedef") </try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>Typedef::Typedef()</success>
                        </Declarator>
                        <CtorInitializer>
                         <try>: DeclSpecifier(U"typedef") </try>
                          <MemberInitializerList>
                           <try>DeclSpecifier(U"typedef") </try>
                            <MemberInitializer>
                             <try>DeclSpecifier(U"typedef") </try>
                              <MemberInitializerId>
                               <try>DeclSpecifier(U"typedef") </try>
                                <QualifiedIdNode>
                                 <try>DeclSpecifier(U"typedef") </try>
                                  <NestedNameSpecifier>
                                   <try>DeclSpecifier(U"typedef") </try>
                                    <IdNode>
                                     <try>DeclSpecifier(U"typedef") </try>
                                      <SimpleTemplateId>
                                       <try>DeclSpecifier(U"typedef") </try>
                                        <TemplateName>
                                         <try>DeclSpecifier(U"typedef") </try>
                                          <Identifier>
                                           <try>DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>DeclSpecifier(U"typedef") </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>DeclSpecifier(U"typedef") </try>
                                              <identifier>
                                               <try>DeclSpecifier(U"typedef") </try>
                                               <success>DeclSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>DeclSpecifier</success>
                                          </Identifier>
                                         <success>DeclSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>DeclSpecifier(U"typedef") </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>DeclSpecifier(U"typedef") </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>DeclSpecifier(U"typedef") </try>
                                    <SimpleTemplateId>
                                     <try>DeclSpecifier(U"typedef") </try>
                                      <TemplateName>
                                       <try>DeclSpecifier(U"typedef") </try>
                                        <Identifier>
                                         <try>DeclSpecifier(U"typedef") </try>
                                          <identifier>
                                           <try>DeclSpecifier(U"typedef") </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>DeclSpecifier(U"typedef") </try>
                                            <identifier>
                                             <try>DeclSpecifier(U"typedef") </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>DeclSpecifier</success>
                                        </Identifier>
                                       <success>DeclSpecifier</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>DeclSpecifier(U"typedef") </try>
                                      <identifier>
                                       <try>DeclSpecifier(U"typedef") </try>
                                       <success>DeclSpecifier</success>
                                      </identifier>
                                      <Keyword>
                                       <try>DeclSpecifier(U"typedef") </try>
                                        <identifier>
                                         <try>DeclSpecifier(U"typedef") </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>DeclSpecifier</success>
                                    </Identifier>
                                   <success>DeclSpecifier</success>
                                  </IdNode>
                                 <success>DeclSpecifier</success>
                                </QualifiedIdNode>
                               <success>DeclSpecifier</success>
                              </MemberInitializerId>
                              <ExpressionList>
                               <try>U"typedef") </try>
                                <InitializerList>
                                 <try>U"typedef") </try>
                                  <InitializerClause>
                                   <try>U"typedef") </try>
                                    <AssignmentExpression>
                                     <try>U"typedef") </try>
                                      <LogicalOrExpression>
                                       <try>U"typedef") </try>
                                        <LogicalAndExpression>
                                         <try>U"typedef") </try>
                                          <InclusiveOrExpression>
                                           <try>U"typedef") </try>
                                            <ExclusiveOrExpression>
                                             <try>U"typedef") </try>
                                              <AndExpression>
                                               <try>U"typedef") </try>
                                                <EqualityExpression>
                                                 <try>U"typedef") </try>
                                                  <RelationalExpression>
                                                   <try>U"typedef") </try>
                                                    <ShiftExpression>
                                                     <try>U"typedef") </try>
                                                      <AdditiveExpression>
                                                       <try>U"typedef") </try>
                                                        <MultiplicativeExpression>
                                                         <try>U"typedef") </try>
                                                          <PMExpression>
                                                           <try>U"typedef") </try>
                                                            <CastExpression>
                                                             <try>U"typedef") </try>
                                                              <UnaryExpression>
                                                               <try>U"typedef") </try>
                                                                <UnaryOperator>
                                                                 <try>U"typedef") </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>U"typedef") </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>U"typedef") </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>U"typedef") </try>
                                                                  <new>
                                                                   <try>U"typedef") </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>U"typedef") </try>
                                                                  <delete>
                                                                   <try>U"typedef") </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>U"typedef") </try>
                                                                  <PrimaryExpression>
                                                                   <try>U"typedef") </try>
                                                                    <Literal>
                                                                     <try>U"typedef") </try>
                                                                      <FloatingLiteral>
                                                                       <try>U"typedef") </try>
                                                                        <FractionalConstant>
                                                                         <try>U"typedef") </try>
                                                                          <digit_sequence>
                                                                           <try>U"typedef") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>U"typedef") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>U"typedef") </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>U"typedef") </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>U"typedef") </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>U"typedef") </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>U"typedef") </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>U"typedef") </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>U"typedef") </try>
                                                                        <EncodingPrefix>
                                                                         <try>U"typedef") </try>
                                                                         <success>U</success>
                                                                        </EncodingPrefix>
                                                                        <SChar>
                                                                         <try>typedef") </try>
                                                                         <success>t</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>ypedef") </try>
                                                                         <success>y</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>pedef") </try>
                                                                         <success>p</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>edef") </try>
                                                                         <success>e</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>def") </try>
                                                                         <success>d</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>ef") </try>
                                                                         <success>e</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>f") </try>
                                                                         <success>f</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>") </try>
                                                                          <escape>
                                                                           <try>") </try>
                                                                           <fail/>
                                                                          </escape>
                                                                         <fail/>
                                                                        </SChar>
                                                                       <success>U"typedef"</success>
                                                                      </StringLiteral>
                                                                     <success>U"typedef"</success>
                                                                    </Literal>
                                                                   <success>U"typedef"</success>
                                                                  </PrimaryExpression>
                                                                 <success>U"typedef"</success>
                                                                </PostfixExpression>
                                                               <success>U"typedef"</success>
                                                              </UnaryExpression>
                                                             <success>U"typedef"</success>
                                                            </CastExpression>
                                                           <success>U"typedef"</success>
                                                          </PMExpression>
                                                         <success>U"typedef"</success>
                                                        </MultiplicativeExpression>
                                                       <success>U"typedef"</success>
                                                      </AdditiveExpression>
                                                     <success>U"typedef"</success>
                                                    </ShiftExpression>
                                                   <success>U"typedef"</success>
                                                  </RelationalExpression>
                                                 <success>U"typedef"</success>
                                                </EqualityExpression>
                                               <success>U"typedef"</success>
                                              </AndExpression>
                                             <success>U"typedef"</success>
                                            </ExclusiveOrExpression>
                                           <success>U"typedef"</success>
                                          </InclusiveOrExpression>
                                         <success>U"typedef"</success>
                                        </LogicalAndExpression>
                                       <success>U"typedef"</success>
                                      </LogicalOrExpression>
                                      <AssignmentOperator>
                                       <try>) </try>
                                       <fail/>
                                      </AssignmentOperator>
                                      <ConditionalExpression>
                                       <try>U"typedef") </try>
                                        <LogicalOrExpression>
                                         <try>U"typedef") </try>
                                          <LogicalAndExpression>
                                           <try>U"typedef") </try>
                                            <InclusiveOrExpression>
                                             <try>U"typedef") </try>
                                              <ExclusiveOrExpression>
                                               <try>U"typedef") </try>
                                                <AndExpression>
                                                 <try>U"typedef") </try>
                                                  <EqualityExpression>
                                                   <try>U"typedef") </try>
                                                    <RelationalExpression>
                                                     <try>U"typedef") </try>
                                                      <ShiftExpression>
                                                       <try>U"typedef") </try>
                                                        <AdditiveExpression>
                                                         <try>U"typedef") </try>
                                                          <MultiplicativeExpression>
                                                           <try>U"typedef") </try>
                                                            <PMExpression>
                                                             <try>U"typedef") </try>
                                                              <CastExpression>
                                                               <try>U"typedef") </try>
                                                                <UnaryExpression>
                                                                 <try>U"typedef") </try>
                                                                  <UnaryOperator>
                                                                   <try>U"typedef") </try>
                                                                   <fail/>
                                                                  </UnaryOperator>
                                                                  <sizeof>
                                                                   <try>U"typedef") </try>
                                                                   <fail/>
                                                                  </sizeof>
                                                                  <alignof>
                                                                   <try>U"typedef") </try>
                                                                   <fail/>
                                                                  </alignof>
                                                                  <NewExpression>
                                                                   <try>U"typedef") </try>
                                                                    <new>
                                                                     <try>U"typedef") </try>
                                                                     <fail/>
                                                                    </new>
                                                                   <fail/>
                                                                  </NewExpression>
                                                                  <DeleteExpression>
                                                                   <try>U"typedef") </try>
                                                                    <delete>
                                                                     <try>U"typedef") </try>
                                                                     <fail/>
                                                                    </delete>
                                                                   <fail/>
                                                                  </DeleteExpression>
                                                                  <PostfixExpression>
                                                                   <try>U"typedef") </try>
                                                                    <PrimaryExpression>
                                                                     <try>U"typedef") </try>
                                                                      <Literal>
                                                                       <try>U"typedef") </try>
                                                                        <FloatingLiteral>
                                                                         <try>U"typedef") </try>
                                                                          <FractionalConstant>
                                                                           <try>U"typedef") </try>
                                                                            <digit_sequence>
                                                                             <try>U"typedef") </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                            <digit_sequence>
                                                                             <try>U"typedef") </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                           <fail/>
                                                                          </FractionalConstant>
                                                                          <digit_sequence>
                                                                           <try>U"typedef") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FloatingLiteral>
                                                                        <IntegerLiteral>
                                                                         <try>U"typedef") </try>
                                                                          <HexadecimalLiteral>
                                                                           <try>U"typedef") </try>
                                                                           <fail/>
                                                                          </HexadecimalLiteral>
                                                                          <OctalLiteral>
                                                                           <try>U"typedef") </try>
                                                                           <fail/>
                                                                          </OctalLiteral>
                                                                          <DecimalLiteral>
                                                                           <try>U"typedef") </try>
                                                                           <fail/>
                                                                          </DecimalLiteral>
                                                                         <fail/>
                                                                        </IntegerLiteral>
                                                                        <CharacterLiteral>
                                                                         <try>U"typedef") </try>
                                                                         <fail/>
                                                                        </CharacterLiteral>
                                                                        <StringLiteral>
                                                                         <try>U"typedef") </try>
                                                                          <EncodingPrefix>
                                                                           <try>U"typedef") </try>
                                                                           <success>U</success>
                                                                          </EncodingPrefix>
                                                                          <SChar>
                                                                           <try>typedef") </try>
                                                                           <success>t</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>ypedef") </try>
                                                                           <success>y</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>pedef") </try>
                                                                           <success>p</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>edef") </try>
                                                                           <success>e</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>def") </try>
                                                                           <success>d</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>ef") </try>
                                                                           <success>e</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>f") </try>
                                                                           <success>f</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>") </try>
                                                                            <escape>
                                                                             <try>") </try>
                                                                             <fail/>
                                                                            </escape>
                                                                           <fail/>
                                                                          </SChar>
                                                                         <success>U"typedef"</success>
                                                                        </StringLiteral>
                                                                       <success>U"typedef"</success>
                                                                      </Literal>
                                                                     <success>U"typedef"</success>
                                                                    </PrimaryExpression>
                                                                   <success>U"typedef"</success>
                                                                  </PostfixExpression>
                                                                 <success>U"typedef"</success>
                                                                </UnaryExpression>
                                                               <success>U"typedef"</success>
                                                              </CastExpression>
                                                             <success>U"typedef"</success>
                                                            </PMExpression>
                                                           <success>U"typedef"</success>
                                                          </MultiplicativeExpression>
                                                         <success>U"typedef"</success>
                                                        </AdditiveExpression>
                                                       <success>U"typedef"</success>
                                                      </ShiftExpression>
                                                     <success>U"typedef"</success>
                                                    </RelationalExpression>
                                                   <success>U"typedef"</success>
                                                  </EqualityExpression>
                                                 <success>U"typedef"</success>
                                                </AndExpression>
                                               <success>U"typedef"</success>
                                              </ExclusiveOrExpression>
                                             <success>U"typedef"</success>
                                            </InclusiveOrExpression>
                                           <success>U"typedef"</success>
                                          </LogicalAndExpression>
                                         <success>U"typedef"</success>
                                        </LogicalOrExpression>
                                       <success>U"typedef"</success>
                                      </ConditionalExpression>
                                     <success>U"typedef"</success>
                                    </AssignmentExpression>
                                   <success>U"typedef"</success>
                                  </InitializerClause>
                                 <success>U"typedef"</success>
                                </InitializerList>
                               <success>U"typedef"</success>
                              </ExpressionList>
                             <success>DeclSpecifier(U"typedef")</success>
                            </MemberInitializer>
                           <success>DeclSpecifier(U"typedef") \r\n</success>
                          </MemberInitializerList>
                         <success>: DeclSpecifier(U"typedef") \r\n</success>
                        </CtorInitializer>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n}</success>
                        </FunctionBody>
                       <success>Typedef::Typedef(): DeclSpecifier(U"typedef") \r\n{\r\n}</success>
                      </SpecialMemberFunctionDefinition>
                     <success>Typedef::Typedef(): DeclSpecifier(U"typedef") \r\n{\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                      <NamespaceDefinition>
                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                        <NamedNamespaceDefinition>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <namespace>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <namespace>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                        <SimpleDeclaration>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <DeclSpecifiers>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                            <DeclSpecifier>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                              <StorageClassSpecifier>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                <register>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                <inline>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                            <PrefixTypeExpr>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                              <CVSpecifierSequence>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                <CVSpecifier>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                  <const>
                                   <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                <PrimaryTypeExpr>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                  <SimpleType>
                                   <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                    <SimpleTypeSpecifier>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                      <char>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                        <identifier_chars>
                                         <try> Typedef::Accept(Visitor&amp; visitor)</try>
                                         <fail/>
                                        </identifier_chars>
                                       <success>void</success>
                                      </void>
                                     <success>void</success>
                                    </SimpleTypeSpecifier>
                                    <SimpleTypeSpecifier>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                      <char>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <success>void</success>
                                  </SimpleType>
                                 <success>void</success>
                                </PrimaryTypeExpr>
                               <success>void </success>
                              </PostfixTypeExpr>
                             <success>void </success>
                            </PrefixTypeExpr>
                           <success>void </success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>Typedef::Accept(Visitor&amp; visitor)</try>
                            <Declarator>
                             <try>Typedef::Accept(Visitor&amp; visitor)</try>
                              <IdExpression>
                               <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                <QualifiedId>
                                 <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                  <NestedNameSpecifier>
                                   <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                    <IdNode>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                      <SimpleTemplateId>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                        <TemplateName>
                                         <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                          <Identifier>
                                           <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                             <success>Typedef</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                               <success>Typedef</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Typedef</success>
                                          </Identifier>
                                         <success>Typedef</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <SimpleTemplateId>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <TemplateName>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <Identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                             <success>Accept</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Accept(Visitor&amp; visitor)</try>
                                               <success>Accept</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Accept</success>
                                          </Identifier>
                                         <success>Accept</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                           <success>Accept</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Accept</success>
                                      </Identifier>
                                     <success>Accept</success>
                                    </IdNode>
                                   <success>Typedef::</success>
                                  </NestedNameSpecifier>
                                  <UnqualifiedId>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <TemplateId>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <SimpleTemplateId>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <TemplateName>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <Identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                             <success>Accept</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Accept(Visitor&amp; visitor)</try>
                                               <success>Accept</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Accept</success>
                                          </Identifier>
                                         <success>Accept</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                       <success>Accept</success>
                                      </identifier>
                                      <Keyword>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>Accept</success>
                                    </Identifier>
                                   <success>Accept</success>
                                  </UnqualifiedId>
                                 <success>Typedef::Accept</success>
                                </QualifiedId>
                               <success>Typedef::Accept</success>
                              </IdExpression>
                              <ParameterList>
                               <try>(Visitor&amp; visitor)</try>
                                <ParameterDeclaration>
                                 <try>Visitor&amp; visitor)</try>
                                  <TypeExpr>
                                   <try>Visitor&amp; visitor)</try>
                                    <PrefixTypeExpr>
                                     <try>Visitor&amp; visitor)</try>
                                      <CVSpecifierSequence>
                                       <try>Visitor&amp; visitor)</try>
                                        <CVSpecifier>
                                         <try>Visitor&amp; visitor)</try>
                                          <const>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </const>
                                          <volatile>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </volatile>
                                         <fail/>
                                        </CVSpecifier>
                                       <success></success>
                                      </CVSpecifierSequence>
                                      <PostfixTypeExpr>
                                       <try>Visitor&amp; visitor)</try>
                                        <PrimaryTypeExpr>
                                         <try>Visitor&amp; visitor)</try>
                                          <SimpleType>
                                           <try>Visitor&amp; visitor)</try>
                                            <SimpleTypeSpecifier>
                                             <try>Visitor&amp; visitor)</try>
                                              <char>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </char>
                                              <char16_t>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </char16_t>
                                              <char32_t>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </char32_t>
                                              <wchar_t>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </wchar_t>
                                              <bool>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </bool>
                                              <short>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </short>
                                              <int>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </int>
                                              <long>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </long>
                                              <signed>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </signed>
                                              <unsigned>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </unsigned>
                                              <float>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </float>
                                              <double>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </double>
                                              <void>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </void>
                                              <auto>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </auto>
                                             <fail/>
                                            </SimpleTypeSpecifier>
                                           <fail/>
                                          </SimpleType>
                                          <typename>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </typename>
                                          <ClassKey>
                                           <try>Visitor&amp; visitor)</try>
                                            <class>
                                             <try>Visitor&amp; visitor)</try>
                                             <fail/>
                                            </class>
                                            <struct>
                                             <try>Visitor&amp; visitor)</try>
                                             <fail/>
                                            </struct>
                                            <union>
                                             <try>Visitor&amp; visitor)</try>
                                             <fail/>
                                            </union>
                                           <fail/>
                                          </ClassKey>
                                          <QualifiedIdNode>
                                           <try>Visitor&amp; visitor)</try>
                                            <NestedNameSpecifier>
                                             <try>Visitor&amp; visitor)</try>
                                              <IdNode>
                                               <try>Visitor&amp; visitor)</try>
                                                <SimpleTemplateId>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <TemplateName>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <Identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                      <identifier>
                                                       <try>Visitor&amp; visitor)</try>
                                                       <success>Visitor</success>
                                                      </identifier>
                                                      <Keyword>
                                                       <try>Visitor&amp; visitor)</try>
                                                        <identifier>
                                                         <try>Visitor&amp; visitor)</try>
                                                         <success>Visitor</success>
                                                        </identifier>
                                                       <fail/>
                                                      </Keyword>
                                                     <success>Visitor</success>
                                                    </Identifier>
                                                   <success>Visitor</success>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                     <success>Visitor</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>Visitor</success>
                                                </Identifier>
                                               <success>Visitor</success>
                                              </IdNode>
                                             <fail/>
                                            </NestedNameSpecifier>
                                            <IdNode>
                                             <try>Visitor&amp; visitor)</try>
                                              <SimpleTemplateId>
                                               <try>Visitor&amp; visitor)</try>
                                                <TemplateName>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <Identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                     <success>Visitor</success>
                                                    </identifier>
                                                    <Keyword>
                                                     <try>Visitor&amp; visitor)</try>
                                                      <identifier>
                                                       <try>Visitor&amp; visitor)</try>
                                                       <success>Visitor</success>
                                                      </identifier>
                                                     <fail/>
                                                    </Keyword>
                                                   <success>Visitor</success>
                                                  </Identifier>
                                                 <success>Visitor</success>
                                                </TemplateName>
                                               <fail/>
                                              </SimpleTemplateId>
                                              <Identifier>
                                               <try>Visitor&amp; visitor)</try>
                                                <identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                 <success>Visitor</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>Visitor</success>
                                              </Identifier>
                                             <success>Visitor</success>
                                            </IdNode>
                                           <success>Visitor</success>
                                          </QualifiedIdNode>
                                         <success>Visitor</success>
                                        </PrimaryTypeExpr>
                                       <success>Visitor&amp;</success>
                                      </PostfixTypeExpr>
                                     <success>Visitor&amp;</success>
                                    </PrefixTypeExpr>
                                   <success>Visitor&amp;</success>
                                  </TypeExpr>
                                  <Declarator>
                                   <try>visitor)</try>
                                    <IdExpression>
                                     <try>visitor)</try>
                                      <QualifiedId>
                                       <try>visitor)</try>
                                        <NestedNameSpecifier>
                                         <try>visitor)</try>
                                          <IdNode>
                                           <try>visitor)</try>
                                            <SimpleTemplateId>
                                             <try>visitor)</try>
                                              <TemplateName>
                                               <try>visitor)</try>
                                                <Identifier>
                                                 <try>visitor)</try>
                                                  <identifier>
                                                   <try>visitor)</try>
                                                   <success>visitor</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>visitor)</try>
                                                    <identifier>
                                                     <try>visitor)</try>
                                                     <success>visitor</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>visitor</success>
                                                </Identifier>
                                               <success>visitor</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>visitor)</try>
                                              <identifier>
                                               <try>visitor)</try>
                                               <success>visitor</success>
                                              </identifier>
                                              <Keyword>
                                               <try>visitor)</try>
                                                <identifier>
                                                 <try>visitor)</try>
                                                 <success>visitor</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>visitor</success>
                                            </Identifier>
                                           <success>visitor</success>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                       <fail/>
                                      </QualifiedId>
                                      <UnqualifiedId>
                                       <try>visitor)</try>
                                        <TemplateId>
                                         <try>visitor)</try>
                                          <SimpleTemplateId>
                                           <try>visitor)</try>
                                            <TemplateName>
                                             <try>visitor)</try>
                                              <Identifier>
                                               <try>visitor)</try>
                                                <identifier>
                                                 <try>visitor)</try>
                                                 <success>visitor</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>visitor)</try>
                                                  <identifier>
                                                   <try>visitor)</try>
                                                   <success>visitor</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>visitor</success>
                                              </Identifier>
                                             <success>visitor</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                         <fail/>
                                        </TemplateId>
                                        <Identifier>
                                         <try>visitor)</try>
                                          <identifier>
                                           <try>visitor)</try>
                                           <success>visitor</success>
                                          </identifier>
                                          <Keyword>
                                           <try>visitor)</try>
                                            <identifier>
                                             <try>visitor)</try>
                                             <success>visitor</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>visitor</success>
                                        </Identifier>
                                       <success>visitor</success>
                                      </UnqualifiedId>
                                     <success>visitor</success>
                                    </IdExpression>
                                    <ParameterList>
                                     <try>)</try>
                                     <fail/>
                                    </ParameterList>
                                   <success>visitor</success>
                                  </Declarator>
                                 <success>Visitor&amp; visitor</success>
                                </ParameterDeclaration>
                               <success>(Visitor&amp; visitor)</success>
                              </ParameterList>
                              <CVSpecifierSequence>
                               <try>{</try>
                                <CVSpecifier>
                                 <try>{</try>
                                  <const>
                                   <try>{</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>{</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                             <success>Typedef::Accept(Visitor&amp; visitor)\r\n</success>
                            </Declarator>
                            <Initializer>
                             <try>{</try>
                              <BracedInitializerList>
                               <try>{</try>
                                <InitializerClause>
                                 <try>visitor.Visit(*this);</try>
                                  <AssignmentExpression>
                                   <try>visitor.Visit(*this);</try>
                                    <LogicalOrExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalAndExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <InclusiveOrExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <ExclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <AndExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <EqualityExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <RelationalExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <ShiftExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <AdditiveExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <MultiplicativeExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <PMExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <CastExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <UnaryExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryOperator>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <new>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <delete>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <PrimaryExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <Literal>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <FloatingLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FractionalConstant>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <true>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <nullptr>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <dynamic_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>visitor</success>
                                                                          </Identifier>
                                                                         <success>visitor</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <success>visitor</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>visitor</success>
                                                                      </Identifier>
                                                                     <success>visitor</success>
                                                                    </UnqualifiedId>
                                                                   <success>visitor</success>
                                                                  </IdExpression>
                                                                 <success>visitor</success>
                                                                </PrimaryExpression>
                                                                <IdExpression>
                                                                 <try>Visit(*this);</try>
                                                                  <QualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <NestedNameSpecifier>
                                                                     <try>Visit(*this);</try>
                                                                      <IdNode>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                        <Identifier>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>Visit</success>
                                                                        </Identifier>
                                                                       <success>Visit</success>
                                                                      </IdNode>
                                                                     <fail/>
                                                                    </NestedNameSpecifier>
                                                                   <fail/>
                                                                  </QualifiedId>
                                                                  <UnqualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <TemplateId>
                                                                     <try>Visit(*this);</try>
                                                                      <SimpleTemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <TemplateName>
                                                                         <try>Visit(*this);</try>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </TemplateName>
                                                                       <fail/>
                                                                      </SimpleTemplateId>
                                                                     <fail/>
                                                                    </TemplateId>
                                                                    <Identifier>
                                                                     <try>Visit(*this);</try>
                                                                      <identifier>
                                                                       <try>Visit(*this);</try>
                                                                       <success>Visit</success>
                                                                      </identifier>
                                                                      <Keyword>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Keyword>
                                                                     <success>Visit</success>
                                                                    </Identifier>
                                                                   <success>Visit</success>
                                                                  </UnqualifiedId>
                                                                 <success>Visit</success>
                                                                </IdExpression>
                                                                <ExpressionList>
                                                                 <try>*this);</try>
                                                                  <InitializerList>
                                                                   <try>*this);</try>
                                                                    <InitializerClause>
                                                                     <try>*this);</try>
                                                                      <AssignmentExpression>
                                                                       <try>*this);</try>
                                                                        <LogicalOrExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalAndExpression>
                                                                           <try>*this);</try>
                                                                            <InclusiveOrExpression>
                                                                             <try>*this);</try>
                                                                              <ExclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <AndExpression>
                                                                                 <try>*this);</try>
                                                                                  <EqualityExpression>
                                                                                   <try>*this);</try>
                                                                                    <RelationalExpression>
                                                                                     <try>*this);</try>
                                                                                      <ShiftExpression>
                                                                                       <try>*this);</try>
                                                                                        <AdditiveExpression>
                                                                                         <try>*this);</try>
                                                                                          <MultiplicativeExpression>
                                                                                           <try>*this);</try>
                                                                                            <PMExpression>
                                                                                             <try>*this);</try>
                                                                                              <CastExpression>
                                                                                               <try>*this);</try>
                                                                                                <UnaryExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryOperator>
                                                                                                   <try>*this);</try>
                                                                                                   <success>*</success>
                                                                                                  </UnaryOperator>
                                                                                                  <CastExpression>
                                                                                                   <try>this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </UnaryOperator>
                                                                                                      <sizeof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </sizeof>
                                                                                                      <alignof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </alignof>
                                                                                                      <NewExpression>
                                                                                                       <try>this);</try>
                                                                                                        <new>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </new>
                                                                                                       <fail/>
                                                                                                      </NewExpression>
                                                                                                      <DeleteExpression>
                                                                                                       <try>this);</try>
                                                                                                        <delete>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </delete>
                                                                                                       <fail/>
                                                                                                      </DeleteExpression>
                                                                                                      <PostfixExpression>
                                                                                                       <try>this);</try>
                                                                                                        <PrimaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <Literal>
                                                                                                           <try>this);</try>
                                                                                                            <FloatingLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <FractionalConstant>
                                                                                                               <try>this);</try>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FractionalConstant>
                                                                                                              <digit_sequence>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FloatingLiteral>
                                                                                                            <IntegerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <HexadecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </HexadecimalLiteral>
                                                                                                              <OctalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </OctalLiteral>
                                                                                                              <DecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </DecimalLiteral>
                                                                                                             <fail/>
                                                                                                            </IntegerLiteral>
                                                                                                            <CharacterLiteral>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </CharacterLiteral>
                                                                                                            <StringLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                             <fail/>
                                                                                                            </StringLiteral>
                                                                                                            <BooleanLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <true>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </true>
                                                                                                              <false>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </false>
                                                                                                             <fail/>
                                                                                                            </BooleanLiteral>
                                                                                                            <PointerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <nullptr>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </nullptr>
                                                                                                             <fail/>
                                                                                                            </PointerLiteral>
                                                                                                           <fail/>
                                                                                                          </Literal>
                                                                                                          <this>
                                                                                                           <try>this);</try>
                                                                                                            <identifier_chars>
                                                                                                             <try>);</try>
                                                                                                             <fail/>
                                                                                                            </identifier_chars>
                                                                                                           <success>this</success>
                                                                                                          </this>
                                                                                                         <success>this</success>
                                                                                                        </PrimaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </PostfixExpression>
                                                                                                     <success>this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </UnaryExpression>
                                                                                               <success>*this</success>
                                                                                              </CastExpression>
                                                                                             <success>*this</success>
                                                                                            </PMExpression>
                                                                                           <success>*this</success>
                                                                                          </MultiplicativeExpression>
                                                                                         <success>*this</success>
                                                                                        </AdditiveExpression>
                                                                                       <success>*this</success>
                                                                                      </ShiftExpression>
                                                                                     <success>*this</success>
                                                                                    </RelationalExpression>
                                                                                   <success>*this</success>
                                                                                  </EqualityExpression>
                                                                                 <success>*this</success>
                                                                                </AndExpression>
                                                                               <success>*this</success>
                                                                              </ExclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </InclusiveOrExpression>
                                                                           <success>*this</success>
                                                                          </LogicalAndExpression>
                                                                         <success>*this</success>
                                                                        </LogicalOrExpression>
                                                                        <AssignmentOperator>
                                                                         <try>);</try>
                                                                         <fail/>
                                                                        </AssignmentOperator>
                                                                        <ConditionalExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                         <success>*this</success>
                                                                        </ConditionalExpression>
                                                                       <success>*this</success>
                                                                      </AssignmentExpression>
                                                                     <success>*this</success>
                                                                    </InitializerClause>
                                                                   <success>*this</success>
                                                                  </InitializerList>
                                                                 <success>*this</success>
                                                                </ExpressionList>
                                                               <success>visitor.Visit(*this)</success>
                                                              </PostfixExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </UnaryExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </CastExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </PMExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </MultiplicativeExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </AdditiveExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </ShiftExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </RelationalExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </EqualityExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </AndExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </ExclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </InclusiveOrExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalAndExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>;</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalOrExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <LogicalAndExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <InclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <ExclusiveOrExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <AndExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <EqualityExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <RelationalExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <ShiftExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <AdditiveExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <MultiplicativeExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <PMExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <CastExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <UnaryOperator>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <new>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <delete>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <PrimaryExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <Literal>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FloatingLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <FractionalConstant>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <true>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <nullptr>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <dynamic_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <QualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <IdNode>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <SimpleTemplateId>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <TemplateName>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <Identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                    <identifier>
                                                                                     <try>visitor.Visit(*this);</try>
                                                                                     <success>visitor</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>visitor</success>
                                                                                </Identifier>
                                                                               <success>visitor</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <TemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>visitor</success>
                                                                        </Identifier>
                                                                       <success>visitor</success>
                                                                      </UnqualifiedId>
                                                                     <success>visitor</success>
                                                                    </IdExpression>
                                                                   <success>visitor</success>
                                                                  </PrimaryExpression>
                                                                  <IdExpression>
                                                                   <try>Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>Visit(*this);</try>
                                                                                   <success>Visit</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Visit</success>
                                                                              </Identifier>
                                                                             <success>Visit</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>Visit</success>
                                                                      </Identifier>
                                                                     <success>Visit</success>
                                                                    </UnqualifiedId>
                                                                   <success>Visit</success>
                                                                  </IdExpression>
                                                                  <ExpressionList>
                                                                   <try>*this);</try>
                                                                    <InitializerList>
                                                                     <try>*this);</try>
                                                                      <InitializerClause>
                                                                       <try>*this);</try>
                                                                        <AssignmentExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                          <AssignmentOperator>
                                                                           <try>);</try>
                                                                           <fail/>
                                                                          </AssignmentOperator>
                                                                          <ConditionalExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalOrExpression>
                                                                             <try>*this);</try>
                                                                              <LogicalAndExpression>
                                                                               <try>*this);</try>
                                                                                <InclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <ExclusiveOrExpression>
                                                                                   <try>*this);</try>
                                                                                    <AndExpression>
                                                                                     <try>*this);</try>
                                                                                      <EqualityExpression>
                                                                                       <try>*this);</try>
                                                                                        <RelationalExpression>
                                                                                         <try>*this);</try>
                                                                                          <ShiftExpression>
                                                                                           <try>*this);</try>
                                                                                            <AdditiveExpression>
                                                                                             <try>*this);</try>
                                                                                              <MultiplicativeExpression>
                                                                                               <try>*this);</try>
                                                                                                <PMExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <CastExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>*this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>*this);</try>
                                                                                                       <success>*</success>
                                                                                                      </UnaryOperator>
                                                                                                      <CastExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <UnaryOperator>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </UnaryOperator>
                                                                                                          <sizeof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </sizeof>
                                                                                                          <alignof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </alignof>
                                                                                                          <NewExpression>
                                                                                                           <try>this);</try>
                                                                                                            <new>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </new>
                                                                                                           <fail/>
                                                                                                          </NewExpression>
                                                                                                          <DeleteExpression>
                                                                                                           <try>this);</try>
                                                                                                            <delete>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </delete>
                                                                                                           <fail/>
                                                                                                          </DeleteExpression>
                                                                                                          <PostfixExpression>
                                                                                                           <try>this);</try>
                                                                                                            <PrimaryExpression>
                                                                                                             <try>this);</try>
                                                                                                              <Literal>
                                                                                                               <try>this);</try>
                                                                                                                <FloatingLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <FractionalConstant>
                                                                                                                   <try>this);</try>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                   <fail/>
                                                                                                                  </FractionalConstant>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FloatingLiteral>
                                                                                                                <IntegerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <HexadecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </HexadecimalLiteral>
                                                                                                                  <OctalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </OctalLiteral>
                                                                                                                  <DecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </DecimalLiteral>
                                                                                                                 <fail/>
                                                                                                                </IntegerLiteral>
                                                                                                                <CharacterLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </CharacterLiteral>
                                                                                                                <StringLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                 <fail/>
                                                                                                                </StringLiteral>
                                                                                                                <BooleanLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <true>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </true>
                                                                                                                  <false>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </false>
                                                                                                                 <fail/>
                                                                                                                </BooleanLiteral>
                                                                                                                <PointerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <nullptr>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </nullptr>
                                                                                                                 <fail/>
                                                                                                                </PointerLiteral>
                                                                                                               <fail/>
                                                                                                              </Literal>
                                                                                                              <this>
                                                                                                               <try>this);</try>
                                                                                                                <identifier_chars>
                                                                                                                 <try>);</try>
                                                                                                                 <fail/>
                                                                                                                </identifier_chars>
                                                                                                               <success>this</success>
                                                                                                              </this>
                                                                                                             <success>this</success>
                                                                                                            </PrimaryExpression>
                                                                                                           <success>this</success>
                                                                                                          </PostfixExpression>
                                                                                                         <success>this</success>
                                                                                                        </UnaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </CastExpression>
                                                                                                     <success>*this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>*this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </PMExpression>
                                                                                               <success>*this</success>
                                                                                              </MultiplicativeExpression>
                                                                                             <success>*this</success>
                                                                                            </AdditiveExpression>
                                                                                           <success>*this</success>
                                                                                          </ShiftExpression>
                                                                                         <success>*this</success>
                                                                                        </RelationalExpression>
                                                                                       <success>*this</success>
                                                                                      </EqualityExpression>
                                                                                     <success>*this</success>
                                                                                    </AndExpression>
                                                                                   <success>*this</success>
                                                                                  </ExclusiveOrExpression>
                                                                                 <success>*this</success>
                                                                                </InclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </LogicalAndExpression>
                                                                             <success>*this</success>
                                                                            </LogicalOrExpression>
                                                                           <success>*this</success>
                                                                          </ConditionalExpression>
                                                                         <success>*this</success>
                                                                        </AssignmentExpression>
                                                                       <success>*this</success>
                                                                      </InitializerClause>
                                                                     <success>*this</success>
                                                                    </InitializerList>
                                                                   <success>*this</success>
                                                                  </ExpressionList>
                                                                 <success>visitor.Visit(*this)</success>
                                                                </PostfixExpression>
                                                               <success>visitor.Visit(*this)</success>
                                                              </UnaryExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </CastExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </PMExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </MultiplicativeExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </AdditiveExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </ShiftExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </RelationalExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </EqualityExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </AndExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </ExclusiveOrExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </InclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </LogicalAndExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalOrExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </ConditionalExpression>
                                   <success>visitor.Visit(*this)</success>
                                  </AssignmentExpression>
                                 <success>visitor.Visit(*this)</success>
                                </InitializerClause>
                               <fail/>
                              </BracedInitializerList>
                             <fail/>
                            </Initializer>
                           <success>Typedef::Accept(Visitor&amp; visitor)\r\n</success>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <using>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <using>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <using>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <EnumKey>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                            <enum>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <typedef>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <ClassKey>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                            <class>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </class>
                            <struct>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </struct>
                            <union>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                        <DeclSpecifiers>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <DeclSpecifier>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                            <StorageClassSpecifier>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                              <register>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </register>
                              <static>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                              <inline>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                          <PrefixTypeExpr>
                           <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                            <CVSpecifierSequence>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                              <CVSpecifier>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                <const>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                              <PrimaryTypeExpr>
                               <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                <SimpleType>
                                 <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                  <SimpleTypeSpecifier>
                                   <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                    <char>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>void Typedef::Accept(Visitor&amp; visitor)</try>
                                      <identifier_chars>
                                       <try> Typedef::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </identifier_chars>
                                     <success>void</success>
                                    </void>
                                   <success>void</success>
                                  </SimpleTypeSpecifier>
                                  <SimpleTypeSpecifier>
                                   <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                    <char>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <success>void</success>
                                </SimpleType>
                               <success>void</success>
                              </PrimaryTypeExpr>
                             <success>void </success>
                            </PostfixTypeExpr>
                           <success>void </success>
                          </PrefixTypeExpr>
                         <success>void </success>
                        </TypeExpr>
                        <Declarator>
                         <try>Typedef::Accept(Visitor&amp; visitor)</try>
                          <IdExpression>
                           <try>Typedef::Accept(Visitor&amp; visitor)</try>
                            <QualifiedId>
                             <try>Typedef::Accept(Visitor&amp; visitor)</try>
                              <NestedNameSpecifier>
                               <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                <IdNode>
                                 <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                  <SimpleTemplateId>
                                   <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                    <TemplateName>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                      <Identifier>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                         <success>Typedef</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                           <success>Typedef</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Typedef</success>
                                      </Identifier>
                                     <success>Typedef</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                    <identifier>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                     <success>Typedef</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                      <identifier>
                                       <try>Typedef::Accept(Visitor&amp; visitor)</try>
                                       <success>Typedef</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Typedef</success>
                                  </Identifier>
                                 <success>Typedef</success>
                                </IdNode>
                                <IdNode>
                                 <try>Accept(Visitor&amp; visitor)</try>
                                  <SimpleTemplateId>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <TemplateName>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <Identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                           <success>Accept</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Accept</success>
                                      </Identifier>
                                     <success>Accept</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <identifier>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                     <success>Accept</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                       <success>Accept</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Accept</success>
                                  </Identifier>
                                 <success>Accept</success>
                                </IdNode>
                               <success>Typedef::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>Accept(Visitor&amp; visitor)</try>
                                <TemplateId>
                                 <try>Accept(Visitor&amp; visitor)</try>
                                  <SimpleTemplateId>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <TemplateName>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <Identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                           <success>Accept</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Accept</success>
                                      </Identifier>
                                     <success>Accept</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>Accept(Visitor&amp; visitor)</try>
                                  <identifier>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                   <success>Accept</success>
                                  </identifier>
                                  <Keyword>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <identifier>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                     <success>Accept</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>Accept</success>
                                </Identifier>
                               <success>Accept</success>
                              </UnqualifiedId>
                             <success>Typedef::Accept</success>
                            </QualifiedId>
                           <success>Typedef::Accept</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(Visitor&amp; visitor)</try>
                            <ParameterDeclaration>
                             <try>Visitor&amp; visitor)</try>
                              <TypeExpr>
                               <try>Visitor&amp; visitor)</try>
                                <PrefixTypeExpr>
                                 <try>Visitor&amp; visitor)</try>
                                  <CVSpecifierSequence>
                                   <try>Visitor&amp; visitor)</try>
                                    <CVSpecifier>
                                     <try>Visitor&amp; visitor)</try>
                                      <const>
                                       <try>Visitor&amp; visitor)</try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>Visitor&amp; visitor)</try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success></success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>Visitor&amp; visitor)</try>
                                    <PrimaryTypeExpr>
                                     <try>Visitor&amp; visitor)</try>
                                      <SimpleType>
                                       <try>Visitor&amp; visitor)</try>
                                        <SimpleTypeSpecifier>
                                         <try>Visitor&amp; visitor)</try>
                                          <char>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>Visitor&amp; visitor)</try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>Visitor&amp; visitor)</try>
                                        <class>
                                         <try>Visitor&amp; visitor)</try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>Visitor&amp; visitor)</try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>Visitor&amp; visitor)</try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>Visitor&amp; visitor)</try>
                                        <NestedNameSpecifier>
                                         <try>Visitor&amp; visitor)</try>
                                          <IdNode>
                                           <try>Visitor&amp; visitor)</try>
                                            <SimpleTemplateId>
                                             <try>Visitor&amp; visitor)</try>
                                              <TemplateName>
                                               <try>Visitor&amp; visitor)</try>
                                                <Identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                     <success>Visitor</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>Visitor</success>
                                                </Identifier>
                                               <success>Visitor</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Visitor&amp; visitor)</try>
                                               <success>Visitor</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Visitor&amp; visitor)</try>
                                                <identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                 <success>Visitor</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Visitor</success>
                                            </Identifier>
                                           <success>Visitor</success>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>Visitor&amp; visitor)</try>
                                          <SimpleTemplateId>
                                           <try>Visitor&amp; visitor)</try>
                                            <TemplateName>
                                             <try>Visitor&amp; visitor)</try>
                                              <Identifier>
                                               <try>Visitor&amp; visitor)</try>
                                                <identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                 <success>Visitor</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>Visitor</success>
                                              </Identifier>
                                             <success>Visitor</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>Visitor&amp; visitor)</try>
                                             <success>Visitor</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Visitor&amp; visitor)</try>
                                               <success>Visitor</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Visitor</success>
                                          </Identifier>
                                         <success>Visitor</success>
                                        </IdNode>
                                       <success>Visitor</success>
                                      </QualifiedIdNode>
                                     <success>Visitor</success>
                                    </PrimaryTypeExpr>
                                   <success>Visitor&amp;</success>
                                  </PostfixTypeExpr>
                                 <success>Visitor&amp;</success>
                                </PrefixTypeExpr>
                               <success>Visitor&amp;</success>
                              </TypeExpr>
                              <Declarator>
                               <try>visitor)</try>
                                <IdExpression>
                                 <try>visitor)</try>
                                  <QualifiedId>
                                   <try>visitor)</try>
                                    <NestedNameSpecifier>
                                     <try>visitor)</try>
                                      <IdNode>
                                       <try>visitor)</try>
                                        <SimpleTemplateId>
                                         <try>visitor)</try>
                                          <TemplateName>
                                           <try>visitor)</try>
                                            <Identifier>
                                             <try>visitor)</try>
                                              <identifier>
                                               <try>visitor)</try>
                                               <success>visitor</success>
                                              </identifier>
                                              <Keyword>
                                               <try>visitor)</try>
                                                <identifier>
                                                 <try>visitor)</try>
                                                 <success>visitor</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>visitor</success>
                                            </Identifier>
                                           <success>visitor</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>visitor)</try>
                                          <identifier>
                                           <try>visitor)</try>
                                           <success>visitor</success>
                                          </identifier>
                                          <Keyword>
                                           <try>visitor)</try>
                                            <identifier>
                                             <try>visitor)</try>
                                             <success>visitor</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>visitor</success>
                                        </Identifier>
                                       <success>visitor</success>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                   <fail/>
                                  </QualifiedId>
                                  <UnqualifiedId>
                                   <try>visitor)</try>
                                    <TemplateId>
                                     <try>visitor)</try>
                                      <SimpleTemplateId>
                                       <try>visitor)</try>
                                        <TemplateName>
                                         <try>visitor)</try>
                                          <Identifier>
                                           <try>visitor)</try>
                                            <identifier>
                                             <try>visitor)</try>
                                             <success>visitor</success>
                                            </identifier>
                                            <Keyword>
                                             <try>visitor)</try>
                                              <identifier>
                                               <try>visitor)</try>
                                               <success>visitor</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>visitor</success>
                                          </Identifier>
                                         <success>visitor</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>visitor)</try>
                                      <identifier>
                                       <try>visitor)</try>
                                       <success>visitor</success>
                                      </identifier>
                                      <Keyword>
                                       <try>visitor)</try>
                                        <identifier>
                                         <try>visitor)</try>
                                         <success>visitor</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>visitor</success>
                                    </Identifier>
                                   <success>visitor</success>
                                  </UnqualifiedId>
                                 <success>visitor</success>
                                </IdExpression>
                                <ParameterList>
                                 <try>)</try>
                                 <fail/>
                                </ParameterList>
                               <success>visitor</success>
                              </Declarator>
                             <success>Visitor&amp; visitor</success>
                            </ParameterDeclaration>
                           <success>(Visitor&amp; visitor)</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>{</try>
                            <CVSpecifier>
                             <try>{</try>
                              <const>
                               <try>{</try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>{</try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>Typedef::Accept(Visitor&amp; visitor)\r\n</success>
                        </Declarator>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>visitor.Visit(*this);</try>
                              <LabeledStatement>
                               <try>visitor.Visit(*this);</try>
                                <Identifier>
                                 <try>visitor.Visit(*this);</try>
                                  <identifier>
                                   <try>visitor.Visit(*this);</try>
                                   <success>visitor</success>
                                  </identifier>
                                  <Keyword>
                                   <try>visitor.Visit(*this);</try>
                                    <identifier>
                                     <try>visitor.Visit(*this);</try>
                                     <success>visitor</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>visitor</success>
                                </Identifier>
                                <case>
                                 <try>visitor.Visit(*this);</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>visitor.Visit(*this);</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>visitor.Visit(*this);</try>
                                <Expression>
                                 <try>visitor.Visit(*this);</try>
                                  <AssignmentExpression>
                                   <try>visitor.Visit(*this);</try>
                                    <LogicalOrExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalAndExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <InclusiveOrExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <ExclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <AndExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <EqualityExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <RelationalExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <ShiftExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <AdditiveExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <MultiplicativeExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <PMExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <CastExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <UnaryExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryOperator>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <new>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <delete>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <PrimaryExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <Literal>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <FloatingLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FractionalConstant>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <true>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <nullptr>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <dynamic_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>visitor</success>
                                                                          </Identifier>
                                                                         <success>visitor</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <success>visitor</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>visitor</success>
                                                                      </Identifier>
                                                                     <success>visitor</success>
                                                                    </UnqualifiedId>
                                                                   <success>visitor</success>
                                                                  </IdExpression>
                                                                 <success>visitor</success>
                                                                </PrimaryExpression>
                                                                <IdExpression>
                                                                 <try>Visit(*this);</try>
                                                                  <QualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <NestedNameSpecifier>
                                                                     <try>Visit(*this);</try>
                                                                      <IdNode>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                        <Identifier>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>Visit</success>
                                                                        </Identifier>
                                                                       <success>Visit</success>
                                                                      </IdNode>
                                                                     <fail/>
                                                                    </NestedNameSpecifier>
                                                                   <fail/>
                                                                  </QualifiedId>
                                                                  <UnqualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <TemplateId>
                                                                     <try>Visit(*this);</try>
                                                                      <SimpleTemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <TemplateName>
                                                                         <try>Visit(*this);</try>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </TemplateName>
                                                                       <fail/>
                                                                      </SimpleTemplateId>
                                                                     <fail/>
                                                                    </TemplateId>
                                                                    <Identifier>
                                                                     <try>Visit(*this);</try>
                                                                      <identifier>
                                                                       <try>Visit(*this);</try>
                                                                       <success>Visit</success>
                                                                      </identifier>
                                                                      <Keyword>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Keyword>
                                                                     <success>Visit</success>
                                                                    </Identifier>
                                                                   <success>Visit</success>
                                                                  </UnqualifiedId>
                                                                 <success>Visit</success>
                                                                </IdExpression>
                                                                <ExpressionList>
                                                                 <try>*this);</try>
                                                                  <InitializerList>
                                                                   <try>*this);</try>
                                                                    <InitializerClause>
                                                                     <try>*this);</try>
                                                                      <AssignmentExpression>
                                                                       <try>*this);</try>
                                                                        <LogicalOrExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalAndExpression>
                                                                           <try>*this);</try>
                                                                            <InclusiveOrExpression>
                                                                             <try>*this);</try>
                                                                              <ExclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <AndExpression>
                                                                                 <try>*this);</try>
                                                                                  <EqualityExpression>
                                                                                   <try>*this);</try>
                                                                                    <RelationalExpression>
                                                                                     <try>*this);</try>
                                                                                      <ShiftExpression>
                                                                                       <try>*this);</try>
                                                                                        <AdditiveExpression>
                                                                                         <try>*this);</try>
                                                                                          <MultiplicativeExpression>
                                                                                           <try>*this);</try>
                                                                                            <PMExpression>
                                                                                             <try>*this);</try>
                                                                                              <CastExpression>
                                                                                               <try>*this);</try>
                                                                                                <UnaryExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryOperator>
                                                                                                   <try>*this);</try>
                                                                                                   <success>*</success>
                                                                                                  </UnaryOperator>
                                                                                                  <CastExpression>
                                                                                                   <try>this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </UnaryOperator>
                                                                                                      <sizeof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </sizeof>
                                                                                                      <alignof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </alignof>
                                                                                                      <NewExpression>
                                                                                                       <try>this);</try>
                                                                                                        <new>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </new>
                                                                                                       <fail/>
                                                                                                      </NewExpression>
                                                                                                      <DeleteExpression>
                                                                                                       <try>this);</try>
                                                                                                        <delete>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </delete>
                                                                                                       <fail/>
                                                                                                      </DeleteExpression>
                                                                                                      <PostfixExpression>
                                                                                                       <try>this);</try>
                                                                                                        <PrimaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <Literal>
                                                                                                           <try>this);</try>
                                                                                                            <FloatingLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <FractionalConstant>
                                                                                                               <try>this);</try>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FractionalConstant>
                                                                                                              <digit_sequence>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FloatingLiteral>
                                                                                                            <IntegerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <HexadecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </HexadecimalLiteral>
                                                                                                              <OctalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </OctalLiteral>
                                                                                                              <DecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </DecimalLiteral>
                                                                                                             <fail/>
                                                                                                            </IntegerLiteral>
                                                                                                            <CharacterLiteral>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </CharacterLiteral>
                                                                                                            <StringLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                             <fail/>
                                                                                                            </StringLiteral>
                                                                                                            <BooleanLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <true>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </true>
                                                                                                              <false>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </false>
                                                                                                             <fail/>
                                                                                                            </BooleanLiteral>
                                                                                                            <PointerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <nullptr>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </nullptr>
                                                                                                             <fail/>
                                                                                                            </PointerLiteral>
                                                                                                           <fail/>
                                                                                                          </Literal>
                                                                                                          <this>
                                                                                                           <try>this);</try>
                                                                                                            <identifier_chars>
                                                                                                             <try>);</try>
                                                                                                             <fail/>
                                                                                                            </identifier_chars>
                                                                                                           <success>this</success>
                                                                                                          </this>
                                                                                                         <success>this</success>
                                                                                                        </PrimaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </PostfixExpression>
                                                                                                     <success>this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </UnaryExpression>
                                                                                               <success>*this</success>
                                                                                              </CastExpression>
                                                                                             <success>*this</success>
                                                                                            </PMExpression>
                                                                                           <success>*this</success>
                                                                                          </MultiplicativeExpression>
                                                                                         <success>*this</success>
                                                                                        </AdditiveExpression>
                                                                                       <success>*this</success>
                                                                                      </ShiftExpression>
                                                                                     <success>*this</success>
                                                                                    </RelationalExpression>
                                                                                   <success>*this</success>
                                                                                  </EqualityExpression>
                                                                                 <success>*this</success>
                                                                                </AndExpression>
                                                                               <success>*this</success>
                                                                              </ExclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </InclusiveOrExpression>
                                                                           <success>*this</success>
                                                                          </LogicalAndExpression>
                                                                         <success>*this</success>
                                                                        </LogicalOrExpression>
                                                                        <AssignmentOperator>
                                                                         <try>);</try>
                                                                         <fail/>
                                                                        </AssignmentOperator>
                                                                        <ConditionalExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                         <success>*this</success>
                                                                        </ConditionalExpression>
                                                                       <success>*this</success>
                                                                      </AssignmentExpression>
                                                                     <success>*this</success>
                                                                    </InitializerClause>
                                                                   <success>*this</success>
                                                                  </InitializerList>
                                                                 <success>*this</success>
                                                                </ExpressionList>
                                                               <success>visitor.Visit(*this)</success>
                                                              </PostfixExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </UnaryExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </CastExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </PMExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </MultiplicativeExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </AdditiveExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </ShiftExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </RelationalExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </EqualityExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </AndExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </ExclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </InclusiveOrExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalAndExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>;</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalOrExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <LogicalAndExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <InclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <ExclusiveOrExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <AndExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <EqualityExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <RelationalExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <ShiftExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <AdditiveExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <MultiplicativeExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <PMExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <CastExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <UnaryOperator>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <new>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <delete>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <PrimaryExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <Literal>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FloatingLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <FractionalConstant>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <true>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <nullptr>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <dynamic_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <QualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <IdNode>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <SimpleTemplateId>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <TemplateName>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <Identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                    <identifier>
                                                                                     <try>visitor.Visit(*this);</try>
                                                                                     <success>visitor</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>visitor</success>
                                                                                </Identifier>
                                                                               <success>visitor</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <TemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>visitor</success>
                                                                        </Identifier>
                                                                       <success>visitor</success>
                                                                      </UnqualifiedId>
                                                                     <success>visitor</success>
                                                                    </IdExpression>
                                                                   <success>visitor</success>
                                                                  </PrimaryExpression>
                                                                  <IdExpression>
                                                                   <try>Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>Visit(*this);</try>
                                                                                   <success>Visit</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Visit</success>
                                                                              </Identifier>
                                                                             <success>Visit</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>Visit</success>
                                                                      </Identifier>
                                                                     <success>Visit</success>
                                                                    </UnqualifiedId>
                                                                   <success>Visit</success>
                                                                  </IdExpression>
                                                                  <ExpressionList>
                                                                   <try>*this);</try>
                                                                    <InitializerList>
                                                                     <try>*this);</try>
                                                                      <InitializerClause>
                                                                       <try>*this);</try>
                                                                        <AssignmentExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                          <AssignmentOperator>
                                                                           <try>);</try>
                                                                           <fail/>
                                                                          </AssignmentOperator>
                                                                          <ConditionalExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalOrExpression>
                                                                             <try>*this);</try>
                                                                              <LogicalAndExpression>
                                                                               <try>*this);</try>
                                                                                <InclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <ExclusiveOrExpression>
                                                                                   <try>*this);</try>
                                                                                    <AndExpression>
                                                                                     <try>*this);</try>
                                                                                      <EqualityExpression>
                                                                                       <try>*this);</try>
                                                                                        <RelationalExpression>
                                                                                         <try>*this);</try>
                                                                                          <ShiftExpression>
                                                                                           <try>*this);</try>
                                                                                            <AdditiveExpression>
                                                                                             <try>*this);</try>
                                                                                              <MultiplicativeExpression>
                                                                                               <try>*this);</try>
                                                                                                <PMExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <CastExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>*this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>*this);</try>
                                                                                                       <success>*</success>
                                                                                                      </UnaryOperator>
                                                                                                      <CastExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <UnaryOperator>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </UnaryOperator>
                                                                                                          <sizeof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </sizeof>
                                                                                                          <alignof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </alignof>
                                                                                                          <NewExpression>
                                                                                                           <try>this);</try>
                                                                                                            <new>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </new>
                                                                                                           <fail/>
                                                                                                          </NewExpression>
                                                                                                          <DeleteExpression>
                                                                                                           <try>this);</try>
                                                                                                            <delete>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </delete>
                                                                                                           <fail/>
                                                                                                          </DeleteExpression>
                                                                                                          <PostfixExpression>
                                                                                                           <try>this);</try>
                                                                                                            <PrimaryExpression>
                                                                                                             <try>this);</try>
                                                                                                              <Literal>
                                                                                                               <try>this);</try>
                                                                                                                <FloatingLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <FractionalConstant>
                                                                                                                   <try>this);</try>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                   <fail/>
                                                                                                                  </FractionalConstant>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FloatingLiteral>
                                                                                                                <IntegerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <HexadecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </HexadecimalLiteral>
                                                                                                                  <OctalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </OctalLiteral>
                                                                                                                  <DecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </DecimalLiteral>
                                                                                                                 <fail/>
                                                                                                                </IntegerLiteral>
                                                                                                                <CharacterLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </CharacterLiteral>
                                                                                                                <StringLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                 <fail/>
                                                                                                                </StringLiteral>
                                                                                                                <BooleanLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <true>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </true>
                                                                                                                  <false>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </false>
                                                                                                                 <fail/>
                                                                                                                </BooleanLiteral>
                                                                                                                <PointerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <nullptr>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </nullptr>
                                                                                                                 <fail/>
                                                                                                                </PointerLiteral>
                                                                                                               <fail/>
                                                                                                              </Literal>
                                                                                                              <this>
                                                                                                               <try>this);</try>
                                                                                                                <identifier_chars>
                                                                                                                 <try>);</try>
                                                                                                                 <fail/>
                                                                                                                </identifier_chars>
                                                                                                               <success>this</success>
                                                                                                              </this>
                                                                                                             <success>this</success>
                                                                                                            </PrimaryExpression>
                                                                                                           <success>this</success>
                                                                                                          </PostfixExpression>
                                                                                                         <success>this</success>
                                                                                                        </UnaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </CastExpression>
                                                                                                     <success>*this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>*this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </PMExpression>
                                                                                               <success>*this</success>
                                                                                              </MultiplicativeExpression>
                                                                                             <success>*this</success>
                                                                                            </AdditiveExpression>
                                                                                           <success>*this</success>
                                                                                          </ShiftExpression>
                                                                                         <success>*this</success>
                                                                                        </RelationalExpression>
                                                                                       <success>*this</success>
                                                                                      </EqualityExpression>
                                                                                     <success>*this</success>
                                                                                    </AndExpression>
                                                                                   <success>*this</success>
                                                                                  </ExclusiveOrExpression>
                                                                                 <success>*this</success>
                                                                                </InclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </LogicalAndExpression>
                                                                             <success>*this</success>
                                                                            </LogicalOrExpression>
                                                                           <success>*this</success>
                                                                          </ConditionalExpression>
                                                                         <success>*this</success>
                                                                        </AssignmentExpression>
                                                                       <success>*this</success>
                                                                      </InitializerClause>
                                                                     <success>*this</success>
                                                                    </InitializerList>
                                                                   <success>*this</success>
                                                                  </ExpressionList>
                                                                 <success>visitor.Visit(*this)</success>
                                                                </PostfixExpression>
                                                               <success>visitor.Visit(*this)</success>
                                                              </UnaryExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </CastExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </PMExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </MultiplicativeExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </AdditiveExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </ShiftExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </RelationalExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </EqualityExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </AndExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </ExclusiveOrExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </InclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </LogicalAndExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalOrExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </ConditionalExpression>
                                   <success>visitor.Visit(*this)</success>
                                  </AssignmentExpression>
                                 <success>visitor.Visit(*this)</success>
                                </Expression>
                               <success>visitor.Visit(*this);</success>
                              </ExpressionStatement>
                             <success>visitor.Visit(*this);</success>
                            </Statement>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n    visitor.Visit(*this);\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n    visitor.Visit(*this);\r\n}</success>
                        </FunctionBody>
                       <success>void Typedef::Accept(Visitor&amp; visitor)\r\n{\r\n    visitor.Visit(*this);\r\n}</success>
                      </FunctionDefinition>
                     <success>void Typedef::Accept(Visitor&amp; visitor)\r\n{\r\n    visitor.Visit(*this);\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                      <NamespaceDefinition>
                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                        <NamedNamespaceDefinition>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <namespace>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <namespace>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                        <SimpleDeclaration>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <DeclSpecifiers>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <DeclSpecifier>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <StorageClassSpecifier>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <register>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <inline>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <PrefixTypeExpr>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <CVSpecifierSequence>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <CVSpecifier>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <const>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <PrimaryTypeExpr>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <SimpleType>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <SimpleTypeSpecifier>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <char>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <class>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <NestedNameSpecifier>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <IdNode>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <SimpleTemplateId>
                                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <TemplateName>
                                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <Identifier>
                                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                              <Keyword>
                                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                <identifier>
                                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                 <success>TypeSpecifier</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>TypeSpecifier</success>
                                            </Identifier>
                                           <success>TypeSpecifier</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeSpecifier</success>
                                        </Identifier>
                                       <success>TypeSpecifier</success>
                                      </IdNode>
                                      <IdNode>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <SimpleTemplateId>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <TemplateName>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <Identifier>
                                             <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                              <Keyword>
                                               <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                <identifier>
                                                 <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                 <success>TypeSpecifier</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>TypeSpecifier</success>
                                            </Identifier>
                                           <success>TypeSpecifier</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeSpecifier</success>
                                        </Identifier>
                                       <success>TypeSpecifier</success>
                                      </IdNode>
                                     <success>TypeSpecifier::</success>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <SimpleTemplateId>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <TemplateName>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <Identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeSpecifier</success>
                                          </Identifier>
                                         <success>TypeSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </IdNode>
                                   <success>TypeSpecifier::TypeSpecifier</success>
                                  </QualifiedIdNode>
                                 <success>TypeSpecifier::TypeSpecifier</success>
                                </PrimaryTypeExpr>
                               <success>TypeSpecifier::TypeSpecifier</success>
                              </PostfixTypeExpr>
                             <success>TypeSpecifier::TypeSpecifier</success>
                            </PrefixTypeExpr>
                           <success>TypeSpecifier::TypeSpecifier</success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <Declarator>
                             <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <IdExpression>
                               <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <QualifiedId>
                                 <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <NestedNameSpecifier>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <IdNode>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <SimpleTemplateId>
                                       <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <TemplateName>
                                         <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <Identifier>
                                           <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                 <fail/>
                                </QualifiedId>
                                <UnqualifiedId>
                                 <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <TemplateId>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <SimpleTemplateId>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <TemplateName>
                                       <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <Identifier>
                                         <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </identifier>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                   <fail/>
                                  </TemplateId>
                                  <Identifier>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <identifier>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                  <OperatorFunctionId>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <operator>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </OperatorFunctionId>
                                  <ConversionFunctionId>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <operator>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </ConversionFunctionId>
                                 <fail/>
                                </UnqualifiedId>
                               <fail/>
                              </IdExpression>
                             <fail/>
                            </Declarator>
                           <fail/>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <using>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <using>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <using>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <EnumKey>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <enum>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <typedef>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <ClassKey>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <class>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </class>
                            <struct>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </struct>
                            <union>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                        <DeclSpecifiers>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <DeclSpecifier>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <StorageClassSpecifier>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <register>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </register>
                              <static>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <inline>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <PrefixTypeExpr>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <CVSpecifierSequence>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <CVSpecifier>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <const>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <PrimaryTypeExpr>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <SimpleType>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <SimpleTypeSpecifier>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <char>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <fail/>
                                </SimpleType>
                                <typename>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </typename>
                                <ClassKey>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <class>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                   <fail/>
                                  </class>
                                  <struct>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                   <fail/>
                                  </struct>
                                  <union>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                   <fail/>
                                  </union>
                                 <fail/>
                                </ClassKey>
                                <QualifiedIdNode>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <NestedNameSpecifier>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <IdNode>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <SimpleTemplateId>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <TemplateName>
                                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <Identifier>
                                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeSpecifier</success>
                                          </Identifier>
                                         <success>TypeSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <SimpleTemplateId>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <TemplateName>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <Identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeSpecifier</success>
                                          </Identifier>
                                         <success>TypeSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </IdNode>
                                   <success>TypeSpecifier::</success>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <SimpleTemplateId>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <TemplateName>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <Identifier>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeSpecifier</success>
                                        </Identifier>
                                       <success>TypeSpecifier</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <identifier>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <success>TypeSpecifier</success>
                                      </identifier>
                                      <Keyword>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>TypeSpecifier</success>
                                    </Identifier>
                                   <success>TypeSpecifier</success>
                                  </IdNode>
                                 <success>TypeSpecifier::TypeSpecifier</success>
                                </QualifiedIdNode>
                               <success>TypeSpecifier::TypeSpecifier</success>
                              </PrimaryTypeExpr>
                             <success>TypeSpecifier::TypeSpecifier</success>
                            </PostfixTypeExpr>
                           <success>TypeSpecifier::TypeSpecifier</success>
                          </PrefixTypeExpr>
                         <success>TypeSpecifier::TypeSpecifier</success>
                        </TypeExpr>
                        <Declarator>
                         <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <IdExpression>
                           <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <QualifiedId>
                             <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <NestedNameSpecifier>
                               <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <IdNode>
                                 <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <SimpleTemplateId>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <TemplateName>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <Identifier>
                                       <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <identifier>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                 <fail/>
                                </IdNode>
                               <fail/>
                              </NestedNameSpecifier>
                             <fail/>
                            </QualifiedId>
                            <UnqualifiedId>
                             <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <TemplateId>
                               <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <SimpleTemplateId>
                                 <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <TemplateName>
                                   <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <Identifier>
                                     <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <identifier>
                                       <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </identifier>
                                     <fail/>
                                    </Identifier>
                                   <fail/>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                               <fail/>
                              </TemplateId>
                              <Identifier>
                               <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <identifier>
                                 <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </identifier>
                               <fail/>
                              </Identifier>
                              <OperatorFunctionId>
                               <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <operator>
                                 <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </OperatorFunctionId>
                              <ConversionFunctionId>
                               <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <operator>
                                 <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </ConversionFunctionId>
                             <fail/>
                            </UnqualifiedId>
                           <fail/>
                          </IdExpression>
                         <fail/>
                        </Declarator>
                       <fail/>
                      </FunctionDefinition>
                      <SpecialMemberFunctionDefinition>
                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                        <DeclSpecifiers>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <DeclSpecifier>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <StorageClassSpecifier>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <register>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </register>
                              <static>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <inline>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <Declarator>
                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                          <IdExpression>
                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <QualifiedId>
                             <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <NestedNameSpecifier>
                               <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <IdNode>
                                 <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <SimpleTemplateId>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <TemplateName>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <Identifier>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <identifier>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <success>TypeSpecifier</success>
                                    </identifier>
                                    <Keyword>
                                     <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <identifier>
                                       <try>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <success>TypeSpecifier</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>TypeSpecifier</success>
                                  </Identifier>
                                 <success>TypeSpecifier</success>
                                </IdNode>
                                <IdNode>
                                 <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <SimpleTemplateId>
                                   <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <TemplateName>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <Identifier>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <identifier>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <success>TypeSpecifier</success>
                                    </identifier>
                                    <Keyword>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <identifier>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <success>TypeSpecifier</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>TypeSpecifier</success>
                                  </Identifier>
                                 <success>TypeSpecifier</success>
                                </IdNode>
                               <success>TypeSpecifier::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <TemplateId>
                                 <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <SimpleTemplateId>
                                   <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <TemplateName>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <Identifier>
                                       <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <identifier>
                                   <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                   <success>TypeSpecifier</success>
                                  </identifier>
                                  <Keyword>
                                   <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <identifier>
                                     <try>TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                     <success>TypeSpecifier</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>TypeSpecifier</success>
                                </Identifier>
                               <success>TypeSpecifier</success>
                              </UnqualifiedId>
                             <success>TypeSpecifier::TypeSpecifier</success>
                            </QualifiedId>
                           <success>TypeSpecifier::TypeSpecifier</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                            <ParameterDeclaration>
                             <try>const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                              <TypeExpr>
                               <try>const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                <PrefixTypeExpr>
                                 <try>const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                  <CVSpecifierSequence>
                                   <try>const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <CVSpecifier>
                                     <try>const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <const>
                                       <try>const std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <identifier_chars>
                                         <try> std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <fail/>
                                        </identifier_chars>
                                       <success>const</success>
                                      </const>
                                     <success>const</success>
                                    </CVSpecifier>
                                    <CVSpecifier>
                                     <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <const>
                                       <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success>const</success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                    <PrimaryTypeExpr>
                                     <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                      <SimpleType>
                                       <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <SimpleTypeSpecifier>
                                         <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <char>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <class>
                                         <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                        <NestedNameSpecifier>
                                         <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <IdNode>
                                           <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <SimpleTemplateId>
                                             <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <TemplateName>
                                               <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                <Identifier>
                                                 <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                  <identifier>
                                                   <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                   <success>std</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                    <identifier>
                                                     <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                     <success>std</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>std</success>
                                                </Identifier>
                                               <success>std</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>std</success>
                                              </identifier>
                                              <Keyword>
                                               <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                <identifier>
                                                 <try>std::u32string&amp; name_): DeclSpecifier(name_) </try>
                                                 <success>std</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>std</success>
                                            </Identifier>
                                           <success>std</success>
                                          </IdNode>
                                          <IdNode>
                                           <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <SimpleTemplateId>
                                             <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <TemplateName>
                                               <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                <Identifier>
                                                 <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                  <identifier>
                                                   <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                   <success>u32string</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                    <identifier>
                                                     <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                     <success>u32string</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>u32string</success>
                                                </Identifier>
                                               <success>u32string</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>u32string</success>
                                              </identifier>
                                              <Keyword>
                                               <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                <identifier>
                                                 <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                 <success>u32string</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>u32string</success>
                                            </Identifier>
                                           <success>u32string</success>
                                          </IdNode>
                                         <success>std::</success>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                          <SimpleTemplateId>
                                           <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <TemplateName>
                                             <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <Identifier>
                                               <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                <identifier>
                                                 <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                 <success>u32string</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                  <identifier>
                                                   <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                                   <success>u32string</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>u32string</success>
                                              </Identifier>
                                             <success>u32string</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                             <success>u32string</success>
                                            </identifier>
                                            <Keyword>
                                             <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>u32string&amp; name_): DeclSpecifier(name_) </try>
                                               <success>u32string</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>u32string</success>
                                          </Identifier>
                                         <success>u32string</success>
                                        </IdNode>
                                       <success>std::u32string</success>
                                      </QualifiedIdNode>
                                     <success>std::u32string</success>
                                    </PrimaryTypeExpr>
                                   <success>std::u32string&amp;</success>
                                  </PostfixTypeExpr>
                                 <success>const std::u32string&amp;</success>
                                </PrefixTypeExpr>
                               <success>const std::u32string&amp;</success>
                              </TypeExpr>
                              <Declarator>
                               <try>name_): DeclSpecifier(name_) </try>
                                <IdExpression>
                                 <try>name_): DeclSpecifier(name_) </try>
                                  <QualifiedId>
                                   <try>name_): DeclSpecifier(name_) </try>
                                    <NestedNameSpecifier>
                                     <try>name_): DeclSpecifier(name_) </try>
                                      <IdNode>
                                       <try>name_): DeclSpecifier(name_) </try>
                                        <SimpleTemplateId>
                                         <try>name_): DeclSpecifier(name_) </try>
                                          <TemplateName>
                                           <try>name_): DeclSpecifier(name_) </try>
                                            <Identifier>
                                             <try>name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>name_): DeclSpecifier(name_) </try>
                                               <success>name_</success>
                                              </identifier>
                                              <Keyword>
                                               <try>name_): DeclSpecifier(name_) </try>
                                                <identifier>
                                                 <try>name_): DeclSpecifier(name_) </try>
                                                 <success>name_</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>name_</success>
                                            </Identifier>
                                           <success>name_</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>name_): DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>name_): DeclSpecifier(name_) </try>
                                           <success>name_</success>
                                          </identifier>
                                          <Keyword>
                                           <try>name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>name_): DeclSpecifier(name_) </try>
                                             <success>name_</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>name_</success>
                                        </Identifier>
                                       <success>name_</success>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                   <fail/>
                                  </QualifiedId>
                                  <UnqualifiedId>
                                   <try>name_): DeclSpecifier(name_) </try>
                                    <TemplateId>
                                     <try>name_): DeclSpecifier(name_) </try>
                                      <SimpleTemplateId>
                                       <try>name_): DeclSpecifier(name_) </try>
                                        <TemplateName>
                                         <try>name_): DeclSpecifier(name_) </try>
                                          <Identifier>
                                           <try>name_): DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>name_): DeclSpecifier(name_) </try>
                                             <success>name_</success>
                                            </identifier>
                                            <Keyword>
                                             <try>name_): DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>name_): DeclSpecifier(name_) </try>
                                               <success>name_</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>name_</success>
                                          </Identifier>
                                         <success>name_</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>name_): DeclSpecifier(name_) </try>
                                      <identifier>
                                       <try>name_): DeclSpecifier(name_) </try>
                                       <success>name_</success>
                                      </identifier>
                                      <Keyword>
                                       <try>name_): DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>name_): DeclSpecifier(name_) </try>
                                         <success>name_</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>name_</success>
                                    </Identifier>
                                   <success>name_</success>
                                  </UnqualifiedId>
                                 <success>name_</success>
                                </IdExpression>
                                <ParameterList>
                                 <try>): DeclSpecifier(name_) </try>
                                 <fail/>
                                </ParameterList>
                               <success>name_</success>
                              </Declarator>
                             <success>const std::u32string&amp; name_</success>
                            </ParameterDeclaration>
                           <success>(const std::u32string&amp; name_)</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>: DeclSpecifier(name_) </try>
                            <CVSpecifier>
                             <try>: DeclSpecifier(name_) </try>
                              <const>
                               <try>: DeclSpecifier(name_) </try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>: DeclSpecifier(name_) </try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_)</success>
                        </Declarator>
                        <CtorInitializer>
                         <try>: DeclSpecifier(name_) </try>
                          <MemberInitializerList>
                           <try>DeclSpecifier(name_) </try>
                            <MemberInitializer>
                             <try>DeclSpecifier(name_) </try>
                              <MemberInitializerId>
                               <try>DeclSpecifier(name_) </try>
                                <QualifiedIdNode>
                                 <try>DeclSpecifier(name_) </try>
                                  <NestedNameSpecifier>
                                   <try>DeclSpecifier(name_) </try>
                                    <IdNode>
                                     <try>DeclSpecifier(name_) </try>
                                      <SimpleTemplateId>
                                       <try>DeclSpecifier(name_) </try>
                                        <TemplateName>
                                         <try>DeclSpecifier(name_) </try>
                                          <Identifier>
                                           <try>DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>DeclSpecifier(name_) </try>
                                              <identifier>
                                               <try>DeclSpecifier(name_) </try>
                                               <success>DeclSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>DeclSpecifier</success>
                                          </Identifier>
                                         <success>DeclSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>DeclSpecifier</success>
                                      </Identifier>
                                     <success>DeclSpecifier</success>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>DeclSpecifier(name_) </try>
                                    <SimpleTemplateId>
                                     <try>DeclSpecifier(name_) </try>
                                      <TemplateName>
                                       <try>DeclSpecifier(name_) </try>
                                        <Identifier>
                                         <try>DeclSpecifier(name_) </try>
                                          <identifier>
                                           <try>DeclSpecifier(name_) </try>
                                           <success>DeclSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>DeclSpecifier(name_) </try>
                                            <identifier>
                                             <try>DeclSpecifier(name_) </try>
                                             <success>DeclSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>DeclSpecifier</success>
                                        </Identifier>
                                       <success>DeclSpecifier</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>DeclSpecifier(name_) </try>
                                      <identifier>
                                       <try>DeclSpecifier(name_) </try>
                                       <success>DeclSpecifier</success>
                                      </identifier>
                                      <Keyword>
                                       <try>DeclSpecifier(name_) </try>
                                        <identifier>
                                         <try>DeclSpecifier(name_) </try>
                                         <success>DeclSpecifier</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>DeclSpecifier</success>
                                    </Identifier>
                                   <success>DeclSpecifier</success>
                                  </IdNode>
                                 <success>DeclSpecifier</success>
                                </QualifiedIdNode>
                               <success>DeclSpecifier</success>
                              </MemberInitializerId>
                              <ExpressionList>
                               <try>name_) </try>
                                <InitializerList>
                                 <try>name_) </try>
                                  <InitializerClause>
                                   <try>name_) </try>
                                    <AssignmentExpression>
                                     <try>name_) </try>
                                      <LogicalOrExpression>
                                       <try>name_) </try>
                                        <LogicalAndExpression>
                                         <try>name_) </try>
                                          <InclusiveOrExpression>
                                           <try>name_) </try>
                                            <ExclusiveOrExpression>
                                             <try>name_) </try>
                                              <AndExpression>
                                               <try>name_) </try>
                                                <EqualityExpression>
                                                 <try>name_) </try>
                                                  <RelationalExpression>
                                                   <try>name_) </try>
                                                    <ShiftExpression>
                                                     <try>name_) </try>
                                                      <AdditiveExpression>
                                                       <try>name_) </try>
                                                        <MultiplicativeExpression>
                                                         <try>name_) </try>
                                                          <PMExpression>
                                                           <try>name_) </try>
                                                            <CastExpression>
                                                             <try>name_) </try>
                                                              <UnaryExpression>
                                                               <try>name_) </try>
                                                                <UnaryOperator>
                                                                 <try>name_) </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>name_) </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>name_) </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>name_) </try>
                                                                  <new>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>name_) </try>
                                                                  <delete>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>name_) </try>
                                                                  <PrimaryExpression>
                                                                   <try>name_) </try>
                                                                    <Literal>
                                                                     <try>name_) </try>
                                                                      <FloatingLiteral>
                                                                       <try>name_) </try>
                                                                        <FractionalConstant>
                                                                         <try>name_) </try>
                                                                          <digit_sequence>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>name_) </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>name_) </try>
                                                                        <EncodingPrefix>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>name_) </try>
                                                                        <true>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>name_) </try>
                                                                        <nullptr>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>name_) </try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>name_) </try>
                                                                      <dynamic_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>name_) </try>
                                                                      <typeid>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>name_) </try>
                                                                      <QualifiedId>
                                                                       <try>name_) </try>
                                                                        <NestedNameSpecifier>
                                                                         <try>name_) </try>
                                                                          <IdNode>
                                                                           <try>name_) </try>
                                                                            <SimpleTemplateId>
                                                                             <try>name_) </try>
                                                                              <TemplateName>
                                                                               <try>name_) </try>
                                                                                <Identifier>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>name_) </try>
                                                                                    <identifier>
                                                                                     <try>name_) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>name_</success>
                                                                                </Identifier>
                                                                               <success>name_</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>name_) </try>
                                                                              <identifier>
                                                                               <try>name_) </try>
                                                                               <success>name_</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>name_) </try>
                                                                                <identifier>
                                                                                 <try>name_) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>name_</success>
                                                                            </Identifier>
                                                                           <success>name_</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>name_) </try>
                                                                        <TemplateId>
                                                                         <try>name_) </try>
                                                                          <SimpleTemplateId>
                                                                           <try>name_) </try>
                                                                            <TemplateName>
                                                                             <try>name_) </try>
                                                                              <Identifier>
                                                                               <try>name_) </try>
                                                                                <identifier>
                                                                                 <try>name_) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>name_</success>
                                                                              </Identifier>
                                                                             <success>name_</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>name_) </try>
                                                                          <identifier>
                                                                           <try>name_) </try>
                                                                           <success>name_</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>name_) </try>
                                                                            <identifier>
                                                                             <try>name_) </try>
                                                                             <success>name_</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>name_</success>
                                                                        </Identifier>
                                                                       <success>name_</success>
                                                                      </UnqualifiedId>
                                                                     <success>name_</success>
                                                                    </IdExpression>
                                                                   <success>name_</success>
                                                                  </PrimaryExpression>
                                                                 <success>name_</success>
                                                                </PostfixExpression>
                                                               <success>name_</success>
                                                              </UnaryExpression>
                                                             <success>name_</success>
                                                            </CastExpression>
                                                           <success>name_</success>
                                                          </PMExpression>
                                                         <success>name_</success>
                                                        </MultiplicativeExpression>
                                                       <success>name_</success>
                                                      </AdditiveExpression>
                                                     <success>name_</success>
                                                    </ShiftExpression>
                                                   <success>name_</success>
                                                  </RelationalExpression>
                                                 <success>name_</success>
                                                </EqualityExpression>
                                               <success>name_</success>
                                              </AndExpression>
                                             <success>name_</success>
                                            </ExclusiveOrExpression>
                                           <success>name_</success>
                                          </InclusiveOrExpression>
                                         <success>name_</success>
                                        </LogicalAndExpression>
                                       <success>name_</success>
                                      </LogicalOrExpression>
                                      <AssignmentOperator>
                                       <try>) </try>
                                       <fail/>
                                      </AssignmentOperator>
                                      <ConditionalExpression>
                                       <try>name_) </try>
                                        <LogicalOrExpression>
                                         <try>name_) </try>
                                          <LogicalAndExpression>
                                           <try>name_) </try>
                                            <InclusiveOrExpression>
                                             <try>name_) </try>
                                              <ExclusiveOrExpression>
                                               <try>name_) </try>
                                                <AndExpression>
                                                 <try>name_) </try>
                                                  <EqualityExpression>
                                                   <try>name_) </try>
                                                    <RelationalExpression>
                                                     <try>name_) </try>
                                                      <ShiftExpression>
                                                       <try>name_) </try>
                                                        <AdditiveExpression>
                                                         <try>name_) </try>
                                                          <MultiplicativeExpression>
                                                           <try>name_) </try>
                                                            <PMExpression>
                                                             <try>name_) </try>
                                                              <CastExpression>
                                                               <try>name_) </try>
                                                                <UnaryExpression>
                                                                 <try>name_) </try>
                                                                  <UnaryOperator>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </UnaryOperator>
                                                                  <sizeof>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </sizeof>
                                                                  <alignof>
                                                                   <try>name_) </try>
                                                                   <fail/>
                                                                  </alignof>
                                                                  <NewExpression>
                                                                   <try>name_) </try>
                                                                    <new>
                                                                     <try>name_) </try>
                                                                     <fail/>
                                                                    </new>
                                                                   <fail/>
                                                                  </NewExpression>
                                                                  <DeleteExpression>
                                                                   <try>name_) </try>
                                                                    <delete>
                                                                     <try>name_) </try>
                                                                     <fail/>
                                                                    </delete>
                                                                   <fail/>
                                                                  </DeleteExpression>
                                                                  <PostfixExpression>
                                                                   <try>name_) </try>
                                                                    <PrimaryExpression>
                                                                     <try>name_) </try>
                                                                      <Literal>
                                                                       <try>name_) </try>
                                                                        <FloatingLiteral>
                                                                         <try>name_) </try>
                                                                          <FractionalConstant>
                                                                           <try>name_) </try>
                                                                            <digit_sequence>
                                                                             <try>name_) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                            <digit_sequence>
                                                                             <try>name_) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                           <fail/>
                                                                          </FractionalConstant>
                                                                          <digit_sequence>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FloatingLiteral>
                                                                        <IntegerLiteral>
                                                                         <try>name_) </try>
                                                                          <HexadecimalLiteral>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </HexadecimalLiteral>
                                                                          <OctalLiteral>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </OctalLiteral>
                                                                          <DecimalLiteral>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </DecimalLiteral>
                                                                         <fail/>
                                                                        </IntegerLiteral>
                                                                        <CharacterLiteral>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </CharacterLiteral>
                                                                        <StringLiteral>
                                                                         <try>name_) </try>
                                                                          <EncodingPrefix>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                          <EncodingPrefix>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                         <fail/>
                                                                        </StringLiteral>
                                                                        <BooleanLiteral>
                                                                         <try>name_) </try>
                                                                          <true>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </true>
                                                                          <false>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </false>
                                                                         <fail/>
                                                                        </BooleanLiteral>
                                                                        <PointerLiteral>
                                                                         <try>name_) </try>
                                                                          <nullptr>
                                                                           <try>name_) </try>
                                                                           <fail/>
                                                                          </nullptr>
                                                                         <fail/>
                                                                        </PointerLiteral>
                                                                       <fail/>
                                                                      </Literal>
                                                                      <this>
                                                                       <try>name_) </try>
                                                                       <fail/>
                                                                      </this>
                                                                      <CppCastExpression>
                                                                       <try>name_) </try>
                                                                        <dynamic_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </dynamic_cast>
                                                                        <static_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </static_cast>
                                                                        <reinterpret_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </reinterpret_cast>
                                                                        <const_cast>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </const_cast>
                                                                       <fail/>
                                                                      </CppCastExpression>
                                                                      <TypeIdExpression>
                                                                       <try>name_) </try>
                                                                        <typeid>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </typeid>
                                                                        <typeid>
                                                                         <try>name_) </try>
                                                                         <fail/>
                                                                        </typeid>
                                                                       <fail/>
                                                                      </TypeIdExpression>
                                                                      <IdExpression>
                                                                       <try>name_) </try>
                                                                        <QualifiedId>
                                                                         <try>name_) </try>
                                                                          <NestedNameSpecifier>
                                                                           <try>name_) </try>
                                                                            <IdNode>
                                                                             <try>name_) </try>
                                                                              <SimpleTemplateId>
                                                                               <try>name_) </try>
                                                                                <TemplateName>
                                                                                 <try>name_) </try>
                                                                                  <Identifier>
                                                                                   <try>name_) </try>
                                                                                    <identifier>
                                                                                     <try>name_) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                    <Keyword>
                                                                                     <try>name_) </try>
                                                                                      <identifier>
                                                                                       <try>name_) </try>
                                                                                       <success>name_</success>
                                                                                      </identifier>
                                                                                     <fail/>
                                                                                    </Keyword>
                                                                                   <success>name_</success>
                                                                                  </Identifier>
                                                                                 <success>name_</success>
                                                                                </TemplateName>
                                                                               <fail/>
                                                                              </SimpleTemplateId>
                                                                              <Identifier>
                                                                               <try>name_) </try>
                                                                                <identifier>
                                                                                 <try>name_) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>name_</success>
                                                                              </Identifier>
                                                                             <success>name_</success>
                                                                            </IdNode>
                                                                           <fail/>
                                                                          </NestedNameSpecifier>
                                                                         <fail/>
                                                                        </QualifiedId>
                                                                        <UnqualifiedId>
                                                                         <try>name_) </try>
                                                                          <TemplateId>
                                                                           <try>name_) </try>
                                                                            <SimpleTemplateId>
                                                                             <try>name_) </try>
                                                                              <TemplateName>
                                                                               <try>name_) </try>
                                                                                <Identifier>
                                                                                 <try>name_) </try>
                                                                                  <identifier>
                                                                                   <try>name_) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>name_) </try>
                                                                                    <identifier>
                                                                                     <try>name_) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>name_</success>
                                                                                </Identifier>
                                                                               <success>name_</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                           <fail/>
                                                                          </TemplateId>
                                                                          <Identifier>
                                                                           <try>name_) </try>
                                                                            <identifier>
                                                                             <try>name_) </try>
                                                                             <success>name_</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>name_) </try>
                                                                              <identifier>
                                                                               <try>name_) </try>
                                                                               <success>name_</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>name_</success>
                                                                          </Identifier>
                                                                         <success>name_</success>
                                                                        </UnqualifiedId>
                                                                       <success>name_</success>
                                                                      </IdExpression>
                                                                     <success>name_</success>
                                                                    </PrimaryExpression>
                                                                   <success>name_</success>
                                                                  </PostfixExpression>
                                                                 <success>name_</success>
                                                                </UnaryExpression>
                                                               <success>name_</success>
                                                              </CastExpression>
                                                             <success>name_</success>
                                                            </PMExpression>
                                                           <success>name_</success>
                                                          </MultiplicativeExpression>
                                                         <success>name_</success>
                                                        </AdditiveExpression>
                                                       <success>name_</success>
                                                      </ShiftExpression>
                                                     <success>name_</success>
                                                    </RelationalExpression>
                                                   <success>name_</success>
                                                  </EqualityExpression>
                                                 <success>name_</success>
                                                </AndExpression>
                                               <success>name_</success>
                                              </ExclusiveOrExpression>
                                             <success>name_</success>
                                            </InclusiveOrExpression>
                                           <success>name_</success>
                                          </LogicalAndExpression>
                                         <success>name_</success>
                                        </LogicalOrExpression>
                                       <success>name_</success>
                                      </ConditionalExpression>
                                     <success>name_</success>
                                    </AssignmentExpression>
                                   <success>name_</success>
                                  </InitializerClause>
                                 <success>name_</success>
                                </InitializerList>
                               <success>name_</success>
                              </ExpressionList>
                             <success>DeclSpecifier(name_)</success>
                            </MemberInitializer>
                           <success>DeclSpecifier(name_) \r\n</success>
                          </MemberInitializerList>
                         <success>: DeclSpecifier(name_) \r\n</success>
                        </CtorInitializer>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n}</success>
                        </FunctionBody>
                       <success>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) \r\n{\r\n}</success>
                      </SpecialMemberFunctionDefinition>
                     <success>TypeSpecifier::TypeSpecifier(const std::u32string&amp; name_): DeclSpecifier(name_) \r\n{\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                      <NamespaceDefinition>
                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                        <NamedNamespaceDefinition>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <namespace>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <namespace>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                        <SimpleDeclaration>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <DeclSpecifiers>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <DeclSpecifier>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <StorageClassSpecifier>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <register>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <inline>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <PrefixTypeExpr>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <CVSpecifierSequence>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <CVSpecifier>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                  <const>
                                   <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <PrimaryTypeExpr>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                  <SimpleType>
                                   <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                    <SimpleTypeSpecifier>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                      <char>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                        <identifier_chars>
                                         <try> TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                         <fail/>
                                        </identifier_chars>
                                       <success>void</success>
                                      </void>
                                     <success>void</success>
                                    </SimpleTypeSpecifier>
                                    <SimpleTypeSpecifier>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                      <char>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <success>void</success>
                                  </SimpleType>
                                 <success>void</success>
                                </PrimaryTypeExpr>
                               <success>void </success>
                              </PostfixTypeExpr>
                             <success>void </success>
                            </PrefixTypeExpr>
                           <success>void </success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <Declarator>
                             <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <IdExpression>
                               <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <QualifiedId>
                                 <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                  <NestedNameSpecifier>
                                   <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                    <IdNode>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                      <SimpleTemplateId>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                        <TemplateName>
                                         <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                          <Identifier>
                                           <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeSpecifier</success>
                                          </Identifier>
                                         <success>TypeSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <SimpleTemplateId>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <TemplateName>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <Identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                             <success>Accept</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Accept(Visitor&amp; visitor)</try>
                                               <success>Accept</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Accept</success>
                                          </Identifier>
                                         <success>Accept</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                           <success>Accept</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Accept</success>
                                      </Identifier>
                                     <success>Accept</success>
                                    </IdNode>
                                   <success>TypeSpecifier::</success>
                                  </NestedNameSpecifier>
                                  <UnqualifiedId>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <TemplateId>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <SimpleTemplateId>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <TemplateName>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <Identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                             <success>Accept</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Accept(Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Accept(Visitor&amp; visitor)</try>
                                               <success>Accept</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Accept</success>
                                          </Identifier>
                                         <success>Accept</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                       <success>Accept</success>
                                      </identifier>
                                      <Keyword>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>Accept</success>
                                    </Identifier>
                                   <success>Accept</success>
                                  </UnqualifiedId>
                                 <success>TypeSpecifier::Accept</success>
                                </QualifiedId>
                               <success>TypeSpecifier::Accept</success>
                              </IdExpression>
                              <ParameterList>
                               <try>(Visitor&amp; visitor)</try>
                                <ParameterDeclaration>
                                 <try>Visitor&amp; visitor)</try>
                                  <TypeExpr>
                                   <try>Visitor&amp; visitor)</try>
                                    <PrefixTypeExpr>
                                     <try>Visitor&amp; visitor)</try>
                                      <CVSpecifierSequence>
                                       <try>Visitor&amp; visitor)</try>
                                        <CVSpecifier>
                                         <try>Visitor&amp; visitor)</try>
                                          <const>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </const>
                                          <volatile>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </volatile>
                                         <fail/>
                                        </CVSpecifier>
                                       <success></success>
                                      </CVSpecifierSequence>
                                      <PostfixTypeExpr>
                                       <try>Visitor&amp; visitor)</try>
                                        <PrimaryTypeExpr>
                                         <try>Visitor&amp; visitor)</try>
                                          <SimpleType>
                                           <try>Visitor&amp; visitor)</try>
                                            <SimpleTypeSpecifier>
                                             <try>Visitor&amp; visitor)</try>
                                              <char>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </char>
                                              <char16_t>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </char16_t>
                                              <char32_t>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </char32_t>
                                              <wchar_t>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </wchar_t>
                                              <bool>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </bool>
                                              <short>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </short>
                                              <int>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </int>
                                              <long>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </long>
                                              <signed>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </signed>
                                              <unsigned>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </unsigned>
                                              <float>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </float>
                                              <double>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </double>
                                              <void>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </void>
                                              <auto>
                                               <try>Visitor&amp; visitor)</try>
                                               <fail/>
                                              </auto>
                                             <fail/>
                                            </SimpleTypeSpecifier>
                                           <fail/>
                                          </SimpleType>
                                          <typename>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </typename>
                                          <ClassKey>
                                           <try>Visitor&amp; visitor)</try>
                                            <class>
                                             <try>Visitor&amp; visitor)</try>
                                             <fail/>
                                            </class>
                                            <struct>
                                             <try>Visitor&amp; visitor)</try>
                                             <fail/>
                                            </struct>
                                            <union>
                                             <try>Visitor&amp; visitor)</try>
                                             <fail/>
                                            </union>
                                           <fail/>
                                          </ClassKey>
                                          <QualifiedIdNode>
                                           <try>Visitor&amp; visitor)</try>
                                            <NestedNameSpecifier>
                                             <try>Visitor&amp; visitor)</try>
                                              <IdNode>
                                               <try>Visitor&amp; visitor)</try>
                                                <SimpleTemplateId>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <TemplateName>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <Identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                      <identifier>
                                                       <try>Visitor&amp; visitor)</try>
                                                       <success>Visitor</success>
                                                      </identifier>
                                                      <Keyword>
                                                       <try>Visitor&amp; visitor)</try>
                                                        <identifier>
                                                         <try>Visitor&amp; visitor)</try>
                                                         <success>Visitor</success>
                                                        </identifier>
                                                       <fail/>
                                                      </Keyword>
                                                     <success>Visitor</success>
                                                    </Identifier>
                                                   <success>Visitor</success>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                     <success>Visitor</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>Visitor</success>
                                                </Identifier>
                                               <success>Visitor</success>
                                              </IdNode>
                                             <fail/>
                                            </NestedNameSpecifier>
                                            <IdNode>
                                             <try>Visitor&amp; visitor)</try>
                                              <SimpleTemplateId>
                                               <try>Visitor&amp; visitor)</try>
                                                <TemplateName>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <Identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                     <success>Visitor</success>
                                                    </identifier>
                                                    <Keyword>
                                                     <try>Visitor&amp; visitor)</try>
                                                      <identifier>
                                                       <try>Visitor&amp; visitor)</try>
                                                       <success>Visitor</success>
                                                      </identifier>
                                                     <fail/>
                                                    </Keyword>
                                                   <success>Visitor</success>
                                                  </Identifier>
                                                 <success>Visitor</success>
                                                </TemplateName>
                                               <fail/>
                                              </SimpleTemplateId>
                                              <Identifier>
                                               <try>Visitor&amp; visitor)</try>
                                                <identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                 <success>Visitor</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>Visitor</success>
                                              </Identifier>
                                             <success>Visitor</success>
                                            </IdNode>
                                           <success>Visitor</success>
                                          </QualifiedIdNode>
                                         <success>Visitor</success>
                                        </PrimaryTypeExpr>
                                       <success>Visitor&amp;</success>
                                      </PostfixTypeExpr>
                                     <success>Visitor&amp;</success>
                                    </PrefixTypeExpr>
                                   <success>Visitor&amp;</success>
                                  </TypeExpr>
                                  <Declarator>
                                   <try>visitor)</try>
                                    <IdExpression>
                                     <try>visitor)</try>
                                      <QualifiedId>
                                       <try>visitor)</try>
                                        <NestedNameSpecifier>
                                         <try>visitor)</try>
                                          <IdNode>
                                           <try>visitor)</try>
                                            <SimpleTemplateId>
                                             <try>visitor)</try>
                                              <TemplateName>
                                               <try>visitor)</try>
                                                <Identifier>
                                                 <try>visitor)</try>
                                                  <identifier>
                                                   <try>visitor)</try>
                                                   <success>visitor</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>visitor)</try>
                                                    <identifier>
                                                     <try>visitor)</try>
                                                     <success>visitor</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>visitor</success>
                                                </Identifier>
                                               <success>visitor</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>visitor)</try>
                                              <identifier>
                                               <try>visitor)</try>
                                               <success>visitor</success>
                                              </identifier>
                                              <Keyword>
                                               <try>visitor)</try>
                                                <identifier>
                                                 <try>visitor)</try>
                                                 <success>visitor</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>visitor</success>
                                            </Identifier>
                                           <success>visitor</success>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                       <fail/>
                                      </QualifiedId>
                                      <UnqualifiedId>
                                       <try>visitor)</try>
                                        <TemplateId>
                                         <try>visitor)</try>
                                          <SimpleTemplateId>
                                           <try>visitor)</try>
                                            <TemplateName>
                                             <try>visitor)</try>
                                              <Identifier>
                                               <try>visitor)</try>
                                                <identifier>
                                                 <try>visitor)</try>
                                                 <success>visitor</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>visitor)</try>
                                                  <identifier>
                                                   <try>visitor)</try>
                                                   <success>visitor</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>visitor</success>
                                              </Identifier>
                                             <success>visitor</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                         <fail/>
                                        </TemplateId>
                                        <Identifier>
                                         <try>visitor)</try>
                                          <identifier>
                                           <try>visitor)</try>
                                           <success>visitor</success>
                                          </identifier>
                                          <Keyword>
                                           <try>visitor)</try>
                                            <identifier>
                                             <try>visitor)</try>
                                             <success>visitor</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>visitor</success>
                                        </Identifier>
                                       <success>visitor</success>
                                      </UnqualifiedId>
                                     <success>visitor</success>
                                    </IdExpression>
                                    <ParameterList>
                                     <try>)</try>
                                     <fail/>
                                    </ParameterList>
                                   <success>visitor</success>
                                  </Declarator>
                                 <success>Visitor&amp; visitor</success>
                                </ParameterDeclaration>
                               <success>(Visitor&amp; visitor)</success>
                              </ParameterList>
                              <CVSpecifierSequence>
                               <try>{</try>
                                <CVSpecifier>
                                 <try>{</try>
                                  <const>
                                   <try>{</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>{</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                             <success>TypeSpecifier::Accept(Visitor&amp; visitor)\r\n</success>
                            </Declarator>
                            <Initializer>
                             <try>{</try>
                              <BracedInitializerList>
                               <try>{</try>
                                <InitializerClause>
                                 <try>visitor.Visit(*this);</try>
                                  <AssignmentExpression>
                                   <try>visitor.Visit(*this);</try>
                                    <LogicalOrExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalAndExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <InclusiveOrExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <ExclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <AndExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <EqualityExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <RelationalExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <ShiftExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <AdditiveExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <MultiplicativeExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <PMExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <CastExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <UnaryExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryOperator>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <new>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <delete>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <PrimaryExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <Literal>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <FloatingLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FractionalConstant>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <true>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <nullptr>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <dynamic_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>visitor</success>
                                                                          </Identifier>
                                                                         <success>visitor</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <success>visitor</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>visitor</success>
                                                                      </Identifier>
                                                                     <success>visitor</success>
                                                                    </UnqualifiedId>
                                                                   <success>visitor</success>
                                                                  </IdExpression>
                                                                 <success>visitor</success>
                                                                </PrimaryExpression>
                                                                <IdExpression>
                                                                 <try>Visit(*this);</try>
                                                                  <QualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <NestedNameSpecifier>
                                                                     <try>Visit(*this);</try>
                                                                      <IdNode>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                        <Identifier>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>Visit</success>
                                                                        </Identifier>
                                                                       <success>Visit</success>
                                                                      </IdNode>
                                                                     <fail/>
                                                                    </NestedNameSpecifier>
                                                                   <fail/>
                                                                  </QualifiedId>
                                                                  <UnqualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <TemplateId>
                                                                     <try>Visit(*this);</try>
                                                                      <SimpleTemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <TemplateName>
                                                                         <try>Visit(*this);</try>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </TemplateName>
                                                                       <fail/>
                                                                      </SimpleTemplateId>
                                                                     <fail/>
                                                                    </TemplateId>
                                                                    <Identifier>
                                                                     <try>Visit(*this);</try>
                                                                      <identifier>
                                                                       <try>Visit(*this);</try>
                                                                       <success>Visit</success>
                                                                      </identifier>
                                                                      <Keyword>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Keyword>
                                                                     <success>Visit</success>
                                                                    </Identifier>
                                                                   <success>Visit</success>
                                                                  </UnqualifiedId>
                                                                 <success>Visit</success>
                                                                </IdExpression>
                                                                <ExpressionList>
                                                                 <try>*this);</try>
                                                                  <InitializerList>
                                                                   <try>*this);</try>
                                                                    <InitializerClause>
                                                                     <try>*this);</try>
                                                                      <AssignmentExpression>
                                                                       <try>*this);</try>
                                                                        <LogicalOrExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalAndExpression>
                                                                           <try>*this);</try>
                                                                            <InclusiveOrExpression>
                                                                             <try>*this);</try>
                                                                              <ExclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <AndExpression>
                                                                                 <try>*this);</try>
                                                                                  <EqualityExpression>
                                                                                   <try>*this);</try>
                                                                                    <RelationalExpression>
                                                                                     <try>*this);</try>
                                                                                      <ShiftExpression>
                                                                                       <try>*this);</try>
                                                                                        <AdditiveExpression>
                                                                                         <try>*this);</try>
                                                                                          <MultiplicativeExpression>
                                                                                           <try>*this);</try>
                                                                                            <PMExpression>
                                                                                             <try>*this);</try>
                                                                                              <CastExpression>
                                                                                               <try>*this);</try>
                                                                                                <UnaryExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryOperator>
                                                                                                   <try>*this);</try>
                                                                                                   <success>*</success>
                                                                                                  </UnaryOperator>
                                                                                                  <CastExpression>
                                                                                                   <try>this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </UnaryOperator>
                                                                                                      <sizeof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </sizeof>
                                                                                                      <alignof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </alignof>
                                                                                                      <NewExpression>
                                                                                                       <try>this);</try>
                                                                                                        <new>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </new>
                                                                                                       <fail/>
                                                                                                      </NewExpression>
                                                                                                      <DeleteExpression>
                                                                                                       <try>this);</try>
                                                                                                        <delete>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </delete>
                                                                                                       <fail/>
                                                                                                      </DeleteExpression>
                                                                                                      <PostfixExpression>
                                                                                                       <try>this);</try>
                                                                                                        <PrimaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <Literal>
                                                                                                           <try>this);</try>
                                                                                                            <FloatingLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <FractionalConstant>
                                                                                                               <try>this);</try>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FractionalConstant>
                                                                                                              <digit_sequence>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FloatingLiteral>
                                                                                                            <IntegerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <HexadecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </HexadecimalLiteral>
                                                                                                              <OctalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </OctalLiteral>
                                                                                                              <DecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </DecimalLiteral>
                                                                                                             <fail/>
                                                                                                            </IntegerLiteral>
                                                                                                            <CharacterLiteral>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </CharacterLiteral>
                                                                                                            <StringLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                             <fail/>
                                                                                                            </StringLiteral>
                                                                                                            <BooleanLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <true>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </true>
                                                                                                              <false>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </false>
                                                                                                             <fail/>
                                                                                                            </BooleanLiteral>
                                                                                                            <PointerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <nullptr>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </nullptr>
                                                                                                             <fail/>
                                                                                                            </PointerLiteral>
                                                                                                           <fail/>
                                                                                                          </Literal>
                                                                                                          <this>
                                                                                                           <try>this);</try>
                                                                                                            <identifier_chars>
                                                                                                             <try>);</try>
                                                                                                             <fail/>
                                                                                                            </identifier_chars>
                                                                                                           <success>this</success>
                                                                                                          </this>
                                                                                                         <success>this</success>
                                                                                                        </PrimaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </PostfixExpression>
                                                                                                     <success>this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </UnaryExpression>
                                                                                               <success>*this</success>
                                                                                              </CastExpression>
                                                                                             <success>*this</success>
                                                                                            </PMExpression>
                                                                                           <success>*this</success>
                                                                                          </MultiplicativeExpression>
                                                                                         <success>*this</success>
                                                                                        </AdditiveExpression>
                                                                                       <success>*this</success>
                                                                                      </ShiftExpression>
                                                                                     <success>*this</success>
                                                                                    </RelationalExpression>
                                                                                   <success>*this</success>
                                                                                  </EqualityExpression>
                                                                                 <success>*this</success>
                                                                                </AndExpression>
                                                                               <success>*this</success>
                                                                              </ExclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </InclusiveOrExpression>
                                                                           <success>*this</success>
                                                                          </LogicalAndExpression>
                                                                         <success>*this</success>
                                                                        </LogicalOrExpression>
                                                                        <AssignmentOperator>
                                                                         <try>);</try>
                                                                         <fail/>
                                                                        </AssignmentOperator>
                                                                        <ConditionalExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                         <success>*this</success>
                                                                        </ConditionalExpression>
                                                                       <success>*this</success>
                                                                      </AssignmentExpression>
                                                                     <success>*this</success>
                                                                    </InitializerClause>
                                                                   <success>*this</success>
                                                                  </InitializerList>
                                                                 <success>*this</success>
                                                                </ExpressionList>
                                                               <success>visitor.Visit(*this)</success>
                                                              </PostfixExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </UnaryExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </CastExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </PMExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </MultiplicativeExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </AdditiveExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </ShiftExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </RelationalExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </EqualityExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </AndExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </ExclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </InclusiveOrExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalAndExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>;</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalOrExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <LogicalAndExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <InclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <ExclusiveOrExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <AndExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <EqualityExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <RelationalExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <ShiftExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <AdditiveExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <MultiplicativeExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <PMExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <CastExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <UnaryOperator>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <new>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <delete>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <PrimaryExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <Literal>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FloatingLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <FractionalConstant>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <true>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <nullptr>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <dynamic_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <QualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <IdNode>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <SimpleTemplateId>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <TemplateName>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <Identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                    <identifier>
                                                                                     <try>visitor.Visit(*this);</try>
                                                                                     <success>visitor</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>visitor</success>
                                                                                </Identifier>
                                                                               <success>visitor</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <TemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>visitor</success>
                                                                        </Identifier>
                                                                       <success>visitor</success>
                                                                      </UnqualifiedId>
                                                                     <success>visitor</success>
                                                                    </IdExpression>
                                                                   <success>visitor</success>
                                                                  </PrimaryExpression>
                                                                  <IdExpression>
                                                                   <try>Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>Visit(*this);</try>
                                                                                   <success>Visit</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Visit</success>
                                                                              </Identifier>
                                                                             <success>Visit</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>Visit</success>
                                                                      </Identifier>
                                                                     <success>Visit</success>
                                                                    </UnqualifiedId>
                                                                   <success>Visit</success>
                                                                  </IdExpression>
                                                                  <ExpressionList>
                                                                   <try>*this);</try>
                                                                    <InitializerList>
                                                                     <try>*this);</try>
                                                                      <InitializerClause>
                                                                       <try>*this);</try>
                                                                        <AssignmentExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                          <AssignmentOperator>
                                                                           <try>);</try>
                                                                           <fail/>
                                                                          </AssignmentOperator>
                                                                          <ConditionalExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalOrExpression>
                                                                             <try>*this);</try>
                                                                              <LogicalAndExpression>
                                                                               <try>*this);</try>
                                                                                <InclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <ExclusiveOrExpression>
                                                                                   <try>*this);</try>
                                                                                    <AndExpression>
                                                                                     <try>*this);</try>
                                                                                      <EqualityExpression>
                                                                                       <try>*this);</try>
                                                                                        <RelationalExpression>
                                                                                         <try>*this);</try>
                                                                                          <ShiftExpression>
                                                                                           <try>*this);</try>
                                                                                            <AdditiveExpression>
                                                                                             <try>*this);</try>
                                                                                              <MultiplicativeExpression>
                                                                                               <try>*this);</try>
                                                                                                <PMExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <CastExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>*this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>*this);</try>
                                                                                                       <success>*</success>
                                                                                                      </UnaryOperator>
                                                                                                      <CastExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <UnaryOperator>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </UnaryOperator>
                                                                                                          <sizeof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </sizeof>
                                                                                                          <alignof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </alignof>
                                                                                                          <NewExpression>
                                                                                                           <try>this);</try>
                                                                                                            <new>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </new>
                                                                                                           <fail/>
                                                                                                          </NewExpression>
                                                                                                          <DeleteExpression>
                                                                                                           <try>this);</try>
                                                                                                            <delete>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </delete>
                                                                                                           <fail/>
                                                                                                          </DeleteExpression>
                                                                                                          <PostfixExpression>
                                                                                                           <try>this);</try>
                                                                                                            <PrimaryExpression>
                                                                                                             <try>this);</try>
                                                                                                              <Literal>
                                                                                                               <try>this);</try>
                                                                                                                <FloatingLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <FractionalConstant>
                                                                                                                   <try>this);</try>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                   <fail/>
                                                                                                                  </FractionalConstant>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FloatingLiteral>
                                                                                                                <IntegerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <HexadecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </HexadecimalLiteral>
                                                                                                                  <OctalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </OctalLiteral>
                                                                                                                  <DecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </DecimalLiteral>
                                                                                                                 <fail/>
                                                                                                                </IntegerLiteral>
                                                                                                                <CharacterLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </CharacterLiteral>
                                                                                                                <StringLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                 <fail/>
                                                                                                                </StringLiteral>
                                                                                                                <BooleanLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <true>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </true>
                                                                                                                  <false>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </false>
                                                                                                                 <fail/>
                                                                                                                </BooleanLiteral>
                                                                                                                <PointerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <nullptr>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </nullptr>
                                                                                                                 <fail/>
                                                                                                                </PointerLiteral>
                                                                                                               <fail/>
                                                                                                              </Literal>
                                                                                                              <this>
                                                                                                               <try>this);</try>
                                                                                                                <identifier_chars>
                                                                                                                 <try>);</try>
                                                                                                                 <fail/>
                                                                                                                </identifier_chars>
                                                                                                               <success>this</success>
                                                                                                              </this>
                                                                                                             <success>this</success>
                                                                                                            </PrimaryExpression>
                                                                                                           <success>this</success>
                                                                                                          </PostfixExpression>
                                                                                                         <success>this</success>
                                                                                                        </UnaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </CastExpression>
                                                                                                     <success>*this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>*this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </PMExpression>
                                                                                               <success>*this</success>
                                                                                              </MultiplicativeExpression>
                                                                                             <success>*this</success>
                                                                                            </AdditiveExpression>
                                                                                           <success>*this</success>
                                                                                          </ShiftExpression>
                                                                                         <success>*this</success>
                                                                                        </RelationalExpression>
                                                                                       <success>*this</success>
                                                                                      </EqualityExpression>
                                                                                     <success>*this</success>
                                                                                    </AndExpression>
                                                                                   <success>*this</success>
                                                                                  </ExclusiveOrExpression>
                                                                                 <success>*this</success>
                                                                                </InclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </LogicalAndExpression>
                                                                             <success>*this</success>
                                                                            </LogicalOrExpression>
                                                                           <success>*this</success>
                                                                          </ConditionalExpression>
                                                                         <success>*this</success>
                                                                        </AssignmentExpression>
                                                                       <success>*this</success>
                                                                      </InitializerClause>
                                                                     <success>*this</success>
                                                                    </InitializerList>
                                                                   <success>*this</success>
                                                                  </ExpressionList>
                                                                 <success>visitor.Visit(*this)</success>
                                                                </PostfixExpression>
                                                               <success>visitor.Visit(*this)</success>
                                                              </UnaryExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </CastExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </PMExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </MultiplicativeExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </AdditiveExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </ShiftExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </RelationalExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </EqualityExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </AndExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </ExclusiveOrExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </InclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </LogicalAndExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalOrExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </ConditionalExpression>
                                   <success>visitor.Visit(*this)</success>
                                  </AssignmentExpression>
                                 <success>visitor.Visit(*this)</success>
                                </InitializerClause>
                               <fail/>
                              </BracedInitializerList>
                             <fail/>
                            </Initializer>
                           <success>TypeSpecifier::Accept(Visitor&amp; visitor)\r\n</success>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <using>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <using>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <using>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <EnumKey>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <enum>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <typedef>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <ClassKey>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <class>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </class>
                            <struct>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </struct>
                            <union>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                        <DeclSpecifiers>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <DeclSpecifier>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <StorageClassSpecifier>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <register>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </register>
                              <static>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <inline>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <PrefixTypeExpr>
                           <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <CVSpecifierSequence>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <CVSpecifier>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <const>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <PrimaryTypeExpr>
                               <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <SimpleType>
                                 <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                  <SimpleTypeSpecifier>
                                   <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                    <char>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>void TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                      <identifier_chars>
                                       <try> TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <fail/>
                                      </identifier_chars>
                                     <success>void</success>
                                    </void>
                                   <success>void</success>
                                  </SimpleTypeSpecifier>
                                  <SimpleTypeSpecifier>
                                   <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                    <char>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <success>void</success>
                                </SimpleType>
                               <success>void</success>
                              </PrimaryTypeExpr>
                             <success>void </success>
                            </PostfixTypeExpr>
                           <success>void </success>
                          </PrefixTypeExpr>
                         <success>void </success>
                        </TypeExpr>
                        <Declarator>
                         <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                          <IdExpression>
                           <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                            <QualifiedId>
                             <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                              <NestedNameSpecifier>
                               <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                <IdNode>
                                 <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                  <SimpleTemplateId>
                                   <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                    <TemplateName>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                      <Identifier>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                    <identifier>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                     <success>TypeSpecifier</success>
                                    </identifier>
                                    <Keyword>
                                     <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                      <identifier>
                                       <try>TypeSpecifier::Accept(Visitor&amp; visitor)</try>
                                       <success>TypeSpecifier</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>TypeSpecifier</success>
                                  </Identifier>
                                 <success>TypeSpecifier</success>
                                </IdNode>
                                <IdNode>
                                 <try>Accept(Visitor&amp; visitor)</try>
                                  <SimpleTemplateId>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <TemplateName>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <Identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                           <success>Accept</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Accept</success>
                                      </Identifier>
                                     <success>Accept</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <identifier>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                     <success>Accept</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                       <success>Accept</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Accept</success>
                                  </Identifier>
                                 <success>Accept</success>
                                </IdNode>
                               <success>TypeSpecifier::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>Accept(Visitor&amp; visitor)</try>
                                <TemplateId>
                                 <try>Accept(Visitor&amp; visitor)</try>
                                  <SimpleTemplateId>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <TemplateName>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                      <Identifier>
                                       <try>Accept(Visitor&amp; visitor)</try>
                                        <identifier>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                         <success>Accept</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Accept(Visitor&amp; visitor)</try>
                                          <identifier>
                                           <try>Accept(Visitor&amp; visitor)</try>
                                           <success>Accept</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Accept</success>
                                      </Identifier>
                                     <success>Accept</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>Accept(Visitor&amp; visitor)</try>
                                  <identifier>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                   <success>Accept</success>
                                  </identifier>
                                  <Keyword>
                                   <try>Accept(Visitor&amp; visitor)</try>
                                    <identifier>
                                     <try>Accept(Visitor&amp; visitor)</try>
                                     <success>Accept</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>Accept</success>
                                </Identifier>
                               <success>Accept</success>
                              </UnqualifiedId>
                             <success>TypeSpecifier::Accept</success>
                            </QualifiedId>
                           <success>TypeSpecifier::Accept</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(Visitor&amp; visitor)</try>
                            <ParameterDeclaration>
                             <try>Visitor&amp; visitor)</try>
                              <TypeExpr>
                               <try>Visitor&amp; visitor)</try>
                                <PrefixTypeExpr>
                                 <try>Visitor&amp; visitor)</try>
                                  <CVSpecifierSequence>
                                   <try>Visitor&amp; visitor)</try>
                                    <CVSpecifier>
                                     <try>Visitor&amp; visitor)</try>
                                      <const>
                                       <try>Visitor&amp; visitor)</try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>Visitor&amp; visitor)</try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success></success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>Visitor&amp; visitor)</try>
                                    <PrimaryTypeExpr>
                                     <try>Visitor&amp; visitor)</try>
                                      <SimpleType>
                                       <try>Visitor&amp; visitor)</try>
                                        <SimpleTypeSpecifier>
                                         <try>Visitor&amp; visitor)</try>
                                          <char>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>Visitor&amp; visitor)</try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>Visitor&amp; visitor)</try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>Visitor&amp; visitor)</try>
                                        <class>
                                         <try>Visitor&amp; visitor)</try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>Visitor&amp; visitor)</try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>Visitor&amp; visitor)</try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>Visitor&amp; visitor)</try>
                                        <NestedNameSpecifier>
                                         <try>Visitor&amp; visitor)</try>
                                          <IdNode>
                                           <try>Visitor&amp; visitor)</try>
                                            <SimpleTemplateId>
                                             <try>Visitor&amp; visitor)</try>
                                              <TemplateName>
                                               <try>Visitor&amp; visitor)</try>
                                                <Identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>Visitor&amp; visitor)</try>
                                                    <identifier>
                                                     <try>Visitor&amp; visitor)</try>
                                                     <success>Visitor</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>Visitor</success>
                                                </Identifier>
                                               <success>Visitor</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Visitor&amp; visitor)</try>
                                               <success>Visitor</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Visitor&amp; visitor)</try>
                                                <identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                 <success>Visitor</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Visitor</success>
                                            </Identifier>
                                           <success>Visitor</success>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>Visitor&amp; visitor)</try>
                                          <SimpleTemplateId>
                                           <try>Visitor&amp; visitor)</try>
                                            <TemplateName>
                                             <try>Visitor&amp; visitor)</try>
                                              <Identifier>
                                               <try>Visitor&amp; visitor)</try>
                                                <identifier>
                                                 <try>Visitor&amp; visitor)</try>
                                                 <success>Visitor</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>Visitor&amp; visitor)</try>
                                                  <identifier>
                                                   <try>Visitor&amp; visitor)</try>
                                                   <success>Visitor</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>Visitor</success>
                                              </Identifier>
                                             <success>Visitor</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>Visitor&amp; visitor)</try>
                                            <identifier>
                                             <try>Visitor&amp; visitor)</try>
                                             <success>Visitor</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Visitor&amp; visitor)</try>
                                              <identifier>
                                               <try>Visitor&amp; visitor)</try>
                                               <success>Visitor</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Visitor</success>
                                          </Identifier>
                                         <success>Visitor</success>
                                        </IdNode>
                                       <success>Visitor</success>
                                      </QualifiedIdNode>
                                     <success>Visitor</success>
                                    </PrimaryTypeExpr>
                                   <success>Visitor&amp;</success>
                                  </PostfixTypeExpr>
                                 <success>Visitor&amp;</success>
                                </PrefixTypeExpr>
                               <success>Visitor&amp;</success>
                              </TypeExpr>
                              <Declarator>
                               <try>visitor)</try>
                                <IdExpression>
                                 <try>visitor)</try>
                                  <QualifiedId>
                                   <try>visitor)</try>
                                    <NestedNameSpecifier>
                                     <try>visitor)</try>
                                      <IdNode>
                                       <try>visitor)</try>
                                        <SimpleTemplateId>
                                         <try>visitor)</try>
                                          <TemplateName>
                                           <try>visitor)</try>
                                            <Identifier>
                                             <try>visitor)</try>
                                              <identifier>
                                               <try>visitor)</try>
                                               <success>visitor</success>
                                              </identifier>
                                              <Keyword>
                                               <try>visitor)</try>
                                                <identifier>
                                                 <try>visitor)</try>
                                                 <success>visitor</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>visitor</success>
                                            </Identifier>
                                           <success>visitor</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>visitor)</try>
                                          <identifier>
                                           <try>visitor)</try>
                                           <success>visitor</success>
                                          </identifier>
                                          <Keyword>
                                           <try>visitor)</try>
                                            <identifier>
                                             <try>visitor)</try>
                                             <success>visitor</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>visitor</success>
                                        </Identifier>
                                       <success>visitor</success>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                   <fail/>
                                  </QualifiedId>
                                  <UnqualifiedId>
                                   <try>visitor)</try>
                                    <TemplateId>
                                     <try>visitor)</try>
                                      <SimpleTemplateId>
                                       <try>visitor)</try>
                                        <TemplateName>
                                         <try>visitor)</try>
                                          <Identifier>
                                           <try>visitor)</try>
                                            <identifier>
                                             <try>visitor)</try>
                                             <success>visitor</success>
                                            </identifier>
                                            <Keyword>
                                             <try>visitor)</try>
                                              <identifier>
                                               <try>visitor)</try>
                                               <success>visitor</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>visitor</success>
                                          </Identifier>
                                         <success>visitor</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>visitor)</try>
                                      <identifier>
                                       <try>visitor)</try>
                                       <success>visitor</success>
                                      </identifier>
                                      <Keyword>
                                       <try>visitor)</try>
                                        <identifier>
                                         <try>visitor)</try>
                                         <success>visitor</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>visitor</success>
                                    </Identifier>
                                   <success>visitor</success>
                                  </UnqualifiedId>
                                 <success>visitor</success>
                                </IdExpression>
                                <ParameterList>
                                 <try>)</try>
                                 <fail/>
                                </ParameterList>
                               <success>visitor</success>
                              </Declarator>
                             <success>Visitor&amp; visitor</success>
                            </ParameterDeclaration>
                           <success>(Visitor&amp; visitor)</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>{</try>
                            <CVSpecifier>
                             <try>{</try>
                              <const>
                               <try>{</try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>{</try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>TypeSpecifier::Accept(Visitor&amp; visitor)\r\n</success>
                        </Declarator>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>visitor.Visit(*this);</try>
                              <LabeledStatement>
                               <try>visitor.Visit(*this);</try>
                                <Identifier>
                                 <try>visitor.Visit(*this);</try>
                                  <identifier>
                                   <try>visitor.Visit(*this);</try>
                                   <success>visitor</success>
                                  </identifier>
                                  <Keyword>
                                   <try>visitor.Visit(*this);</try>
                                    <identifier>
                                     <try>visitor.Visit(*this);</try>
                                     <success>visitor</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>visitor</success>
                                </Identifier>
                                <case>
                                 <try>visitor.Visit(*this);</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>visitor.Visit(*this);</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>visitor.Visit(*this);</try>
                                <Expression>
                                 <try>visitor.Visit(*this);</try>
                                  <AssignmentExpression>
                                   <try>visitor.Visit(*this);</try>
                                    <LogicalOrExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalAndExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <InclusiveOrExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <ExclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <AndExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <EqualityExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <RelationalExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <ShiftExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <AdditiveExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <MultiplicativeExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <PMExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <CastExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <UnaryExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryOperator>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>visitor.Visit(*this);</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <new>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <delete>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <PrimaryExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <Literal>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <FloatingLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FractionalConstant>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <true>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <nullptr>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <dynamic_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>visitor</success>
                                                                          </Identifier>
                                                                         <success>visitor</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <success>visitor</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>visitor</success>
                                                                      </Identifier>
                                                                     <success>visitor</success>
                                                                    </UnqualifiedId>
                                                                   <success>visitor</success>
                                                                  </IdExpression>
                                                                 <success>visitor</success>
                                                                </PrimaryExpression>
                                                                <IdExpression>
                                                                 <try>Visit(*this);</try>
                                                                  <QualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <NestedNameSpecifier>
                                                                     <try>Visit(*this);</try>
                                                                      <IdNode>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                        <Identifier>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>Visit</success>
                                                                        </Identifier>
                                                                       <success>Visit</success>
                                                                      </IdNode>
                                                                     <fail/>
                                                                    </NestedNameSpecifier>
                                                                   <fail/>
                                                                  </QualifiedId>
                                                                  <UnqualifiedId>
                                                                   <try>Visit(*this);</try>
                                                                    <TemplateId>
                                                                     <try>Visit(*this);</try>
                                                                      <SimpleTemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <TemplateName>
                                                                         <try>Visit(*this);</try>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </TemplateName>
                                                                       <fail/>
                                                                      </SimpleTemplateId>
                                                                     <fail/>
                                                                    </TemplateId>
                                                                    <Identifier>
                                                                     <try>Visit(*this);</try>
                                                                      <identifier>
                                                                       <try>Visit(*this);</try>
                                                                       <success>Visit</success>
                                                                      </identifier>
                                                                      <Keyword>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Keyword>
                                                                     <success>Visit</success>
                                                                    </Identifier>
                                                                   <success>Visit</success>
                                                                  </UnqualifiedId>
                                                                 <success>Visit</success>
                                                                </IdExpression>
                                                                <ExpressionList>
                                                                 <try>*this);</try>
                                                                  <InitializerList>
                                                                   <try>*this);</try>
                                                                    <InitializerClause>
                                                                     <try>*this);</try>
                                                                      <AssignmentExpression>
                                                                       <try>*this);</try>
                                                                        <LogicalOrExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalAndExpression>
                                                                           <try>*this);</try>
                                                                            <InclusiveOrExpression>
                                                                             <try>*this);</try>
                                                                              <ExclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <AndExpression>
                                                                                 <try>*this);</try>
                                                                                  <EqualityExpression>
                                                                                   <try>*this);</try>
                                                                                    <RelationalExpression>
                                                                                     <try>*this);</try>
                                                                                      <ShiftExpression>
                                                                                       <try>*this);</try>
                                                                                        <AdditiveExpression>
                                                                                         <try>*this);</try>
                                                                                          <MultiplicativeExpression>
                                                                                           <try>*this);</try>
                                                                                            <PMExpression>
                                                                                             <try>*this);</try>
                                                                                              <CastExpression>
                                                                                               <try>*this);</try>
                                                                                                <UnaryExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryOperator>
                                                                                                   <try>*this);</try>
                                                                                                   <success>*</success>
                                                                                                  </UnaryOperator>
                                                                                                  <CastExpression>
                                                                                                   <try>this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </UnaryOperator>
                                                                                                      <sizeof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </sizeof>
                                                                                                      <alignof>
                                                                                                       <try>this);</try>
                                                                                                       <fail/>
                                                                                                      </alignof>
                                                                                                      <NewExpression>
                                                                                                       <try>this);</try>
                                                                                                        <new>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </new>
                                                                                                       <fail/>
                                                                                                      </NewExpression>
                                                                                                      <DeleteExpression>
                                                                                                       <try>this);</try>
                                                                                                        <delete>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </delete>
                                                                                                       <fail/>
                                                                                                      </DeleteExpression>
                                                                                                      <PostfixExpression>
                                                                                                       <try>this);</try>
                                                                                                        <PrimaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <Literal>
                                                                                                           <try>this);</try>
                                                                                                            <FloatingLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <FractionalConstant>
                                                                                                               <try>this);</try>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FractionalConstant>
                                                                                                              <digit_sequence>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FloatingLiteral>
                                                                                                            <IntegerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <HexadecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </HexadecimalLiteral>
                                                                                                              <OctalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </OctalLiteral>
                                                                                                              <DecimalLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </DecimalLiteral>
                                                                                                             <fail/>
                                                                                                            </IntegerLiteral>
                                                                                                            <CharacterLiteral>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </CharacterLiteral>
                                                                                                            <StringLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                             <fail/>
                                                                                                            </StringLiteral>
                                                                                                            <BooleanLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <true>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </true>
                                                                                                              <false>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </false>
                                                                                                             <fail/>
                                                                                                            </BooleanLiteral>
                                                                                                            <PointerLiteral>
                                                                                                             <try>this);</try>
                                                                                                              <nullptr>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </nullptr>
                                                                                                             <fail/>
                                                                                                            </PointerLiteral>
                                                                                                           <fail/>
                                                                                                          </Literal>
                                                                                                          <this>
                                                                                                           <try>this);</try>
                                                                                                            <identifier_chars>
                                                                                                             <try>);</try>
                                                                                                             <fail/>
                                                                                                            </identifier_chars>
                                                                                                           <success>this</success>
                                                                                                          </this>
                                                                                                         <success>this</success>
                                                                                                        </PrimaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </PostfixExpression>
                                                                                                     <success>this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </UnaryExpression>
                                                                                               <success>*this</success>
                                                                                              </CastExpression>
                                                                                             <success>*this</success>
                                                                                            </PMExpression>
                                                                                           <success>*this</success>
                                                                                          </MultiplicativeExpression>
                                                                                         <success>*this</success>
                                                                                        </AdditiveExpression>
                                                                                       <success>*this</success>
                                                                                      </ShiftExpression>
                                                                                     <success>*this</success>
                                                                                    </RelationalExpression>
                                                                                   <success>*this</success>
                                                                                  </EqualityExpression>
                                                                                 <success>*this</success>
                                                                                </AndExpression>
                                                                               <success>*this</success>
                                                                              </ExclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </InclusiveOrExpression>
                                                                           <success>*this</success>
                                                                          </LogicalAndExpression>
                                                                         <success>*this</success>
                                                                        </LogicalOrExpression>
                                                                        <AssignmentOperator>
                                                                         <try>);</try>
                                                                         <fail/>
                                                                        </AssignmentOperator>
                                                                        <ConditionalExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                         <success>*this</success>
                                                                        </ConditionalExpression>
                                                                       <success>*this</success>
                                                                      </AssignmentExpression>
                                                                     <success>*this</success>
                                                                    </InitializerClause>
                                                                   <success>*this</success>
                                                                  </InitializerList>
                                                                 <success>*this</success>
                                                                </ExpressionList>
                                                               <success>visitor.Visit(*this)</success>
                                                              </PostfixExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </UnaryExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </CastExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </PMExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </MultiplicativeExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </AdditiveExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </ShiftExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </RelationalExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </EqualityExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </AndExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </ExclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </InclusiveOrExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalAndExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>;</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>visitor.Visit(*this);</try>
                                      <LogicalOrExpression>
                                       <try>visitor.Visit(*this);</try>
                                        <LogicalAndExpression>
                                         <try>visitor.Visit(*this);</try>
                                          <InclusiveOrExpression>
                                           <try>visitor.Visit(*this);</try>
                                            <ExclusiveOrExpression>
                                             <try>visitor.Visit(*this);</try>
                                              <AndExpression>
                                               <try>visitor.Visit(*this);</try>
                                                <EqualityExpression>
                                                 <try>visitor.Visit(*this);</try>
                                                  <RelationalExpression>
                                                   <try>visitor.Visit(*this);</try>
                                                    <ShiftExpression>
                                                     <try>visitor.Visit(*this);</try>
                                                      <AdditiveExpression>
                                                       <try>visitor.Visit(*this);</try>
                                                        <MultiplicativeExpression>
                                                         <try>visitor.Visit(*this);</try>
                                                          <PMExpression>
                                                           <try>visitor.Visit(*this);</try>
                                                            <CastExpression>
                                                             <try>visitor.Visit(*this);</try>
                                                              <UnaryExpression>
                                                               <try>visitor.Visit(*this);</try>
                                                                <UnaryOperator>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>visitor.Visit(*this);</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <new>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <delete>
                                                                   <try>visitor.Visit(*this);</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>visitor.Visit(*this);</try>
                                                                  <PrimaryExpression>
                                                                   <try>visitor.Visit(*this);</try>
                                                                    <Literal>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <FloatingLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <FractionalConstant>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <true>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <nullptr>
                                                                         <try>visitor.Visit(*this);</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>visitor.Visit(*this);</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <dynamic_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>visitor.Visit(*this);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>visitor.Visit(*this);</try>
                                                                      <QualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <IdNode>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <SimpleTemplateId>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <TemplateName>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <Identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                    <identifier>
                                                                                     <try>visitor.Visit(*this);</try>
                                                                                     <success>visitor</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>visitor</success>
                                                                                </Identifier>
                                                                               <success>visitor</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                               <success>visitor</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>visitor</success>
                                                                            </Identifier>
                                                                           <success>visitor</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>visitor.Visit(*this);</try>
                                                                        <TemplateId>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>visitor.Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>visitor.Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                 <success>visitor</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>visitor.Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>visitor.Visit(*this);</try>
                                                                                   <success>visitor</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>visitor</success>
                                                                              </Identifier>
                                                                             <success>visitor</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>visitor.Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>visitor.Visit(*this);</try>
                                                                           <success>visitor</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>visitor.Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>visitor.Visit(*this);</try>
                                                                             <success>visitor</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>visitor</success>
                                                                        </Identifier>
                                                                       <success>visitor</success>
                                                                      </UnqualifiedId>
                                                                     <success>visitor</success>
                                                                    </IdExpression>
                                                                   <success>visitor</success>
                                                                  </PrimaryExpression>
                                                                  <IdExpression>
                                                                   <try>Visit(*this);</try>
                                                                    <QualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>Visit(*this);</try>
                                                                        <IdNode>
                                                                         <try>Visit(*this);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Visit(*this);</try>
                                                                            <TemplateName>
                                                                             <try>Visit(*this);</try>
                                                                              <Identifier>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Visit(*this);</try>
                                                                                  <identifier>
                                                                                   <try>Visit(*this);</try>
                                                                                   <success>Visit</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Visit</success>
                                                                              </Identifier>
                                                                             <success>Visit</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>Visit(*this);</try>
                                                                            <identifier>
                                                                             <try>Visit(*this);</try>
                                                                             <success>Visit</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Visit</success>
                                                                          </Identifier>
                                                                         <success>Visit</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>Visit(*this);</try>
                                                                      <TemplateId>
                                                                       <try>Visit(*this);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Visit(*this);</try>
                                                                          <TemplateName>
                                                                           <try>Visit(*this);</try>
                                                                            <Identifier>
                                                                             <try>Visit(*this);</try>
                                                                              <identifier>
                                                                               <try>Visit(*this);</try>
                                                                               <success>Visit</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Visit(*this);</try>
                                                                                <identifier>
                                                                                 <try>Visit(*this);</try>
                                                                                 <success>Visit</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Visit</success>
                                                                            </Identifier>
                                                                           <success>Visit</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>Visit(*this);</try>
                                                                        <identifier>
                                                                         <try>Visit(*this);</try>
                                                                         <success>Visit</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>Visit(*this);</try>
                                                                          <identifier>
                                                                           <try>Visit(*this);</try>
                                                                           <success>Visit</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>Visit</success>
                                                                      </Identifier>
                                                                     <success>Visit</success>
                                                                    </UnqualifiedId>
                                                                   <success>Visit</success>
                                                                  </IdExpression>
                                                                  <ExpressionList>
                                                                   <try>*this);</try>
                                                                    <InitializerList>
                                                                     <try>*this);</try>
                                                                      <InitializerClause>
                                                                       <try>*this);</try>
                                                                        <AssignmentExpression>
                                                                         <try>*this);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>*this);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>*this);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <AndExpression>
                                                                                   <try>*this);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>*this);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>*this);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>*this);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>*this);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>*this);</try>
                                                                                              <PMExpression>
                                                                                               <try>*this);</try>
                                                                                                <CastExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>*this);</try>
                                                                                                     <success>*</success>
                                                                                                    </UnaryOperator>
                                                                                                    <CastExpression>
                                                                                                     <try>this);</try>
                                                                                                      <UnaryExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryOperator>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </UnaryOperator>
                                                                                                        <sizeof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </sizeof>
                                                                                                        <alignof>
                                                                                                         <try>this);</try>
                                                                                                         <fail/>
                                                                                                        </alignof>
                                                                                                        <NewExpression>
                                                                                                         <try>this);</try>
                                                                                                          <new>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </new>
                                                                                                         <fail/>
                                                                                                        </NewExpression>
                                                                                                        <DeleteExpression>
                                                                                                         <try>this);</try>
                                                                                                          <delete>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </delete>
                                                                                                         <fail/>
                                                                                                        </DeleteExpression>
                                                                                                        <PostfixExpression>
                                                                                                         <try>this);</try>
                                                                                                          <PrimaryExpression>
                                                                                                           <try>this);</try>
                                                                                                            <Literal>
                                                                                                             <try>this);</try>
                                                                                                              <FloatingLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <FractionalConstant>
                                                                                                                 <try>this);</try>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FractionalConstant>
                                                                                                                <digit_sequence>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FloatingLiteral>
                                                                                                              <IntegerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <HexadecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </HexadecimalLiteral>
                                                                                                                <OctalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </OctalLiteral>
                                                                                                                <DecimalLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </DecimalLiteral>
                                                                                                               <fail/>
                                                                                                              </IntegerLiteral>
                                                                                                              <CharacterLiteral>
                                                                                                               <try>this);</try>
                                                                                                               <fail/>
                                                                                                              </CharacterLiteral>
                                                                                                              <StringLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                                <EncodingPrefix>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </EncodingPrefix>
                                                                                                               <fail/>
                                                                                                              </StringLiteral>
                                                                                                              <BooleanLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <true>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </true>
                                                                                                                <false>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </false>
                                                                                                               <fail/>
                                                                                                              </BooleanLiteral>
                                                                                                              <PointerLiteral>
                                                                                                               <try>this);</try>
                                                                                                                <nullptr>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </nullptr>
                                                                                                               <fail/>
                                                                                                              </PointerLiteral>
                                                                                                             <fail/>
                                                                                                            </Literal>
                                                                                                            <this>
                                                                                                             <try>this);</try>
                                                                                                              <identifier_chars>
                                                                                                               <try>);</try>
                                                                                                               <fail/>
                                                                                                              </identifier_chars>
                                                                                                             <success>this</success>
                                                                                                            </this>
                                                                                                           <success>this</success>
                                                                                                          </PrimaryExpression>
                                                                                                         <success>this</success>
                                                                                                        </PostfixExpression>
                                                                                                       <success>this</success>
                                                                                                      </UnaryExpression>
                                                                                                     <success>this</success>
                                                                                                    </CastExpression>
                                                                                                   <success>*this</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>*this</success>
                                                                                                </CastExpression>
                                                                                               <success>*this</success>
                                                                                              </PMExpression>
                                                                                             <success>*this</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>*this</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>*this</success>
                                                                                        </ShiftExpression>
                                                                                       <success>*this</success>
                                                                                      </RelationalExpression>
                                                                                     <success>*this</success>
                                                                                    </EqualityExpression>
                                                                                   <success>*this</success>
                                                                                  </AndExpression>
                                                                                 <success>*this</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>*this</success>
                                                                            </LogicalAndExpression>
                                                                           <success>*this</success>
                                                                          </LogicalOrExpression>
                                                                          <AssignmentOperator>
                                                                           <try>);</try>
                                                                           <fail/>
                                                                          </AssignmentOperator>
                                                                          <ConditionalExpression>
                                                                           <try>*this);</try>
                                                                            <LogicalOrExpression>
                                                                             <try>*this);</try>
                                                                              <LogicalAndExpression>
                                                                               <try>*this);</try>
                                                                                <InclusiveOrExpression>
                                                                                 <try>*this);</try>
                                                                                  <ExclusiveOrExpression>
                                                                                   <try>*this);</try>
                                                                                    <AndExpression>
                                                                                     <try>*this);</try>
                                                                                      <EqualityExpression>
                                                                                       <try>*this);</try>
                                                                                        <RelationalExpression>
                                                                                         <try>*this);</try>
                                                                                          <ShiftExpression>
                                                                                           <try>*this);</try>
                                                                                            <AdditiveExpression>
                                                                                             <try>*this);</try>
                                                                                              <MultiplicativeExpression>
                                                                                               <try>*this);</try>
                                                                                                <PMExpression>
                                                                                                 <try>*this);</try>
                                                                                                  <CastExpression>
                                                                                                   <try>*this);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>*this);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>*this);</try>
                                                                                                       <success>*</success>
                                                                                                      </UnaryOperator>
                                                                                                      <CastExpression>
                                                                                                       <try>this);</try>
                                                                                                        <UnaryExpression>
                                                                                                         <try>this);</try>
                                                                                                          <UnaryOperator>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </UnaryOperator>
                                                                                                          <sizeof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </sizeof>
                                                                                                          <alignof>
                                                                                                           <try>this);</try>
                                                                                                           <fail/>
                                                                                                          </alignof>
                                                                                                          <NewExpression>
                                                                                                           <try>this);</try>
                                                                                                            <new>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </new>
                                                                                                           <fail/>
                                                                                                          </NewExpression>
                                                                                                          <DeleteExpression>
                                                                                                           <try>this);</try>
                                                                                                            <delete>
                                                                                                             <try>this);</try>
                                                                                                             <fail/>
                                                                                                            </delete>
                                                                                                           <fail/>
                                                                                                          </DeleteExpression>
                                                                                                          <PostfixExpression>
                                                                                                           <try>this);</try>
                                                                                                            <PrimaryExpression>
                                                                                                             <try>this);</try>
                                                                                                              <Literal>
                                                                                                               <try>this);</try>
                                                                                                                <FloatingLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <FractionalConstant>
                                                                                                                   <try>this);</try>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                    <digit_sequence>
                                                                                                                     <try>this);</try>
                                                                                                                     <fail/>
                                                                                                                    </digit_sequence>
                                                                                                                   <fail/>
                                                                                                                  </FractionalConstant>
                                                                                                                  <digit_sequence>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </digit_sequence>
                                                                                                                 <fail/>
                                                                                                                </FloatingLiteral>
                                                                                                                <IntegerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <HexadecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </HexadecimalLiteral>
                                                                                                                  <OctalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </OctalLiteral>
                                                                                                                  <DecimalLiteral>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </DecimalLiteral>
                                                                                                                 <fail/>
                                                                                                                </IntegerLiteral>
                                                                                                                <CharacterLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                 <fail/>
                                                                                                                </CharacterLiteral>
                                                                                                                <StringLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                  <EncodingPrefix>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </EncodingPrefix>
                                                                                                                 <fail/>
                                                                                                                </StringLiteral>
                                                                                                                <BooleanLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <true>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </true>
                                                                                                                  <false>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </false>
                                                                                                                 <fail/>
                                                                                                                </BooleanLiteral>
                                                                                                                <PointerLiteral>
                                                                                                                 <try>this);</try>
                                                                                                                  <nullptr>
                                                                                                                   <try>this);</try>
                                                                                                                   <fail/>
                                                                                                                  </nullptr>
                                                                                                                 <fail/>
                                                                                                                </PointerLiteral>
                                                                                                               <fail/>
                                                                                                              </Literal>
                                                                                                              <this>
                                                                                                               <try>this);</try>
                                                                                                                <identifier_chars>
                                                                                                                 <try>);</try>
                                                                                                                 <fail/>
                                                                                                                </identifier_chars>
                                                                                                               <success>this</success>
                                                                                                              </this>
                                                                                                             <success>this</success>
                                                                                                            </PrimaryExpression>
                                                                                                           <success>this</success>
                                                                                                          </PostfixExpression>
                                                                                                         <success>this</success>
                                                                                                        </UnaryExpression>
                                                                                                       <success>this</success>
                                                                                                      </CastExpression>
                                                                                                     <success>*this</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>*this</success>
                                                                                                  </CastExpression>
                                                                                                 <success>*this</success>
                                                                                                </PMExpression>
                                                                                               <success>*this</success>
                                                                                              </MultiplicativeExpression>
                                                                                             <success>*this</success>
                                                                                            </AdditiveExpression>
                                                                                           <success>*this</success>
                                                                                          </ShiftExpression>
                                                                                         <success>*this</success>
                                                                                        </RelationalExpression>
                                                                                       <success>*this</success>
                                                                                      </EqualityExpression>
                                                                                     <success>*this</success>
                                                                                    </AndExpression>
                                                                                   <success>*this</success>
                                                                                  </ExclusiveOrExpression>
                                                                                 <success>*this</success>
                                                                                </InclusiveOrExpression>
                                                                               <success>*this</success>
                                                                              </LogicalAndExpression>
                                                                             <success>*this</success>
                                                                            </LogicalOrExpression>
                                                                           <success>*this</success>
                                                                          </ConditionalExpression>
                                                                         <success>*this</success>
                                                                        </AssignmentExpression>
                                                                       <success>*this</success>
                                                                      </InitializerClause>
                                                                     <success>*this</success>
                                                                    </InitializerList>
                                                                   <success>*this</success>
                                                                  </ExpressionList>
                                                                 <success>visitor.Visit(*this)</success>
                                                                </PostfixExpression>
                                                               <success>visitor.Visit(*this)</success>
                                                              </UnaryExpression>
                                                             <success>visitor.Visit(*this)</success>
                                                            </CastExpression>
                                                           <success>visitor.Visit(*this)</success>
                                                          </PMExpression>
                                                         <success>visitor.Visit(*this)</success>
                                                        </MultiplicativeExpression>
                                                       <success>visitor.Visit(*this)</success>
                                                      </AdditiveExpression>
                                                     <success>visitor.Visit(*this)</success>
                                                    </ShiftExpression>
                                                   <success>visitor.Visit(*this)</success>
                                                  </RelationalExpression>
                                                 <success>visitor.Visit(*this)</success>
                                                </EqualityExpression>
                                               <success>visitor.Visit(*this)</success>
                                              </AndExpression>
                                             <success>visitor.Visit(*this)</success>
                                            </ExclusiveOrExpression>
                                           <success>visitor.Visit(*this)</success>
                                          </InclusiveOrExpression>
                                         <success>visitor.Visit(*this)</success>
                                        </LogicalAndExpression>
                                       <success>visitor.Visit(*this)</success>
                                      </LogicalOrExpression>
                                     <success>visitor.Visit(*this)</success>
                                    </ConditionalExpression>
                                   <success>visitor.Visit(*this)</success>
                                  </AssignmentExpression>
                                 <success>visitor.Visit(*this)</success>
                                </Expression>
                               <success>visitor.Visit(*this);</success>
                              </ExpressionStatement>
                             <success>visitor.Visit(*this);</success>
                            </Statement>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n    visitor.Visit(*this);\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n    visitor.Visit(*this);\r\n}</success>
                        </FunctionBody>
                       <success>void TypeSpecifier::Accept(Visitor&amp; visitor)\r\n{\r\n    visitor.Visit(*this);\r\n}</success>
                      </FunctionDefinition>
                     <success>void TypeSpecifier::Accept(Visitor&amp; visitor)\r\n{\r\n    visitor.Visit(*this);\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                      <NamespaceDefinition>
                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                        <NamedNamespaceDefinition>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <namespace>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <namespace>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                        <SimpleDeclaration>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <DeclSpecifiers>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <DeclSpecifier>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <StorageClassSpecifier>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                <register>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                <inline>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <PrefixTypeExpr>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <CVSpecifierSequence>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                <CVSpecifier>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                  <const>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                <PrimaryTypeExpr>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                  <SimpleType>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                    <SimpleTypeSpecifier>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                      <char>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                    <class>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                    <NestedNameSpecifier>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                      <IdNode>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                        <SimpleTemplateId>
                                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                                          <TemplateName>
                                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                                            <Identifier>
                                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                                              <identifier>
                                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                               <success>Const</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                                <identifier>
                                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                                 <success>Const</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Const</success>
                                            </Identifier>
                                           <success>Const</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                                             <success>Const</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Const</success>
                                        </Identifier>
                                       <success>Const</success>
                                      </IdNode>
                                      <IdNode>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <SimpleTemplateId>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <TemplateName>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                            <Identifier>
                                             <try>Const(): TypeSpecifier(U"const") </try>
                                              <identifier>
                                               <try>Const(): TypeSpecifier(U"const") </try>
                                               <success>Const</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Const(): TypeSpecifier(U"const") </try>
                                                <identifier>
                                                 <try>Const(): TypeSpecifier(U"const") </try>
                                                 <success>Const</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Const</success>
                                            </Identifier>
                                           <success>Const</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>Const(): TypeSpecifier(U"const") </try>
                                             <success>Const</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Const</success>
                                        </Identifier>
                                       <success>Const</success>
                                      </IdNode>
                                     <success>Const::</success>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                      <SimpleTemplateId>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <TemplateName>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <Identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>Const(): TypeSpecifier(U"const") </try>
                                             <success>Const</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Const(): TypeSpecifier(U"const") </try>
                                              <identifier>
                                               <try>Const(): TypeSpecifier(U"const") </try>
                                               <success>Const</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Const</success>
                                          </Identifier>
                                         <success>Const</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                         <success>Const</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Const</success>
                                      </Identifier>
                                     <success>Const</success>
                                    </IdNode>
                                   <success>Const::Const</success>
                                  </QualifiedIdNode>
                                 <success>Const::Const</success>
                                </PrimaryTypeExpr>
                               <success>Const::Const</success>
                              </PostfixTypeExpr>
                             <success>Const::Const</success>
                            </PrefixTypeExpr>
                           <success>Const::Const</success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>(): TypeSpecifier(U"const") </try>
                            <Declarator>
                             <try>(): TypeSpecifier(U"const") </try>
                              <IdExpression>
                               <try>(): TypeSpecifier(U"const") </try>
                                <QualifiedId>
                                 <try>(): TypeSpecifier(U"const") </try>
                                  <NestedNameSpecifier>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <IdNode>
                                     <try>(): TypeSpecifier(U"const") </try>
                                      <SimpleTemplateId>
                                       <try>(): TypeSpecifier(U"const") </try>
                                        <TemplateName>
                                         <try>(): TypeSpecifier(U"const") </try>
                                          <Identifier>
                                           <try>(): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>(): TypeSpecifier(U"const") </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>(): TypeSpecifier(U"const") </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                 <fail/>
                                </QualifiedId>
                                <UnqualifiedId>
                                 <try>(): TypeSpecifier(U"const") </try>
                                  <TemplateId>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <SimpleTemplateId>
                                     <try>(): TypeSpecifier(U"const") </try>
                                      <TemplateName>
                                       <try>(): TypeSpecifier(U"const") </try>
                                        <Identifier>
                                         <try>(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>(): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </identifier>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                   <fail/>
                                  </TemplateId>
                                  <Identifier>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <identifier>
                                     <try>(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                  <OperatorFunctionId>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <operator>
                                     <try>(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </OperatorFunctionId>
                                  <ConversionFunctionId>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <operator>
                                     <try>(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </ConversionFunctionId>
                                 <fail/>
                                </UnqualifiedId>
                               <fail/>
                              </IdExpression>
                             <fail/>
                            </Declarator>
                           <fail/>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <using>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <using>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <using>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <EnumKey>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <enum>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <typedef>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <ClassKey>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <class>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </class>
                            <struct>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </struct>
                            <union>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                        <DeclSpecifiers>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <DeclSpecifier>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <StorageClassSpecifier>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <register>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </register>
                              <static>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <inline>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <PrefixTypeExpr>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <CVSpecifierSequence>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <CVSpecifier>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                <const>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <PrimaryTypeExpr>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                <SimpleType>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                  <SimpleTypeSpecifier>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                    <char>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <fail/>
                                </SimpleType>
                                <typename>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </typename>
                                <ClassKey>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                  <class>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                   <fail/>
                                  </class>
                                  <struct>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                   <fail/>
                                  </struct>
                                  <union>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                   <fail/>
                                  </union>
                                 <fail/>
                                </ClassKey>
                                <QualifiedIdNode>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                  <NestedNameSpecifier>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                    <IdNode>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                      <SimpleTemplateId>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                        <TemplateName>
                                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                                          <Identifier>
                                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                                             <success>Const</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                                              <identifier>
                                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                               <success>Const</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Const</success>
                                          </Identifier>
                                         <success>Const</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                                         <success>Const</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Const</success>
                                      </Identifier>
                                     <success>Const</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                      <SimpleTemplateId>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <TemplateName>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <Identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>Const(): TypeSpecifier(U"const") </try>
                                             <success>Const</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Const(): TypeSpecifier(U"const") </try>
                                              <identifier>
                                               <try>Const(): TypeSpecifier(U"const") </try>
                                               <success>Const</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Const</success>
                                          </Identifier>
                                         <success>Const</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                         <success>Const</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Const</success>
                                      </Identifier>
                                     <success>Const</success>
                                    </IdNode>
                                   <success>Const::</success>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>Const(): TypeSpecifier(U"const") </try>
                                    <SimpleTemplateId>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                      <TemplateName>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <Identifier>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>Const(): TypeSpecifier(U"const") </try>
                                             <success>Const</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Const</success>
                                        </Identifier>
                                       <success>Const</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                      <identifier>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                       <success>Const</success>
                                      </identifier>
                                      <Keyword>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                         <success>Const</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>Const</success>
                                    </Identifier>
                                   <success>Const</success>
                                  </IdNode>
                                 <success>Const::Const</success>
                                </QualifiedIdNode>
                               <success>Const::Const</success>
                              </PrimaryTypeExpr>
                             <success>Const::Const</success>
                            </PostfixTypeExpr>
                           <success>Const::Const</success>
                          </PrefixTypeExpr>
                         <success>Const::Const</success>
                        </TypeExpr>
                        <Declarator>
                         <try>(): TypeSpecifier(U"const") </try>
                          <IdExpression>
                           <try>(): TypeSpecifier(U"const") </try>
                            <QualifiedId>
                             <try>(): TypeSpecifier(U"const") </try>
                              <NestedNameSpecifier>
                               <try>(): TypeSpecifier(U"const") </try>
                                <IdNode>
                                 <try>(): TypeSpecifier(U"const") </try>
                                  <SimpleTemplateId>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <TemplateName>
                                     <try>(): TypeSpecifier(U"const") </try>
                                      <Identifier>
                                       <try>(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>(): TypeSpecifier(U"const") </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <identifier>
                                     <try>(): TypeSpecifier(U"const") </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                 <fail/>
                                </IdNode>
                               <fail/>
                              </NestedNameSpecifier>
                             <fail/>
                            </QualifiedId>
                            <UnqualifiedId>
                             <try>(): TypeSpecifier(U"const") </try>
                              <TemplateId>
                               <try>(): TypeSpecifier(U"const") </try>
                                <SimpleTemplateId>
                                 <try>(): TypeSpecifier(U"const") </try>
                                  <TemplateName>
                                   <try>(): TypeSpecifier(U"const") </try>
                                    <Identifier>
                                     <try>(): TypeSpecifier(U"const") </try>
                                      <identifier>
                                       <try>(): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </identifier>
                                     <fail/>
                                    </Identifier>
                                   <fail/>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                               <fail/>
                              </TemplateId>
                              <Identifier>
                               <try>(): TypeSpecifier(U"const") </try>
                                <identifier>
                                 <try>(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </identifier>
                               <fail/>
                              </Identifier>
                              <OperatorFunctionId>
                               <try>(): TypeSpecifier(U"const") </try>
                                <operator>
                                 <try>(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </OperatorFunctionId>
                              <ConversionFunctionId>
                               <try>(): TypeSpecifier(U"const") </try>
                                <operator>
                                 <try>(): TypeSpecifier(U"const") </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </ConversionFunctionId>
                             <fail/>
                            </UnqualifiedId>
                           <fail/>
                          </IdExpression>
                         <fail/>
                        </Declarator>
                       <fail/>
                      </FunctionDefinition>
                      <SpecialMemberFunctionDefinition>
                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                        <DeclSpecifiers>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <DeclSpecifier>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <StorageClassSpecifier>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <register>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </register>
                              <static>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <inline>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <Declarator>
                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                          <IdExpression>
                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                            <QualifiedId>
                             <try>Const::Const(): TypeSpecifier(U"const") </try>
                              <NestedNameSpecifier>
                               <try>Const::Const(): TypeSpecifier(U"const") </try>
                                <IdNode>
                                 <try>Const::Const(): TypeSpecifier(U"const") </try>
                                  <SimpleTemplateId>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                    <TemplateName>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                      <Identifier>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                                         <success>Const</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Const::Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const::Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Const</success>
                                      </Identifier>
                                     <success>Const</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Const::Const(): TypeSpecifier(U"const") </try>
                                    <identifier>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                     <success>Const</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Const::Const(): TypeSpecifier(U"const") </try>
                                      <identifier>
                                       <try>Const::Const(): TypeSpecifier(U"const") </try>
                                       <success>Const</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Const</success>
                                  </Identifier>
                                 <success>Const</success>
                                </IdNode>
                                <IdNode>
                                 <try>Const(): TypeSpecifier(U"const") </try>
                                  <SimpleTemplateId>
                                   <try>Const(): TypeSpecifier(U"const") </try>
                                    <TemplateName>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                      <Identifier>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                         <success>Const</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Const</success>
                                      </Identifier>
                                     <success>Const</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Const(): TypeSpecifier(U"const") </try>
                                    <identifier>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                     <success>Const</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                      <identifier>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                       <success>Const</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Const</success>
                                  </Identifier>
                                 <success>Const</success>
                                </IdNode>
                               <success>Const::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>Const(): TypeSpecifier(U"const") </try>
                                <TemplateId>
                                 <try>Const(): TypeSpecifier(U"const") </try>
                                  <SimpleTemplateId>
                                   <try>Const(): TypeSpecifier(U"const") </try>
                                    <TemplateName>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                      <Identifier>
                                       <try>Const(): TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                         <success>Const</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Const(): TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>Const(): TypeSpecifier(U"const") </try>
                                           <success>Const</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Const</success>
                                      </Identifier>
                                     <success>Const</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>Const(): TypeSpecifier(U"const") </try>
                                  <identifier>
                                   <try>Const(): TypeSpecifier(U"const") </try>
                                   <success>Const</success>
                                  </identifier>
                                  <Keyword>
                                   <try>Const(): TypeSpecifier(U"const") </try>
                                    <identifier>
                                     <try>Const(): TypeSpecifier(U"const") </try>
                                     <success>Const</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>Const</success>
                                </Identifier>
                               <success>Const</success>
                              </UnqualifiedId>
                             <success>Const::Const</success>
                            </QualifiedId>
                           <success>Const::Const</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(): TypeSpecifier(U"const") </try>
                            <ParameterDeclaration>
                             <try>): TypeSpecifier(U"const") </try>
                              <TypeExpr>
                               <try>): TypeSpecifier(U"const") </try>
                                <PrefixTypeExpr>
                                 <try>): TypeSpecifier(U"const") </try>
                                  <CVSpecifierSequence>
                                   <try>): TypeSpecifier(U"const") </try>
                                    <CVSpecifier>
                                     <try>): TypeSpecifier(U"const") </try>
                                      <const>
                                       <try>): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success></success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>): TypeSpecifier(U"const") </try>
                                    <PrimaryTypeExpr>
                                     <try>): TypeSpecifier(U"const") </try>
                                      <SimpleType>
                                       <try>): TypeSpecifier(U"const") </try>
                                        <SimpleTypeSpecifier>
                                         <try>): TypeSpecifier(U"const") </try>
                                          <char>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>): TypeSpecifier(U"const") </try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>): TypeSpecifier(U"const") </try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>): TypeSpecifier(U"const") </try>
                                        <class>
                                         <try>): TypeSpecifier(U"const") </try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>): TypeSpecifier(U"const") </try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>): TypeSpecifier(U"const") </try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>): TypeSpecifier(U"const") </try>
                                        <NestedNameSpecifier>
                                         <try>): TypeSpecifier(U"const") </try>
                                          <IdNode>
                                           <try>): TypeSpecifier(U"const") </try>
                                            <SimpleTemplateId>
                                             <try>): TypeSpecifier(U"const") </try>
                                              <TemplateName>
                                               <try>): TypeSpecifier(U"const") </try>
                                                <Identifier>
                                                 <try>): TypeSpecifier(U"const") </try>
                                                  <identifier>
                                                   <try>): TypeSpecifier(U"const") </try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>): TypeSpecifier(U"const") </try>
                                              <identifier>
                                               <try>): TypeSpecifier(U"const") </try>
                                               <fail/>
                                              </identifier>
                                             <fail/>
                                            </Identifier>
                                           <fail/>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>): TypeSpecifier(U"const") </try>
                                          <SimpleTemplateId>
                                           <try>): TypeSpecifier(U"const") </try>
                                            <TemplateName>
                                             <try>): TypeSpecifier(U"const") </try>
                                              <Identifier>
                                               <try>): TypeSpecifier(U"const") </try>
                                                <identifier>
                                                 <try>): TypeSpecifier(U"const") </try>
                                                 <fail/>
                                                </identifier>
                                               <fail/>
                                              </Identifier>
                                             <fail/>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>): TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>): TypeSpecifier(U"const") </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </IdNode>
                                       <fail/>
                                      </QualifiedIdNode>
                                     <fail/>
                                    </PrimaryTypeExpr>
                                   <fail/>
                                  </PostfixTypeExpr>
                                 <fail/>
                                </PrefixTypeExpr>
                               <fail/>
                              </TypeExpr>
                             <fail/>
                            </ParameterDeclaration>
                           <success>()</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>: TypeSpecifier(U"const") </try>
                            <CVSpecifier>
                             <try>: TypeSpecifier(U"const") </try>
                              <const>
                               <try>: TypeSpecifier(U"const") </try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>: TypeSpecifier(U"const") </try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>Const::Const()</success>
                        </Declarator>
                        <CtorInitializer>
                         <try>: TypeSpecifier(U"const") </try>
                          <MemberInitializerList>
                           <try>TypeSpecifier(U"const") </try>
                            <MemberInitializer>
                             <try>TypeSpecifier(U"const") </try>
                              <MemberInitializerId>
                               <try>TypeSpecifier(U"const") </try>
                                <QualifiedIdNode>
                                 <try>TypeSpecifier(U"const") </try>
                                  <NestedNameSpecifier>
                                   <try>TypeSpecifier(U"const") </try>
                                    <IdNode>
                                     <try>TypeSpecifier(U"const") </try>
                                      <SimpleTemplateId>
                                       <try>TypeSpecifier(U"const") </try>
                                        <TemplateName>
                                         <try>TypeSpecifier(U"const") </try>
                                          <Identifier>
                                           <try>TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>TypeSpecifier(U"const") </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeSpecifier(U"const") </try>
                                              <identifier>
                                               <try>TypeSpecifier(U"const") </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeSpecifier</success>
                                          </Identifier>
                                         <success>TypeSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>TypeSpecifier(U"const") </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>TypeSpecifier(U"const") </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>TypeSpecifier(U"const") </try>
                                    <SimpleTemplateId>
                                     <try>TypeSpecifier(U"const") </try>
                                      <TemplateName>
                                       <try>TypeSpecifier(U"const") </try>
                                        <Identifier>
                                         <try>TypeSpecifier(U"const") </try>
                                          <identifier>
                                           <try>TypeSpecifier(U"const") </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeSpecifier(U"const") </try>
                                            <identifier>
                                             <try>TypeSpecifier(U"const") </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeSpecifier</success>
                                        </Identifier>
                                       <success>TypeSpecifier</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>TypeSpecifier(U"const") </try>
                                      <identifier>
                                       <try>TypeSpecifier(U"const") </try>
                                       <success>TypeSpecifier</success>
                                      </identifier>
                                      <Keyword>
                                       <try>TypeSpecifier(U"const") </try>
                                        <identifier>
                                         <try>TypeSpecifier(U"const") </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>TypeSpecifier</success>
                                    </Identifier>
                                   <success>TypeSpecifier</success>
                                  </IdNode>
                                 <success>TypeSpecifier</success>
                                </QualifiedIdNode>
                               <success>TypeSpecifier</success>
                              </MemberInitializerId>
                              <ExpressionList>
                               <try>U"const") </try>
                                <InitializerList>
                                 <try>U"const") </try>
                                  <InitializerClause>
                                   <try>U"const") </try>
                                    <AssignmentExpression>
                                     <try>U"const") </try>
                                      <LogicalOrExpression>
                                       <try>U"const") </try>
                                        <LogicalAndExpression>
                                         <try>U"const") </try>
                                          <InclusiveOrExpression>
                                           <try>U"const") </try>
                                            <ExclusiveOrExpression>
                                             <try>U"const") </try>
                                              <AndExpression>
                                               <try>U"const") </try>
                                                <EqualityExpression>
                                                 <try>U"const") </try>
                                                  <RelationalExpression>
                                                   <try>U"const") </try>
                                                    <ShiftExpression>
                                                     <try>U"const") </try>
                                                      <AdditiveExpression>
                                                       <try>U"const") </try>
                                                        <MultiplicativeExpression>
                                                         <try>U"const") </try>
                                                          <PMExpression>
                                                           <try>U"const") </try>
                                                            <CastExpression>
                                                             <try>U"const") </try>
                                                              <UnaryExpression>
                                                               <try>U"const") </try>
                                                                <UnaryOperator>
                                                                 <try>U"const") </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>U"const") </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>U"const") </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>U"const") </try>
                                                                  <new>
                                                                   <try>U"const") </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>U"const") </try>
                                                                  <delete>
                                                                   <try>U"const") </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>U"const") </try>
                                                                  <PrimaryExpression>
                                                                   <try>U"const") </try>
                                                                    <Literal>
                                                                     <try>U"const") </try>
                                                                      <FloatingLiteral>
                                                                       <try>U"const") </try>
                                                                        <FractionalConstant>
                                                                         <try>U"const") </try>
                                                                          <digit_sequence>
                                                                           <try>U"const") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>U"const") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>U"const") </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>U"const") </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>U"const") </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>U"const") </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>U"const") </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>U"const") </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>U"const") </try>
                                                                        <EncodingPrefix>
                                                                         <try>U"const") </try>
                                                                         <success>U</success>
                                                                        </EncodingPrefix>
                                                                        <SChar>
                                                                         <try>const") </try>
                                                                         <success>c</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>onst") </try>
                                                                         <success>o</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>nst") </try>
                                                                         <success>n</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>st") </try>
                                                                         <success>s</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>t") </try>
                                                                         <success>t</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>") </try>
                                                                          <escape>
                                                                           <try>") </try>
                                                                           <fail/>
                                                                          </escape>
                                                                         <fail/>
                                                                        </SChar>
                                                                       <success>U"const"</success>
                                                                      </StringLiteral>
                                                                     <success>U"const"</success>
                                                                    </Literal>
                                                                   <success>U"const"</success>
                                                                  </PrimaryExpression>
                                                                 <success>U"const"</success>
                                                                </PostfixExpression>
                                                               <success>U"const"</success>
                                                              </UnaryExpression>
                                                             <success>U"const"</success>
                                                            </CastExpression>
                                                           <success>U"const"</success>
                                                          </PMExpression>
                                                         <success>U"const"</success>
                                                        </MultiplicativeExpression>
                                                       <success>U"const"</success>
                                                      </AdditiveExpression>
                                                     <success>U"const"</success>
                                                    </ShiftExpression>
                                                   <success>U"const"</success>
                                                  </RelationalExpression>
                                                 <success>U"const"</success>
                                                </EqualityExpression>
                                               <success>U"const"</success>
                                              </AndExpression>
                                             <success>U"const"</success>
                                            </ExclusiveOrExpression>
                                           <success>U"const"</success>
                                          </InclusiveOrExpression>
                                         <success>U"const"</success>
                                        </LogicalAndExpression>
                                       <success>U"const"</success>
                                      </LogicalOrExpression>
                                      <AssignmentOperator>
                                       <try>) </try>
                                       <fail/>
                                      </AssignmentOperator>
                                      <ConditionalExpression>
                                       <try>U"const") </try>
                                        <LogicalOrExpression>
                                         <try>U"const") </try>
                                          <LogicalAndExpression>
                                           <try>U"const") </try>
                                            <InclusiveOrExpression>
                                             <try>U"const") </try>
                                              <ExclusiveOrExpression>
                                               <try>U"const") </try>
                                                <AndExpression>
                                                 <try>U"const") </try>
                                                  <EqualityExpression>
                                                   <try>U"const") </try>
                                                    <RelationalExpression>
                                                     <try>U"const") </try>
                                                      <ShiftExpression>
                                                       <try>U"const") </try>
                                                        <AdditiveExpression>
                                                         <try>U"const") </try>
                                                          <MultiplicativeExpression>
                                                           <try>U"const") </try>
                                                            <PMExpression>
                                                             <try>U"const") </try>
                                                              <CastExpression>
                                                               <try>U"const") </try>
                                                                <UnaryExpression>
                                                                 <try>U"const") </try>
                                                                  <UnaryOperator>
                                                                   <try>U"const") </try>
                                                                   <fail/>
                                                                  </UnaryOperator>
                                                                  <sizeof>
                                                                   <try>U"const") </try>
                                                                   <fail/>
                                                                  </sizeof>
                                                                  <alignof>
                                                                   <try>U"const") </try>
                                                                   <fail/>
                                                                  </alignof>
                                                                  <NewExpression>
                                                                   <try>U"const") </try>
                                                                    <new>
                                                                     <try>U"const") </try>
                                                                     <fail/>
                                                                    </new>
                                                                   <fail/>
                                                                  </NewExpression>
                                                                  <DeleteExpression>
                                                                   <try>U"const") </try>
                                                                    <delete>
                                                                     <try>U"const") </try>
                                                                     <fail/>
                                                                    </delete>
                                                                   <fail/>
                                                                  </DeleteExpression>
                                                                  <PostfixExpression>
                                                                   <try>U"const") </try>
                                                                    <PrimaryExpression>
                                                                     <try>U"const") </try>
                                                                      <Literal>
                                                                       <try>U"const") </try>
                                                                        <FloatingLiteral>
                                                                         <try>U"const") </try>
                                                                          <FractionalConstant>
                                                                           <try>U"const") </try>
                                                                            <digit_sequence>
                                                                             <try>U"const") </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                            <digit_sequence>
                                                                             <try>U"const") </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                           <fail/>
                                                                          </FractionalConstant>
                                                                          <digit_sequence>
                                                                           <try>U"const") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FloatingLiteral>
                                                                        <IntegerLiteral>
                                                                         <try>U"const") </try>
                                                                          <HexadecimalLiteral>
                                                                           <try>U"const") </try>
                                                                           <fail/>
                                                                          </HexadecimalLiteral>
                                                                          <OctalLiteral>
                                                                           <try>U"const") </try>
                                                                           <fail/>
                                                                          </OctalLiteral>
                                                                          <DecimalLiteral>
                                                                           <try>U"const") </try>
                                                                           <fail/>
                                                                          </DecimalLiteral>
                                                                         <fail/>
                                                                        </IntegerLiteral>
                                                                        <CharacterLiteral>
                                                                         <try>U"const") </try>
                                                                         <fail/>
                                                                        </CharacterLiteral>
                                                                        <StringLiteral>
                                                                         <try>U"const") </try>
                                                                          <EncodingPrefix>
                                                                           <try>U"const") </try>
                                                                           <success>U</success>
                                                                          </EncodingPrefix>
                                                                          <SChar>
                                                                           <try>const") </try>
                                                                           <success>c</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>onst") </try>
                                                                           <success>o</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>nst") </try>
                                                                           <success>n</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>st") </try>
                                                                           <success>s</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>t") </try>
                                                                           <success>t</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>") </try>
                                                                            <escape>
                                                                             <try>") </try>
                                                                             <fail/>
                                                                            </escape>
                                                                           <fail/>
                                                                          </SChar>
                                                                         <success>U"const"</success>
                                                                        </StringLiteral>
                                                                       <success>U"const"</success>
                                                                      </Literal>
                                                                     <success>U"const"</success>
                                                                    </PrimaryExpression>
                                                                   <success>U"const"</success>
                                                                  </PostfixExpression>
                                                                 <success>U"const"</success>
                                                                </UnaryExpression>
                                                               <success>U"const"</success>
                                                              </CastExpression>
                                                             <success>U"const"</success>
                                                            </PMExpression>
                                                           <success>U"const"</success>
                                                          </MultiplicativeExpression>
                                                         <success>U"const"</success>
                                                        </AdditiveExpression>
                                                       <success>U"const"</success>
                                                      </ShiftExpression>
                                                     <success>U"const"</success>
                                                    </RelationalExpression>
                                                   <success>U"const"</success>
                                                  </EqualityExpression>
                                                 <success>U"const"</success>
                                                </AndExpression>
                                               <success>U"const"</success>
                                              </ExclusiveOrExpression>
                                             <success>U"const"</success>
                                            </InclusiveOrExpression>
                                           <success>U"const"</success>
                                          </LogicalAndExpression>
                                         <success>U"const"</success>
                                        </LogicalOrExpression>
                                       <success>U"const"</success>
                                      </ConditionalExpression>
                                     <success>U"const"</success>
                                    </AssignmentExpression>
                                   <success>U"const"</success>
                                  </InitializerClause>
                                 <success>U"const"</success>
                                </InitializerList>
                               <success>U"const"</success>
                              </ExpressionList>
                             <success>TypeSpecifier(U"const")</success>
                            </MemberInitializer>
                           <success>TypeSpecifier(U"const") \r\n</success>
                          </MemberInitializerList>
                         <success>: TypeSpecifier(U"const") \r\n</success>
                        </CtorInitializer>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n}</success>
                        </FunctionBody>
                       <success>Const::Const(): TypeSpecifier(U"const") \r\n{\r\n}</success>
                      </SpecialMemberFunctionDefinition>
                     <success>Const::Const(): TypeSpecifier(U"const") \r\n{\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                      <NamespaceDefinition>
                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                        <NamedNamespaceDefinition>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <namespace>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <namespace>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                        <SimpleDeclaration>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <DeclSpecifiers>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <DeclSpecifier>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <StorageClassSpecifier>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                <register>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                <inline>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <PrefixTypeExpr>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <CVSpecifierSequence>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                <CVSpecifier>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                  <const>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                <PrimaryTypeExpr>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                  <SimpleType>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                    <SimpleTypeSpecifier>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                      <char>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                    <class>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                    <NestedNameSpecifier>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                      <IdNode>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                        <SimpleTemplateId>
                                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                          <TemplateName>
                                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                            <Identifier>
                                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                              <identifier>
                                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                               <success>Volatile</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                                <identifier>
                                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                                 <success>Volatile</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Volatile</success>
                                            </Identifier>
                                           <success>Volatile</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                             <success>Volatile</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Volatile</success>
                                        </Identifier>
                                       <success>Volatile</success>
                                      </IdNode>
                                      <IdNode>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <SimpleTemplateId>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <TemplateName>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                            <Identifier>
                                             <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                              <identifier>
                                               <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                               <success>Volatile</success>
                                              </identifier>
                                              <Keyword>
                                               <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                                <identifier>
                                                 <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                                 <success>Volatile</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>Volatile</success>
                                            </Identifier>
                                           <success>Volatile</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                             <success>Volatile</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Volatile</success>
                                        </Identifier>
                                       <success>Volatile</success>
                                      </IdNode>
                                     <success>Volatile::</success>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                      <SimpleTemplateId>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <TemplateName>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <Identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                             <success>Volatile</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                              <identifier>
                                               <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                               <success>Volatile</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Volatile</success>
                                          </Identifier>
                                         <success>Volatile</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                         <success>Volatile</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Volatile</success>
                                      </Identifier>
                                     <success>Volatile</success>
                                    </IdNode>
                                   <success>Volatile::Volatile</success>
                                  </QualifiedIdNode>
                                 <success>Volatile::Volatile</success>
                                </PrimaryTypeExpr>
                               <success>Volatile::Volatile</success>
                              </PostfixTypeExpr>
                             <success>Volatile::Volatile</success>
                            </PrefixTypeExpr>
                           <success>Volatile::Volatile</success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>(): TypeSpecifier(U"volatile") </try>
                            <Declarator>
                             <try>(): TypeSpecifier(U"volatile") </try>
                              <IdExpression>
                               <try>(): TypeSpecifier(U"volatile") </try>
                                <QualifiedId>
                                 <try>(): TypeSpecifier(U"volatile") </try>
                                  <NestedNameSpecifier>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <IdNode>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                      <SimpleTemplateId>
                                       <try>(): TypeSpecifier(U"volatile") </try>
                                        <TemplateName>
                                         <try>(): TypeSpecifier(U"volatile") </try>
                                          <Identifier>
                                           <try>(): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>(): TypeSpecifier(U"volatile") </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>(): TypeSpecifier(U"volatile") </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                 <fail/>
                                </QualifiedId>
                                <UnqualifiedId>
                                 <try>(): TypeSpecifier(U"volatile") </try>
                                  <TemplateId>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <SimpleTemplateId>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                      <TemplateName>
                                       <try>(): TypeSpecifier(U"volatile") </try>
                                        <Identifier>
                                         <try>(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>(): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </identifier>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                   <fail/>
                                  </TemplateId>
                                  <Identifier>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <identifier>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                  <OperatorFunctionId>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <operator>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </OperatorFunctionId>
                                  <ConversionFunctionId>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <operator>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </ConversionFunctionId>
                                 <fail/>
                                </UnqualifiedId>
                               <fail/>
                              </IdExpression>
                             <fail/>
                            </Declarator>
                           <fail/>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <using>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <using>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <using>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <EnumKey>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <enum>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <typedef>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <ClassKey>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <class>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </class>
                            <struct>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </struct>
                            <union>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                        <DeclSpecifiers>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <DeclSpecifier>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <StorageClassSpecifier>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <register>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </register>
                              <static>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <inline>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <PrefixTypeExpr>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <CVSpecifierSequence>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <CVSpecifier>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                <const>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <PrimaryTypeExpr>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                <SimpleType>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                  <SimpleTypeSpecifier>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                    <char>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <fail/>
                                </SimpleType>
                                <typename>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </typename>
                                <ClassKey>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                  <class>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                   <fail/>
                                  </class>
                                  <struct>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                   <fail/>
                                  </struct>
                                  <union>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                   <fail/>
                                  </union>
                                 <fail/>
                                </ClassKey>
                                <QualifiedIdNode>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                  <NestedNameSpecifier>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                    <IdNode>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                      <SimpleTemplateId>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                        <TemplateName>
                                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                          <Identifier>
                                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                             <success>Volatile</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                              <identifier>
                                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                               <success>Volatile</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Volatile</success>
                                          </Identifier>
                                         <success>Volatile</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                         <success>Volatile</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Volatile</success>
                                      </Identifier>
                                     <success>Volatile</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                      <SimpleTemplateId>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <TemplateName>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <Identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                             <success>Volatile</success>
                                            </identifier>
                                            <Keyword>
                                             <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                              <identifier>
                                               <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                               <success>Volatile</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>Volatile</success>
                                          </Identifier>
                                         <success>Volatile</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                         <success>Volatile</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Volatile</success>
                                      </Identifier>
                                     <success>Volatile</success>
                                    </IdNode>
                                   <success>Volatile::</success>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                    <SimpleTemplateId>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                      <TemplateName>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <Identifier>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                          <Keyword>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                             <success>Volatile</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>Volatile</success>
                                        </Identifier>
                                       <success>Volatile</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                      <identifier>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                       <success>Volatile</success>
                                      </identifier>
                                      <Keyword>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                         <success>Volatile</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>Volatile</success>
                                    </Identifier>
                                   <success>Volatile</success>
                                  </IdNode>
                                 <success>Volatile::Volatile</success>
                                </QualifiedIdNode>
                               <success>Volatile::Volatile</success>
                              </PrimaryTypeExpr>
                             <success>Volatile::Volatile</success>
                            </PostfixTypeExpr>
                           <success>Volatile::Volatile</success>
                          </PrefixTypeExpr>
                         <success>Volatile::Volatile</success>
                        </TypeExpr>
                        <Declarator>
                         <try>(): TypeSpecifier(U"volatile") </try>
                          <IdExpression>
                           <try>(): TypeSpecifier(U"volatile") </try>
                            <QualifiedId>
                             <try>(): TypeSpecifier(U"volatile") </try>
                              <NestedNameSpecifier>
                               <try>(): TypeSpecifier(U"volatile") </try>
                                <IdNode>
                                 <try>(): TypeSpecifier(U"volatile") </try>
                                  <SimpleTemplateId>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <TemplateName>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                      <Identifier>
                                       <try>(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>(): TypeSpecifier(U"volatile") </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <identifier>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                 <fail/>
                                </IdNode>
                               <fail/>
                              </NestedNameSpecifier>
                             <fail/>
                            </QualifiedId>
                            <UnqualifiedId>
                             <try>(): TypeSpecifier(U"volatile") </try>
                              <TemplateId>
                               <try>(): TypeSpecifier(U"volatile") </try>
                                <SimpleTemplateId>
                                 <try>(): TypeSpecifier(U"volatile") </try>
                                  <TemplateName>
                                   <try>(): TypeSpecifier(U"volatile") </try>
                                    <Identifier>
                                     <try>(): TypeSpecifier(U"volatile") </try>
                                      <identifier>
                                       <try>(): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </identifier>
                                     <fail/>
                                    </Identifier>
                                   <fail/>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                               <fail/>
                              </TemplateId>
                              <Identifier>
                               <try>(): TypeSpecifier(U"volatile") </try>
                                <identifier>
                                 <try>(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </identifier>
                               <fail/>
                              </Identifier>
                              <OperatorFunctionId>
                               <try>(): TypeSpecifier(U"volatile") </try>
                                <operator>
                                 <try>(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </OperatorFunctionId>
                              <ConversionFunctionId>
                               <try>(): TypeSpecifier(U"volatile") </try>
                                <operator>
                                 <try>(): TypeSpecifier(U"volatile") </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </ConversionFunctionId>
                             <fail/>
                            </UnqualifiedId>
                           <fail/>
                          </IdExpression>
                         <fail/>
                        </Declarator>
                       <fail/>
                      </FunctionDefinition>
                      <SpecialMemberFunctionDefinition>
                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                        <DeclSpecifiers>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <DeclSpecifier>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <StorageClassSpecifier>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <register>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </register>
                              <static>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <inline>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <Declarator>
                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                          <IdExpression>
                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                            <QualifiedId>
                             <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                              <NestedNameSpecifier>
                               <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                <IdNode>
                                 <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                  <SimpleTemplateId>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                    <TemplateName>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                      <Identifier>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                         <success>Volatile</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Volatile</success>
                                      </Identifier>
                                     <success>Volatile</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                    <identifier>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                     <success>Volatile</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                      <identifier>
                                       <try>Volatile::Volatile(): TypeSpecifier(U"volatile") </try>
                                       <success>Volatile</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Volatile</success>
                                  </Identifier>
                                 <success>Volatile</success>
                                </IdNode>
                                <IdNode>
                                 <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                  <SimpleTemplateId>
                                   <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                    <TemplateName>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                      <Identifier>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                         <success>Volatile</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Volatile</success>
                                      </Identifier>
                                     <success>Volatile</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                    <identifier>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                     <success>Volatile</success>
                                    </identifier>
                                    <Keyword>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                      <identifier>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                       <success>Volatile</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>Volatile</success>
                                  </Identifier>
                                 <success>Volatile</success>
                                </IdNode>
                               <success>Volatile::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                <TemplateId>
                                 <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                  <SimpleTemplateId>
                                   <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                    <TemplateName>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                      <Identifier>
                                       <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                         <success>Volatile</success>
                                        </identifier>
                                        <Keyword>
                                         <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                           <success>Volatile</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>Volatile</success>
                                      </Identifier>
                                     <success>Volatile</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                  <identifier>
                                   <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                   <success>Volatile</success>
                                  </identifier>
                                  <Keyword>
                                   <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                    <identifier>
                                     <try>Volatile(): TypeSpecifier(U"volatile") </try>
                                     <success>Volatile</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>Volatile</success>
                                </Identifier>
                               <success>Volatile</success>
                              </UnqualifiedId>
                             <success>Volatile::Volatile</success>
                            </QualifiedId>
                           <success>Volatile::Volatile</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(): TypeSpecifier(U"volatile") </try>
                            <ParameterDeclaration>
                             <try>): TypeSpecifier(U"volatile") </try>
                              <TypeExpr>
                               <try>): TypeSpecifier(U"volatile") </try>
                                <PrefixTypeExpr>
                                 <try>): TypeSpecifier(U"volatile") </try>
                                  <CVSpecifierSequence>
                                   <try>): TypeSpecifier(U"volatile") </try>
                                    <CVSpecifier>
                                     <try>): TypeSpecifier(U"volatile") </try>
                                      <const>
                                       <try>): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success></success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>): TypeSpecifier(U"volatile") </try>
                                    <PrimaryTypeExpr>
                                     <try>): TypeSpecifier(U"volatile") </try>
                                      <SimpleType>
                                       <try>): TypeSpecifier(U"volatile") </try>
                                        <SimpleTypeSpecifier>
                                         <try>): TypeSpecifier(U"volatile") </try>
                                          <char>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>): TypeSpecifier(U"volatile") </try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>): TypeSpecifier(U"volatile") </try>
                                        <class>
                                         <try>): TypeSpecifier(U"volatile") </try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>): TypeSpecifier(U"volatile") </try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>): TypeSpecifier(U"volatile") </try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>): TypeSpecifier(U"volatile") </try>
                                        <NestedNameSpecifier>
                                         <try>): TypeSpecifier(U"volatile") </try>
                                          <IdNode>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                            <SimpleTemplateId>
                                             <try>): TypeSpecifier(U"volatile") </try>
                                              <TemplateName>
                                               <try>): TypeSpecifier(U"volatile") </try>
                                                <Identifier>
                                                 <try>): TypeSpecifier(U"volatile") </try>
                                                  <identifier>
                                                   <try>): TypeSpecifier(U"volatile") </try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>): TypeSpecifier(U"volatile") </try>
                                              <identifier>
                                               <try>): TypeSpecifier(U"volatile") </try>
                                               <fail/>
                                              </identifier>
                                             <fail/>
                                            </Identifier>
                                           <fail/>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>): TypeSpecifier(U"volatile") </try>
                                          <SimpleTemplateId>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                            <TemplateName>
                                             <try>): TypeSpecifier(U"volatile") </try>
                                              <Identifier>
                                               <try>): TypeSpecifier(U"volatile") </try>
                                                <identifier>
                                                 <try>): TypeSpecifier(U"volatile") </try>
                                                 <fail/>
                                                </identifier>
                                               <fail/>
                                              </Identifier>
                                             <fail/>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>): TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>): TypeSpecifier(U"volatile") </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </IdNode>
                                       <fail/>
                                      </QualifiedIdNode>
                                     <fail/>
                                    </PrimaryTypeExpr>
                                   <fail/>
                                  </PostfixTypeExpr>
                                 <fail/>
                                </PrefixTypeExpr>
                               <fail/>
                              </TypeExpr>
                             <fail/>
                            </ParameterDeclaration>
                           <success>()</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>: TypeSpecifier(U"volatile") </try>
                            <CVSpecifier>
                             <try>: TypeSpecifier(U"volatile") </try>
                              <const>
                               <try>: TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>: TypeSpecifier(U"volatile") </try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>Volatile::Volatile()</success>
                        </Declarator>
                        <CtorInitializer>
                         <try>: TypeSpecifier(U"volatile") </try>
                          <MemberInitializerList>
                           <try>TypeSpecifier(U"volatile") </try>
                            <MemberInitializer>
                             <try>TypeSpecifier(U"volatile") </try>
                              <MemberInitializerId>
                               <try>TypeSpecifier(U"volatile") </try>
                                <QualifiedIdNode>
                                 <try>TypeSpecifier(U"volatile") </try>
                                  <NestedNameSpecifier>
                                   <try>TypeSpecifier(U"volatile") </try>
                                    <IdNode>
                                     <try>TypeSpecifier(U"volatile") </try>
                                      <SimpleTemplateId>
                                       <try>TypeSpecifier(U"volatile") </try>
                                        <TemplateName>
                                         <try>TypeSpecifier(U"volatile") </try>
                                          <Identifier>
                                           <try>TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>TypeSpecifier(U"volatile") </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeSpecifier(U"volatile") </try>
                                              <identifier>
                                               <try>TypeSpecifier(U"volatile") </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeSpecifier</success>
                                          </Identifier>
                                         <success>TypeSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>TypeSpecifier(U"volatile") </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>TypeSpecifier(U"volatile") </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>TypeSpecifier(U"volatile") </try>
                                    <SimpleTemplateId>
                                     <try>TypeSpecifier(U"volatile") </try>
                                      <TemplateName>
                                       <try>TypeSpecifier(U"volatile") </try>
                                        <Identifier>
                                         <try>TypeSpecifier(U"volatile") </try>
                                          <identifier>
                                           <try>TypeSpecifier(U"volatile") </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeSpecifier(U"volatile") </try>
                                            <identifier>
                                             <try>TypeSpecifier(U"volatile") </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeSpecifier</success>
                                        </Identifier>
                                       <success>TypeSpecifier</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>TypeSpecifier(U"volatile") </try>
                                      <identifier>
                                       <try>TypeSpecifier(U"volatile") </try>
                                       <success>TypeSpecifier</success>
                                      </identifier>
                                      <Keyword>
                                       <try>TypeSpecifier(U"volatile") </try>
                                        <identifier>
                                         <try>TypeSpecifier(U"volatile") </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>TypeSpecifier</success>
                                    </Identifier>
                                   <success>TypeSpecifier</success>
                                  </IdNode>
                                 <success>TypeSpecifier</success>
                                </QualifiedIdNode>
                               <success>TypeSpecifier</success>
                              </MemberInitializerId>
                              <ExpressionList>
                               <try>U"volatile") </try>
                                <InitializerList>
                                 <try>U"volatile") </try>
                                  <InitializerClause>
                                   <try>U"volatile") </try>
                                    <AssignmentExpression>
                                     <try>U"volatile") </try>
                                      <LogicalOrExpression>
                                       <try>U"volatile") </try>
                                        <LogicalAndExpression>
                                         <try>U"volatile") </try>
                                          <InclusiveOrExpression>
                                           <try>U"volatile") </try>
                                            <ExclusiveOrExpression>
                                             <try>U"volatile") </try>
                                              <AndExpression>
                                               <try>U"volatile") </try>
                                                <EqualityExpression>
                                                 <try>U"volatile") </try>
                                                  <RelationalExpression>
                                                   <try>U"volatile") </try>
                                                    <ShiftExpression>
                                                     <try>U"volatile") </try>
                                                      <AdditiveExpression>
                                                       <try>U"volatile") </try>
                                                        <MultiplicativeExpression>
                                                         <try>U"volatile") </try>
                                                          <PMExpression>
                                                           <try>U"volatile") </try>
                                                            <CastExpression>
                                                             <try>U"volatile") </try>
                                                              <UnaryExpression>
                                                               <try>U"volatile") </try>
                                                                <UnaryOperator>
                                                                 <try>U"volatile") </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>U"volatile") </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>U"volatile") </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>U"volatile") </try>
                                                                  <new>
                                                                   <try>U"volatile") </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>U"volatile") </try>
                                                                  <delete>
                                                                   <try>U"volatile") </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>U"volatile") </try>
                                                                  <PrimaryExpression>
                                                                   <try>U"volatile") </try>
                                                                    <Literal>
                                                                     <try>U"volatile") </try>
                                                                      <FloatingLiteral>
                                                                       <try>U"volatile") </try>
                                                                        <FractionalConstant>
                                                                         <try>U"volatile") </try>
                                                                          <digit_sequence>
                                                                           <try>U"volatile") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>U"volatile") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>U"volatile") </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>U"volatile") </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>U"volatile") </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>U"volatile") </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>U"volatile") </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>U"volatile") </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>U"volatile") </try>
                                                                        <EncodingPrefix>
                                                                         <try>U"volatile") </try>
                                                                         <success>U</success>
                                                                        </EncodingPrefix>
                                                                        <SChar>
                                                                         <try>volatile") </try>
                                                                         <success>v</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>olatile") </try>
                                                                         <success>o</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>latile") </try>
                                                                         <success>l</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>atile") </try>
                                                                         <success>a</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>tile") </try>
                                                                         <success>t</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>ile") </try>
                                                                         <success>i</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>le") </try>
                                                                         <success>l</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>e") </try>
                                                                         <success>e</success>
                                                                        </SChar>
                                                                        <SChar>
                                                                         <try>") </try>
                                                                          <escape>
                                                                           <try>") </try>
                                                                           <fail/>
                                                                          </escape>
                                                                         <fail/>
                                                                        </SChar>
                                                                       <success>U"volatile"</success>
                                                                      </StringLiteral>
                                                                     <success>U"volatile"</success>
                                                                    </Literal>
                                                                   <success>U"volatile"</success>
                                                                  </PrimaryExpression>
                                                                 <success>U"volatile"</success>
                                                                </PostfixExpression>
                                                               <success>U"volatile"</success>
                                                              </UnaryExpression>
                                                             <success>U"volatile"</success>
                                                            </CastExpression>
                                                           <success>U"volatile"</success>
                                                          </PMExpression>
                                                         <success>U"volatile"</success>
                                                        </MultiplicativeExpression>
                                                       <success>U"volatile"</success>
                                                      </AdditiveExpression>
                                                     <success>U"volatile"</success>
                                                    </ShiftExpression>
                                                   <success>U"volatile"</success>
                                                  </RelationalExpression>
                                                 <success>U"volatile"</success>
                                                </EqualityExpression>
                                               <success>U"volatile"</success>
                                              </AndExpression>
                                             <success>U"volatile"</success>
                                            </ExclusiveOrExpression>
                                           <success>U"volatile"</success>
                                          </InclusiveOrExpression>
                                         <success>U"volatile"</success>
                                        </LogicalAndExpression>
                                       <success>U"volatile"</success>
                                      </LogicalOrExpression>
                                      <AssignmentOperator>
                                       <try>) </try>
                                       <fail/>
                                      </AssignmentOperator>
                                      <ConditionalExpression>
                                       <try>U"volatile") </try>
                                        <LogicalOrExpression>
                                         <try>U"volatile") </try>
                                          <LogicalAndExpression>
                                           <try>U"volatile") </try>
                                            <InclusiveOrExpression>
                                             <try>U"volatile") </try>
                                              <ExclusiveOrExpression>
                                               <try>U"volatile") </try>
                                                <AndExpression>
                                                 <try>U"volatile") </try>
                                                  <EqualityExpression>
                                                   <try>U"volatile") </try>
                                                    <RelationalExpression>
                                                     <try>U"volatile") </try>
                                                      <ShiftExpression>
                                                       <try>U"volatile") </try>
                                                        <AdditiveExpression>
                                                         <try>U"volatile") </try>
                                                          <MultiplicativeExpression>
                                                           <try>U"volatile") </try>
                                                            <PMExpression>
                                                             <try>U"volatile") </try>
                                                              <CastExpression>
                                                               <try>U"volatile") </try>
                                                                <UnaryExpression>
                                                                 <try>U"volatile") </try>
                                                                  <UnaryOperator>
                                                                   <try>U"volatile") </try>
                                                                   <fail/>
                                                                  </UnaryOperator>
                                                                  <sizeof>
                                                                   <try>U"volatile") </try>
                                                                   <fail/>
                                                                  </sizeof>
                                                                  <alignof>
                                                                   <try>U"volatile") </try>
                                                                   <fail/>
                                                                  </alignof>
                                                                  <NewExpression>
                                                                   <try>U"volatile") </try>
                                                                    <new>
                                                                     <try>U"volatile") </try>
                                                                     <fail/>
                                                                    </new>
                                                                   <fail/>
                                                                  </NewExpression>
                                                                  <DeleteExpression>
                                                                   <try>U"volatile") </try>
                                                                    <delete>
                                                                     <try>U"volatile") </try>
                                                                     <fail/>
                                                                    </delete>
                                                                   <fail/>
                                                                  </DeleteExpression>
                                                                  <PostfixExpression>
                                                                   <try>U"volatile") </try>
                                                                    <PrimaryExpression>
                                                                     <try>U"volatile") </try>
                                                                      <Literal>
                                                                       <try>U"volatile") </try>
                                                                        <FloatingLiteral>
                                                                         <try>U"volatile") </try>
                                                                          <FractionalConstant>
                                                                           <try>U"volatile") </try>
                                                                            <digit_sequence>
                                                                             <try>U"volatile") </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                            <digit_sequence>
                                                                             <try>U"volatile") </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                           <fail/>
                                                                          </FractionalConstant>
                                                                          <digit_sequence>
                                                                           <try>U"volatile") </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FloatingLiteral>
                                                                        <IntegerLiteral>
                                                                         <try>U"volatile") </try>
                                                                          <HexadecimalLiteral>
                                                                           <try>U"volatile") </try>
                                                                           <fail/>
                                                                          </HexadecimalLiteral>
                                                                          <OctalLiteral>
                                                                           <try>U"volatile") </try>
                                                                           <fail/>
                                                                          </OctalLiteral>
                                                                          <DecimalLiteral>
                                                                           <try>U"volatile") </try>
                                                                           <fail/>
                                                                          </DecimalLiteral>
                                                                         <fail/>
                                                                        </IntegerLiteral>
                                                                        <CharacterLiteral>
                                                                         <try>U"volatile") </try>
                                                                         <fail/>
                                                                        </CharacterLiteral>
                                                                        <StringLiteral>
                                                                         <try>U"volatile") </try>
                                                                          <EncodingPrefix>
                                                                           <try>U"volatile") </try>
                                                                           <success>U</success>
                                                                          </EncodingPrefix>
                                                                          <SChar>
                                                                           <try>volatile") </try>
                                                                           <success>v</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>olatile") </try>
                                                                           <success>o</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>latile") </try>
                                                                           <success>l</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>atile") </try>
                                                                           <success>a</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>tile") </try>
                                                                           <success>t</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>ile") </try>
                                                                           <success>i</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>le") </try>
                                                                           <success>l</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>e") </try>
                                                                           <success>e</success>
                                                                          </SChar>
                                                                          <SChar>
                                                                           <try>") </try>
                                                                            <escape>
                                                                             <try>") </try>
                                                                             <fail/>
                                                                            </escape>
                                                                           <fail/>
                                                                          </SChar>
                                                                         <success>U"volatile"</success>
                                                                        </StringLiteral>
                                                                       <success>U"volatile"</success>
                                                                      </Literal>
                                                                     <success>U"volatile"</success>
                                                                    </PrimaryExpression>
                                                                   <success>U"volatile"</success>
                                                                  </PostfixExpression>
                                                                 <success>U"volatile"</success>
                                                                </UnaryExpression>
                                                               <success>U"volatile"</success>
                                                              </CastExpression>
                                                             <success>U"volatile"</success>
                                                            </PMExpression>
                                                           <success>U"volatile"</success>
                                                          </MultiplicativeExpression>
                                                         <success>U"volatile"</success>
                                                        </AdditiveExpression>
                                                       <success>U"volatile"</success>
                                                      </ShiftExpression>
                                                     <success>U"volatile"</success>
                                                    </RelationalExpression>
                                                   <success>U"volatile"</success>
                                                  </EqualityExpression>
                                                 <success>U"volatile"</success>
                                                </AndExpression>
                                               <success>U"volatile"</success>
                                              </ExclusiveOrExpression>
                                             <success>U"volatile"</success>
                                            </InclusiveOrExpression>
                                           <success>U"volatile"</success>
                                          </LogicalAndExpression>
                                         <success>U"volatile"</success>
                                        </LogicalOrExpression>
                                       <success>U"volatile"</success>
                                      </ConditionalExpression>
                                     <success>U"volatile"</success>
                                    </AssignmentExpression>
                                   <success>U"volatile"</success>
                                  </InitializerClause>
                                 <success>U"volatile"</success>
                                </InitializerList>
                               <success>U"volatile"</success>
                              </ExpressionList>
                             <success>TypeSpecifier(U"volatile")</success>
                            </MemberInitializer>
                           <success>TypeSpecifier(U"volatile") \r\n</success>
                          </MemberInitializerList>
                         <success>: TypeSpecifier(U"volatile") \r\n</success>
                        </CtorInitializer>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n}</success>
                        </FunctionBody>
                       <success>Volatile::Volatile(): TypeSpecifier(U"volatile") \r\n{\r\n}</success>
                      </SpecialMemberFunctionDefinition>
                     <success>Volatile::Volatile(): TypeSpecifier(U"volatile") \r\n{\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                      <NamespaceDefinition>
                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                        <NamedNamespaceDefinition>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <namespace>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <namespace>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                        <SimpleDeclaration>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <DeclSpecifiers>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <DeclSpecifier>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <StorageClassSpecifier>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <register>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <inline>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <PrefixTypeExpr>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <CVSpecifierSequence>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <CVSpecifier>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <const>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <PrimaryTypeExpr>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <SimpleType>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <SimpleTypeSpecifier>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <char>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <class>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <NestedNameSpecifier>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <IdNode>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <SimpleTemplateId>
                                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <TemplateName>
                                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <Identifier>
                                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>TypeName</success>
                                              </identifier>
                                              <Keyword>
                                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <identifier>
                                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                 <success>TypeName</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>TypeName</success>
                                            </Identifier>
                                           <success>TypeName</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeName</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeName</success>
                                        </Identifier>
                                       <success>TypeName</success>
                                      </IdNode>
                                      <IdNode>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <SimpleTemplateId>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <TemplateName>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <Identifier>
                                             <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>TypeName</success>
                                              </identifier>
                                              <Keyword>
                                               <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <identifier>
                                                 <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                 <success>TypeName</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>TypeName</success>
                                            </Identifier>
                                           <success>TypeName</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeName</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeName</success>
                                        </Identifier>
                                       <success>TypeName</success>
                                      </IdNode>
                                     <success>TypeName::</success>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <SimpleTemplateId>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <TemplateName>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <Identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeName</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>TypeName</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeName</success>
                                          </Identifier>
                                         <success>TypeName</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </IdNode>
                                   <success>TypeName::TypeName</success>
                                  </QualifiedIdNode>
                                 <success>TypeName::TypeName</success>
                                </PrimaryTypeExpr>
                               <success>TypeName::TypeName</success>
                              </PostfixTypeExpr>
                             <success>TypeName::TypeName</success>
                            </PrefixTypeExpr>
                           <success>TypeName::TypeName</success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <Declarator>
                             <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <IdExpression>
                               <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <QualifiedId>
                                 <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <NestedNameSpecifier>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <IdNode>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <SimpleTemplateId>
                                       <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <TemplateName>
                                         <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <Identifier>
                                           <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                 <fail/>
                                </QualifiedId>
                                <UnqualifiedId>
                                 <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <TemplateId>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <SimpleTemplateId>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <TemplateName>
                                       <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <Identifier>
                                         <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </identifier>
                                         <fail/>
                                        </Identifier>
                                       <fail/>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                   <fail/>
                                  </TemplateId>
                                  <Identifier>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <identifier>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                  <OperatorFunctionId>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <operator>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </OperatorFunctionId>
                                  <ConversionFunctionId>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <operator>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </operator>
                                   <fail/>
                                  </ConversionFunctionId>
                                 <fail/>
                                </UnqualifiedId>
                               <fail/>
                              </IdExpression>
                             <fail/>
                            </Declarator>
                           <fail/>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <using>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <using>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <using>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <EnumKey>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <enum>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <typedef>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <ClassKey>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <class>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </class>
                            <struct>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </struct>
                            <union>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                        <DeclSpecifiers>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <DeclSpecifier>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <StorageClassSpecifier>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <register>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </register>
                              <static>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <inline>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <PrefixTypeExpr>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <CVSpecifierSequence>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <CVSpecifier>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <const>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <PrimaryTypeExpr>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <SimpleType>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <SimpleTypeSpecifier>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <char>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <fail/>
                                </SimpleType>
                                <typename>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </typename>
                                <ClassKey>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <class>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                   <fail/>
                                  </class>
                                  <struct>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                   <fail/>
                                  </struct>
                                  <union>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                   <fail/>
                                  </union>
                                 <fail/>
                                </ClassKey>
                                <QualifiedIdNode>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <NestedNameSpecifier>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <IdNode>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <SimpleTemplateId>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <TemplateName>
                                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <Identifier>
                                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeName</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>TypeName</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeName</success>
                                          </Identifier>
                                         <success>TypeName</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <SimpleTemplateId>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <TemplateName>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <Identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeName</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>TypeName</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeName</success>
                                          </Identifier>
                                         <success>TypeName</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </IdNode>
                                   <success>TypeName::</success>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <SimpleTemplateId>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <TemplateName>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <Identifier>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeName</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeName</success>
                                        </Identifier>
                                       <success>TypeName</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <identifier>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <success>TypeName</success>
                                      </identifier>
                                      <Keyword>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>TypeName</success>
                                    </Identifier>
                                   <success>TypeName</success>
                                  </IdNode>
                                 <success>TypeName::TypeName</success>
                                </QualifiedIdNode>
                               <success>TypeName::TypeName</success>
                              </PrimaryTypeExpr>
                             <success>TypeName::TypeName</success>
                            </PostfixTypeExpr>
                           <success>TypeName::TypeName</success>
                          </PrefixTypeExpr>
                         <success>TypeName::TypeName</success>
                        </TypeExpr>
                        <Declarator>
                         <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <IdExpression>
                           <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <QualifiedId>
                             <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <NestedNameSpecifier>
                               <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <IdNode>
                                 <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <SimpleTemplateId>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <TemplateName>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <Identifier>
                                       <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <fail/>
                                        </identifier>
                                       <fail/>
                                      </Identifier>
                                     <fail/>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <identifier>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <fail/>
                                    </identifier>
                                   <fail/>
                                  </Identifier>
                                 <fail/>
                                </IdNode>
                               <fail/>
                              </NestedNameSpecifier>
                             <fail/>
                            </QualifiedId>
                            <UnqualifiedId>
                             <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <TemplateId>
                               <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <SimpleTemplateId>
                                 <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <TemplateName>
                                   <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <Identifier>
                                     <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <identifier>
                                       <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </identifier>
                                     <fail/>
                                    </Identifier>
                                   <fail/>
                                  </TemplateName>
                                 <fail/>
                                </SimpleTemplateId>
                               <fail/>
                              </TemplateId>
                              <Identifier>
                               <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <identifier>
                                 <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </identifier>
                               <fail/>
                              </Identifier>
                              <OperatorFunctionId>
                               <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <operator>
                                 <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </OperatorFunctionId>
                              <ConversionFunctionId>
                               <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <operator>
                                 <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </operator>
                               <fail/>
                              </ConversionFunctionId>
                             <fail/>
                            </UnqualifiedId>
                           <fail/>
                          </IdExpression>
                         <fail/>
                        </Declarator>
                       <fail/>
                      </FunctionDefinition>
                      <SpecialMemberFunctionDefinition>
                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                        <DeclSpecifiers>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <DeclSpecifier>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <StorageClassSpecifier>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <register>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </register>
                              <static>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <inline>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <Declarator>
                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                          <IdExpression>
                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <QualifiedId>
                             <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <NestedNameSpecifier>
                               <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <IdNode>
                                 <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <SimpleTemplateId>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <TemplateName>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <Identifier>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <identifier>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <success>TypeName</success>
                                    </identifier>
                                    <Keyword>
                                     <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <identifier>
                                       <try>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <success>TypeName</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>TypeName</success>
                                  </Identifier>
                                 <success>TypeName</success>
                                </IdNode>
                                <IdNode>
                                 <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <SimpleTemplateId>
                                   <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <TemplateName>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <Identifier>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <identifier>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <success>TypeName</success>
                                    </identifier>
                                    <Keyword>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <identifier>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <success>TypeName</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>TypeName</success>
                                  </Identifier>
                                 <success>TypeName</success>
                                </IdNode>
                               <success>TypeName::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <TemplateId>
                                 <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <SimpleTemplateId>
                                   <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <TemplateName>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <Identifier>
                                       <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <identifier>
                                   <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                   <success>TypeName</success>
                                  </identifier>
                                  <Keyword>
                                   <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <identifier>
                                     <try>TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                     <success>TypeName</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>TypeName</success>
                                </Identifier>
                               <success>TypeName</success>
                              </UnqualifiedId>
                             <success>TypeName::TypeName</success>
                            </QualifiedId>
                           <success>TypeName::TypeName</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                            <ParameterDeclaration>
                             <try>const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                              <TypeExpr>
                               <try>const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <PrefixTypeExpr>
                                 <try>const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <CVSpecifierSequence>
                                   <try>const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <CVSpecifier>
                                     <try>const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <const>
                                       <try>const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier_chars>
                                         <try> std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <fail/>
                                        </identifier_chars>
                                       <success>const</success>
                                      </const>
                                     <success>const</success>
                                    </CVSpecifier>
                                    <CVSpecifier>
                                     <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <const>
                                       <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success>const</success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <PrimaryTypeExpr>
                                     <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <SimpleType>
                                       <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <SimpleTypeSpecifier>
                                         <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <char>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <class>
                                         <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <NestedNameSpecifier>
                                         <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <IdNode>
                                           <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <SimpleTemplateId>
                                             <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <TemplateName>
                                               <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <Identifier>
                                                 <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                  <identifier>
                                                   <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                   <success>std</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                    <identifier>
                                                     <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                     <success>std</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>std</success>
                                                </Identifier>
                                               <success>std</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>std</success>
                                              </identifier>
                                              <Keyword>
                                               <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <identifier>
                                                 <try>std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                 <success>std</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>std</success>
                                            </Identifier>
                                           <success>std</success>
                                          </IdNode>
                                          <IdNode>
                                           <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <SimpleTemplateId>
                                             <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <TemplateName>
                                               <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <Identifier>
                                                 <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                  <identifier>
                                                   <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                   <success>u32string</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                    <identifier>
                                                     <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                     <success>u32string</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>u32string</success>
                                                </Identifier>
                                               <success>u32string</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>u32string</success>
                                              </identifier>
                                              <Keyword>
                                               <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <identifier>
                                                 <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                 <success>u32string</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>u32string</success>
                                            </Identifier>
                                           <success>u32string</success>
                                          </IdNode>
                                         <success>std::</success>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <SimpleTemplateId>
                                           <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <TemplateName>
                                             <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <Identifier>
                                               <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <identifier>
                                                 <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                 <success>u32string</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                  <identifier>
                                                   <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                   <success>u32string</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>u32string</success>
                                              </Identifier>
                                             <success>u32string</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>u32string</success>
                                            </identifier>
                                            <Keyword>
                                             <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>u32string</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>u32string</success>
                                          </Identifier>
                                         <success>u32string</success>
                                        </IdNode>
                                       <success>std::u32string</success>
                                      </QualifiedIdNode>
                                     <success>std::u32string</success>
                                    </PrimaryTypeExpr>
                                   <success>std::u32string&amp;</success>
                                  </PostfixTypeExpr>
                                 <success>const std::u32string&amp;</success>
                                </PrefixTypeExpr>
                               <success>const std::u32string&amp;</success>
                              </TypeExpr>
                              <Declarator>
                               <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                <IdExpression>
                                 <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                  <QualifiedId>
                                   <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <NestedNameSpecifier>
                                     <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <IdNode>
                                       <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <SimpleTemplateId>
                                         <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <TemplateName>
                                           <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <Identifier>
                                             <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>name_</success>
                                              </identifier>
                                              <Keyword>
                                               <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                <identifier>
                                                 <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                                 <success>name_</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>name_</success>
                                            </Identifier>
                                           <success>name_</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>name_</success>
                                          </identifier>
                                          <Keyword>
                                           <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>name_</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>name_</success>
                                        </Identifier>
                                       <success>name_</success>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                   <fail/>
                                  </QualifiedId>
                                  <UnqualifiedId>
                                   <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                    <TemplateId>
                                     <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <SimpleTemplateId>
                                       <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <TemplateName>
                                         <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                          <Identifier>
                                           <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>name_</success>
                                            </identifier>
                                            <Keyword>
                                             <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>name_</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>name_</success>
                                          </Identifier>
                                         <success>name_</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                      <identifier>
                                       <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                       <success>name_</success>
                                      </identifier>
                                      <Keyword>
                                       <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>name_): TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>name_</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>name_</success>
                                    </Identifier>
                                   <success>name_</success>
                                  </UnqualifiedId>
                                 <success>name_</success>
                                </IdExpression>
                                <ParameterList>
                                 <try>): TypeSpecifier(name_), isTemplate(false) </try>
                                 <fail/>
                                </ParameterList>
                               <success>name_</success>
                              </Declarator>
                             <success>const std::u32string&amp; name_</success>
                            </ParameterDeclaration>
                           <success>(const std::u32string&amp; name_)</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>: TypeSpecifier(name_), isTemplate(false) </try>
                            <CVSpecifier>
                             <try>: TypeSpecifier(name_), isTemplate(false) </try>
                              <const>
                               <try>: TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>: TypeSpecifier(name_), isTemplate(false) </try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>TypeName::TypeName(const std::u32string&amp; name_)</success>
                        </Declarator>
                        <CtorInitializer>
                         <try>: TypeSpecifier(name_), isTemplate(false) </try>
                          <MemberInitializerList>
                           <try>TypeSpecifier(name_), isTemplate(false) </try>
                            <MemberInitializer>
                             <try>TypeSpecifier(name_), isTemplate(false) </try>
                              <MemberInitializerId>
                               <try>TypeSpecifier(name_), isTemplate(false) </try>
                                <QualifiedIdNode>
                                 <try>TypeSpecifier(name_), isTemplate(false) </try>
                                  <NestedNameSpecifier>
                                   <try>TypeSpecifier(name_), isTemplate(false) </try>
                                    <IdNode>
                                     <try>TypeSpecifier(name_), isTemplate(false) </try>
                                      <SimpleTemplateId>
                                       <try>TypeSpecifier(name_), isTemplate(false) </try>
                                        <TemplateName>
                                         <try>TypeSpecifier(name_), isTemplate(false) </try>
                                          <Identifier>
                                           <try>TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeSpecifier(name_), isTemplate(false) </try>
                                              <identifier>
                                               <try>TypeSpecifier(name_), isTemplate(false) </try>
                                               <success>TypeSpecifier</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeSpecifier</success>
                                          </Identifier>
                                         <success>TypeSpecifier</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeSpecifier</success>
                                      </Identifier>
                                     <success>TypeSpecifier</success>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>TypeSpecifier(name_), isTemplate(false) </try>
                                    <SimpleTemplateId>
                                     <try>TypeSpecifier(name_), isTemplate(false) </try>
                                      <TemplateName>
                                       <try>TypeSpecifier(name_), isTemplate(false) </try>
                                        <Identifier>
                                         <try>TypeSpecifier(name_), isTemplate(false) </try>
                                          <identifier>
                                           <try>TypeSpecifier(name_), isTemplate(false) </try>
                                           <success>TypeSpecifier</success>
                                          </identifier>
                                          <Keyword>
                                           <try>TypeSpecifier(name_), isTemplate(false) </try>
                                            <identifier>
                                             <try>TypeSpecifier(name_), isTemplate(false) </try>
                                             <success>TypeSpecifier</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>TypeSpecifier</success>
                                        </Identifier>
                                       <success>TypeSpecifier</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>TypeSpecifier(name_), isTemplate(false) </try>
                                      <identifier>
                                       <try>TypeSpecifier(name_), isTemplate(false) </try>
                                       <success>TypeSpecifier</success>
                                      </identifier>
                                      <Keyword>
                                       <try>TypeSpecifier(name_), isTemplate(false) </try>
                                        <identifier>
                                         <try>TypeSpecifier(name_), isTemplate(false) </try>
                                         <success>TypeSpecifier</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>TypeSpecifier</success>
                                    </Identifier>
                                   <success>TypeSpecifier</success>
                                  </IdNode>
                                 <success>TypeSpecifier</success>
                                </QualifiedIdNode>
                               <success>TypeSpecifier</success>
                              </MemberInitializerId>
                              <ExpressionList>
                               <try>name_), isTemplate(false) </try>
                                <InitializerList>
                                 <try>name_), isTemplate(false) </try>
                                  <InitializerClause>
                                   <try>name_), isTemplate(false) </try>
                                    <AssignmentExpression>
                                     <try>name_), isTemplate(false) </try>
                                      <LogicalOrExpression>
                                       <try>name_), isTemplate(false) </try>
                                        <LogicalAndExpression>
                                         <try>name_), isTemplate(false) </try>
                                          <InclusiveOrExpression>
                                           <try>name_), isTemplate(false) </try>
                                            <ExclusiveOrExpression>
                                             <try>name_), isTemplate(false) </try>
                                              <AndExpression>
                                               <try>name_), isTemplate(false) </try>
                                                <EqualityExpression>
                                                 <try>name_), isTemplate(false) </try>
                                                  <RelationalExpression>
                                                   <try>name_), isTemplate(false) </try>
                                                    <ShiftExpression>
                                                     <try>name_), isTemplate(false) </try>
                                                      <AdditiveExpression>
                                                       <try>name_), isTemplate(false) </try>
                                                        <MultiplicativeExpression>
                                                         <try>name_), isTemplate(false) </try>
                                                          <PMExpression>
                                                           <try>name_), isTemplate(false) </try>
                                                            <CastExpression>
                                                             <try>name_), isTemplate(false) </try>
                                                              <UnaryExpression>
                                                               <try>name_), isTemplate(false) </try>
                                                                <UnaryOperator>
                                                                 <try>name_), isTemplate(false) </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>name_), isTemplate(false) </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>name_), isTemplate(false) </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>name_), isTemplate(false) </try>
                                                                  <new>
                                                                   <try>name_), isTemplate(false) </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>name_), isTemplate(false) </try>
                                                                  <delete>
                                                                   <try>name_), isTemplate(false) </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>name_), isTemplate(false) </try>
                                                                  <PrimaryExpression>
                                                                   <try>name_), isTemplate(false) </try>
                                                                    <Literal>
                                                                     <try>name_), isTemplate(false) </try>
                                                                      <FloatingLiteral>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <FractionalConstant>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <digit_sequence>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <EncodingPrefix>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <true>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <nullptr>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>name_), isTemplate(false) </try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>name_), isTemplate(false) </try>
                                                                      <dynamic_cast>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>name_), isTemplate(false) </try>
                                                                      <typeid>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>name_), isTemplate(false) </try>
                                                                      <QualifiedId>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <NestedNameSpecifier>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <IdNode>
                                                                           <try>name_), isTemplate(false) </try>
                                                                            <SimpleTemplateId>
                                                                             <try>name_), isTemplate(false) </try>
                                                                              <TemplateName>
                                                                               <try>name_), isTemplate(false) </try>
                                                                                <Identifier>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                  <identifier>
                                                                                   <try>name_), isTemplate(false) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>name_), isTemplate(false) </try>
                                                                                    <identifier>
                                                                                     <try>name_), isTemplate(false) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>name_</success>
                                                                                </Identifier>
                                                                               <success>name_</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>name_), isTemplate(false) </try>
                                                                              <identifier>
                                                                               <try>name_), isTemplate(false) </try>
                                                                               <success>name_</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>name_), isTemplate(false) </try>
                                                                                <identifier>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>name_</success>
                                                                            </Identifier>
                                                                           <success>name_</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <TemplateId>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <SimpleTemplateId>
                                                                           <try>name_), isTemplate(false) </try>
                                                                            <TemplateName>
                                                                             <try>name_), isTemplate(false) </try>
                                                                              <Identifier>
                                                                               <try>name_), isTemplate(false) </try>
                                                                                <identifier>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                  <identifier>
                                                                                   <try>name_), isTemplate(false) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>name_</success>
                                                                              </Identifier>
                                                                             <success>name_</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <identifier>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <success>name_</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>name_), isTemplate(false) </try>
                                                                            <identifier>
                                                                             <try>name_), isTemplate(false) </try>
                                                                             <success>name_</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>name_</success>
                                                                        </Identifier>
                                                                       <success>name_</success>
                                                                      </UnqualifiedId>
                                                                     <success>name_</success>
                                                                    </IdExpression>
                                                                   <success>name_</success>
                                                                  </PrimaryExpression>
                                                                 <success>name_</success>
                                                                </PostfixExpression>
                                                               <success>name_</success>
                                                              </UnaryExpression>
                                                             <success>name_</success>
                                                            </CastExpression>
                                                           <success>name_</success>
                                                          </PMExpression>
                                                         <success>name_</success>
                                                        </MultiplicativeExpression>
                                                       <success>name_</success>
                                                      </AdditiveExpression>
                                                     <success>name_</success>
                                                    </ShiftExpression>
                                                   <success>name_</success>
                                                  </RelationalExpression>
                                                 <success>name_</success>
                                                </EqualityExpression>
                                               <success>name_</success>
                                              </AndExpression>
                                             <success>name_</success>
                                            </ExclusiveOrExpression>
                                           <success>name_</success>
                                          </InclusiveOrExpression>
                                         <success>name_</success>
                                        </LogicalAndExpression>
                                       <success>name_</success>
                                      </LogicalOrExpression>
                                      <AssignmentOperator>
                                       <try>), isTemplate(false) </try>
                                       <fail/>
                                      </AssignmentOperator>
                                      <ConditionalExpression>
                                       <try>name_), isTemplate(false) </try>
                                        <LogicalOrExpression>
                                         <try>name_), isTemplate(false) </try>
                                          <LogicalAndExpression>
                                           <try>name_), isTemplate(false) </try>
                                            <InclusiveOrExpression>
                                             <try>name_), isTemplate(false) </try>
                                              <ExclusiveOrExpression>
                                               <try>name_), isTemplate(false) </try>
                                                <AndExpression>
                                                 <try>name_), isTemplate(false) </try>
                                                  <EqualityExpression>
                                                   <try>name_), isTemplate(false) </try>
                                                    <RelationalExpression>
                                                     <try>name_), isTemplate(false) </try>
                                                      <ShiftExpression>
                                                       <try>name_), isTemplate(false) </try>
                                                        <AdditiveExpression>
                                                         <try>name_), isTemplate(false) </try>
                                                          <MultiplicativeExpression>
                                                           <try>name_), isTemplate(false) </try>
                                                            <PMExpression>
                                                             <try>name_), isTemplate(false) </try>
                                                              <CastExpression>
                                                               <try>name_), isTemplate(false) </try>
                                                                <UnaryExpression>
                                                                 <try>name_), isTemplate(false) </try>
                                                                  <UnaryOperator>
                                                                   <try>name_), isTemplate(false) </try>
                                                                   <fail/>
                                                                  </UnaryOperator>
                                                                  <sizeof>
                                                                   <try>name_), isTemplate(false) </try>
                                                                   <fail/>
                                                                  </sizeof>
                                                                  <alignof>
                                                                   <try>name_), isTemplate(false) </try>
                                                                   <fail/>
                                                                  </alignof>
                                                                  <NewExpression>
                                                                   <try>name_), isTemplate(false) </try>
                                                                    <new>
                                                                     <try>name_), isTemplate(false) </try>
                                                                     <fail/>
                                                                    </new>
                                                                   <fail/>
                                                                  </NewExpression>
                                                                  <DeleteExpression>
                                                                   <try>name_), isTemplate(false) </try>
                                                                    <delete>
                                                                     <try>name_), isTemplate(false) </try>
                                                                     <fail/>
                                                                    </delete>
                                                                   <fail/>
                                                                  </DeleteExpression>
                                                                  <PostfixExpression>
                                                                   <try>name_), isTemplate(false) </try>
                                                                    <PrimaryExpression>
                                                                     <try>name_), isTemplate(false) </try>
                                                                      <Literal>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <FloatingLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <FractionalConstant>
                                                                           <try>name_), isTemplate(false) </try>
                                                                            <digit_sequence>
                                                                             <try>name_), isTemplate(false) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                            <digit_sequence>
                                                                             <try>name_), isTemplate(false) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                           <fail/>
                                                                          </FractionalConstant>
                                                                          <digit_sequence>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FloatingLiteral>
                                                                        <IntegerLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <HexadecimalLiteral>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </HexadecimalLiteral>
                                                                          <OctalLiteral>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </OctalLiteral>
                                                                          <DecimalLiteral>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </DecimalLiteral>
                                                                         <fail/>
                                                                        </IntegerLiteral>
                                                                        <CharacterLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </CharacterLiteral>
                                                                        <StringLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <EncodingPrefix>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                          <EncodingPrefix>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                         <fail/>
                                                                        </StringLiteral>
                                                                        <BooleanLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <true>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </true>
                                                                          <false>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </false>
                                                                         <fail/>
                                                                        </BooleanLiteral>
                                                                        <PointerLiteral>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <nullptr>
                                                                           <try>name_), isTemplate(false) </try>
                                                                           <fail/>
                                                                          </nullptr>
                                                                         <fail/>
                                                                        </PointerLiteral>
                                                                       <fail/>
                                                                      </Literal>
                                                                      <this>
                                                                       <try>name_), isTemplate(false) </try>
                                                                       <fail/>
                                                                      </this>
                                                                      <CppCastExpression>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <dynamic_cast>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </dynamic_cast>
                                                                        <static_cast>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </static_cast>
                                                                        <reinterpret_cast>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </reinterpret_cast>
                                                                        <const_cast>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </const_cast>
                                                                       <fail/>
                                                                      </CppCastExpression>
                                                                      <TypeIdExpression>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <typeid>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </typeid>
                                                                        <typeid>
                                                                         <try>name_), isTemplate(false) </try>
                                                                         <fail/>
                                                                        </typeid>
                                                                       <fail/>
                                                                      </TypeIdExpression>
                                                                      <IdExpression>
                                                                       <try>name_), isTemplate(false) </try>
                                                                        <QualifiedId>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <NestedNameSpecifier>
                                                                           <try>name_), isTemplate(false) </try>
                                                                            <IdNode>
                                                                             <try>name_), isTemplate(false) </try>
                                                                              <SimpleTemplateId>
                                                                               <try>name_), isTemplate(false) </try>
                                                                                <TemplateName>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                  <Identifier>
                                                                                   <try>name_), isTemplate(false) </try>
                                                                                    <identifier>
                                                                                     <try>name_), isTemplate(false) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                    <Keyword>
                                                                                     <try>name_), isTemplate(false) </try>
                                                                                      <identifier>
                                                                                       <try>name_), isTemplate(false) </try>
                                                                                       <success>name_</success>
                                                                                      </identifier>
                                                                                     <fail/>
                                                                                    </Keyword>
                                                                                   <success>name_</success>
                                                                                  </Identifier>
                                                                                 <success>name_</success>
                                                                                </TemplateName>
                                                                               <fail/>
                                                                              </SimpleTemplateId>
                                                                              <Identifier>
                                                                               <try>name_), isTemplate(false) </try>
                                                                                <identifier>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                 <success>name_</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                  <identifier>
                                                                                   <try>name_), isTemplate(false) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>name_</success>
                                                                              </Identifier>
                                                                             <success>name_</success>
                                                                            </IdNode>
                                                                           <fail/>
                                                                          </NestedNameSpecifier>
                                                                         <fail/>
                                                                        </QualifiedId>
                                                                        <UnqualifiedId>
                                                                         <try>name_), isTemplate(false) </try>
                                                                          <TemplateId>
                                                                           <try>name_), isTemplate(false) </try>
                                                                            <SimpleTemplateId>
                                                                             <try>name_), isTemplate(false) </try>
                                                                              <TemplateName>
                                                                               <try>name_), isTemplate(false) </try>
                                                                                <Identifier>
                                                                                 <try>name_), isTemplate(false) </try>
                                                                                  <identifier>
                                                                                   <try>name_), isTemplate(false) </try>
                                                                                   <success>name_</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>name_), isTemplate(false) </try>
                                                                                    <identifier>
                                                                                     <try>name_), isTemplate(false) </try>
                                                                                     <success>name_</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>name_</success>
                                                                                </Identifier>
                                                                               <success>name_</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                           <fail/>
                                                                          </TemplateId>
                                                                          <Identifier>
                                                                           <try>name_), isTemplate(false) </try>
                                                                            <identifier>
                                                                             <try>name_), isTemplate(false) </try>
                                                                             <success>name_</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>name_), isTemplate(false) </try>
                                                                              <identifier>
                                                                               <try>name_), isTemplate(false) </try>
                                                                               <success>name_</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>name_</success>
                                                                          </Identifier>
                                                                         <success>name_</success>
                                                                        </UnqualifiedId>
                                                                       <success>name_</success>
                                                                      </IdExpression>
                                                                     <success>name_</success>
                                                                    </PrimaryExpression>
                                                                   <success>name_</success>
                                                                  </PostfixExpression>
                                                                 <success>name_</success>
                                                                </UnaryExpression>
                                                               <success>name_</success>
                                                              </CastExpression>
                                                             <success>name_</success>
                                                            </PMExpression>
                                                           <success>name_</success>
                                                          </MultiplicativeExpression>
                                                         <success>name_</success>
                                                        </AdditiveExpression>
                                                       <success>name_</success>
                                                      </ShiftExpression>
                                                     <success>name_</success>
                                                    </RelationalExpression>
                                                   <success>name_</success>
                                                  </EqualityExpression>
                                                 <success>name_</success>
                                                </AndExpression>
                                               <success>name_</success>
                                              </ExclusiveOrExpression>
                                             <success>name_</success>
                                            </InclusiveOrExpression>
                                           <success>name_</success>
                                          </LogicalAndExpression>
                                         <success>name_</success>
                                        </LogicalOrExpression>
                                       <success>name_</success>
                                      </ConditionalExpression>
                                     <success>name_</success>
                                    </AssignmentExpression>
                                   <success>name_</success>
                                  </InitializerClause>
                                 <success>name_</success>
                                </InitializerList>
                               <success>name_</success>
                              </ExpressionList>
                             <success>TypeSpecifier(name_)</success>
                            </MemberInitializer>
                            <MemberInitializer>
                             <try>isTemplate(false) </try>
                              <MemberInitializerId>
                               <try>isTemplate(false) </try>
                                <QualifiedIdNode>
                                 <try>isTemplate(false) </try>
                                  <NestedNameSpecifier>
                                   <try>isTemplate(false) </try>
                                    <IdNode>
                                     <try>isTemplate(false) </try>
                                      <SimpleTemplateId>
                                       <try>isTemplate(false) </try>
                                        <TemplateName>
                                         <try>isTemplate(false) </try>
                                          <Identifier>
                                           <try>isTemplate(false) </try>
                                            <identifier>
                                             <try>isTemplate(false) </try>
                                             <success>isTemplate</success>
                                            </identifier>
                                            <Keyword>
                                             <try>isTemplate(false) </try>
                                              <identifier>
                                               <try>isTemplate(false) </try>
                                               <success>isTemplate</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>isTemplate</success>
                                          </Identifier>
                                         <success>isTemplate</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>isTemplate(false) </try>
                                        <identifier>
                                         <try>isTemplate(false) </try>
                                         <success>isTemplate</success>
                                        </identifier>
                                        <Keyword>
                                         <try>isTemplate(false) </try>
                                          <identifier>
                                           <try>isTemplate(false) </try>
                                           <success>isTemplate</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>isTemplate</success>
                                      </Identifier>
                                     <success>isTemplate</success>
                                    </IdNode>
                                   <fail/>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>isTemplate(false) </try>
                                    <SimpleTemplateId>
                                     <try>isTemplate(false) </try>
                                      <TemplateName>
                                       <try>isTemplate(false) </try>
                                        <Identifier>
                                         <try>isTemplate(false) </try>
                                          <identifier>
                                           <try>isTemplate(false) </try>
                                           <success>isTemplate</success>
                                          </identifier>
                                          <Keyword>
                                           <try>isTemplate(false) </try>
                                            <identifier>
                                             <try>isTemplate(false) </try>
                                             <success>isTemplate</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>isTemplate</success>
                                        </Identifier>
                                       <success>isTemplate</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>isTemplate(false) </try>
                                      <identifier>
                                       <try>isTemplate(false) </try>
                                       <success>isTemplate</success>
                                      </identifier>
                                      <Keyword>
                                       <try>isTemplate(false) </try>
                                        <identifier>
                                         <try>isTemplate(false) </try>
                                         <success>isTemplate</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>isTemplate</success>
                                    </Identifier>
                                   <success>isTemplate</success>
                                  </IdNode>
                                 <success>isTemplate</success>
                                </QualifiedIdNode>
                               <success>isTemplate</success>
                              </MemberInitializerId>
                              <ExpressionList>
                               <try>false) </try>
                                <InitializerList>
                                 <try>false) </try>
                                  <InitializerClause>
                                   <try>false) </try>
                                    <AssignmentExpression>
                                     <try>false) </try>
                                      <LogicalOrExpression>
                                       <try>false) </try>
                                        <LogicalAndExpression>
                                         <try>false) </try>
                                          <InclusiveOrExpression>
                                           <try>false) </try>
                                            <ExclusiveOrExpression>
                                             <try>false) </try>
                                              <AndExpression>
                                               <try>false) </try>
                                                <EqualityExpression>
                                                 <try>false) </try>
                                                  <RelationalExpression>
                                                   <try>false) </try>
                                                    <ShiftExpression>
                                                     <try>false) </try>
                                                      <AdditiveExpression>
                                                       <try>false) </try>
                                                        <MultiplicativeExpression>
                                                         <try>false) </try>
                                                          <PMExpression>
                                                           <try>false) </try>
                                                            <CastExpression>
                                                             <try>false) </try>
                                                              <UnaryExpression>
                                                               <try>false) </try>
                                                                <UnaryOperator>
                                                                 <try>false) </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>false) </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>false) </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>false) </try>
                                                                  <new>
                                                                   <try>false) </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>false) </try>
                                                                  <delete>
                                                                   <try>false) </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>false) </try>
                                                                  <PrimaryExpression>
                                                                   <try>false) </try>
                                                                    <Literal>
                                                                     <try>false) </try>
                                                                      <FloatingLiteral>
                                                                       <try>false) </try>
                                                                        <FractionalConstant>
                                                                         <try>false) </try>
                                                                          <digit_sequence>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>false) </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>false) </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>false) </try>
                                                                        <EncodingPrefix>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>false) </try>
                                                                        <true>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>false) </try>
                                                                          <identifier_chars>
                                                                           <try>) </try>
                                                                           <fail/>
                                                                          </identifier_chars>
                                                                         <success>false</success>
                                                                        </false>
                                                                       <success>false</success>
                                                                      </BooleanLiteral>
                                                                     <success>false</success>
                                                                    </Literal>
                                                                   <success>false</success>
                                                                  </PrimaryExpression>
                                                                 <success>false</success>
                                                                </PostfixExpression>
                                                               <success>false</success>
                                                              </UnaryExpression>
                                                             <success>false</success>
                                                            </CastExpression>
                                                           <success>false</success>
                                                          </PMExpression>
                                                         <success>false</success>
                                                        </MultiplicativeExpression>
                                                       <success>false</success>
                                                      </AdditiveExpression>
                                                     <success>false</success>
                                                    </ShiftExpression>
                                                   <success>false</success>
                                                  </RelationalExpression>
                                                 <success>false</success>
                                                </EqualityExpression>
                                               <success>false</success>
                                              </AndExpression>
                                             <success>false</success>
                                            </ExclusiveOrExpression>
                                           <success>false</success>
                                          </InclusiveOrExpression>
                                         <success>false</success>
                                        </LogicalAndExpression>
                                       <success>false</success>
                                      </LogicalOrExpression>
                                      <AssignmentOperator>
                                       <try>) </try>
                                       <fail/>
                                      </AssignmentOperator>
                                      <ConditionalExpression>
                                       <try>false) </try>
                                        <LogicalOrExpression>
                                         <try>false) </try>
                                          <LogicalAndExpression>
                                           <try>false) </try>
                                            <InclusiveOrExpression>
                                             <try>false) </try>
                                              <ExclusiveOrExpression>
                                               <try>false) </try>
                                                <AndExpression>
                                                 <try>false) </try>
                                                  <EqualityExpression>
                                                   <try>false) </try>
                                                    <RelationalExpression>
                                                     <try>false) </try>
                                                      <ShiftExpression>
                                                       <try>false) </try>
                                                        <AdditiveExpression>
                                                         <try>false) </try>
                                                          <MultiplicativeExpression>
                                                           <try>false) </try>
                                                            <PMExpression>
                                                             <try>false) </try>
                                                              <CastExpression>
                                                               <try>false) </try>
                                                                <UnaryExpression>
                                                                 <try>false) </try>
                                                                  <UnaryOperator>
                                                                   <try>false) </try>
                                                                   <fail/>
                                                                  </UnaryOperator>
                                                                  <sizeof>
                                                                   <try>false) </try>
                                                                   <fail/>
                                                                  </sizeof>
                                                                  <alignof>
                                                                   <try>false) </try>
                                                                   <fail/>
                                                                  </alignof>
                                                                  <NewExpression>
                                                                   <try>false) </try>
                                                                    <new>
                                                                     <try>false) </try>
                                                                     <fail/>
                                                                    </new>
                                                                   <fail/>
                                                                  </NewExpression>
                                                                  <DeleteExpression>
                                                                   <try>false) </try>
                                                                    <delete>
                                                                     <try>false) </try>
                                                                     <fail/>
                                                                    </delete>
                                                                   <fail/>
                                                                  </DeleteExpression>
                                                                  <PostfixExpression>
                                                                   <try>false) </try>
                                                                    <PrimaryExpression>
                                                                     <try>false) </try>
                                                                      <Literal>
                                                                       <try>false) </try>
                                                                        <FloatingLiteral>
                                                                         <try>false) </try>
                                                                          <FractionalConstant>
                                                                           <try>false) </try>
                                                                            <digit_sequence>
                                                                             <try>false) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                            <digit_sequence>
                                                                             <try>false) </try>
                                                                             <fail/>
                                                                            </digit_sequence>
                                                                           <fail/>
                                                                          </FractionalConstant>
                                                                          <digit_sequence>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FloatingLiteral>
                                                                        <IntegerLiteral>
                                                                         <try>false) </try>
                                                                          <HexadecimalLiteral>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </HexadecimalLiteral>
                                                                          <OctalLiteral>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </OctalLiteral>
                                                                          <DecimalLiteral>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </DecimalLiteral>
                                                                         <fail/>
                                                                        </IntegerLiteral>
                                                                        <CharacterLiteral>
                                                                         <try>false) </try>
                                                                         <fail/>
                                                                        </CharacterLiteral>
                                                                        <StringLiteral>
                                                                         <try>false) </try>
                                                                          <EncodingPrefix>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                          <EncodingPrefix>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </EncodingPrefix>
                                                                         <fail/>
                                                                        </StringLiteral>
                                                                        <BooleanLiteral>
                                                                         <try>false) </try>
                                                                          <true>
                                                                           <try>false) </try>
                                                                           <fail/>
                                                                          </true>
                                                                          <false>
                                                                           <try>false) </try>
                                                                            <identifier_chars>
                                                                             <try>) </try>
                                                                             <fail/>
                                                                            </identifier_chars>
                                                                           <success>false</success>
                                                                          </false>
                                                                         <success>false</success>
                                                                        </BooleanLiteral>
                                                                       <success>false</success>
                                                                      </Literal>
                                                                     <success>false</success>
                                                                    </PrimaryExpression>
                                                                   <success>false</success>
                                                                  </PostfixExpression>
                                                                 <success>false</success>
                                                                </UnaryExpression>
                                                               <success>false</success>
                                                              </CastExpression>
                                                             <success>false</success>
                                                            </PMExpression>
                                                           <success>false</success>
                                                          </MultiplicativeExpression>
                                                         <success>false</success>
                                                        </AdditiveExpression>
                                                       <success>false</success>
                                                      </ShiftExpression>
                                                     <success>false</success>
                                                    </RelationalExpression>
                                                   <success>false</success>
                                                  </EqualityExpression>
                                                 <success>false</success>
                                                </AndExpression>
                                               <success>false</success>
                                              </ExclusiveOrExpression>
                                             <success>false</success>
                                            </InclusiveOrExpression>
                                           <success>false</success>
                                          </LogicalAndExpression>
                                         <success>false</success>
                                        </LogicalOrExpression>
                                       <success>false</success>
                                      </ConditionalExpression>
                                     <success>false</success>
                                    </AssignmentExpression>
                                   <success>false</success>
                                  </InitializerClause>
                                 <success>false</success>
                                </InitializerList>
                               <success>false</success>
                              </ExpressionList>
                             <success>isTemplate(false)</success>
                            </MemberInitializer>
                           <success>TypeSpecifier(name_), isTemplate(false)</success>
                          </MemberInitializerList>
                         <success>: TypeSpecifier(name_), isTemplate(false)</success>
                        </CtorInitializer>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{\r\n}</success>
                          </CompoundStatement>
                         <success>{\r\n}</success>
                        </FunctionBody>
                       <success>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) \r\n{\r\n}</success>
                      </SpecialMemberFunctionDefinition>
                     <success>TypeName::TypeName(const std::u32string&amp; name_): TypeSpecifier(name_), isTemplate(false) \r\n{\r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                      <NamespaceDefinition>
                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                        <NamedNamespaceDefinition>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <namespace>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <namespace>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                        <SimpleDeclaration>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <DeclSpecifiers>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <DeclSpecifier>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <StorageClassSpecifier>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <register>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <inline>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <PrefixTypeExpr>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <CVSpecifierSequence>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <CVSpecifier>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                  <const>
                                   <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <PrimaryTypeExpr>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                  <SimpleType>
                                   <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                    <SimpleTypeSpecifier>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                      <char>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                        <identifier_chars>
                                         <try> TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                         <fail/>
                                        </identifier_chars>
                                       <success>void</success>
                                      </void>
                                     <success>void</success>
                                    </SimpleTypeSpecifier>
                                    <SimpleTypeSpecifier>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                      <char>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <success>void</success>
                                  </SimpleType>
                                 <success>void</success>
                                </PrimaryTypeExpr>
                               <success>void </success>
                              </PostfixTypeExpr>
                             <success>void </success>
                            </PrefixTypeExpr>
                           <success>void </success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <Declarator>
                             <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <IdExpression>
                               <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <QualifiedId>
                                 <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                  <NestedNameSpecifier>
                                   <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                    <IdNode>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                      <SimpleTemplateId>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                        <TemplateName>
                                         <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                          <Identifier>
                                           <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                            <identifier>
                                             <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                             <success>TypeName</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                              <identifier>
                                               <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                               <success>TypeName</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeName</success>
                                          </Identifier>
                                         <success>TypeName</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                        <identifier>
                                         <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                          <identifier>
                                           <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                      <SimpleTemplateId>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                        <TemplateName>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                          <Identifier>
                                           <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                            <identifier>
                                             <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                             <success>AddTemplateArgument</success>
                                            </identifier>
                                            <Keyword>
                                             <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                              <identifier>
                                               <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                               <success>AddTemplateArgument</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>AddTemplateArgument</success>
                                          </Identifier>
                                         <success>AddTemplateArgument</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                        <identifier>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                         <success>AddTemplateArgument</success>
                                        </identifier>
                                        <Keyword>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                          <identifier>
                                           <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                           <success>AddTemplateArgument</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>AddTemplateArgument</success>
                                      </Identifier>
                                     <success>AddTemplateArgument</success>
                                    </IdNode>
                                   <success>TypeName::</success>
                                  </NestedNameSpecifier>
                                  <UnqualifiedId>
                                   <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                    <TemplateId>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                      <SimpleTemplateId>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                        <TemplateName>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                          <Identifier>
                                           <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                            <identifier>
                                             <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                             <success>AddTemplateArgument</success>
                                            </identifier>
                                            <Keyword>
                                             <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                              <identifier>
                                               <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                               <success>AddTemplateArgument</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>AddTemplateArgument</success>
                                          </Identifier>
                                         <success>AddTemplateArgument</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                      <identifier>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                       <success>AddTemplateArgument</success>
                                      </identifier>
                                      <Keyword>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                        <identifier>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                         <success>AddTemplateArgument</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>AddTemplateArgument</success>
                                    </Identifier>
                                   <success>AddTemplateArgument</success>
                                  </UnqualifiedId>
                                 <success>TypeName::AddTemplateArgument</success>
                                </QualifiedId>
                               <success>TypeName::AddTemplateArgument</success>
                              </IdExpression>
                              <ParameterList>
                               <try>(CppObject* templateArgument) </try>
                                <ParameterDeclaration>
                                 <try>CppObject* templateArgument) </try>
                                  <TypeExpr>
                                   <try>CppObject* templateArgument) </try>
                                    <PrefixTypeExpr>
                                     <try>CppObject* templateArgument) </try>
                                      <CVSpecifierSequence>
                                       <try>CppObject* templateArgument) </try>
                                        <CVSpecifier>
                                         <try>CppObject* templateArgument) </try>
                                          <const>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </const>
                                          <volatile>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </volatile>
                                         <fail/>
                                        </CVSpecifier>
                                       <success></success>
                                      </CVSpecifierSequence>
                                      <PostfixTypeExpr>
                                       <try>CppObject* templateArgument) </try>
                                        <PrimaryTypeExpr>
                                         <try>CppObject* templateArgument) </try>
                                          <SimpleType>
                                           <try>CppObject* templateArgument) </try>
                                            <SimpleTypeSpecifier>
                                             <try>CppObject* templateArgument) </try>
                                              <char>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </char>
                                              <char16_t>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </char16_t>
                                              <char32_t>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </char32_t>
                                              <wchar_t>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </wchar_t>
                                              <bool>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </bool>
                                              <short>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </short>
                                              <int>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </int>
                                              <long>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </long>
                                              <signed>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </signed>
                                              <unsigned>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </unsigned>
                                              <float>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </float>
                                              <double>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </double>
                                              <void>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </void>
                                              <auto>
                                               <try>CppObject* templateArgument) </try>
                                               <fail/>
                                              </auto>
                                             <fail/>
                                            </SimpleTypeSpecifier>
                                           <fail/>
                                          </SimpleType>
                                          <typename>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </typename>
                                          <ClassKey>
                                           <try>CppObject* templateArgument) </try>
                                            <class>
                                             <try>CppObject* templateArgument) </try>
                                             <fail/>
                                            </class>
                                            <struct>
                                             <try>CppObject* templateArgument) </try>
                                             <fail/>
                                            </struct>
                                            <union>
                                             <try>CppObject* templateArgument) </try>
                                             <fail/>
                                            </union>
                                           <fail/>
                                          </ClassKey>
                                          <QualifiedIdNode>
                                           <try>CppObject* templateArgument) </try>
                                            <NestedNameSpecifier>
                                             <try>CppObject* templateArgument) </try>
                                              <IdNode>
                                               <try>CppObject* templateArgument) </try>
                                                <SimpleTemplateId>
                                                 <try>CppObject* templateArgument) </try>
                                                  <TemplateName>
                                                   <try>CppObject* templateArgument) </try>
                                                    <Identifier>
                                                     <try>CppObject* templateArgument) </try>
                                                      <identifier>
                                                       <try>CppObject* templateArgument) </try>
                                                       <success>CppObject</success>
                                                      </identifier>
                                                      <Keyword>
                                                       <try>CppObject* templateArgument) </try>
                                                        <identifier>
                                                         <try>CppObject* templateArgument) </try>
                                                         <success>CppObject</success>
                                                        </identifier>
                                                       <fail/>
                                                      </Keyword>
                                                     <success>CppObject</success>
                                                    </Identifier>
                                                   <success>CppObject</success>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>CppObject* templateArgument) </try>
                                                  <identifier>
                                                   <try>CppObject* templateArgument) </try>
                                                   <success>CppObject</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>CppObject* templateArgument) </try>
                                                    <identifier>
                                                     <try>CppObject* templateArgument) </try>
                                                     <success>CppObject</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>CppObject</success>
                                                </Identifier>
                                               <success>CppObject</success>
                                              </IdNode>
                                             <fail/>
                                            </NestedNameSpecifier>
                                            <IdNode>
                                             <try>CppObject* templateArgument) </try>
                                              <SimpleTemplateId>
                                               <try>CppObject* templateArgument) </try>
                                                <TemplateName>
                                                 <try>CppObject* templateArgument) </try>
                                                  <Identifier>
                                                   <try>CppObject* templateArgument) </try>
                                                    <identifier>
                                                     <try>CppObject* templateArgument) </try>
                                                     <success>CppObject</success>
                                                    </identifier>
                                                    <Keyword>
                                                     <try>CppObject* templateArgument) </try>
                                                      <identifier>
                                                       <try>CppObject* templateArgument) </try>
                                                       <success>CppObject</success>
                                                      </identifier>
                                                     <fail/>
                                                    </Keyword>
                                                   <success>CppObject</success>
                                                  </Identifier>
                                                 <success>CppObject</success>
                                                </TemplateName>
                                               <fail/>
                                              </SimpleTemplateId>
                                              <Identifier>
                                               <try>CppObject* templateArgument) </try>
                                                <identifier>
                                                 <try>CppObject* templateArgument) </try>
                                                 <success>CppObject</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>CppObject* templateArgument) </try>
                                                  <identifier>
                                                   <try>CppObject* templateArgument) </try>
                                                   <success>CppObject</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>CppObject</success>
                                              </Identifier>
                                             <success>CppObject</success>
                                            </IdNode>
                                           <success>CppObject</success>
                                          </QualifiedIdNode>
                                         <success>CppObject</success>
                                        </PrimaryTypeExpr>
                                       <success>CppObject*</success>
                                      </PostfixTypeExpr>
                                     <success>CppObject*</success>
                                    </PrefixTypeExpr>
                                   <success>CppObject*</success>
                                  </TypeExpr>
                                  <Declarator>
                                   <try>templateArgument) </try>
                                    <IdExpression>
                                     <try>templateArgument) </try>
                                      <QualifiedId>
                                       <try>templateArgument) </try>
                                        <NestedNameSpecifier>
                                         <try>templateArgument) </try>
                                          <IdNode>
                                           <try>templateArgument) </try>
                                            <SimpleTemplateId>
                                             <try>templateArgument) </try>
                                              <TemplateName>
                                               <try>templateArgument) </try>
                                                <Identifier>
                                                 <try>templateArgument) </try>
                                                  <identifier>
                                                   <try>templateArgument) </try>
                                                   <success>templateArgument</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>templateArgument) </try>
                                                    <identifier>
                                                     <try>templateArgument) </try>
                                                     <success>templateArgument</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>templateArgument</success>
                                                </Identifier>
                                               <success>templateArgument</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>templateArgument) </try>
                                              <identifier>
                                               <try>templateArgument) </try>
                                               <success>templateArgument</success>
                                              </identifier>
                                              <Keyword>
                                               <try>templateArgument) </try>
                                                <identifier>
                                                 <try>templateArgument) </try>
                                                 <success>templateArgument</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>templateArgument</success>
                                            </Identifier>
                                           <success>templateArgument</success>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                       <fail/>
                                      </QualifiedId>
                                      <UnqualifiedId>
                                       <try>templateArgument) </try>
                                        <TemplateId>
                                         <try>templateArgument) </try>
                                          <SimpleTemplateId>
                                           <try>templateArgument) </try>
                                            <TemplateName>
                                             <try>templateArgument) </try>
                                              <Identifier>
                                               <try>templateArgument) </try>
                                                <identifier>
                                                 <try>templateArgument) </try>
                                                 <success>templateArgument</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>templateArgument) </try>
                                                  <identifier>
                                                   <try>templateArgument) </try>
                                                   <success>templateArgument</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>templateArgument</success>
                                              </Identifier>
                                             <success>templateArgument</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                         <fail/>
                                        </TemplateId>
                                        <Identifier>
                                         <try>templateArgument) </try>
                                          <identifier>
                                           <try>templateArgument) </try>
                                           <success>templateArgument</success>
                                          </identifier>
                                          <Keyword>
                                           <try>templateArgument) </try>
                                            <identifier>
                                             <try>templateArgument) </try>
                                             <success>templateArgument</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>templateArgument</success>
                                        </Identifier>
                                       <success>templateArgument</success>
                                      </UnqualifiedId>
                                     <success>templateArgument</success>
                                    </IdExpression>
                                    <ParameterList>
                                     <try>) </try>
                                     <fail/>
                                    </ParameterList>
                                   <success>templateArgument</success>
                                  </Declarator>
                                 <success>CppObject* templateArgument</success>
                                </ParameterDeclaration>
                               <success>(CppObject* templateArgument)</success>
                              </ParameterList>
                              <CVSpecifierSequence>
                               <try>{ </try>
                                <CVSpecifier>
                                 <try>{ </try>
                                  <const>
                                   <try>{ </try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>{ </try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                             <success>TypeName::AddTemplateArgument(CppObject* templateArgument) \r\n</success>
                            </Declarator>
                            <Initializer>
                             <try>{ </try>
                              <BracedInitializerList>
                               <try>{ </try>
                                <InitializerClause>
                                 <try>Own(templateArgument);</try>
                                  <AssignmentExpression>
                                   <try>Own(templateArgument);</try>
                                    <LogicalOrExpression>
                                     <try>Own(templateArgument);</try>
                                      <LogicalAndExpression>
                                       <try>Own(templateArgument);</try>
                                        <InclusiveOrExpression>
                                         <try>Own(templateArgument);</try>
                                          <ExclusiveOrExpression>
                                           <try>Own(templateArgument);</try>
                                            <AndExpression>
                                             <try>Own(templateArgument);</try>
                                              <EqualityExpression>
                                               <try>Own(templateArgument);</try>
                                                <RelationalExpression>
                                                 <try>Own(templateArgument);</try>
                                                  <ShiftExpression>
                                                   <try>Own(templateArgument);</try>
                                                    <AdditiveExpression>
                                                     <try>Own(templateArgument);</try>
                                                      <MultiplicativeExpression>
                                                       <try>Own(templateArgument);</try>
                                                        <PMExpression>
                                                         <try>Own(templateArgument);</try>
                                                          <CastExpression>
                                                           <try>Own(templateArgument);</try>
                                                            <UnaryExpression>
                                                             <try>Own(templateArgument);</try>
                                                              <UnaryOperator>
                                                               <try>Own(templateArgument);</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>Own(templateArgument);</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>Own(templateArgument);</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <new>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <delete>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <PrimaryExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <Literal>
                                                                   <try>Own(templateArgument);</try>
                                                                    <FloatingLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <FractionalConstant>
                                                                       <try>Own(templateArgument);</try>
                                                                        <digit_sequence>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <EncodingPrefix>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <true>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <nullptr>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>Own(templateArgument);</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <dynamic_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <typeid>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <QualifiedId>
                                                                     <try>Own(templateArgument);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>Own(templateArgument);</try>
                                                                        <IdNode>
                                                                         <try>Own(templateArgument);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Own(templateArgument);</try>
                                                                            <TemplateName>
                                                                             <try>Own(templateArgument);</try>
                                                                              <Identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Own(templateArgument);</try>
                                                                                  <identifier>
                                                                                   <try>Own(templateArgument);</try>
                                                                                   <success>Own</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Own</success>
                                                                              </Identifier>
                                                                             <success>Own</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>Own(templateArgument);</try>
                                                                            <identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                             <success>Own</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Own(templateArgument);</try>
                                                                              <identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                               <success>Own</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Own</success>
                                                                          </Identifier>
                                                                         <success>Own</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>Own(templateArgument);</try>
                                                                      <TemplateId>
                                                                       <try>Own(templateArgument);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Own(templateArgument);</try>
                                                                          <TemplateName>
                                                                           <try>Own(templateArgument);</try>
                                                                            <Identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                              <identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                               <success>Own</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Own</success>
                                                                            </Identifier>
                                                                           <success>Own</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>Own(templateArgument);</try>
                                                                        <identifier>
                                                                         <try>Own(templateArgument);</try>
                                                                         <success>Own</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>Own(templateArgument);</try>
                                                                          <identifier>
                                                                           <try>Own(templateArgument);</try>
                                                                           <success>Own</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>Own</success>
                                                                      </Identifier>
                                                                     <success>Own</success>
                                                                    </UnqualifiedId>
                                                                   <success>Own</success>
                                                                  </IdExpression>
                                                                 <success>Own</success>
                                                                </PrimaryExpression>
                                                                <ExpressionList>
                                                                 <try>templateArgument);</try>
                                                                  <InitializerList>
                                                                   <try>templateArgument);</try>
                                                                    <InitializerClause>
                                                                     <try>templateArgument);</try>
                                                                      <AssignmentExpression>
                                                                       <try>templateArgument);</try>
                                                                        <LogicalOrExpression>
                                                                         <try>templateArgument);</try>
                                                                          <LogicalAndExpression>
                                                                           <try>templateArgument);</try>
                                                                            <InclusiveOrExpression>
                                                                             <try>templateArgument);</try>
                                                                              <ExclusiveOrExpression>
                                                                               <try>templateArgument);</try>
                                                                                <AndExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <EqualityExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <RelationalExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <ShiftExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <AdditiveExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <MultiplicativeExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <PMExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <CastExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <UnaryExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <UnaryOperator>
                                                                                                   <try>templateArgument);</try>
                                                                                                   <fail/>
                                                                                                  </UnaryOperator>
                                                                                                  <sizeof>
                                                                                                   <try>templateArgument);</try>
                                                                                                   <fail/>
                                                                                                  </sizeof>
                                                                                                  <alignof>
                                                                                                   <try>templateArgument);</try>
                                                                                                   <fail/>
                                                                                                  </alignof>
                                                                                                  <NewExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <new>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </new>
                                                                                                   <fail/>
                                                                                                  </NewExpression>
                                                                                                  <DeleteExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <delete>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </delete>
                                                                                                   <fail/>
                                                                                                  </DeleteExpression>
                                                                                                  <PostfixExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <PrimaryExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <Literal>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <FloatingLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <FractionalConstant>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FractionalConstant>
                                                                                                          <digit_sequence>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </digit_sequence>
                                                                                                         <fail/>
                                                                                                        </FloatingLiteral>
                                                                                                        <IntegerLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <HexadecimalLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </HexadecimalLiteral>
                                                                                                          <OctalLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </OctalLiteral>
                                                                                                          <DecimalLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </DecimalLiteral>
                                                                                                         <fail/>
                                                                                                        </IntegerLiteral>
                                                                                                        <CharacterLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </CharacterLiteral>
                                                                                                        <StringLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <EncodingPrefix>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </EncodingPrefix>
                                                                                                          <EncodingPrefix>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </EncodingPrefix>
                                                                                                         <fail/>
                                                                                                        </StringLiteral>
                                                                                                        <BooleanLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <true>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </true>
                                                                                                          <false>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </false>
                                                                                                         <fail/>
                                                                                                        </BooleanLiteral>
                                                                                                        <PointerLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <nullptr>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </nullptr>
                                                                                                         <fail/>
                                                                                                        </PointerLiteral>
                                                                                                       <fail/>
                                                                                                      </Literal>
                                                                                                      <this>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </this>
                                                                                                      <CppCastExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <dynamic_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </dynamic_cast>
                                                                                                        <static_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </static_cast>
                                                                                                        <reinterpret_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </reinterpret_cast>
                                                                                                        <const_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </const_cast>
                                                                                                       <fail/>
                                                                                                      </CppCastExpression>
                                                                                                      <TypeIdExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <typeid>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </typeid>
                                                                                                        <typeid>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </typeid>
                                                                                                       <fail/>
                                                                                                      </TypeIdExpression>
                                                                                                      <IdExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <QualifiedId>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <NestedNameSpecifier>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <IdNode>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                              <Identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                                <Keyword>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                 <fail/>
                                                                                                                </Keyword>
                                                                                                               <success>templateArgument</success>
                                                                                                              </Identifier>
                                                                                                             <success>templateArgument</success>
                                                                                                            </IdNode>
                                                                                                           <fail/>
                                                                                                          </NestedNameSpecifier>
                                                                                                         <fail/>
                                                                                                        </QualifiedId>
                                                                                                        <UnqualifiedId>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <TemplateId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <SimpleTemplateId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <TemplateName>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </TemplateName>
                                                                                                             <fail/>
                                                                                                            </SimpleTemplateId>
                                                                                                           <fail/>
                                                                                                          </TemplateId>
                                                                                                          <Identifier>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <identifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <success>templateArgument</success>
                                                                                                            </identifier>
                                                                                                            <Keyword>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                             <fail/>
                                                                                                            </Keyword>
                                                                                                           <success>templateArgument</success>
                                                                                                          </Identifier>
                                                                                                         <success>templateArgument</success>
                                                                                                        </UnqualifiedId>
                                                                                                       <success>templateArgument</success>
                                                                                                      </IdExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PrimaryExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </PostfixExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </UnaryExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </CastExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </PMExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </MultiplicativeExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </AdditiveExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </ShiftExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </RelationalExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </EqualityExpression>
                                                                                 <success>templateArgument</success>
                                                                                </AndExpression>
                                                                               <success>templateArgument</success>
                                                                              </ExclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </InclusiveOrExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalAndExpression>
                                                                         <success>templateArgument</success>
                                                                        </LogicalOrExpression>
                                                                        <AssignmentOperator>
                                                                         <try>);</try>
                                                                         <fail/>
                                                                        </AssignmentOperator>
                                                                        <ConditionalExpression>
                                                                         <try>templateArgument);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>templateArgument);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>templateArgument);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>templateArgument);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <AndExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <PMExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <CastExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </UnaryOperator>
                                                                                                    <sizeof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </sizeof>
                                                                                                    <alignof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </alignof>
                                                                                                    <NewExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <new>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </new>
                                                                                                     <fail/>
                                                                                                    </NewExpression>
                                                                                                    <DeleteExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <delete>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </delete>
                                                                                                     <fail/>
                                                                                                    </DeleteExpression>
                                                                                                    <PostfixExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <PrimaryExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <Literal>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <FloatingLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <FractionalConstant>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FractionalConstant>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FloatingLiteral>
                                                                                                          <IntegerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <HexadecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </HexadecimalLiteral>
                                                                                                            <OctalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </OctalLiteral>
                                                                                                            <DecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </DecimalLiteral>
                                                                                                           <fail/>
                                                                                                          </IntegerLiteral>
                                                                                                          <CharacterLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </CharacterLiteral>
                                                                                                          <StringLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                           <fail/>
                                                                                                          </StringLiteral>
                                                                                                          <BooleanLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <true>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </true>
                                                                                                            <false>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </false>
                                                                                                           <fail/>
                                                                                                          </BooleanLiteral>
                                                                                                          <PointerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <nullptr>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </nullptr>
                                                                                                           <fail/>
                                                                                                          </PointerLiteral>
                                                                                                         <fail/>
                                                                                                        </Literal>
                                                                                                        <this>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </this>
                                                                                                        <CppCastExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <dynamic_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </dynamic_cast>
                                                                                                          <static_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </static_cast>
                                                                                                          <reinterpret_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </reinterpret_cast>
                                                                                                          <const_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </const_cast>
                                                                                                         <fail/>
                                                                                                        </CppCastExpression>
                                                                                                        <TypeIdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                         <fail/>
                                                                                                        </TypeIdExpression>
                                                                                                        <IdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <QualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <NestedNameSpecifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <IdNode>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </IdNode>
                                                                                                             <fail/>
                                                                                                            </NestedNameSpecifier>
                                                                                                           <fail/>
                                                                                                          </QualifiedId>
                                                                                                          <UnqualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <TemplateId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                             <fail/>
                                                                                                            </TemplateId>
                                                                                                            <Identifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                              <Keyword>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                               <fail/>
                                                                                                              </Keyword>
                                                                                                             <success>templateArgument</success>
                                                                                                            </Identifier>
                                                                                                           <success>templateArgument</success>
                                                                                                          </UnqualifiedId>
                                                                                                         <success>templateArgument</success>
                                                                                                        </IdExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PrimaryExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PostfixExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </CastExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </PMExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </ShiftExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </RelationalExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </EqualityExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </AndExpression>
                                                                                 <success>templateArgument</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalAndExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalOrExpression>
                                                                         <success>templateArgument</success>
                                                                        </ConditionalExpression>
                                                                       <success>templateArgument</success>
                                                                      </AssignmentExpression>
                                                                     <success>templateArgument</success>
                                                                    </InitializerClause>
                                                                   <success>templateArgument</success>
                                                                  </InitializerList>
                                                                 <success>templateArgument</success>
                                                                </ExpressionList>
                                                               <success>Own(templateArgument)</success>
                                                              </PostfixExpression>
                                                             <success>Own(templateArgument)</success>
                                                            </UnaryExpression>
                                                           <success>Own(templateArgument)</success>
                                                          </CastExpression>
                                                         <success>Own(templateArgument)</success>
                                                        </PMExpression>
                                                       <success>Own(templateArgument)</success>
                                                      </MultiplicativeExpression>
                                                     <success>Own(templateArgument)</success>
                                                    </AdditiveExpression>
                                                   <success>Own(templateArgument)</success>
                                                  </ShiftExpression>
                                                 <success>Own(templateArgument)</success>
                                                </RelationalExpression>
                                               <success>Own(templateArgument)</success>
                                              </EqualityExpression>
                                             <success>Own(templateArgument)</success>
                                            </AndExpression>
                                           <success>Own(templateArgument)</success>
                                          </ExclusiveOrExpression>
                                         <success>Own(templateArgument)</success>
                                        </InclusiveOrExpression>
                                       <success>Own(templateArgument)</success>
                                      </LogicalAndExpression>
                                     <success>Own(templateArgument)</success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>;</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>Own(templateArgument);</try>
                                      <LogicalOrExpression>
                                       <try>Own(templateArgument);</try>
                                        <LogicalAndExpression>
                                         <try>Own(templateArgument);</try>
                                          <InclusiveOrExpression>
                                           <try>Own(templateArgument);</try>
                                            <ExclusiveOrExpression>
                                             <try>Own(templateArgument);</try>
                                              <AndExpression>
                                               <try>Own(templateArgument);</try>
                                                <EqualityExpression>
                                                 <try>Own(templateArgument);</try>
                                                  <RelationalExpression>
                                                   <try>Own(templateArgument);</try>
                                                    <ShiftExpression>
                                                     <try>Own(templateArgument);</try>
                                                      <AdditiveExpression>
                                                       <try>Own(templateArgument);</try>
                                                        <MultiplicativeExpression>
                                                         <try>Own(templateArgument);</try>
                                                          <PMExpression>
                                                           <try>Own(templateArgument);</try>
                                                            <CastExpression>
                                                             <try>Own(templateArgument);</try>
                                                              <UnaryExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <UnaryOperator>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <new>
                                                                   <try>Own(templateArgument);</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <delete>
                                                                   <try>Own(templateArgument);</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <PrimaryExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <Literal>
                                                                     <try>Own(templateArgument);</try>
                                                                      <FloatingLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <FractionalConstant>
                                                                         <try>Own(templateArgument);</try>
                                                                          <digit_sequence>
                                                                           <try>Own(templateArgument);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>Own(templateArgument);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <EncodingPrefix>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <true>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <nullptr>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>Own(templateArgument);</try>
                                                                      <dynamic_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>Own(templateArgument);</try>
                                                                      <typeid>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>Own(templateArgument);</try>
                                                                      <QualifiedId>
                                                                       <try>Own(templateArgument);</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>Own(templateArgument);</try>
                                                                          <IdNode>
                                                                           <try>Own(templateArgument);</try>
                                                                            <SimpleTemplateId>
                                                                             <try>Own(templateArgument);</try>
                                                                              <TemplateName>
                                                                               <try>Own(templateArgument);</try>
                                                                                <Identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                  <identifier>
                                                                                   <try>Own(templateArgument);</try>
                                                                                   <success>Own</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>Own(templateArgument);</try>
                                                                                    <identifier>
                                                                                     <try>Own(templateArgument);</try>
                                                                                     <success>Own</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>Own</success>
                                                                                </Identifier>
                                                                               <success>Own</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                              <identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                               <success>Own</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Own</success>
                                                                            </Identifier>
                                                                           <success>Own</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>Own(templateArgument);</try>
                                                                        <TemplateId>
                                                                         <try>Own(templateArgument);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Own(templateArgument);</try>
                                                                            <TemplateName>
                                                                             <try>Own(templateArgument);</try>
                                                                              <Identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Own(templateArgument);</try>
                                                                                  <identifier>
                                                                                   <try>Own(templateArgument);</try>
                                                                                   <success>Own</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Own</success>
                                                                              </Identifier>
                                                                             <success>Own</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>Own(templateArgument);</try>
                                                                          <identifier>
                                                                           <try>Own(templateArgument);</try>
                                                                           <success>Own</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>Own(templateArgument);</try>
                                                                            <identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                             <success>Own</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>Own</success>
                                                                        </Identifier>
                                                                       <success>Own</success>
                                                                      </UnqualifiedId>
                                                                     <success>Own</success>
                                                                    </IdExpression>
                                                                   <success>Own</success>
                                                                  </PrimaryExpression>
                                                                  <ExpressionList>
                                                                   <try>templateArgument);</try>
                                                                    <InitializerList>
                                                                     <try>templateArgument);</try>
                                                                      <InitializerClause>
                                                                       <try>templateArgument);</try>
                                                                        <AssignmentExpression>
                                                                         <try>templateArgument);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>templateArgument);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>templateArgument);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>templateArgument);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <AndExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <PMExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <CastExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </UnaryOperator>
                                                                                                    <sizeof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </sizeof>
                                                                                                    <alignof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </alignof>
                                                                                                    <NewExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <new>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </new>
                                                                                                     <fail/>
                                                                                                    </NewExpression>
                                                                                                    <DeleteExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <delete>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </delete>
                                                                                                     <fail/>
                                                                                                    </DeleteExpression>
                                                                                                    <PostfixExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <PrimaryExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <Literal>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <FloatingLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <FractionalConstant>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FractionalConstant>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FloatingLiteral>
                                                                                                          <IntegerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <HexadecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </HexadecimalLiteral>
                                                                                                            <OctalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </OctalLiteral>
                                                                                                            <DecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </DecimalLiteral>
                                                                                                           <fail/>
                                                                                                          </IntegerLiteral>
                                                                                                          <CharacterLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </CharacterLiteral>
                                                                                                          <StringLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                           <fail/>
                                                                                                          </StringLiteral>
                                                                                                          <BooleanLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <true>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </true>
                                                                                                            <false>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </false>
                                                                                                           <fail/>
                                                                                                          </BooleanLiteral>
                                                                                                          <PointerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <nullptr>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </nullptr>
                                                                                                           <fail/>
                                                                                                          </PointerLiteral>
                                                                                                         <fail/>
                                                                                                        </Literal>
                                                                                                        <this>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </this>
                                                                                                        <CppCastExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <dynamic_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </dynamic_cast>
                                                                                                          <static_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </static_cast>
                                                                                                          <reinterpret_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </reinterpret_cast>
                                                                                                          <const_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </const_cast>
                                                                                                         <fail/>
                                                                                                        </CppCastExpression>
                                                                                                        <TypeIdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                         <fail/>
                                                                                                        </TypeIdExpression>
                                                                                                        <IdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <QualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <NestedNameSpecifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <IdNode>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </IdNode>
                                                                                                             <fail/>
                                                                                                            </NestedNameSpecifier>
                                                                                                           <fail/>
                                                                                                          </QualifiedId>
                                                                                                          <UnqualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <TemplateId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                             <fail/>
                                                                                                            </TemplateId>
                                                                                                            <Identifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                              <Keyword>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                               <fail/>
                                                                                                              </Keyword>
                                                                                                             <success>templateArgument</success>
                                                                                                            </Identifier>
                                                                                                           <success>templateArgument</success>
                                                                                                          </UnqualifiedId>
                                                                                                         <success>templateArgument</success>
                                                                                                        </IdExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PrimaryExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PostfixExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </CastExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </PMExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </ShiftExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </RelationalExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </EqualityExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </AndExpression>
                                                                                 <success>templateArgument</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalAndExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalOrExpression>
                                                                          <AssignmentOperator>
                                                                           <try>);</try>
                                                                           <fail/>
                                                                          </AssignmentOperator>
                                                                          <ConditionalExpression>
                                                                           <try>templateArgument);</try>
                                                                            <LogicalOrExpression>
                                                                             <try>templateArgument);</try>
                                                                              <LogicalAndExpression>
                                                                               <try>templateArgument);</try>
                                                                                <InclusiveOrExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <ExclusiveOrExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <AndExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <EqualityExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <RelationalExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <ShiftExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <AdditiveExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <MultiplicativeExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <PMExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <CastExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </UnaryOperator>
                                                                                                      <sizeof>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </sizeof>
                                                                                                      <alignof>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </alignof>
                                                                                                      <NewExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <new>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </new>
                                                                                                       <fail/>
                                                                                                      </NewExpression>
                                                                                                      <DeleteExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <delete>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </delete>
                                                                                                       <fail/>
                                                                                                      </DeleteExpression>
                                                                                                      <PostfixExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <PrimaryExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <Literal>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <FloatingLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <FractionalConstant>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <digit_sequence>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                                <digit_sequence>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FractionalConstant>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FloatingLiteral>
                                                                                                            <IntegerLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <HexadecimalLiteral>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </HexadecimalLiteral>
                                                                                                              <OctalLiteral>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </OctalLiteral>
                                                                                                              <DecimalLiteral>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </DecimalLiteral>
                                                                                                             <fail/>
                                                                                                            </IntegerLiteral>
                                                                                                            <CharacterLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </CharacterLiteral>
                                                                                                            <StringLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                             <fail/>
                                                                                                            </StringLiteral>
                                                                                                            <BooleanLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <true>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </true>
                                                                                                              <false>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </false>
                                                                                                             <fail/>
                                                                                                            </BooleanLiteral>
                                                                                                            <PointerLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <nullptr>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </nullptr>
                                                                                                             <fail/>
                                                                                                            </PointerLiteral>
                                                                                                           <fail/>
                                                                                                          </Literal>
                                                                                                          <this>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </this>
                                                                                                          <CppCastExpression>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <dynamic_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </dynamic_cast>
                                                                                                            <static_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </static_cast>
                                                                                                            <reinterpret_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </reinterpret_cast>
                                                                                                            <const_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </const_cast>
                                                                                                           <fail/>
                                                                                                          </CppCastExpression>
                                                                                                          <TypeIdExpression>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <typeid>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </typeid>
                                                                                                            <typeid>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </typeid>
                                                                                                           <fail/>
                                                                                                          </TypeIdExpression>
                                                                                                          <IdExpression>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <QualifiedId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <NestedNameSpecifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <IdNode>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <SimpleTemplateId>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <TemplateName>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <Identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                        <Keyword>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                          <identifier>
                                                                                                                           <try>templateArgument);</try>
                                                                                                                           <success>templateArgument</success>
                                                                                                                          </identifier>
                                                                                                                         <fail/>
                                                                                                                        </Keyword>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </Identifier>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </TemplateName>
                                                                                                                   <fail/>
                                                                                                                  </SimpleTemplateId>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </IdNode>
                                                                                                               <fail/>
                                                                                                              </NestedNameSpecifier>
                                                                                                             <fail/>
                                                                                                            </QualifiedId>
                                                                                                            <UnqualifiedId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <TemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                               <fail/>
                                                                                                              </TemplateId>
                                                                                                              <Identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                                <Keyword>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                 <fail/>
                                                                                                                </Keyword>
                                                                                                               <success>templateArgument</success>
                                                                                                              </Identifier>
                                                                                                             <success>templateArgument</success>
                                                                                                            </UnqualifiedId>
                                                                                                           <success>templateArgument</success>
                                                                                                          </IdExpression>
                                                                                                         <success>templateArgument</success>
                                                                                                        </PrimaryExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PostfixExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </CastExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </PMExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </MultiplicativeExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </AdditiveExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </ShiftExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </RelationalExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </EqualityExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </AndExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </ExclusiveOrExpression>
                                                                                 <success>templateArgument</success>
                                                                                </InclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </LogicalAndExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalOrExpression>
                                                                           <success>templateArgument</success>
                                                                          </ConditionalExpression>
                                                                         <success>templateArgument</success>
                                                                        </AssignmentExpression>
                                                                       <success>templateArgument</success>
                                                                      </InitializerClause>
                                                                     <success>templateArgument</success>
                                                                    </InitializerList>
                                                                   <success>templateArgument</success>
                                                                  </ExpressionList>
                                                                 <success>Own(templateArgument)</success>
                                                                </PostfixExpression>
                                                               <success>Own(templateArgument)</success>
                                                              </UnaryExpression>
                                                             <success>Own(templateArgument)</success>
                                                            </CastExpression>
                                                           <success>Own(templateArgument)</success>
                                                          </PMExpression>
                                                         <success>Own(templateArgument)</success>
                                                        </MultiplicativeExpression>
                                                       <success>Own(templateArgument)</success>
                                                      </AdditiveExpression>
                                                     <success>Own(templateArgument)</success>
                                                    </ShiftExpression>
                                                   <success>Own(templateArgument)</success>
                                                  </RelationalExpression>
                                                 <success>Own(templateArgument)</success>
                                                </EqualityExpression>
                                               <success>Own(templateArgument)</success>
                                              </AndExpression>
                                             <success>Own(templateArgument)</success>
                                            </ExclusiveOrExpression>
                                           <success>Own(templateArgument)</success>
                                          </InclusiveOrExpression>
                                         <success>Own(templateArgument)</success>
                                        </LogicalAndExpression>
                                       <success>Own(templateArgument)</success>
                                      </LogicalOrExpression>
                                     <success>Own(templateArgument)</success>
                                    </ConditionalExpression>
                                   <success>Own(templateArgument)</success>
                                  </AssignmentExpression>
                                 <success>Own(templateArgument)</success>
                                </InitializerClause>
                               <fail/>
                              </BracedInitializerList>
                             <fail/>
                            </Initializer>
                           <success>TypeName::AddTemplateArgument(CppObject* templateArgument) \r\n</success>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <using>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <using>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <using>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <EnumKey>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <enum>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <typedef>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <ClassKey>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <class>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </class>
                            <struct>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </struct>
                            <union>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                        <DeclSpecifiers>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <DeclSpecifier>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <StorageClassSpecifier>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <register>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </register>
                              <static>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <inline>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <PrefixTypeExpr>
                           <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <CVSpecifierSequence>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <CVSpecifier>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <const>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <PrimaryTypeExpr>
                               <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <SimpleType>
                                 <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                  <SimpleTypeSpecifier>
                                   <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                    <char>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>void TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                      <identifier_chars>
                                       <try> TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <fail/>
                                      </identifier_chars>
                                     <success>void</success>
                                    </void>
                                   <success>void</success>
                                  </SimpleTypeSpecifier>
                                  <SimpleTypeSpecifier>
                                   <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                    <char>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <success>void</success>
                                </SimpleType>
                               <success>void</success>
                              </PrimaryTypeExpr>
                             <success>void </success>
                            </PostfixTypeExpr>
                           <success>void </success>
                          </PrefixTypeExpr>
                         <success>void </success>
                        </TypeExpr>
                        <Declarator>
                         <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                          <IdExpression>
                           <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                            <QualifiedId>
                             <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                              <NestedNameSpecifier>
                               <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                <IdNode>
                                 <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                  <SimpleTemplateId>
                                   <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                    <TemplateName>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                      <Identifier>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                        <identifier>
                                         <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                          <identifier>
                                           <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                    <identifier>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                     <success>TypeName</success>
                                    </identifier>
                                    <Keyword>
                                     <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                      <identifier>
                                       <try>TypeName::AddTemplateArgument(CppObject* templateArgument) </try>
                                       <success>TypeName</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>TypeName</success>
                                  </Identifier>
                                 <success>TypeName</success>
                                </IdNode>
                                <IdNode>
                                 <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                  <SimpleTemplateId>
                                   <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                    <TemplateName>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                      <Identifier>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                        <identifier>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                         <success>AddTemplateArgument</success>
                                        </identifier>
                                        <Keyword>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                          <identifier>
                                           <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                           <success>AddTemplateArgument</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>AddTemplateArgument</success>
                                      </Identifier>
                                     <success>AddTemplateArgument</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                    <identifier>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                     <success>AddTemplateArgument</success>
                                    </identifier>
                                    <Keyword>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                      <identifier>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                       <success>AddTemplateArgument</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>AddTemplateArgument</success>
                                  </Identifier>
                                 <success>AddTemplateArgument</success>
                                </IdNode>
                               <success>TypeName::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                <TemplateId>
                                 <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                  <SimpleTemplateId>
                                   <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                    <TemplateName>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                      <Identifier>
                                       <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                        <identifier>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                         <success>AddTemplateArgument</success>
                                        </identifier>
                                        <Keyword>
                                         <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                          <identifier>
                                           <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                           <success>AddTemplateArgument</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>AddTemplateArgument</success>
                                      </Identifier>
                                     <success>AddTemplateArgument</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                  <identifier>
                                   <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                   <success>AddTemplateArgument</success>
                                  </identifier>
                                  <Keyword>
                                   <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                    <identifier>
                                     <try>AddTemplateArgument(CppObject* templateArgument) </try>
                                     <success>AddTemplateArgument</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>AddTemplateArgument</success>
                                </Identifier>
                               <success>AddTemplateArgument</success>
                              </UnqualifiedId>
                             <success>TypeName::AddTemplateArgument</success>
                            </QualifiedId>
                           <success>TypeName::AddTemplateArgument</success>
                          </IdExpression>
                          <ParameterList>
                           <try>(CppObject* templateArgument) </try>
                            <ParameterDeclaration>
                             <try>CppObject* templateArgument) </try>
                              <TypeExpr>
                               <try>CppObject* templateArgument) </try>
                                <PrefixTypeExpr>
                                 <try>CppObject* templateArgument) </try>
                                  <CVSpecifierSequence>
                                   <try>CppObject* templateArgument) </try>
                                    <CVSpecifier>
                                     <try>CppObject* templateArgument) </try>
                                      <const>
                                       <try>CppObject* templateArgument) </try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>CppObject* templateArgument) </try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success></success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>CppObject* templateArgument) </try>
                                    <PrimaryTypeExpr>
                                     <try>CppObject* templateArgument) </try>
                                      <SimpleType>
                                       <try>CppObject* templateArgument) </try>
                                        <SimpleTypeSpecifier>
                                         <try>CppObject* templateArgument) </try>
                                          <char>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>CppObject* templateArgument) </try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>CppObject* templateArgument) </try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>CppObject* templateArgument) </try>
                                        <class>
                                         <try>CppObject* templateArgument) </try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>CppObject* templateArgument) </try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>CppObject* templateArgument) </try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>CppObject* templateArgument) </try>
                                        <NestedNameSpecifier>
                                         <try>CppObject* templateArgument) </try>
                                          <IdNode>
                                           <try>CppObject* templateArgument) </try>
                                            <SimpleTemplateId>
                                             <try>CppObject* templateArgument) </try>
                                              <TemplateName>
                                               <try>CppObject* templateArgument) </try>
                                                <Identifier>
                                                 <try>CppObject* templateArgument) </try>
                                                  <identifier>
                                                   <try>CppObject* templateArgument) </try>
                                                   <success>CppObject</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>CppObject* templateArgument) </try>
                                                    <identifier>
                                                     <try>CppObject* templateArgument) </try>
                                                     <success>CppObject</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>CppObject</success>
                                                </Identifier>
                                               <success>CppObject</success>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>CppObject* templateArgument) </try>
                                              <identifier>
                                               <try>CppObject* templateArgument) </try>
                                               <success>CppObject</success>
                                              </identifier>
                                              <Keyword>
                                               <try>CppObject* templateArgument) </try>
                                                <identifier>
                                                 <try>CppObject* templateArgument) </try>
                                                 <success>CppObject</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>CppObject</success>
                                            </Identifier>
                                           <success>CppObject</success>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>CppObject* templateArgument) </try>
                                          <SimpleTemplateId>
                                           <try>CppObject* templateArgument) </try>
                                            <TemplateName>
                                             <try>CppObject* templateArgument) </try>
                                              <Identifier>
                                               <try>CppObject* templateArgument) </try>
                                                <identifier>
                                                 <try>CppObject* templateArgument) </try>
                                                 <success>CppObject</success>
                                                </identifier>
                                                <Keyword>
                                                 <try>CppObject* templateArgument) </try>
                                                  <identifier>
                                                   <try>CppObject* templateArgument) </try>
                                                   <success>CppObject</success>
                                                  </identifier>
                                                 <fail/>
                                                </Keyword>
                                               <success>CppObject</success>
                                              </Identifier>
                                             <success>CppObject</success>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>CppObject* templateArgument) </try>
                                            <identifier>
                                             <try>CppObject* templateArgument) </try>
                                             <success>CppObject</success>
                                            </identifier>
                                            <Keyword>
                                             <try>CppObject* templateArgument) </try>
                                              <identifier>
                                               <try>CppObject* templateArgument) </try>
                                               <success>CppObject</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>CppObject</success>
                                          </Identifier>
                                         <success>CppObject</success>
                                        </IdNode>
                                       <success>CppObject</success>
                                      </QualifiedIdNode>
                                     <success>CppObject</success>
                                    </PrimaryTypeExpr>
                                   <success>CppObject*</success>
                                  </PostfixTypeExpr>
                                 <success>CppObject*</success>
                                </PrefixTypeExpr>
                               <success>CppObject*</success>
                              </TypeExpr>
                              <Declarator>
                               <try>templateArgument) </try>
                                <IdExpression>
                                 <try>templateArgument) </try>
                                  <QualifiedId>
                                   <try>templateArgument) </try>
                                    <NestedNameSpecifier>
                                     <try>templateArgument) </try>
                                      <IdNode>
                                       <try>templateArgument) </try>
                                        <SimpleTemplateId>
                                         <try>templateArgument) </try>
                                          <TemplateName>
                                           <try>templateArgument) </try>
                                            <Identifier>
                                             <try>templateArgument) </try>
                                              <identifier>
                                               <try>templateArgument) </try>
                                               <success>templateArgument</success>
                                              </identifier>
                                              <Keyword>
                                               <try>templateArgument) </try>
                                                <identifier>
                                                 <try>templateArgument) </try>
                                                 <success>templateArgument</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>templateArgument</success>
                                            </Identifier>
                                           <success>templateArgument</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>templateArgument) </try>
                                          <identifier>
                                           <try>templateArgument) </try>
                                           <success>templateArgument</success>
                                          </identifier>
                                          <Keyword>
                                           <try>templateArgument) </try>
                                            <identifier>
                                             <try>templateArgument) </try>
                                             <success>templateArgument</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>templateArgument</success>
                                        </Identifier>
                                       <success>templateArgument</success>
                                      </IdNode>
                                     <fail/>
                                    </NestedNameSpecifier>
                                   <fail/>
                                  </QualifiedId>
                                  <UnqualifiedId>
                                   <try>templateArgument) </try>
                                    <TemplateId>
                                     <try>templateArgument) </try>
                                      <SimpleTemplateId>
                                       <try>templateArgument) </try>
                                        <TemplateName>
                                         <try>templateArgument) </try>
                                          <Identifier>
                                           <try>templateArgument) </try>
                                            <identifier>
                                             <try>templateArgument) </try>
                                             <success>templateArgument</success>
                                            </identifier>
                                            <Keyword>
                                             <try>templateArgument) </try>
                                              <identifier>
                                               <try>templateArgument) </try>
                                               <success>templateArgument</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>templateArgument</success>
                                          </Identifier>
                                         <success>templateArgument</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>templateArgument) </try>
                                      <identifier>
                                       <try>templateArgument) </try>
                                       <success>templateArgument</success>
                                      </identifier>
                                      <Keyword>
                                       <try>templateArgument) </try>
                                        <identifier>
                                         <try>templateArgument) </try>
                                         <success>templateArgument</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>templateArgument</success>
                                    </Identifier>
                                   <success>templateArgument</success>
                                  </UnqualifiedId>
                                 <success>templateArgument</success>
                                </IdExpression>
                                <ParameterList>
                                 <try>) </try>
                                 <fail/>
                                </ParameterList>
                               <success>templateArgument</success>
                              </Declarator>
                             <success>CppObject* templateArgument</success>
                            </ParameterDeclaration>
                           <success>(CppObject* templateArgument)</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>{ </try>
                            <CVSpecifier>
                             <try>{ </try>
                              <const>
                               <try>{ </try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>{ </try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success></success>
                          </CVSpecifierSequence>
                         <success>TypeName::AddTemplateArgument(CppObject* templateArgument) \r\n</success>
                        </Declarator>
                        <FunctionBody>
                         <try>{ </try>
                          <CompoundStatement>
                           <try>{ </try>
                            <Statement>
                             <try>Own(templateArgument);</try>
                              <LabeledStatement>
                               <try>Own(templateArgument);</try>
                                <Identifier>
                                 <try>Own(templateArgument);</try>
                                  <identifier>
                                   <try>Own(templateArgument);</try>
                                   <success>Own</success>
                                  </identifier>
                                  <Keyword>
                                   <try>Own(templateArgument);</try>
                                    <identifier>
                                     <try>Own(templateArgument);</try>
                                     <success>Own</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>Own</success>
                                </Identifier>
                                <case>
                                 <try>Own(templateArgument);</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>Own(templateArgument);</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>Own(templateArgument);</try>
                                <Expression>
                                 <try>Own(templateArgument);</try>
                                  <AssignmentExpression>
                                   <try>Own(templateArgument);</try>
                                    <LogicalOrExpression>
                                     <try>Own(templateArgument);</try>
                                      <LogicalAndExpression>
                                       <try>Own(templateArgument);</try>
                                        <InclusiveOrExpression>
                                         <try>Own(templateArgument);</try>
                                          <ExclusiveOrExpression>
                                           <try>Own(templateArgument);</try>
                                            <AndExpression>
                                             <try>Own(templateArgument);</try>
                                              <EqualityExpression>
                                               <try>Own(templateArgument);</try>
                                                <RelationalExpression>
                                                 <try>Own(templateArgument);</try>
                                                  <ShiftExpression>
                                                   <try>Own(templateArgument);</try>
                                                    <AdditiveExpression>
                                                     <try>Own(templateArgument);</try>
                                                      <MultiplicativeExpression>
                                                       <try>Own(templateArgument);</try>
                                                        <PMExpression>
                                                         <try>Own(templateArgument);</try>
                                                          <CastExpression>
                                                           <try>Own(templateArgument);</try>
                                                            <UnaryExpression>
                                                             <try>Own(templateArgument);</try>
                                                              <UnaryOperator>
                                                               <try>Own(templateArgument);</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>Own(templateArgument);</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>Own(templateArgument);</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <new>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <delete>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <PrimaryExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <Literal>
                                                                   <try>Own(templateArgument);</try>
                                                                    <FloatingLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <FractionalConstant>
                                                                       <try>Own(templateArgument);</try>
                                                                        <digit_sequence>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <EncodingPrefix>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <true>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>Own(templateArgument);</try>
                                                                      <nullptr>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>Own(templateArgument);</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <dynamic_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <typeid>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <QualifiedId>
                                                                     <try>Own(templateArgument);</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>Own(templateArgument);</try>
                                                                        <IdNode>
                                                                         <try>Own(templateArgument);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Own(templateArgument);</try>
                                                                            <TemplateName>
                                                                             <try>Own(templateArgument);</try>
                                                                              <Identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Own(templateArgument);</try>
                                                                                  <identifier>
                                                                                   <try>Own(templateArgument);</try>
                                                                                   <success>Own</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Own</success>
                                                                              </Identifier>
                                                                             <success>Own</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>Own(templateArgument);</try>
                                                                            <identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                             <success>Own</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>Own(templateArgument);</try>
                                                                              <identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                               <success>Own</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>Own</success>
                                                                          </Identifier>
                                                                         <success>Own</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>Own(templateArgument);</try>
                                                                      <TemplateId>
                                                                       <try>Own(templateArgument);</try>
                                                                        <SimpleTemplateId>
                                                                         <try>Own(templateArgument);</try>
                                                                          <TemplateName>
                                                                           <try>Own(templateArgument);</try>
                                                                            <Identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                              <identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                               <success>Own</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Own</success>
                                                                            </Identifier>
                                                                           <success>Own</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>Own(templateArgument);</try>
                                                                        <identifier>
                                                                         <try>Own(templateArgument);</try>
                                                                         <success>Own</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>Own(templateArgument);</try>
                                                                          <identifier>
                                                                           <try>Own(templateArgument);</try>
                                                                           <success>Own</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>Own</success>
                                                                      </Identifier>
                                                                     <success>Own</success>
                                                                    </UnqualifiedId>
                                                                   <success>Own</success>
                                                                  </IdExpression>
                                                                 <success>Own</success>
                                                                </PrimaryExpression>
                                                                <ExpressionList>
                                                                 <try>templateArgument);</try>
                                                                  <InitializerList>
                                                                   <try>templateArgument);</try>
                                                                    <InitializerClause>
                                                                     <try>templateArgument);</try>
                                                                      <AssignmentExpression>
                                                                       <try>templateArgument);</try>
                                                                        <LogicalOrExpression>
                                                                         <try>templateArgument);</try>
                                                                          <LogicalAndExpression>
                                                                           <try>templateArgument);</try>
                                                                            <InclusiveOrExpression>
                                                                             <try>templateArgument);</try>
                                                                              <ExclusiveOrExpression>
                                                                               <try>templateArgument);</try>
                                                                                <AndExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <EqualityExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <RelationalExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <ShiftExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <AdditiveExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <MultiplicativeExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <PMExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <CastExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <UnaryExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <UnaryOperator>
                                                                                                   <try>templateArgument);</try>
                                                                                                   <fail/>
                                                                                                  </UnaryOperator>
                                                                                                  <sizeof>
                                                                                                   <try>templateArgument);</try>
                                                                                                   <fail/>
                                                                                                  </sizeof>
                                                                                                  <alignof>
                                                                                                   <try>templateArgument);</try>
                                                                                                   <fail/>
                                                                                                  </alignof>
                                                                                                  <NewExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <new>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </new>
                                                                                                   <fail/>
                                                                                                  </NewExpression>
                                                                                                  <DeleteExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <delete>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </delete>
                                                                                                   <fail/>
                                                                                                  </DeleteExpression>
                                                                                                  <PostfixExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <PrimaryExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <Literal>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <FloatingLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <FractionalConstant>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FractionalConstant>
                                                                                                          <digit_sequence>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </digit_sequence>
                                                                                                         <fail/>
                                                                                                        </FloatingLiteral>
                                                                                                        <IntegerLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <HexadecimalLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </HexadecimalLiteral>
                                                                                                          <OctalLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </OctalLiteral>
                                                                                                          <DecimalLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </DecimalLiteral>
                                                                                                         <fail/>
                                                                                                        </IntegerLiteral>
                                                                                                        <CharacterLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </CharacterLiteral>
                                                                                                        <StringLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <EncodingPrefix>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </EncodingPrefix>
                                                                                                          <EncodingPrefix>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </EncodingPrefix>
                                                                                                         <fail/>
                                                                                                        </StringLiteral>
                                                                                                        <BooleanLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <true>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </true>
                                                                                                          <false>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </false>
                                                                                                         <fail/>
                                                                                                        </BooleanLiteral>
                                                                                                        <PointerLiteral>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <nullptr>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </nullptr>
                                                                                                         <fail/>
                                                                                                        </PointerLiteral>
                                                                                                       <fail/>
                                                                                                      </Literal>
                                                                                                      <this>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </this>
                                                                                                      <CppCastExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <dynamic_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </dynamic_cast>
                                                                                                        <static_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </static_cast>
                                                                                                        <reinterpret_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </reinterpret_cast>
                                                                                                        <const_cast>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </const_cast>
                                                                                                       <fail/>
                                                                                                      </CppCastExpression>
                                                                                                      <TypeIdExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <typeid>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </typeid>
                                                                                                        <typeid>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </typeid>
                                                                                                       <fail/>
                                                                                                      </TypeIdExpression>
                                                                                                      <IdExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <QualifiedId>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <NestedNameSpecifier>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <IdNode>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                              <Identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                                <Keyword>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                 <fail/>
                                                                                                                </Keyword>
                                                                                                               <success>templateArgument</success>
                                                                                                              </Identifier>
                                                                                                             <success>templateArgument</success>
                                                                                                            </IdNode>
                                                                                                           <fail/>
                                                                                                          </NestedNameSpecifier>
                                                                                                         <fail/>
                                                                                                        </QualifiedId>
                                                                                                        <UnqualifiedId>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <TemplateId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <SimpleTemplateId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <TemplateName>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </TemplateName>
                                                                                                             <fail/>
                                                                                                            </SimpleTemplateId>
                                                                                                           <fail/>
                                                                                                          </TemplateId>
                                                                                                          <Identifier>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <identifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <success>templateArgument</success>
                                                                                                            </identifier>
                                                                                                            <Keyword>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                             <fail/>
                                                                                                            </Keyword>
                                                                                                           <success>templateArgument</success>
                                                                                                          </Identifier>
                                                                                                         <success>templateArgument</success>
                                                                                                        </UnqualifiedId>
                                                                                                       <success>templateArgument</success>
                                                                                                      </IdExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PrimaryExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </PostfixExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </UnaryExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </CastExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </PMExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </MultiplicativeExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </AdditiveExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </ShiftExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </RelationalExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </EqualityExpression>
                                                                                 <success>templateArgument</success>
                                                                                </AndExpression>
                                                                               <success>templateArgument</success>
                                                                              </ExclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </InclusiveOrExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalAndExpression>
                                                                         <success>templateArgument</success>
                                                                        </LogicalOrExpression>
                                                                        <AssignmentOperator>
                                                                         <try>);</try>
                                                                         <fail/>
                                                                        </AssignmentOperator>
                                                                        <ConditionalExpression>
                                                                         <try>templateArgument);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>templateArgument);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>templateArgument);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>templateArgument);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <AndExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <PMExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <CastExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </UnaryOperator>
                                                                                                    <sizeof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </sizeof>
                                                                                                    <alignof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </alignof>
                                                                                                    <NewExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <new>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </new>
                                                                                                     <fail/>
                                                                                                    </NewExpression>
                                                                                                    <DeleteExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <delete>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </delete>
                                                                                                     <fail/>
                                                                                                    </DeleteExpression>
                                                                                                    <PostfixExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <PrimaryExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <Literal>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <FloatingLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <FractionalConstant>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FractionalConstant>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FloatingLiteral>
                                                                                                          <IntegerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <HexadecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </HexadecimalLiteral>
                                                                                                            <OctalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </OctalLiteral>
                                                                                                            <DecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </DecimalLiteral>
                                                                                                           <fail/>
                                                                                                          </IntegerLiteral>
                                                                                                          <CharacterLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </CharacterLiteral>
                                                                                                          <StringLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                           <fail/>
                                                                                                          </StringLiteral>
                                                                                                          <BooleanLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <true>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </true>
                                                                                                            <false>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </false>
                                                                                                           <fail/>
                                                                                                          </BooleanLiteral>
                                                                                                          <PointerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <nullptr>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </nullptr>
                                                                                                           <fail/>
                                                                                                          </PointerLiteral>
                                                                                                         <fail/>
                                                                                                        </Literal>
                                                                                                        <this>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </this>
                                                                                                        <CppCastExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <dynamic_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </dynamic_cast>
                                                                                                          <static_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </static_cast>
                                                                                                          <reinterpret_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </reinterpret_cast>
                                                                                                          <const_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </const_cast>
                                                                                                         <fail/>
                                                                                                        </CppCastExpression>
                                                                                                        <TypeIdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                         <fail/>
                                                                                                        </TypeIdExpression>
                                                                                                        <IdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <QualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <NestedNameSpecifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <IdNode>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </IdNode>
                                                                                                             <fail/>
                                                                                                            </NestedNameSpecifier>
                                                                                                           <fail/>
                                                                                                          </QualifiedId>
                                                                                                          <UnqualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <TemplateId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                             <fail/>
                                                                                                            </TemplateId>
                                                                                                            <Identifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                              <Keyword>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                               <fail/>
                                                                                                              </Keyword>
                                                                                                             <success>templateArgument</success>
                                                                                                            </Identifier>
                                                                                                           <success>templateArgument</success>
                                                                                                          </UnqualifiedId>
                                                                                                         <success>templateArgument</success>
                                                                                                        </IdExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PrimaryExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PostfixExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </CastExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </PMExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </ShiftExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </RelationalExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </EqualityExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </AndExpression>
                                                                                 <success>templateArgument</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalAndExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalOrExpression>
                                                                         <success>templateArgument</success>
                                                                        </ConditionalExpression>
                                                                       <success>templateArgument</success>
                                                                      </AssignmentExpression>
                                                                     <success>templateArgument</success>
                                                                    </InitializerClause>
                                                                   <success>templateArgument</success>
                                                                  </InitializerList>
                                                                 <success>templateArgument</success>
                                                                </ExpressionList>
                                                               <success>Own(templateArgument)</success>
                                                              </PostfixExpression>
                                                             <success>Own(templateArgument)</success>
                                                            </UnaryExpression>
                                                           <success>Own(templateArgument)</success>
                                                          </CastExpression>
                                                         <success>Own(templateArgument)</success>
                                                        </PMExpression>
                                                       <success>Own(templateArgument)</success>
                                                      </MultiplicativeExpression>
                                                     <success>Own(templateArgument)</success>
                                                    </AdditiveExpression>
                                                   <success>Own(templateArgument)</success>
                                                  </ShiftExpression>
                                                 <success>Own(templateArgument)</success>
                                                </RelationalExpression>
                                               <success>Own(templateArgument)</success>
                                              </EqualityExpression>
                                             <success>Own(templateArgument)</success>
                                            </AndExpression>
                                           <success>Own(templateArgument)</success>
                                          </ExclusiveOrExpression>
                                         <success>Own(templateArgument)</success>
                                        </InclusiveOrExpression>
                                       <success>Own(templateArgument)</success>
                                      </LogicalAndExpression>
                                     <success>Own(templateArgument)</success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>;</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>Own(templateArgument);</try>
                                      <LogicalOrExpression>
                                       <try>Own(templateArgument);</try>
                                        <LogicalAndExpression>
                                         <try>Own(templateArgument);</try>
                                          <InclusiveOrExpression>
                                           <try>Own(templateArgument);</try>
                                            <ExclusiveOrExpression>
                                             <try>Own(templateArgument);</try>
                                              <AndExpression>
                                               <try>Own(templateArgument);</try>
                                                <EqualityExpression>
                                                 <try>Own(templateArgument);</try>
                                                  <RelationalExpression>
                                                   <try>Own(templateArgument);</try>
                                                    <ShiftExpression>
                                                     <try>Own(templateArgument);</try>
                                                      <AdditiveExpression>
                                                       <try>Own(templateArgument);</try>
                                                        <MultiplicativeExpression>
                                                         <try>Own(templateArgument);</try>
                                                          <PMExpression>
                                                           <try>Own(templateArgument);</try>
                                                            <CastExpression>
                                                             <try>Own(templateArgument);</try>
                                                              <UnaryExpression>
                                                               <try>Own(templateArgument);</try>
                                                                <UnaryOperator>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>Own(templateArgument);</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <new>
                                                                   <try>Own(templateArgument);</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <delete>
                                                                   <try>Own(templateArgument);</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>Own(templateArgument);</try>
                                                                  <PrimaryExpression>
                                                                   <try>Own(templateArgument);</try>
                                                                    <Literal>
                                                                     <try>Own(templateArgument);</try>
                                                                      <FloatingLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <FractionalConstant>
                                                                         <try>Own(templateArgument);</try>
                                                                          <digit_sequence>
                                                                           <try>Own(templateArgument);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>Own(templateArgument);</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <EncodingPrefix>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <true>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>Own(templateArgument);</try>
                                                                        <nullptr>
                                                                         <try>Own(templateArgument);</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>Own(templateArgument);</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>Own(templateArgument);</try>
                                                                      <dynamic_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>Own(templateArgument);</try>
                                                                      <typeid>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>Own(templateArgument);</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>Own(templateArgument);</try>
                                                                      <QualifiedId>
                                                                       <try>Own(templateArgument);</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>Own(templateArgument);</try>
                                                                          <IdNode>
                                                                           <try>Own(templateArgument);</try>
                                                                            <SimpleTemplateId>
                                                                             <try>Own(templateArgument);</try>
                                                                              <TemplateName>
                                                                               <try>Own(templateArgument);</try>
                                                                                <Identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                  <identifier>
                                                                                   <try>Own(templateArgument);</try>
                                                                                   <success>Own</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>Own(templateArgument);</try>
                                                                                    <identifier>
                                                                                     <try>Own(templateArgument);</try>
                                                                                     <success>Own</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>Own</success>
                                                                                </Identifier>
                                                                               <success>Own</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                              <identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                               <success>Own</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>Own</success>
                                                                            </Identifier>
                                                                           <success>Own</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>Own(templateArgument);</try>
                                                                        <TemplateId>
                                                                         <try>Own(templateArgument);</try>
                                                                          <SimpleTemplateId>
                                                                           <try>Own(templateArgument);</try>
                                                                            <TemplateName>
                                                                             <try>Own(templateArgument);</try>
                                                                              <Identifier>
                                                                               <try>Own(templateArgument);</try>
                                                                                <identifier>
                                                                                 <try>Own(templateArgument);</try>
                                                                                 <success>Own</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>Own(templateArgument);</try>
                                                                                  <identifier>
                                                                                   <try>Own(templateArgument);</try>
                                                                                   <success>Own</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>Own</success>
                                                                              </Identifier>
                                                                             <success>Own</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>Own(templateArgument);</try>
                                                                          <identifier>
                                                                           <try>Own(templateArgument);</try>
                                                                           <success>Own</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>Own(templateArgument);</try>
                                                                            <identifier>
                                                                             <try>Own(templateArgument);</try>
                                                                             <success>Own</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>Own</success>
                                                                        </Identifier>
                                                                       <success>Own</success>
                                                                      </UnqualifiedId>
                                                                     <success>Own</success>
                                                                    </IdExpression>
                                                                   <success>Own</success>
                                                                  </PrimaryExpression>
                                                                  <ExpressionList>
                                                                   <try>templateArgument);</try>
                                                                    <InitializerList>
                                                                     <try>templateArgument);</try>
                                                                      <InitializerClause>
                                                                       <try>templateArgument);</try>
                                                                        <AssignmentExpression>
                                                                         <try>templateArgument);</try>
                                                                          <LogicalOrExpression>
                                                                           <try>templateArgument);</try>
                                                                            <LogicalAndExpression>
                                                                             <try>templateArgument);</try>
                                                                              <InclusiveOrExpression>
                                                                               <try>templateArgument);</try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <AndExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <EqualityExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <RelationalExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <ShiftExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <AdditiveExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <PMExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <CastExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </UnaryOperator>
                                                                                                    <sizeof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </sizeof>
                                                                                                    <alignof>
                                                                                                     <try>templateArgument);</try>
                                                                                                     <fail/>
                                                                                                    </alignof>
                                                                                                    <NewExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <new>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </new>
                                                                                                     <fail/>
                                                                                                    </NewExpression>
                                                                                                    <DeleteExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <delete>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </delete>
                                                                                                     <fail/>
                                                                                                    </DeleteExpression>
                                                                                                    <PostfixExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <PrimaryExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <Literal>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <FloatingLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <FractionalConstant>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FractionalConstant>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FloatingLiteral>
                                                                                                          <IntegerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <HexadecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </HexadecimalLiteral>
                                                                                                            <OctalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </OctalLiteral>
                                                                                                            <DecimalLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </DecimalLiteral>
                                                                                                           <fail/>
                                                                                                          </IntegerLiteral>
                                                                                                          <CharacterLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </CharacterLiteral>
                                                                                                          <StringLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                           <fail/>
                                                                                                          </StringLiteral>
                                                                                                          <BooleanLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <true>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </true>
                                                                                                            <false>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </false>
                                                                                                           <fail/>
                                                                                                          </BooleanLiteral>
                                                                                                          <PointerLiteral>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <nullptr>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </nullptr>
                                                                                                           <fail/>
                                                                                                          </PointerLiteral>
                                                                                                         <fail/>
                                                                                                        </Literal>
                                                                                                        <this>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </this>
                                                                                                        <CppCastExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <dynamic_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </dynamic_cast>
                                                                                                          <static_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </static_cast>
                                                                                                          <reinterpret_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </reinterpret_cast>
                                                                                                          <const_cast>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </const_cast>
                                                                                                         <fail/>
                                                                                                        </CppCastExpression>
                                                                                                        <TypeIdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                         <fail/>
                                                                                                        </TypeIdExpression>
                                                                                                        <IdExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <QualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <NestedNameSpecifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <IdNode>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </IdNode>
                                                                                                             <fail/>
                                                                                                            </NestedNameSpecifier>
                                                                                                           <fail/>
                                                                                                          </QualifiedId>
                                                                                                          <UnqualifiedId>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <TemplateId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                             <fail/>
                                                                                                            </TemplateId>
                                                                                                            <Identifier>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                              <Keyword>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                               <fail/>
                                                                                                              </Keyword>
                                                                                                             <success>templateArgument</success>
                                                                                                            </Identifier>
                                                                                                           <success>templateArgument</success>
                                                                                                          </UnqualifiedId>
                                                                                                         <success>templateArgument</success>
                                                                                                        </IdExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PrimaryExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PostfixExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </CastExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </PMExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </ShiftExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </RelationalExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </EqualityExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </AndExpression>
                                                                                 <success>templateArgument</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalAndExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalOrExpression>
                                                                          <AssignmentOperator>
                                                                           <try>);</try>
                                                                           <fail/>
                                                                          </AssignmentOperator>
                                                                          <ConditionalExpression>
                                                                           <try>templateArgument);</try>
                                                                            <LogicalOrExpression>
                                                                             <try>templateArgument);</try>
                                                                              <LogicalAndExpression>
                                                                               <try>templateArgument);</try>
                                                                                <InclusiveOrExpression>
                                                                                 <try>templateArgument);</try>
                                                                                  <ExclusiveOrExpression>
                                                                                   <try>templateArgument);</try>
                                                                                    <AndExpression>
                                                                                     <try>templateArgument);</try>
                                                                                      <EqualityExpression>
                                                                                       <try>templateArgument);</try>
                                                                                        <RelationalExpression>
                                                                                         <try>templateArgument);</try>
                                                                                          <ShiftExpression>
                                                                                           <try>templateArgument);</try>
                                                                                            <AdditiveExpression>
                                                                                             <try>templateArgument);</try>
                                                                                              <MultiplicativeExpression>
                                                                                               <try>templateArgument);</try>
                                                                                                <PMExpression>
                                                                                                 <try>templateArgument);</try>
                                                                                                  <CastExpression>
                                                                                                   <try>templateArgument);</try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>templateArgument);</try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </UnaryOperator>
                                                                                                      <sizeof>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </sizeof>
                                                                                                      <alignof>
                                                                                                       <try>templateArgument);</try>
                                                                                                       <fail/>
                                                                                                      </alignof>
                                                                                                      <NewExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <new>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </new>
                                                                                                       <fail/>
                                                                                                      </NewExpression>
                                                                                                      <DeleteExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <delete>
                                                                                                         <try>templateArgument);</try>
                                                                                                         <fail/>
                                                                                                        </delete>
                                                                                                       <fail/>
                                                                                                      </DeleteExpression>
                                                                                                      <PostfixExpression>
                                                                                                       <try>templateArgument);</try>
                                                                                                        <PrimaryExpression>
                                                                                                         <try>templateArgument);</try>
                                                                                                          <Literal>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <FloatingLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <FractionalConstant>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <digit_sequence>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                                <digit_sequence>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FractionalConstant>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FloatingLiteral>
                                                                                                            <IntegerLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <HexadecimalLiteral>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </HexadecimalLiteral>
                                                                                                              <OctalLiteral>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </OctalLiteral>
                                                                                                              <DecimalLiteral>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </DecimalLiteral>
                                                                                                             <fail/>
                                                                                                            </IntegerLiteral>
                                                                                                            <CharacterLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </CharacterLiteral>
                                                                                                            <StringLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                             <fail/>
                                                                                                            </StringLiteral>
                                                                                                            <BooleanLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <true>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </true>
                                                                                                              <false>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </false>
                                                                                                             <fail/>
                                                                                                            </BooleanLiteral>
                                                                                                            <PointerLiteral>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <nullptr>
                                                                                                               <try>templateArgument);</try>
                                                                                                               <fail/>
                                                                                                              </nullptr>
                                                                                                             <fail/>
                                                                                                            </PointerLiteral>
                                                                                                           <fail/>
                                                                                                          </Literal>
                                                                                                          <this>
                                                                                                           <try>templateArgument);</try>
                                                                                                           <fail/>
                                                                                                          </this>
                                                                                                          <CppCastExpression>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <dynamic_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </dynamic_cast>
                                                                                                            <static_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </static_cast>
                                                                                                            <reinterpret_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </reinterpret_cast>
                                                                                                            <const_cast>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </const_cast>
                                                                                                           <fail/>
                                                                                                          </CppCastExpression>
                                                                                                          <TypeIdExpression>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <typeid>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </typeid>
                                                                                                            <typeid>
                                                                                                             <try>templateArgument);</try>
                                                                                                             <fail/>
                                                                                                            </typeid>
                                                                                                           <fail/>
                                                                                                          </TypeIdExpression>
                                                                                                          <IdExpression>
                                                                                                           <try>templateArgument);</try>
                                                                                                            <QualifiedId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <NestedNameSpecifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <IdNode>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <SimpleTemplateId>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <TemplateName>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <Identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                        <Keyword>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                          <identifier>
                                                                                                                           <try>templateArgument);</try>
                                                                                                                           <success>templateArgument</success>
                                                                                                                          </identifier>
                                                                                                                         <fail/>
                                                                                                                        </Keyword>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </Identifier>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </TemplateName>
                                                                                                                   <fail/>
                                                                                                                  </SimpleTemplateId>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </IdNode>
                                                                                                               <fail/>
                                                                                                              </NestedNameSpecifier>
                                                                                                             <fail/>
                                                                                                            </QualifiedId>
                                                                                                            <UnqualifiedId>
                                                                                                             <try>templateArgument);</try>
                                                                                                              <TemplateId>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument);</try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument);</try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument);</try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                               <fail/>
                                                                                                              </TemplateId>
                                                                                                              <Identifier>
                                                                                                               <try>templateArgument);</try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                                <Keyword>
                                                                                                                 <try>templateArgument);</try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument);</try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                 <fail/>
                                                                                                                </Keyword>
                                                                                                               <success>templateArgument</success>
                                                                                                              </Identifier>
                                                                                                             <success>templateArgument</success>
                                                                                                            </UnqualifiedId>
                                                                                                           <success>templateArgument</success>
                                                                                                          </IdExpression>
                                                                                                         <success>templateArgument</success>
                                                                                                        </PrimaryExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PostfixExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </CastExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </PMExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </MultiplicativeExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </AdditiveExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </ShiftExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </RelationalExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </EqualityExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </AndExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </ExclusiveOrExpression>
                                                                                 <success>templateArgument</success>
                                                                                </InclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </LogicalAndExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalOrExpression>
                                                                           <success>templateArgument</success>
                                                                          </ConditionalExpression>
                                                                         <success>templateArgument</success>
                                                                        </AssignmentExpression>
                                                                       <success>templateArgument</success>
                                                                      </InitializerClause>
                                                                     <success>templateArgument</success>
                                                                    </InitializerList>
                                                                   <success>templateArgument</success>
                                                                  </ExpressionList>
                                                                 <success>Own(templateArgument)</success>
                                                                </PostfixExpression>
                                                               <success>Own(templateArgument)</success>
                                                              </UnaryExpression>
                                                             <success>Own(templateArgument)</success>
                                                            </CastExpression>
                                                           <success>Own(templateArgument)</success>
                                                          </PMExpression>
                                                         <success>Own(templateArgument)</success>
                                                        </MultiplicativeExpression>
                                                       <success>Own(templateArgument)</success>
                                                      </AdditiveExpression>
                                                     <success>Own(templateArgument)</success>
                                                    </ShiftExpression>
                                                   <success>Own(templateArgument)</success>
                                                  </RelationalExpression>
                                                 <success>Own(templateArgument)</success>
                                                </EqualityExpression>
                                               <success>Own(templateArgument)</success>
                                              </AndExpression>
                                             <success>Own(templateArgument)</success>
                                            </ExclusiveOrExpression>
                                           <success>Own(templateArgument)</success>
                                          </InclusiveOrExpression>
                                         <success>Own(templateArgument)</success>
                                        </LogicalAndExpression>
                                       <success>Own(templateArgument)</success>
                                      </LogicalOrExpression>
                                     <success>Own(templateArgument)</success>
                                    </ConditionalExpression>
                                   <success>Own(templateArgument)</success>
                                  </AssignmentExpression>
                                 <success>Own(templateArgument)</success>
                                </Expression>
                               <success>Own(templateArgument);</success>
                              </ExpressionStatement>
                             <success>Own(templateArgument);</success>
                            </Statement>
                            <Statement>
                             <try>templateArguments.push_back(templateArgument); </try>
                              <LabeledStatement>
                               <try>templateArguments.push_back(templateArgument); </try>
                                <Identifier>
                                 <try>templateArguments.push_back(templateArgument); </try>
                                  <identifier>
                                   <try>templateArguments.push_back(templateArgument); </try>
                                   <success>templateArguments</success>
                                  </identifier>
                                  <Keyword>
                                   <try>templateArguments.push_back(templateArgument); </try>
                                    <identifier>
                                     <try>templateArguments.push_back(templateArgument); </try>
                                     <success>templateArguments</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>templateArguments</success>
                                </Identifier>
                                <case>
                                 <try>templateArguments.push_back(templateArgument); </try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>templateArguments.push_back(templateArgument); </try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>templateArguments.push_back(templateArgument); </try>
                                <Expression>
                                 <try>templateArguments.push_back(templateArgument); </try>
                                  <AssignmentExpression>
                                   <try>templateArguments.push_back(templateArgument); </try>
                                    <LogicalOrExpression>
                                     <try>templateArguments.push_back(templateArgument); </try>
                                      <LogicalAndExpression>
                                       <try>templateArguments.push_back(templateArgument); </try>
                                        <InclusiveOrExpression>
                                         <try>templateArguments.push_back(templateArgument); </try>
                                          <ExclusiveOrExpression>
                                           <try>templateArguments.push_back(templateArgument); </try>
                                            <AndExpression>
                                             <try>templateArguments.push_back(templateArgument); </try>
                                              <EqualityExpression>
                                               <try>templateArguments.push_back(templateArgument); </try>
                                                <RelationalExpression>
                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                  <ShiftExpression>
                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                    <AdditiveExpression>
                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                      <MultiplicativeExpression>
                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                        <PMExpression>
                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                          <CastExpression>
                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                            <UnaryExpression>
                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                              <UnaryOperator>
                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                <new>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                <delete>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                <PrimaryExpression>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                  <Literal>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                    <FloatingLiteral>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <FractionalConstant>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <digit_sequence>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <HexadecimalLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <EncodingPrefix>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <true>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <nullptr>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                    <dynamic_cast>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                    <typeid>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                    <QualifiedId>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <NestedNameSpecifier>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <IdNode>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                          <SimpleTemplateId>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                            <TemplateName>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                              <Identifier>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                                <identifier>
                                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                                 <success>templateArguments</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                                  <identifier>
                                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                                   <success>templateArguments</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>templateArguments</success>
                                                                              </Identifier>
                                                                             <success>templateArguments</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                            <identifier>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                             <success>templateArguments</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                              <identifier>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                               <success>templateArguments</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>templateArguments</success>
                                                                          </Identifier>
                                                                         <success>templateArguments</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <TemplateId>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <SimpleTemplateId>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                          <TemplateName>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                            <Identifier>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                              <identifier>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                               <success>templateArguments</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                                <identifier>
                                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                                 <success>templateArguments</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>templateArguments</success>
                                                                            </Identifier>
                                                                           <success>templateArguments</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <identifier>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <success>templateArguments</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                          <identifier>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                           <success>templateArguments</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>templateArguments</success>
                                                                      </Identifier>
                                                                     <success>templateArguments</success>
                                                                    </UnqualifiedId>
                                                                   <success>templateArguments</success>
                                                                  </IdExpression>
                                                                 <success>templateArguments</success>
                                                                </PrimaryExpression>
                                                                <IdExpression>
                                                                 <try>push_back(templateArgument); </try>
                                                                  <QualifiedId>
                                                                   <try>push_back(templateArgument); </try>
                                                                    <NestedNameSpecifier>
                                                                     <try>push_back(templateArgument); </try>
                                                                      <IdNode>
                                                                       <try>push_back(templateArgument); </try>
                                                                        <SimpleTemplateId>
                                                                         <try>push_back(templateArgument); </try>
                                                                          <TemplateName>
                                                                           <try>push_back(templateArgument); </try>
                                                                            <Identifier>
                                                                             <try>push_back(templateArgument); </try>
                                                                              <identifier>
                                                                               <try>push_back(templateArgument); </try>
                                                                               <success>push_back</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>push_back(templateArgument); </try>
                                                                                <identifier>
                                                                                 <try>push_back(templateArgument); </try>
                                                                                 <success>push_back</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>push_back</success>
                                                                            </Identifier>
                                                                           <success>push_back</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                        <Identifier>
                                                                         <try>push_back(templateArgument); </try>
                                                                          <identifier>
                                                                           <try>push_back(templateArgument); </try>
                                                                           <success>push_back</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>push_back(templateArgument); </try>
                                                                            <identifier>
                                                                             <try>push_back(templateArgument); </try>
                                                                             <success>push_back</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>push_back</success>
                                                                        </Identifier>
                                                                       <success>push_back</success>
                                                                      </IdNode>
                                                                     <fail/>
                                                                    </NestedNameSpecifier>
                                                                   <fail/>
                                                                  </QualifiedId>
                                                                  <UnqualifiedId>
                                                                   <try>push_back(templateArgument); </try>
                                                                    <TemplateId>
                                                                     <try>push_back(templateArgument); </try>
                                                                      <SimpleTemplateId>
                                                                       <try>push_back(templateArgument); </try>
                                                                        <TemplateName>
                                                                         <try>push_back(templateArgument); </try>
                                                                          <Identifier>
                                                                           <try>push_back(templateArgument); </try>
                                                                            <identifier>
                                                                             <try>push_back(templateArgument); </try>
                                                                             <success>push_back</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>push_back(templateArgument); </try>
                                                                              <identifier>
                                                                               <try>push_back(templateArgument); </try>
                                                                               <success>push_back</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>push_back</success>
                                                                          </Identifier>
                                                                         <success>push_back</success>
                                                                        </TemplateName>
                                                                       <fail/>
                                                                      </SimpleTemplateId>
                                                                     <fail/>
                                                                    </TemplateId>
                                                                    <Identifier>
                                                                     <try>push_back(templateArgument); </try>
                                                                      <identifier>
                                                                       <try>push_back(templateArgument); </try>
                                                                       <success>push_back</success>
                                                                      </identifier>
                                                                      <Keyword>
                                                                       <try>push_back(templateArgument); </try>
                                                                        <identifier>
                                                                         <try>push_back(templateArgument); </try>
                                                                         <success>push_back</success>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Keyword>
                                                                     <success>push_back</success>
                                                                    </Identifier>
                                                                   <success>push_back</success>
                                                                  </UnqualifiedId>
                                                                 <success>push_back</success>
                                                                </IdExpression>
                                                                <ExpressionList>
                                                                 <try>templateArgument); </try>
                                                                  <InitializerList>
                                                                   <try>templateArgument); </try>
                                                                    <InitializerClause>
                                                                     <try>templateArgument); </try>
                                                                      <AssignmentExpression>
                                                                       <try>templateArgument); </try>
                                                                        <LogicalOrExpression>
                                                                         <try>templateArgument); </try>
                                                                          <LogicalAndExpression>
                                                                           <try>templateArgument); </try>
                                                                            <InclusiveOrExpression>
                                                                             <try>templateArgument); </try>
                                                                              <ExclusiveOrExpression>
                                                                               <try>templateArgument); </try>
                                                                                <AndExpression>
                                                                                 <try>templateArgument); </try>
                                                                                  <EqualityExpression>
                                                                                   <try>templateArgument); </try>
                                                                                    <RelationalExpression>
                                                                                     <try>templateArgument); </try>
                                                                                      <ShiftExpression>
                                                                                       <try>templateArgument); </try>
                                                                                        <AdditiveExpression>
                                                                                         <try>templateArgument); </try>
                                                                                          <MultiplicativeExpression>
                                                                                           <try>templateArgument); </try>
                                                                                            <PMExpression>
                                                                                             <try>templateArgument); </try>
                                                                                              <CastExpression>
                                                                                               <try>templateArgument); </try>
                                                                                                <UnaryExpression>
                                                                                                 <try>templateArgument); </try>
                                                                                                  <UnaryOperator>
                                                                                                   <try>templateArgument); </try>
                                                                                                   <fail/>
                                                                                                  </UnaryOperator>
                                                                                                  <sizeof>
                                                                                                   <try>templateArgument); </try>
                                                                                                   <fail/>
                                                                                                  </sizeof>
                                                                                                  <alignof>
                                                                                                   <try>templateArgument); </try>
                                                                                                   <fail/>
                                                                                                  </alignof>
                                                                                                  <NewExpression>
                                                                                                   <try>templateArgument); </try>
                                                                                                    <new>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </new>
                                                                                                   <fail/>
                                                                                                  </NewExpression>
                                                                                                  <DeleteExpression>
                                                                                                   <try>templateArgument); </try>
                                                                                                    <delete>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </delete>
                                                                                                   <fail/>
                                                                                                  </DeleteExpression>
                                                                                                  <PostfixExpression>
                                                                                                   <try>templateArgument); </try>
                                                                                                    <PrimaryExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <Literal>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <FloatingLiteral>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <FractionalConstant>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FractionalConstant>
                                                                                                          <digit_sequence>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </digit_sequence>
                                                                                                         <fail/>
                                                                                                        </FloatingLiteral>
                                                                                                        <IntegerLiteral>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <HexadecimalLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </HexadecimalLiteral>
                                                                                                          <OctalLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </OctalLiteral>
                                                                                                          <DecimalLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </DecimalLiteral>
                                                                                                         <fail/>
                                                                                                        </IntegerLiteral>
                                                                                                        <CharacterLiteral>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </CharacterLiteral>
                                                                                                        <StringLiteral>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <EncodingPrefix>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </EncodingPrefix>
                                                                                                          <EncodingPrefix>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </EncodingPrefix>
                                                                                                         <fail/>
                                                                                                        </StringLiteral>
                                                                                                        <BooleanLiteral>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <true>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </true>
                                                                                                          <false>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </false>
                                                                                                         <fail/>
                                                                                                        </BooleanLiteral>
                                                                                                        <PointerLiteral>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <nullptr>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </nullptr>
                                                                                                         <fail/>
                                                                                                        </PointerLiteral>
                                                                                                       <fail/>
                                                                                                      </Literal>
                                                                                                      <this>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </this>
                                                                                                      <CppCastExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <dynamic_cast>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </dynamic_cast>
                                                                                                        <static_cast>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </static_cast>
                                                                                                        <reinterpret_cast>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </reinterpret_cast>
                                                                                                        <const_cast>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </const_cast>
                                                                                                       <fail/>
                                                                                                      </CppCastExpression>
                                                                                                      <TypeIdExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <typeid>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </typeid>
                                                                                                        <typeid>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </typeid>
                                                                                                       <fail/>
                                                                                                      </TypeIdExpression>
                                                                                                      <IdExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <QualifiedId>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <NestedNameSpecifier>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <IdNode>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                              <Identifier>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                                <Keyword>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                 <fail/>
                                                                                                                </Keyword>
                                                                                                               <success>templateArgument</success>
                                                                                                              </Identifier>
                                                                                                             <success>templateArgument</success>
                                                                                                            </IdNode>
                                                                                                           <fail/>
                                                                                                          </NestedNameSpecifier>
                                                                                                         <fail/>
                                                                                                        </QualifiedId>
                                                                                                        <UnqualifiedId>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <TemplateId>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <SimpleTemplateId>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <TemplateName>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </TemplateName>
                                                                                                             <fail/>
                                                                                                            </SimpleTemplateId>
                                                                                                           <fail/>
                                                                                                          </TemplateId>
                                                                                                          <Identifier>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <identifier>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <success>templateArgument</success>
                                                                                                            </identifier>
                                                                                                            <Keyword>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                             <fail/>
                                                                                                            </Keyword>
                                                                                                           <success>templateArgument</success>
                                                                                                          </Identifier>
                                                                                                         <success>templateArgument</success>
                                                                                                        </UnqualifiedId>
                                                                                                       <success>templateArgument</success>
                                                                                                      </IdExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PrimaryExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </PostfixExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </UnaryExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </CastExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </PMExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </MultiplicativeExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </AdditiveExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </ShiftExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </RelationalExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </EqualityExpression>
                                                                                 <success>templateArgument</success>
                                                                                </AndExpression>
                                                                               <success>templateArgument</success>
                                                                              </ExclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </InclusiveOrExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalAndExpression>
                                                                         <success>templateArgument</success>
                                                                        </LogicalOrExpression>
                                                                        <AssignmentOperator>
                                                                         <try>); </try>
                                                                         <fail/>
                                                                        </AssignmentOperator>
                                                                        <ConditionalExpression>
                                                                         <try>templateArgument); </try>
                                                                          <LogicalOrExpression>
                                                                           <try>templateArgument); </try>
                                                                            <LogicalAndExpression>
                                                                             <try>templateArgument); </try>
                                                                              <InclusiveOrExpression>
                                                                               <try>templateArgument); </try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>templateArgument); </try>
                                                                                  <AndExpression>
                                                                                   <try>templateArgument); </try>
                                                                                    <EqualityExpression>
                                                                                     <try>templateArgument); </try>
                                                                                      <RelationalExpression>
                                                                                       <try>templateArgument); </try>
                                                                                        <ShiftExpression>
                                                                                         <try>templateArgument); </try>
                                                                                          <AdditiveExpression>
                                                                                           <try>templateArgument); </try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>templateArgument); </try>
                                                                                              <PMExpression>
                                                                                               <try>templateArgument); </try>
                                                                                                <CastExpression>
                                                                                                 <try>templateArgument); </try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>templateArgument); </try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </UnaryOperator>
                                                                                                    <sizeof>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </sizeof>
                                                                                                    <alignof>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </alignof>
                                                                                                    <NewExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <new>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </new>
                                                                                                     <fail/>
                                                                                                    </NewExpression>
                                                                                                    <DeleteExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <delete>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </delete>
                                                                                                     <fail/>
                                                                                                    </DeleteExpression>
                                                                                                    <PostfixExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <PrimaryExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <Literal>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <FloatingLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <FractionalConstant>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FractionalConstant>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FloatingLiteral>
                                                                                                          <IntegerLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <HexadecimalLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </HexadecimalLiteral>
                                                                                                            <OctalLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </OctalLiteral>
                                                                                                            <DecimalLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </DecimalLiteral>
                                                                                                           <fail/>
                                                                                                          </IntegerLiteral>
                                                                                                          <CharacterLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </CharacterLiteral>
                                                                                                          <StringLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                           <fail/>
                                                                                                          </StringLiteral>
                                                                                                          <BooleanLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <true>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </true>
                                                                                                            <false>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </false>
                                                                                                           <fail/>
                                                                                                          </BooleanLiteral>
                                                                                                          <PointerLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <nullptr>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </nullptr>
                                                                                                           <fail/>
                                                                                                          </PointerLiteral>
                                                                                                         <fail/>
                                                                                                        </Literal>
                                                                                                        <this>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </this>
                                                                                                        <CppCastExpression>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <dynamic_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </dynamic_cast>
                                                                                                          <static_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </static_cast>
                                                                                                          <reinterpret_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </reinterpret_cast>
                                                                                                          <const_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </const_cast>
                                                                                                         <fail/>
                                                                                                        </CppCastExpression>
                                                                                                        <TypeIdExpression>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                         <fail/>
                                                                                                        </TypeIdExpression>
                                                                                                        <IdExpression>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <QualifiedId>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <NestedNameSpecifier>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <IdNode>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument); </try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </IdNode>
                                                                                                             <fail/>
                                                                                                            </NestedNameSpecifier>
                                                                                                           <fail/>
                                                                                                          </QualifiedId>
                                                                                                          <UnqualifiedId>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <TemplateId>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                             <fail/>
                                                                                                            </TemplateId>
                                                                                                            <Identifier>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                              <Keyword>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                               <fail/>
                                                                                                              </Keyword>
                                                                                                             <success>templateArgument</success>
                                                                                                            </Identifier>
                                                                                                           <success>templateArgument</success>
                                                                                                          </UnqualifiedId>
                                                                                                         <success>templateArgument</success>
                                                                                                        </IdExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PrimaryExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PostfixExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </CastExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </PMExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </ShiftExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </RelationalExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </EqualityExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </AndExpression>
                                                                                 <success>templateArgument</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalAndExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalOrExpression>
                                                                         <success>templateArgument</success>
                                                                        </ConditionalExpression>
                                                                       <success>templateArgument</success>
                                                                      </AssignmentExpression>
                                                                     <success>templateArgument</success>
                                                                    </InitializerClause>
                                                                   <success>templateArgument</success>
                                                                  </InitializerList>
                                                                 <success>templateArgument</success>
                                                                </ExpressionList>
                                                               <success>templateArguments.push_back(templateArgument)</success>
                                                              </PostfixExpression>
                                                             <success>templateArguments.push_back(templateArgument)</success>
                                                            </UnaryExpression>
                                                           <success>templateArguments.push_back(templateArgument)</success>
                                                          </CastExpression>
                                                         <success>templateArguments.push_back(templateArgument)</success>
                                                        </PMExpression>
                                                       <success>templateArguments.push_back(templateArgument)</success>
                                                      </MultiplicativeExpression>
                                                     <success>templateArguments.push_back(templateArgument)</success>
                                                    </AdditiveExpression>
                                                   <success>templateArguments.push_back(templateArgument)</success>
                                                  </ShiftExpression>
                                                 <success>templateArguments.push_back(templateArgument)</success>
                                                </RelationalExpression>
                                               <success>templateArguments.push_back(templateArgument)</success>
                                              </EqualityExpression>
                                             <success>templateArguments.push_back(templateArgument)</success>
                                            </AndExpression>
                                           <success>templateArguments.push_back(templateArgument)</success>
                                          </ExclusiveOrExpression>
                                         <success>templateArguments.push_back(templateArgument)</success>
                                        </InclusiveOrExpression>
                                       <success>templateArguments.push_back(templateArgument)</success>
                                      </LogicalAndExpression>
                                     <success>templateArguments.push_back(templateArgument)</success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>; </try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>templateArguments.push_back(templateArgument); </try>
                                      <LogicalOrExpression>
                                       <try>templateArguments.push_back(templateArgument); </try>
                                        <LogicalAndExpression>
                                         <try>templateArguments.push_back(templateArgument); </try>
                                          <InclusiveOrExpression>
                                           <try>templateArguments.push_back(templateArgument); </try>
                                            <ExclusiveOrExpression>
                                             <try>templateArguments.push_back(templateArgument); </try>
                                              <AndExpression>
                                               <try>templateArguments.push_back(templateArgument); </try>
                                                <EqualityExpression>
                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                  <RelationalExpression>
                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                    <ShiftExpression>
                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                      <AdditiveExpression>
                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                        <MultiplicativeExpression>
                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                          <PMExpression>
                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                            <CastExpression>
                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                              <UnaryExpression>
                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                <UnaryOperator>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                  <new>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                  <delete>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                  <PrimaryExpression>
                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                    <Literal>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <FloatingLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <FractionalConstant>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                          <digit_sequence>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <HexadecimalLiteral>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <EncodingPrefix>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <true>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <nullptr>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <dynamic_cast>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <typeid>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                      <QualifiedId>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <NestedNameSpecifier>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                          <IdNode>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                            <SimpleTemplateId>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                              <TemplateName>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                                <Identifier>
                                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                                  <identifier>
                                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                                   <success>templateArguments</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                                    <identifier>
                                                                                     <try>templateArguments.push_back(templateArgument); </try>
                                                                                     <success>templateArguments</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>templateArguments</success>
                                                                                </Identifier>
                                                                               <success>templateArguments</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                              <identifier>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                               <success>templateArguments</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                                <identifier>
                                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                                 <success>templateArguments</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>templateArguments</success>
                                                                            </Identifier>
                                                                           <success>templateArguments</success>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>templateArguments.push_back(templateArgument); </try>
                                                                        <TemplateId>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                          <SimpleTemplateId>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                            <TemplateName>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                              <Identifier>
                                                                               <try>templateArguments.push_back(templateArgument); </try>
                                                                                <identifier>
                                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                                 <success>templateArguments</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>templateArguments.push_back(templateArgument); </try>
                                                                                  <identifier>
                                                                                   <try>templateArguments.push_back(templateArgument); </try>
                                                                                   <success>templateArguments</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>templateArguments</success>
                                                                              </Identifier>
                                                                             <success>templateArguments</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>templateArguments.push_back(templateArgument); </try>
                                                                          <identifier>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                           <success>templateArguments</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>templateArguments.push_back(templateArgument); </try>
                                                                            <identifier>
                                                                             <try>templateArguments.push_back(templateArgument); </try>
                                                                             <success>templateArguments</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>templateArguments</success>
                                                                        </Identifier>
                                                                       <success>templateArguments</success>
                                                                      </UnqualifiedId>
                                                                     <success>templateArguments</success>
                                                                    </IdExpression>
                                                                   <success>templateArguments</success>
                                                                  </PrimaryExpression>
                                                                  <IdExpression>
                                                                   <try>push_back(templateArgument); </try>
                                                                    <QualifiedId>
                                                                     <try>push_back(templateArgument); </try>
                                                                      <NestedNameSpecifier>
                                                                       <try>push_back(templateArgument); </try>
                                                                        <IdNode>
                                                                         <try>push_back(templateArgument); </try>
                                                                          <SimpleTemplateId>
                                                                           <try>push_back(templateArgument); </try>
                                                                            <TemplateName>
                                                                             <try>push_back(templateArgument); </try>
                                                                              <Identifier>
                                                                               <try>push_back(templateArgument); </try>
                                                                                <identifier>
                                                                                 <try>push_back(templateArgument); </try>
                                                                                 <success>push_back</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>push_back(templateArgument); </try>
                                                                                  <identifier>
                                                                                   <try>push_back(templateArgument); </try>
                                                                                   <success>push_back</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>push_back</success>
                                                                              </Identifier>
                                                                             <success>push_back</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>push_back(templateArgument); </try>
                                                                            <identifier>
                                                                             <try>push_back(templateArgument); </try>
                                                                             <success>push_back</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>push_back(templateArgument); </try>
                                                                              <identifier>
                                                                               <try>push_back(templateArgument); </try>
                                                                               <success>push_back</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>push_back</success>
                                                                          </Identifier>
                                                                         <success>push_back</success>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>push_back(templateArgument); </try>
                                                                      <TemplateId>
                                                                       <try>push_back(templateArgument); </try>
                                                                        <SimpleTemplateId>
                                                                         <try>push_back(templateArgument); </try>
                                                                          <TemplateName>
                                                                           <try>push_back(templateArgument); </try>
                                                                            <Identifier>
                                                                             <try>push_back(templateArgument); </try>
                                                                              <identifier>
                                                                               <try>push_back(templateArgument); </try>
                                                                               <success>push_back</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>push_back(templateArgument); </try>
                                                                                <identifier>
                                                                                 <try>push_back(templateArgument); </try>
                                                                                 <success>push_back</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>push_back</success>
                                                                            </Identifier>
                                                                           <success>push_back</success>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>push_back(templateArgument); </try>
                                                                        <identifier>
                                                                         <try>push_back(templateArgument); </try>
                                                                         <success>push_back</success>
                                                                        </identifier>
                                                                        <Keyword>
                                                                         <try>push_back(templateArgument); </try>
                                                                          <identifier>
                                                                           <try>push_back(templateArgument); </try>
                                                                           <success>push_back</success>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Keyword>
                                                                       <success>push_back</success>
                                                                      </Identifier>
                                                                     <success>push_back</success>
                                                                    </UnqualifiedId>
                                                                   <success>push_back</success>
                                                                  </IdExpression>
                                                                  <ExpressionList>
                                                                   <try>templateArgument); </try>
                                                                    <InitializerList>
                                                                     <try>templateArgument); </try>
                                                                      <InitializerClause>
                                                                       <try>templateArgument); </try>
                                                                        <AssignmentExpression>
                                                                         <try>templateArgument); </try>
                                                                          <LogicalOrExpression>
                                                                           <try>templateArgument); </try>
                                                                            <LogicalAndExpression>
                                                                             <try>templateArgument); </try>
                                                                              <InclusiveOrExpression>
                                                                               <try>templateArgument); </try>
                                                                                <ExclusiveOrExpression>
                                                                                 <try>templateArgument); </try>
                                                                                  <AndExpression>
                                                                                   <try>templateArgument); </try>
                                                                                    <EqualityExpression>
                                                                                     <try>templateArgument); </try>
                                                                                      <RelationalExpression>
                                                                                       <try>templateArgument); </try>
                                                                                        <ShiftExpression>
                                                                                         <try>templateArgument); </try>
                                                                                          <AdditiveExpression>
                                                                                           <try>templateArgument); </try>
                                                                                            <MultiplicativeExpression>
                                                                                             <try>templateArgument); </try>
                                                                                              <PMExpression>
                                                                                               <try>templateArgument); </try>
                                                                                                <CastExpression>
                                                                                                 <try>templateArgument); </try>
                                                                                                  <UnaryExpression>
                                                                                                   <try>templateArgument); </try>
                                                                                                    <UnaryOperator>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </UnaryOperator>
                                                                                                    <sizeof>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </sizeof>
                                                                                                    <alignof>
                                                                                                     <try>templateArgument); </try>
                                                                                                     <fail/>
                                                                                                    </alignof>
                                                                                                    <NewExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <new>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </new>
                                                                                                     <fail/>
                                                                                                    </NewExpression>
                                                                                                    <DeleteExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <delete>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </delete>
                                                                                                     <fail/>
                                                                                                    </DeleteExpression>
                                                                                                    <PostfixExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <PrimaryExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <Literal>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <FloatingLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <FractionalConstant>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FractionalConstant>
                                                                                                            <digit_sequence>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </digit_sequence>
                                                                                                           <fail/>
                                                                                                          </FloatingLiteral>
                                                                                                          <IntegerLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <HexadecimalLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </HexadecimalLiteral>
                                                                                                            <OctalLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </OctalLiteral>
                                                                                                            <DecimalLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </DecimalLiteral>
                                                                                                           <fail/>
                                                                                                          </IntegerLiteral>
                                                                                                          <CharacterLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </CharacterLiteral>
                                                                                                          <StringLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                            <EncodingPrefix>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </EncodingPrefix>
                                                                                                           <fail/>
                                                                                                          </StringLiteral>
                                                                                                          <BooleanLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <true>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </true>
                                                                                                            <false>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </false>
                                                                                                           <fail/>
                                                                                                          </BooleanLiteral>
                                                                                                          <PointerLiteral>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <nullptr>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </nullptr>
                                                                                                           <fail/>
                                                                                                          </PointerLiteral>
                                                                                                         <fail/>
                                                                                                        </Literal>
                                                                                                        <this>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </this>
                                                                                                        <CppCastExpression>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <dynamic_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </dynamic_cast>
                                                                                                          <static_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </static_cast>
                                                                                                          <reinterpret_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </reinterpret_cast>
                                                                                                          <const_cast>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </const_cast>
                                                                                                         <fail/>
                                                                                                        </CppCastExpression>
                                                                                                        <TypeIdExpression>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                          <typeid>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </typeid>
                                                                                                         <fail/>
                                                                                                        </TypeIdExpression>
                                                                                                        <IdExpression>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <QualifiedId>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <NestedNameSpecifier>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <IdNode>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument); </try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                                <Identifier>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                  <Keyword>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                   <fail/>
                                                                                                                  </Keyword>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </Identifier>
                                                                                                               <success>templateArgument</success>
                                                                                                              </IdNode>
                                                                                                             <fail/>
                                                                                                            </NestedNameSpecifier>
                                                                                                           <fail/>
                                                                                                          </QualifiedId>
                                                                                                          <UnqualifiedId>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <TemplateId>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <SimpleTemplateId>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <TemplateName>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </TemplateName>
                                                                                                               <fail/>
                                                                                                              </SimpleTemplateId>
                                                                                                             <fail/>
                                                                                                            </TemplateId>
                                                                                                            <Identifier>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <identifier>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <success>templateArgument</success>
                                                                                                              </identifier>
                                                                                                              <Keyword>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                               <fail/>
                                                                                                              </Keyword>
                                                                                                             <success>templateArgument</success>
                                                                                                            </Identifier>
                                                                                                           <success>templateArgument</success>
                                                                                                          </UnqualifiedId>
                                                                                                         <success>templateArgument</success>
                                                                                                        </IdExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PrimaryExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </PostfixExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </UnaryExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </CastExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </PMExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </MultiplicativeExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </AdditiveExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </ShiftExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </RelationalExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </EqualityExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </AndExpression>
                                                                                 <success>templateArgument</success>
                                                                                </ExclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </InclusiveOrExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalAndExpression>
                                                                           <success>templateArgument</success>
                                                                          </LogicalOrExpression>
                                                                          <AssignmentOperator>
                                                                           <try>); </try>
                                                                           <fail/>
                                                                          </AssignmentOperator>
                                                                          <ConditionalExpression>
                                                                           <try>templateArgument); </try>
                                                                            <LogicalOrExpression>
                                                                             <try>templateArgument); </try>
                                                                              <LogicalAndExpression>
                                                                               <try>templateArgument); </try>
                                                                                <InclusiveOrExpression>
                                                                                 <try>templateArgument); </try>
                                                                                  <ExclusiveOrExpression>
                                                                                   <try>templateArgument); </try>
                                                                                    <AndExpression>
                                                                                     <try>templateArgument); </try>
                                                                                      <EqualityExpression>
                                                                                       <try>templateArgument); </try>
                                                                                        <RelationalExpression>
                                                                                         <try>templateArgument); </try>
                                                                                          <ShiftExpression>
                                                                                           <try>templateArgument); </try>
                                                                                            <AdditiveExpression>
                                                                                             <try>templateArgument); </try>
                                                                                              <MultiplicativeExpression>
                                                                                               <try>templateArgument); </try>
                                                                                                <PMExpression>
                                                                                                 <try>templateArgument); </try>
                                                                                                  <CastExpression>
                                                                                                   <try>templateArgument); </try>
                                                                                                    <UnaryExpression>
                                                                                                     <try>templateArgument); </try>
                                                                                                      <UnaryOperator>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </UnaryOperator>
                                                                                                      <sizeof>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </sizeof>
                                                                                                      <alignof>
                                                                                                       <try>templateArgument); </try>
                                                                                                       <fail/>
                                                                                                      </alignof>
                                                                                                      <NewExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <new>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </new>
                                                                                                       <fail/>
                                                                                                      </NewExpression>
                                                                                                      <DeleteExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <delete>
                                                                                                         <try>templateArgument); </try>
                                                                                                         <fail/>
                                                                                                        </delete>
                                                                                                       <fail/>
                                                                                                      </DeleteExpression>
                                                                                                      <PostfixExpression>
                                                                                                       <try>templateArgument); </try>
                                                                                                        <PrimaryExpression>
                                                                                                         <try>templateArgument); </try>
                                                                                                          <Literal>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <FloatingLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <FractionalConstant>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <digit_sequence>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                                <digit_sequence>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                 <fail/>
                                                                                                                </digit_sequence>
                                                                                                               <fail/>
                                                                                                              </FractionalConstant>
                                                                                                              <digit_sequence>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </digit_sequence>
                                                                                                             <fail/>
                                                                                                            </FloatingLiteral>
                                                                                                            <IntegerLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <HexadecimalLiteral>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </HexadecimalLiteral>
                                                                                                              <OctalLiteral>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </OctalLiteral>
                                                                                                              <DecimalLiteral>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </DecimalLiteral>
                                                                                                             <fail/>
                                                                                                            </IntegerLiteral>
                                                                                                            <CharacterLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </CharacterLiteral>
                                                                                                            <StringLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                              <EncodingPrefix>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </EncodingPrefix>
                                                                                                             <fail/>
                                                                                                            </StringLiteral>
                                                                                                            <BooleanLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <true>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </true>
                                                                                                              <false>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </false>
                                                                                                             <fail/>
                                                                                                            </BooleanLiteral>
                                                                                                            <PointerLiteral>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <nullptr>
                                                                                                               <try>templateArgument); </try>
                                                                                                               <fail/>
                                                                                                              </nullptr>
                                                                                                             <fail/>
                                                                                                            </PointerLiteral>
                                                                                                           <fail/>
                                                                                                          </Literal>
                                                                                                          <this>
                                                                                                           <try>templateArgument); </try>
                                                                                                           <fail/>
                                                                                                          </this>
                                                                                                          <CppCastExpression>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <dynamic_cast>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </dynamic_cast>
                                                                                                            <static_cast>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </static_cast>
                                                                                                            <reinterpret_cast>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </reinterpret_cast>
                                                                                                            <const_cast>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </const_cast>
                                                                                                           <fail/>
                                                                                                          </CppCastExpression>
                                                                                                          <TypeIdExpression>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <typeid>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </typeid>
                                                                                                            <typeid>
                                                                                                             <try>templateArgument); </try>
                                                                                                             <fail/>
                                                                                                            </typeid>
                                                                                                           <fail/>
                                                                                                          </TypeIdExpression>
                                                                                                          <IdExpression>
                                                                                                           <try>templateArgument); </try>
                                                                                                            <QualifiedId>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <NestedNameSpecifier>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <IdNode>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <SimpleTemplateId>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <TemplateName>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <Identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument); </try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                        <Keyword>
                                                                                                                         <try>templateArgument); </try>
                                                                                                                          <identifier>
                                                                                                                           <try>templateArgument); </try>
                                                                                                                           <success>templateArgument</success>
                                                                                                                          </identifier>
                                                                                                                         <fail/>
                                                                                                                        </Keyword>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </Identifier>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </TemplateName>
                                                                                                                   <fail/>
                                                                                                                  </SimpleTemplateId>
                                                                                                                  <Identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </identifier>
                                                                                                                    <Keyword>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                     <fail/>
                                                                                                                    </Keyword>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </Identifier>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </IdNode>
                                                                                                               <fail/>
                                                                                                              </NestedNameSpecifier>
                                                                                                             <fail/>
                                                                                                            </QualifiedId>
                                                                                                            <UnqualifiedId>
                                                                                                             <try>templateArgument); </try>
                                                                                                              <TemplateId>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <SimpleTemplateId>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <TemplateName>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                    <Identifier>
                                                                                                                     <try>templateArgument); </try>
                                                                                                                      <identifier>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                       <success>templateArgument</success>
                                                                                                                      </identifier>
                                                                                                                      <Keyword>
                                                                                                                       <try>templateArgument); </try>
                                                                                                                        <identifier>
                                                                                                                         <try>templateArgument); </try>
                                                                                                                         <success>templateArgument</success>
                                                                                                                        </identifier>
                                                                                                                       <fail/>
                                                                                                                      </Keyword>
                                                                                                                     <success>templateArgument</success>
                                                                                                                    </Identifier>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </TemplateName>
                                                                                                                 <fail/>
                                                                                                                </SimpleTemplateId>
                                                                                                               <fail/>
                                                                                                              </TemplateId>
                                                                                                              <Identifier>
                                                                                                               <try>templateArgument); </try>
                                                                                                                <identifier>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                 <success>templateArgument</success>
                                                                                                                </identifier>
                                                                                                                <Keyword>
                                                                                                                 <try>templateArgument); </try>
                                                                                                                  <identifier>
                                                                                                                   <try>templateArgument); </try>
                                                                                                                   <success>templateArgument</success>
                                                                                                                  </identifier>
                                                                                                                 <fail/>
                                                                                                                </Keyword>
                                                                                                               <success>templateArgument</success>
                                                                                                              </Identifier>
                                                                                                             <success>templateArgument</success>
                                                                                                            </UnqualifiedId>
                                                                                                           <success>templateArgument</success>
                                                                                                          </IdExpression>
                                                                                                         <success>templateArgument</success>
                                                                                                        </PrimaryExpression>
                                                                                                       <success>templateArgument</success>
                                                                                                      </PostfixExpression>
                                                                                                     <success>templateArgument</success>
                                                                                                    </UnaryExpression>
                                                                                                   <success>templateArgument</success>
                                                                                                  </CastExpression>
                                                                                                 <success>templateArgument</success>
                                                                                                </PMExpression>
                                                                                               <success>templateArgument</success>
                                                                                              </MultiplicativeExpression>
                                                                                             <success>templateArgument</success>
                                                                                            </AdditiveExpression>
                                                                                           <success>templateArgument</success>
                                                                                          </ShiftExpression>
                                                                                         <success>templateArgument</success>
                                                                                        </RelationalExpression>
                                                                                       <success>templateArgument</success>
                                                                                      </EqualityExpression>
                                                                                     <success>templateArgument</success>
                                                                                    </AndExpression>
                                                                                   <success>templateArgument</success>
                                                                                  </ExclusiveOrExpression>
                                                                                 <success>templateArgument</success>
                                                                                </InclusiveOrExpression>
                                                                               <success>templateArgument</success>
                                                                              </LogicalAndExpression>
                                                                             <success>templateArgument</success>
                                                                            </LogicalOrExpression>
                                                                           <success>templateArgument</success>
                                                                          </ConditionalExpression>
                                                                         <success>templateArgument</success>
                                                                        </AssignmentExpression>
                                                                       <success>templateArgument</success>
                                                                      </InitializerClause>
                                                                     <success>templateArgument</success>
                                                                    </InitializerList>
                                                                   <success>templateArgument</success>
                                                                  </ExpressionList>
                                                                 <success>templateArguments.push_back(templateArgument)</success>
                                                                </PostfixExpression>
                                                               <success>templateArguments.push_back(templateArgument)</success>
                                                              </UnaryExpression>
                                                             <success>templateArguments.push_back(templateArgument)</success>
                                                            </CastExpression>
                                                           <success>templateArguments.push_back(templateArgument)</success>
                                                          </PMExpression>
                                                         <success>templateArguments.push_back(templateArgument)</success>
                                                        </MultiplicativeExpression>
                                                       <success>templateArguments.push_back(templateArgument)</success>
                                                      </AdditiveExpression>
                                                     <success>templateArguments.push_back(templateArgument)</success>
                                                    </ShiftExpression>
                                                   <success>templateArguments.push_back(templateArgument)</success>
                                                  </RelationalExpression>
                                                 <success>templateArguments.push_back(templateArgument)</success>
                                                </EqualityExpression>
                                               <success>templateArguments.push_back(templateArgument)</success>
                                              </AndExpression>
                                             <success>templateArguments.push_back(templateArgument)</success>
                                            </ExclusiveOrExpression>
                                           <success>templateArguments.push_back(templateArgument)</success>
                                          </InclusiveOrExpression>
                                         <success>templateArguments.push_back(templateArgument)</success>
                                        </LogicalAndExpression>
                                       <success>templateArguments.push_back(templateArgument)</success>
                                      </LogicalOrExpression>
                                     <success>templateArguments.push_back(templateArgument)</success>
                                    </ConditionalExpression>
                                   <success>templateArguments.push_back(templateArgument)</success>
                                  </AssignmentExpression>
                                 <success>templateArguments.push_back(templateArgument)</success>
                                </Expression>
                               <success>templateArguments.push_back(templateArgument);</success>
                              </ExpressionStatement>
                             <success>templateArguments.push_back(templateArgument);</success>
                            </Statement>
                            <Statement>
                             <try>}</try>
                              <LabeledStatement>
                               <try>}</try>
                                <Identifier>
                                 <try>}</try>
                                  <identifier>
                                   <try>}</try>
                                   <fail/>
                                  </identifier>
                                 <fail/>
                                </Identifier>
                                <case>
                                 <try>}</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>}</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>}</try>
                                <Expression>
                                 <try>}</try>
                                  <AssignmentExpression>
                                   <try>}</try>
                                    <LogicalOrExpression>
                                     <try>}</try>
                                      <LogicalAndExpression>
                                       <try>}</try>
                                        <InclusiveOrExpression>
                                         <try>}</try>
                                          <ExclusiveOrExpression>
                                           <try>}</try>
                                            <AndExpression>
                                             <try>}</try>
                                              <EqualityExpression>
                                               <try>}</try>
                                                <RelationalExpression>
                                                 <try>}</try>
                                                  <ShiftExpression>
                                                   <try>}</try>
                                                    <AdditiveExpression>
                                                     <try>}</try>
                                                      <MultiplicativeExpression>
                                                       <try>}</try>
                                                        <PMExpression>
                                                         <try>}</try>
                                                          <CastExpression>
                                                           <try>}</try>
                                                            <UnaryExpression>
                                                             <try>}</try>
                                                              <UnaryOperator>
                                                               <try>}</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>}</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>}</try>
                                                                <new>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>}</try>
                                                                <delete>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>}</try>
                                                                <PrimaryExpression>
                                                                 <try>}</try>
                                                                  <Literal>
                                                                   <try>}</try>
                                                                    <FloatingLiteral>
                                                                     <try>}</try>
                                                                      <FractionalConstant>
                                                                       <try>}</try>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>}</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>}</try>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>}</try>
                                                                      <true>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>}</try>
                                                                      <nullptr>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>}</try>
                                                                    <dynamic_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>}</try>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>}</try>
                                                                    <QualifiedId>
                                                                     <try>}</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>}</try>
                                                                        <IdNode>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>}</try>
                                                                            <identifier>
                                                                             <try>}</try>
                                                                             <fail/>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Identifier>
                                                                         <fail/>
                                                                        </IdNode>
                                                                       <fail/>
                                                                      </NestedNameSpecifier>
                                                                     <fail/>
                                                                    </QualifiedId>
                                                                    <UnqualifiedId>
                                                                     <try>}</try>
                                                                      <TemplateId>
                                                                       <try>}</try>
                                                                        <SimpleTemplateId>
                                                                         <try>}</try>
                                                                          <TemplateName>
                                                                           <try>}</try>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </TemplateName>
                                                                         <fail/>
                                                                        </SimpleTemplateId>
                                                                       <fail/>
                                                                      </TemplateId>
                                                                      <Identifier>
                                                                       <try>}</try>
                                                                        <identifier>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </identifier>
                                                                       <fail/>
                                                                      </Identifier>
                                                                      <OperatorFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </OperatorFunctionId>
                                                                      <ConversionFunctionId>
                                                                       <try>}</try>
                                                                        <operator>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </operator>
                                                                       <fail/>
                                                                      </ConversionFunctionId>
                                                                     <fail/>
                                                                    </UnqualifiedId>
                                                                   <fail/>
                                                                  </IdExpression>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                  <SimpleTypeSpecifier>
                                                                   <try>}</try>
                                                                    <char>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char>
                                                                    <char16_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char16_t>
                                                                    <char32_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </char32_t>
                                                                    <wchar_t>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </wchar_t>
                                                                    <bool>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </bool>
                                                                    <short>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </short>
                                                                    <int>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </int>
                                                                    <long>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </long>
                                                                    <signed>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </signed>
                                                                    <unsigned>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </unsigned>
                                                                    <float>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </float>
                                                                    <double>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </double>
                                                                    <void>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </void>
                                                                    <auto>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </auto>
                                                                   <fail/>
                                                                  </SimpleTypeSpecifier>
                                                                 <fail/>
                                                                </PrimaryExpression>
                                                               <fail/>
                                                              </PostfixExpression>
                                                             <fail/>
                                                            </UnaryExpression>
                                                           <fail/>
                                                          </CastExpression>
                                                         <fail/>
                                                        </PMExpression>
                                                       <fail/>
                                                      </MultiplicativeExpression>
                                                     <fail/>
                                                    </AdditiveExpression>
                                                   <fail/>
                                                  </ShiftExpression>
                                                 <fail/>
                                                </RelationalExpression>
                                               <fail/>
                                              </EqualityExpression>
                                             <fail/>
                                            </AndExpression>
                                           <fail/>
                                          </ExclusiveOrExpression>
                                         <fail/>
                                        </InclusiveOrExpression>
                                       <fail/>
                                      </LogicalAndExpression>
                                     <fail/>
                                    </LogicalOrExpression>
                                    <ConditionalExpression>
                                     <try>}</try>
                                      <LogicalOrExpression>
                                       <try>}</try>
                                        <LogicalAndExpression>
                                         <try>}</try>
                                          <InclusiveOrExpression>
                                           <try>}</try>
                                            <ExclusiveOrExpression>
                                             <try>}</try>
                                              <AndExpression>
                                               <try>}</try>
                                                <EqualityExpression>
                                                 <try>}</try>
                                                  <RelationalExpression>
                                                   <try>}</try>
                                                    <ShiftExpression>
                                                     <try>}</try>
                                                      <AdditiveExpression>
                                                       <try>}</try>
                                                        <MultiplicativeExpression>
                                                         <try>}</try>
                                                          <PMExpression>
                                                           <try>}</try>
                                                            <CastExpression>
                                                             <try>}</try>
                                                              <UnaryExpression>
                                                               <try>}</try>
                                                                <UnaryOperator>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>}</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>}</try>
                                                                  <new>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>}</try>
                                                                  <delete>
                                                                   <try>}</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>}</try>
                                                                  <PrimaryExpression>
                                                                   <try>}</try>
                                                                    <Literal>
                                                                     <try>}</try>
                                                                      <FloatingLiteral>
                                                                       <try>}</try>
                                                                        <FractionalConstant>
                                                                         <try>}</try>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>}</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>}</try>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>}</try>
                                                                        <true>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>}</try>
                                                                        <nullptr>
                                                                         <try>}</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>}</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>}</try>
                                                                      <dynamic_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>}</try>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>}</try>
                                                                      <QualifiedId>
                                                                       <try>}</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>}</try>
                                                                          <IdNode>
                                                                           <try>}</try>
                                                                            <SimpleTemplateId>
                                                                             <try>}</try>
                                                                              <TemplateName>
                                                                               <try>}</try>
                                                                                <Identifier>
                                                                                 <try>}</try>
                                                                                  <identifier>
                                                                                   <try>}</try>
                                                                                   <fail/>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Identifier>
                                                                               <fail/>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>}</try>
                                                                              <identifier>
                                                                               <try>}</try>
                                                                               <fail/>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Identifier>
                                                                           <fail/>
                                                                          </IdNode>
                                                                         <fail/>
                                                                        </NestedNameSpecifier>
                                                                       <fail/>
                                                                      </QualifiedId>
                                                                      <UnqualifiedId>
                                                                       <try>}</try>
                                                                        <TemplateId>
                                                                         <try>}</try>
                                                                          <SimpleTemplateId>
                                                                           <try>}</try>
                                                                            <TemplateName>
                                                                             <try>}</try>
                                                                              <Identifier>
                                                                               <try>}</try>
                                                                                <identifier>
                                                                                 <try>}</try>
                                                                                 <fail/>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Identifier>
                                                                             <fail/>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>}</try>
                                                                          <identifier>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </identifier>
                                                                         <fail/>
                                                                        </Identifier>
                                                                        <OperatorFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </OperatorFunctionId>
                                                                        <ConversionFunctionId>
                                                                         <try>}</try>
                                                                          <operator>
                                                                           <try>}</try>
                                                                           <fail/>
                                                                          </operator>
                                                                         <fail/>
                                                                        </ConversionFunctionId>
                                                                       <fail/>
                                                                      </UnqualifiedId>
                                                                     <fail/>
                                                                    </IdExpression>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                    <SimpleTypeSpecifier>
                                                                     <try>}</try>
                                                                      <char>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char>
                                                                      <char16_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char16_t>
                                                                      <char32_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </char32_t>
                                                                      <wchar_t>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </wchar_t>
                                                                      <bool>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </bool>
                                                                      <short>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </short>
                                                                      <int>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </int>
                                                                      <long>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </long>
                                                                      <signed>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </signed>
                                                                      <unsigned>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </unsigned>
                                                                      <float>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </float>
                                                                      <double>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </double>
                                                                      <void>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </void>
                                                                      <auto>
                                                                       <try>}</try>
                                                                       <fail/>
                                                                      </auto>
                                                                     <fail/>
                                                                    </SimpleTypeSpecifier>
                                                                   <fail/>
                                                                  </PrimaryExpression>
                                                                 <fail/>
                                                                </PostfixExpression>
                                                               <fail/>
                                                              </UnaryExpression>
                                                             <fail/>
                                                            </CastExpression>
                                                           <fail/>
                                                          </PMExpression>
                                                         <fail/>
                                                        </MultiplicativeExpression>
                                                       <fail/>
                                                      </AdditiveExpression>
                                                     <fail/>
                                                    </ShiftExpression>
                                                   <fail/>
                                                  </RelationalExpression>
                                                 <fail/>
                                                </EqualityExpression>
                                               <fail/>
                                              </AndExpression>
                                             <fail/>
                                            </ExclusiveOrExpression>
                                           <fail/>
                                          </InclusiveOrExpression>
                                         <fail/>
                                        </LogicalAndExpression>
                                       <fail/>
                                      </LogicalOrExpression>
                                     <fail/>
                                    </ConditionalExpression>
                                    <ThrowExpression>
                                     <try>}</try>
                                      <throw>
                                       <try>}</try>
                                       <fail/>
                                      </throw>
                                     <fail/>
                                    </ThrowExpression>
                                   <fail/>
                                  </AssignmentExpression>
                                 <fail/>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>}</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>}</try>
                                <if>
                                 <try>}</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>}</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>}</try>
                                <while>
                                 <try>}</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>}</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>}</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>}</try>
                                <break>
                                 <try>}</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>}</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>}</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>}</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>}</try>
                                <BlockDeclaration>
                                 <try>}</try>
                                  <SimpleDeclaration>
                                   <try>}</try>
                                    <DeclSpecifiers>
                                     <try>}</try>
                                      <DeclSpecifier>
                                       <try>}</try>
                                        <StorageClassSpecifier>
                                         <try>}</try>
                                          <register>
                                           <try>}</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>}</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>}</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>}</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>}</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>}</try>
                                          <inline>
                                           <try>}</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>}</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>}</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>}</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>}</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>}</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>}</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>}</try>
                                      <PrefixTypeExpr>
                                       <try>}</try>
                                        <CVSpecifierSequence>
                                         <try>}</try>
                                          <CVSpecifier>
                                           <try>}</try>
                                            <const>
                                             <try>}</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>}</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>}</try>
                                          <PrimaryTypeExpr>
                                           <try>}</try>
                                            <SimpleType>
                                             <try>}</try>
                                              <SimpleTypeSpecifier>
                                               <try>}</try>
                                                <char>
                                                 <try>}</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>}</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>}</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>}</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>}</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>}</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>}</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>}</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>}</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>}</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>}</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>}</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>}</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>}</try>
                                              <class>
                                               <try>}</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>}</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>}</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>}</try>
                                              <NestedNameSpecifier>
                                               <try>}</try>
                                                <IdNode>
                                                 <try>}</try>
                                                  <SimpleTemplateId>
                                                   <try>}</try>
                                                    <TemplateName>
                                                     <try>}</try>
                                                      <Identifier>
                                                       <try>}</try>
                                                        <identifier>
                                                         <try>}</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>}</try>
                                                    <identifier>
                                                     <try>}</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </IdNode>
                                               <fail/>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>}</try>
                                                <SimpleTemplateId>
                                                 <try>}</try>
                                                  <TemplateName>
                                                   <try>}</try>
                                                    <Identifier>
                                                     <try>}</try>
                                                      <identifier>
                                                       <try>}</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>}</try>
                                                  <identifier>
                                                   <try>}</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </QualifiedIdNode>
                                           <fail/>
                                          </PrimaryTypeExpr>
                                         <fail/>
                                        </PostfixTypeExpr>
                                       <fail/>
                                      </PrefixTypeExpr>
                                     <fail/>
                                    </TypeExpr>
                                   <fail/>
                                  </SimpleDeclaration>
                                  <AliasDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </AliasDeclaration>
                                  <UsingDirective>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDirective>
                                  <UsingDeclaration>
                                   <try>}</try>
                                    <using>
                                     <try>}</try>
                                     <fail/>
                                    </using>
                                   <fail/>
                                  </UsingDeclaration>
                                  <OpaqueEnumDeclaration>
                                   <try>}</try>
                                    <EnumKey>
                                     <try>}</try>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                      <enum>
                                       <try>}</try>
                                       <fail/>
                                      </enum>
                                     <fail/>
                                    </EnumKey>
                                   <fail/>
                                  </OpaqueEnumDeclaration>
                                  <TypedefDeclaration>
                                   <try>}</try>
                                    <typedef>
                                     <try>}</try>
                                     <fail/>
                                    </typedef>
                                   <fail/>
                                  </TypedefDeclaration>
                                  <ForwardClassDeclaration>
                                   <try>}</try>
                                    <ClassKey>
                                     <try>}</try>
                                      <class>
                                       <try>}</try>
                                       <fail/>
                                      </class>
                                      <struct>
                                       <try>}</try>
                                       <fail/>
                                      </struct>
                                      <union>
                                       <try>}</try>
                                       <fail/>
                                      </union>
                                     <fail/>
                                    </ClassKey>
                                   <fail/>
                                  </ForwardClassDeclaration>
                                 <fail/>
                                </BlockDeclaration>
                               <fail/>
                              </DeclarationStatement>
                              <TryBlock>
                               <try>}</try>
                                <try>
                                 <try>}</try>
                                 <fail/>
                                </try>
                               <fail/>
                              </TryBlock>
                             <fail/>
                            </Statement>
                           <success>{ \r\n    Own(templateArgument);\r\n    templateArguments.push_back(templateArgument); \r\n}</success>
                          </CompoundStatement>
                         <success>{ \r\n    Own(templateArgument);\r\n    templateArguments.push_back(templateArgument); \r\n}</success>
                        </FunctionBody>
                       <success>void TypeName::AddTemplateArgument(CppObject* templateArgument) \r\n{ \r\n    Own(templateArgument);\r\n    templateArguments.push_back(templateArgument); \r\n}</success>
                      </FunctionDefinition>
                     <success>void TypeName::AddTemplateArgument(CppObject* templateArgument) \r\n{ \r\n    Own(templateArgument);\r\n    templateArguments.push_back(templateArgument); \r\n}</success>
                    </Declaration>
                    <Declaration>
                     <try>std::u32string TypeName::ToString() const</try>
                      <NamespaceDefinition>
                       <try>std::u32string TypeName::ToString() const</try>
                        <NamedNamespaceDefinition>
                         <try>std::u32string TypeName::ToString() const</try>
                          <namespace>
                           <try>std::u32string TypeName::ToString() const</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </NamedNamespaceDefinition>
                        <UnnamedNamespaceDefinition>
                         <try>std::u32string TypeName::ToString() const</try>
                          <namespace>
                           <try>std::u32string TypeName::ToString() const</try>
                           <fail/>
                          </namespace>
                         <fail/>
                        </UnnamedNamespaceDefinition>
                       <fail/>
                      </NamespaceDefinition>
                      <BlockDeclaration>
                       <try>std::u32string TypeName::ToString() const</try>
                        <SimpleDeclaration>
                         <try>std::u32string TypeName::ToString() const</try>
                          <DeclSpecifiers>
                           <try>std::u32string TypeName::ToString() const</try>
                            <DeclSpecifier>
                             <try>std::u32string TypeName::ToString() const</try>
                              <StorageClassSpecifier>
                               <try>std::u32string TypeName::ToString() const</try>
                                <register>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </register>
                                <static>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </static>
                                <thread_local>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </thread_local>
                                <extern>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </extern>
                                <mutable>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </mutable>
                               <fail/>
                              </StorageClassSpecifier>
                              <FunctionSpecifier>
                               <try>std::u32string TypeName::ToString() const</try>
                                <inline>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </inline>
                                <virtual>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </virtual>
                                <explicit>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </explicit>
                               <fail/>
                              </FunctionSpecifier>
                              <friend>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </friend>
                              <constexpr>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </constexpr>
                              <__declspec>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </__declspec>
                              <__thread>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </__thread>
                             <fail/>
                            </DeclSpecifier>
                           <success></success>
                          </DeclSpecifiers>
                          <TypeExpr>
                           <try>std::u32string TypeName::ToString() const</try>
                            <PrefixTypeExpr>
                             <try>std::u32string TypeName::ToString() const</try>
                              <CVSpecifierSequence>
                               <try>std::u32string TypeName::ToString() const</try>
                                <CVSpecifier>
                                 <try>std::u32string TypeName::ToString() const</try>
                                  <const>
                                   <try>std::u32string TypeName::ToString() const</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>std::u32string TypeName::ToString() const</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success></success>
                              </CVSpecifierSequence>
                              <PostfixTypeExpr>
                               <try>std::u32string TypeName::ToString() const</try>
                                <PrimaryTypeExpr>
                                 <try>std::u32string TypeName::ToString() const</try>
                                  <SimpleType>
                                   <try>std::u32string TypeName::ToString() const</try>
                                    <SimpleTypeSpecifier>
                                     <try>std::u32string TypeName::ToString() const</try>
                                      <char>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </char>
                                      <char16_t>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </char16_t>
                                      <char32_t>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </char32_t>
                                      <wchar_t>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </wchar_t>
                                      <bool>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </bool>
                                      <short>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </short>
                                      <int>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </int>
                                      <long>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </long>
                                      <signed>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </signed>
                                      <unsigned>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </unsigned>
                                      <float>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </float>
                                      <double>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </double>
                                      <void>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </void>
                                      <auto>
                                       <try>std::u32string TypeName::ToString() const</try>
                                       <fail/>
                                      </auto>
                                     <fail/>
                                    </SimpleTypeSpecifier>
                                   <fail/>
                                  </SimpleType>
                                  <typename>
                                   <try>std::u32string TypeName::ToString() const</try>
                                   <fail/>
                                  </typename>
                                  <ClassKey>
                                   <try>std::u32string TypeName::ToString() const</try>
                                    <class>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </class>
                                    <struct>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </struct>
                                    <union>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </union>
                                   <fail/>
                                  </ClassKey>
                                  <QualifiedIdNode>
                                   <try>std::u32string TypeName::ToString() const</try>
                                    <NestedNameSpecifier>
                                     <try>std::u32string TypeName::ToString() const</try>
                                      <IdNode>
                                       <try>std::u32string TypeName::ToString() const</try>
                                        <SimpleTemplateId>
                                         <try>std::u32string TypeName::ToString() const</try>
                                          <TemplateName>
                                           <try>std::u32string TypeName::ToString() const</try>
                                            <Identifier>
                                             <try>std::u32string TypeName::ToString() const</try>
                                              <identifier>
                                               <try>std::u32string TypeName::ToString() const</try>
                                               <success>std</success>
                                              </identifier>
                                              <Keyword>
                                               <try>std::u32string TypeName::ToString() const</try>
                                                <identifier>
                                                 <try>std::u32string TypeName::ToString() const</try>
                                                 <success>std</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>std</success>
                                            </Identifier>
                                           <success>std</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>std::u32string TypeName::ToString() const</try>
                                          <identifier>
                                           <try>std::u32string TypeName::ToString() const</try>
                                           <success>std</success>
                                          </identifier>
                                          <Keyword>
                                           <try>std::u32string TypeName::ToString() const</try>
                                            <identifier>
                                             <try>std::u32string TypeName::ToString() const</try>
                                             <success>std</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>std</success>
                                        </Identifier>
                                       <success>std</success>
                                      </IdNode>
                                      <IdNode>
                                       <try>u32string TypeName::ToString() const</try>
                                        <SimpleTemplateId>
                                         <try>u32string TypeName::ToString() const</try>
                                          <TemplateName>
                                           <try>u32string TypeName::ToString() const</try>
                                            <Identifier>
                                             <try>u32string TypeName::ToString() const</try>
                                              <identifier>
                                               <try>u32string TypeName::ToString() const</try>
                                               <success>u32string</success>
                                              </identifier>
                                              <Keyword>
                                               <try>u32string TypeName::ToString() const</try>
                                                <identifier>
                                                 <try>u32string TypeName::ToString() const</try>
                                                 <success>u32string</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>u32string</success>
                                            </Identifier>
                                           <success>u32string</success>
                                          </TemplateName>
                                         <fail/>
                                        </SimpleTemplateId>
                                        <Identifier>
                                         <try>u32string TypeName::ToString() const</try>
                                          <identifier>
                                           <try>u32string TypeName::ToString() const</try>
                                           <success>u32string</success>
                                          </identifier>
                                          <Keyword>
                                           <try>u32string TypeName::ToString() const</try>
                                            <identifier>
                                             <try>u32string TypeName::ToString() const</try>
                                             <success>u32string</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>u32string</success>
                                        </Identifier>
                                       <success>u32string</success>
                                      </IdNode>
                                     <success>std::</success>
                                    </NestedNameSpecifier>
                                    <IdNode>
                                     <try>u32string TypeName::ToString() const</try>
                                      <SimpleTemplateId>
                                       <try>u32string TypeName::ToString() const</try>
                                        <TemplateName>
                                         <try>u32string TypeName::ToString() const</try>
                                          <Identifier>
                                           <try>u32string TypeName::ToString() const</try>
                                            <identifier>
                                             <try>u32string TypeName::ToString() const</try>
                                             <success>u32string</success>
                                            </identifier>
                                            <Keyword>
                                             <try>u32string TypeName::ToString() const</try>
                                              <identifier>
                                               <try>u32string TypeName::ToString() const</try>
                                               <success>u32string</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>u32string</success>
                                          </Identifier>
                                         <success>u32string</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>u32string TypeName::ToString() const</try>
                                        <identifier>
                                         <try>u32string TypeName::ToString() const</try>
                                         <success>u32string</success>
                                        </identifier>
                                        <Keyword>
                                         <try>u32string TypeName::ToString() const</try>
                                          <identifier>
                                           <try>u32string TypeName::ToString() const</try>
                                           <success>u32string</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>u32string</success>
                                      </Identifier>
                                     <success>u32string</success>
                                    </IdNode>
                                   <success>std::u32string</success>
                                  </QualifiedIdNode>
                                 <success>std::u32string</success>
                                </PrimaryTypeExpr>
                               <success>std::u32string </success>
                              </PostfixTypeExpr>
                             <success>std::u32string </success>
                            </PrefixTypeExpr>
                           <success>std::u32string </success>
                          </TypeExpr>
                          <InitDeclarator>
                           <try>TypeName::ToString() const</try>
                            <Declarator>
                             <try>TypeName::ToString() const</try>
                              <IdExpression>
                               <try>TypeName::ToString() const</try>
                                <QualifiedId>
                                 <try>TypeName::ToString() const</try>
                                  <NestedNameSpecifier>
                                   <try>TypeName::ToString() const</try>
                                    <IdNode>
                                     <try>TypeName::ToString() const</try>
                                      <SimpleTemplateId>
                                       <try>TypeName::ToString() const</try>
                                        <TemplateName>
                                         <try>TypeName::ToString() const</try>
                                          <Identifier>
                                           <try>TypeName::ToString() const</try>
                                            <identifier>
                                             <try>TypeName::ToString() const</try>
                                             <success>TypeName</success>
                                            </identifier>
                                            <Keyword>
                                             <try>TypeName::ToString() const</try>
                                              <identifier>
                                               <try>TypeName::ToString() const</try>
                                               <success>TypeName</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>TypeName</success>
                                          </Identifier>
                                         <success>TypeName</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>TypeName::ToString() const</try>
                                        <identifier>
                                         <try>TypeName::ToString() const</try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName::ToString() const</try>
                                          <identifier>
                                           <try>TypeName::ToString() const</try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>ToString() const</try>
                                      <SimpleTemplateId>
                                       <try>ToString() const</try>
                                        <TemplateName>
                                         <try>ToString() const</try>
                                          <Identifier>
                                           <try>ToString() const</try>
                                            <identifier>
                                             <try>ToString() const</try>
                                             <success>ToString</success>
                                            </identifier>
                                            <Keyword>
                                             <try>ToString() const</try>
                                              <identifier>
                                               <try>ToString() const</try>
                                               <success>ToString</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>ToString</success>
                                          </Identifier>
                                         <success>ToString</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>ToString() const</try>
                                        <identifier>
                                         <try>ToString() const</try>
                                         <success>ToString</success>
                                        </identifier>
                                        <Keyword>
                                         <try>ToString() const</try>
                                          <identifier>
                                           <try>ToString() const</try>
                                           <success>ToString</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>ToString</success>
                                      </Identifier>
                                     <success>ToString</success>
                                    </IdNode>
                                   <success>TypeName::</success>
                                  </NestedNameSpecifier>
                                  <UnqualifiedId>
                                   <try>ToString() const</try>
                                    <TemplateId>
                                     <try>ToString() const</try>
                                      <SimpleTemplateId>
                                       <try>ToString() const</try>
                                        <TemplateName>
                                         <try>ToString() const</try>
                                          <Identifier>
                                           <try>ToString() const</try>
                                            <identifier>
                                             <try>ToString() const</try>
                                             <success>ToString</success>
                                            </identifier>
                                            <Keyword>
                                             <try>ToString() const</try>
                                              <identifier>
                                               <try>ToString() const</try>
                                               <success>ToString</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>ToString</success>
                                          </Identifier>
                                         <success>ToString</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                     <fail/>
                                    </TemplateId>
                                    <Identifier>
                                     <try>ToString() const</try>
                                      <identifier>
                                       <try>ToString() const</try>
                                       <success>ToString</success>
                                      </identifier>
                                      <Keyword>
                                       <try>ToString() const</try>
                                        <identifier>
                                         <try>ToString() const</try>
                                         <success>ToString</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>ToString</success>
                                    </Identifier>
                                   <success>ToString</success>
                                  </UnqualifiedId>
                                 <success>TypeName::ToString</success>
                                </QualifiedId>
                               <success>TypeName::ToString</success>
                              </IdExpression>
                              <ParameterList>
                               <try>() const</try>
                                <ParameterDeclaration>
                                 <try>) const</try>
                                  <TypeExpr>
                                   <try>) const</try>
                                    <PrefixTypeExpr>
                                     <try>) const</try>
                                      <CVSpecifierSequence>
                                       <try>) const</try>
                                        <CVSpecifier>
                                         <try>) const</try>
                                          <const>
                                           <try>) const</try>
                                           <fail/>
                                          </const>
                                          <volatile>
                                           <try>) const</try>
                                           <fail/>
                                          </volatile>
                                         <fail/>
                                        </CVSpecifier>
                                       <success></success>
                                      </CVSpecifierSequence>
                                      <PostfixTypeExpr>
                                       <try>) const</try>
                                        <PrimaryTypeExpr>
                                         <try>) const</try>
                                          <SimpleType>
                                           <try>) const</try>
                                            <SimpleTypeSpecifier>
                                             <try>) const</try>
                                              <char>
                                               <try>) const</try>
                                               <fail/>
                                              </char>
                                              <char16_t>
                                               <try>) const</try>
                                               <fail/>
                                              </char16_t>
                                              <char32_t>
                                               <try>) const</try>
                                               <fail/>
                                              </char32_t>
                                              <wchar_t>
                                               <try>) const</try>
                                               <fail/>
                                              </wchar_t>
                                              <bool>
                                               <try>) const</try>
                                               <fail/>
                                              </bool>
                                              <short>
                                               <try>) const</try>
                                               <fail/>
                                              </short>
                                              <int>
                                               <try>) const</try>
                                               <fail/>
                                              </int>
                                              <long>
                                               <try>) const</try>
                                               <fail/>
                                              </long>
                                              <signed>
                                               <try>) const</try>
                                               <fail/>
                                              </signed>
                                              <unsigned>
                                               <try>) const</try>
                                               <fail/>
                                              </unsigned>
                                              <float>
                                               <try>) const</try>
                                               <fail/>
                                              </float>
                                              <double>
                                               <try>) const</try>
                                               <fail/>
                                              </double>
                                              <void>
                                               <try>) const</try>
                                               <fail/>
                                              </void>
                                              <auto>
                                               <try>) const</try>
                                               <fail/>
                                              </auto>
                                             <fail/>
                                            </SimpleTypeSpecifier>
                                           <fail/>
                                          </SimpleType>
                                          <typename>
                                           <try>) const</try>
                                           <fail/>
                                          </typename>
                                          <ClassKey>
                                           <try>) const</try>
                                            <class>
                                             <try>) const</try>
                                             <fail/>
                                            </class>
                                            <struct>
                                             <try>) const</try>
                                             <fail/>
                                            </struct>
                                            <union>
                                             <try>) const</try>
                                             <fail/>
                                            </union>
                                           <fail/>
                                          </ClassKey>
                                          <QualifiedIdNode>
                                           <try>) const</try>
                                            <NestedNameSpecifier>
                                             <try>) const</try>
                                              <IdNode>
                                               <try>) const</try>
                                                <SimpleTemplateId>
                                                 <try>) const</try>
                                                  <TemplateName>
                                                   <try>) const</try>
                                                    <Identifier>
                                                     <try>) const</try>
                                                      <identifier>
                                                       <try>) const</try>
                                                       <fail/>
                                                      </identifier>
                                                     <fail/>
                                                    </Identifier>
                                                   <fail/>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>) const</try>
                                                  <identifier>
                                                   <try>) const</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </IdNode>
                                             <fail/>
                                            </NestedNameSpecifier>
                                            <IdNode>
                                             <try>) const</try>
                                              <SimpleTemplateId>
                                               <try>) const</try>
                                                <TemplateName>
                                                 <try>) const</try>
                                                  <Identifier>
                                                   <try>) const</try>
                                                    <identifier>
                                                     <try>) const</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                 <fail/>
                                                </TemplateName>
                                               <fail/>
                                              </SimpleTemplateId>
                                              <Identifier>
                                               <try>) const</try>
                                                <identifier>
                                                 <try>) const</try>
                                                 <fail/>
                                                </identifier>
                                               <fail/>
                                              </Identifier>
                                             <fail/>
                                            </IdNode>
                                           <fail/>
                                          </QualifiedIdNode>
                                         <fail/>
                                        </PrimaryTypeExpr>
                                       <fail/>
                                      </PostfixTypeExpr>
                                     <fail/>
                                    </PrefixTypeExpr>
                                   <fail/>
                                  </TypeExpr>
                                 <fail/>
                                </ParameterDeclaration>
                               <success>()</success>
                              </ParameterList>
                              <CVSpecifierSequence>
                               <try>const</try>
                                <CVSpecifier>
                                 <try>const</try>
                                  <const>
                                   <try>const</try>
                                    <identifier_chars>
                                     <try></try>
                                     <fail/>
                                    </identifier_chars>
                                   <success>const</success>
                                  </const>
                                 <success>const</success>
                                </CVSpecifier>
                                <CVSpecifier>
                                 <try>{</try>
                                  <const>
                                   <try>{</try>
                                   <fail/>
                                  </const>
                                  <volatile>
                                   <try>{</try>
                                   <fail/>
                                  </volatile>
                                 <fail/>
                                </CVSpecifier>
                               <success>const</success>
                              </CVSpecifierSequence>
                             <success>TypeName::ToString() const</success>
                            </Declarator>
                            <Initializer>
                             <try>{</try>
                              <BracedInitializerList>
                               <try>{</try>
                                <InitializerClause>
                                 <try>std::u32string s(Name());</try>
                                  <AssignmentExpression>
                                   <try>std::u32string s(Name());</try>
                                    <LogicalOrExpression>
                                     <try>std::u32string s(Name());</try>
                                      <LogicalAndExpression>
                                       <try>std::u32string s(Name());</try>
                                        <InclusiveOrExpression>
                                         <try>std::u32string s(Name());</try>
                                          <ExclusiveOrExpression>
                                           <try>std::u32string s(Name());</try>
                                            <AndExpression>
                                             <try>std::u32string s(Name());</try>
                                              <EqualityExpression>
                                               <try>std::u32string s(Name());</try>
                                                <RelationalExpression>
                                                 <try>std::u32string s(Name());</try>
                                                  <ShiftExpression>
                                                   <try>std::u32string s(Name());</try>
                                                    <AdditiveExpression>
                                                     <try>std::u32string s(Name());</try>
                                                      <MultiplicativeExpression>
                                                       <try>std::u32string s(Name());</try>
                                                        <PMExpression>
                                                         <try>std::u32string s(Name());</try>
                                                          <CastExpression>
                                                           <try>std::u32string s(Name());</try>
                                                            <UnaryExpression>
                                                             <try>std::u32string s(Name());</try>
                                                              <UnaryOperator>
                                                               <try>std::u32string s(Name());</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>std::u32string s(Name());</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>std::u32string s(Name());</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <new>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <delete>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <PrimaryExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <Literal>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <FloatingLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <FractionalConstant>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <digit_sequence>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <EncodingPrefix>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <true>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <nullptr>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>std::u32string s(Name());</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <dynamic_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <typeid>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <QualifiedId>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <IdNode>
                                                                         <try>std::u32string s(Name());</try>
                                                                          <SimpleTemplateId>
                                                                           <try>std::u32string s(Name());</try>
                                                                            <TemplateName>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <Identifier>
                                                                               <try>std::u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                 <success>std</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>std::u32string s(Name());</try>
                                                                                   <success>std</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>std</success>
                                                                              </Identifier>
                                                                             <success>std</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>std::u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>std::u32string s(Name());</try>
                                                                             <success>std</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>std::u32string s(Name());</try>
                                                                               <success>std</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>std</success>
                                                                          </Identifier>
                                                                         <success>std</success>
                                                                        </IdNode>
                                                                        <IdNode>
                                                                         <try>u32string s(Name());</try>
                                                                          <SimpleTemplateId>
                                                                           <try>u32string s(Name());</try>
                                                                            <TemplateName>
                                                                             <try>u32string s(Name());</try>
                                                                              <Identifier>
                                                                               <try>u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                 <success>u32string</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>u32string</success>
                                                                              </Identifier>
                                                                             <success>u32string</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>u32string s(Name());</try>
                                                                             <success>u32string</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>u32string s(Name());</try>
                                                                               <success>u32string</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>u32string</success>
                                                                          </Identifier>
                                                                         <success>u32string</success>
                                                                        </IdNode>
                                                                       <success>std::</success>
                                                                      </NestedNameSpecifier>
                                                                      <UnqualifiedId>
                                                                       <try>u32string s(Name());</try>
                                                                        <TemplateId>
                                                                         <try>u32string s(Name());</try>
                                                                          <SimpleTemplateId>
                                                                           <try>u32string s(Name());</try>
                                                                            <TemplateName>
                                                                             <try>u32string s(Name());</try>
                                                                              <Identifier>
                                                                               <try>u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                 <success>u32string</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>u32string</success>
                                                                              </Identifier>
                                                                             <success>u32string</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>u32string s(Name());</try>
                                                                          <identifier>
                                                                           <try>u32string s(Name());</try>
                                                                           <success>u32string</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>u32string s(Name());</try>
                                                                             <success>u32string</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>u32string</success>
                                                                        </Identifier>
                                                                       <success>u32string</success>
                                                                      </UnqualifiedId>
                                                                     <success>std::u32string</success>
                                                                    </QualifiedId>
                                                                   <success>std::u32string</success>
                                                                  </IdExpression>
                                                                 <success>std::u32string</success>
                                                                </PrimaryExpression>
                                                               <success>std::u32string </success>
                                                              </PostfixExpression>
                                                             <success>std::u32string </success>
                                                            </UnaryExpression>
                                                           <success>std::u32string </success>
                                                          </CastExpression>
                                                         <success>std::u32string </success>
                                                        </PMExpression>
                                                       <success>std::u32string </success>
                                                      </MultiplicativeExpression>
                                                     <success>std::u32string </success>
                                                    </AdditiveExpression>
                                                   <success>std::u32string </success>
                                                  </ShiftExpression>
                                                 <success>std::u32string </success>
                                                </RelationalExpression>
                                               <success>std::u32string </success>
                                              </EqualityExpression>
                                             <success>std::u32string </success>
                                            </AndExpression>
                                           <success>std::u32string </success>
                                          </ExclusiveOrExpression>
                                         <success>std::u32string </success>
                                        </InclusiveOrExpression>
                                       <success>std::u32string </success>
                                      </LogicalAndExpression>
                                     <success>std::u32string </success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>s(Name());</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>std::u32string s(Name());</try>
                                      <LogicalOrExpression>
                                       <try>std::u32string s(Name());</try>
                                        <LogicalAndExpression>
                                         <try>std::u32string s(Name());</try>
                                          <InclusiveOrExpression>
                                           <try>std::u32string s(Name());</try>
                                            <ExclusiveOrExpression>
                                             <try>std::u32string s(Name());</try>
                                              <AndExpression>
                                               <try>std::u32string s(Name());</try>
                                                <EqualityExpression>
                                                 <try>std::u32string s(Name());</try>
                                                  <RelationalExpression>
                                                   <try>std::u32string s(Name());</try>
                                                    <ShiftExpression>
                                                     <try>std::u32string s(Name());</try>
                                                      <AdditiveExpression>
                                                       <try>std::u32string s(Name());</try>
                                                        <MultiplicativeExpression>
                                                         <try>std::u32string s(Name());</try>
                                                          <PMExpression>
                                                           <try>std::u32string s(Name());</try>
                                                            <CastExpression>
                                                             <try>std::u32string s(Name());</try>
                                                              <UnaryExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <UnaryOperator>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <new>
                                                                   <try>std::u32string s(Name());</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <delete>
                                                                   <try>std::u32string s(Name());</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <PrimaryExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <Literal>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <FloatingLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <FractionalConstant>
                                                                         <try>std::u32string s(Name());</try>
                                                                          <digit_sequence>
                                                                           <try>std::u32string s(Name());</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>std::u32string s(Name());</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <EncodingPrefix>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <true>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <nullptr>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <dynamic_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <typeid>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <QualifiedId>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>std::u32string s(Name());</try>
                                                                          <IdNode>
                                                                           <try>std::u32string s(Name());</try>
                                                                            <SimpleTemplateId>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <TemplateName>
                                                                               <try>std::u32string s(Name());</try>
                                                                                <Identifier>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>std::u32string s(Name());</try>
                                                                                   <success>std</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>std::u32string s(Name());</try>
                                                                                    <identifier>
                                                                                     <try>std::u32string s(Name());</try>
                                                                                     <success>std</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>std</success>
                                                                                </Identifier>
                                                                               <success>std</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>std::u32string s(Name());</try>
                                                                               <success>std</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>std::u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                 <success>std</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>std</success>
                                                                            </Identifier>
                                                                           <success>std</success>
                                                                          </IdNode>
                                                                          <IdNode>
                                                                           <try>u32string s(Name());</try>
                                                                            <SimpleTemplateId>
                                                                             <try>u32string s(Name());</try>
                                                                              <TemplateName>
                                                                               <try>u32string s(Name());</try>
                                                                                <Identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>u32string s(Name());</try>
                                                                                    <identifier>
                                                                                     <try>u32string s(Name());</try>
                                                                                     <success>u32string</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>u32string</success>
                                                                                </Identifier>
                                                                               <success>u32string</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>u32string s(Name());</try>
                                                                               <success>u32string</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                 <success>u32string</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>u32string</success>
                                                                            </Identifier>
                                                                           <success>u32string</success>
                                                                          </IdNode>
                                                                         <success>std::</success>
                                                                        </NestedNameSpecifier>
                                                                        <UnqualifiedId>
                                                                         <try>u32string s(Name());</try>
                                                                          <TemplateId>
                                                                           <try>u32string s(Name());</try>
                                                                            <SimpleTemplateId>
                                                                             <try>u32string s(Name());</try>
                                                                              <TemplateName>
                                                                               <try>u32string s(Name());</try>
                                                                                <Identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>u32string s(Name());</try>
                                                                                    <identifier>
                                                                                     <try>u32string s(Name());</try>
                                                                                     <success>u32string</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>u32string</success>
                                                                                </Identifier>
                                                                               <success>u32string</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                           <fail/>
                                                                          </TemplateId>
                                                                          <Identifier>
                                                                           <try>u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>u32string s(Name());</try>
                                                                             <success>u32string</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>u32string s(Name());</try>
                                                                               <success>u32string</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>u32string</success>
                                                                          </Identifier>
                                                                         <success>u32string</success>
                                                                        </UnqualifiedId>
                                                                       <success>std::u32string</success>
                                                                      </QualifiedId>
                                                                     <success>std::u32string</success>
                                                                    </IdExpression>
                                                                   <success>std::u32string</success>
                                                                  </PrimaryExpression>
                                                                 <success>std::u32string </success>
                                                                </PostfixExpression>
                                                               <success>std::u32string </success>
                                                              </UnaryExpression>
                                                             <success>std::u32string </success>
                                                            </CastExpression>
                                                           <success>std::u32string </success>
                                                          </PMExpression>
                                                         <success>std::u32string </success>
                                                        </MultiplicativeExpression>
                                                       <success>std::u32string </success>
                                                      </AdditiveExpression>
                                                     <success>std::u32string </success>
                                                    </ShiftExpression>
                                                   <success>std::u32string </success>
                                                  </RelationalExpression>
                                                 <success>std::u32string </success>
                                                </EqualityExpression>
                                               <success>std::u32string </success>
                                              </AndExpression>
                                             <success>std::u32string </success>
                                            </ExclusiveOrExpression>
                                           <success>std::u32string </success>
                                          </InclusiveOrExpression>
                                         <success>std::u32string </success>
                                        </LogicalAndExpression>
                                       <success>std::u32string </success>
                                      </LogicalOrExpression>
                                     <success>std::u32string </success>
                                    </ConditionalExpression>
                                   <success>std::u32string </success>
                                  </AssignmentExpression>
                                 <success>std::u32string </success>
                                </InitializerClause>
                               <fail/>
                              </BracedInitializerList>
                             <fail/>
                            </Initializer>
                           <success>TypeName::ToString() const\r\n</success>
                          </InitDeclarator>
                         <fail/>
                        </SimpleDeclaration>
                        <AliasDeclaration>
                         <try>std::u32string TypeName::ToString() const</try>
                          <using>
                           <try>std::u32string TypeName::ToString() const</try>
                           <fail/>
                          </using>
                         <fail/>
                        </AliasDeclaration>
                        <UsingDirective>
                         <try>std::u32string TypeName::ToString() const</try>
                          <using>
                           <try>std::u32string TypeName::ToString() const</try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDirective>
                        <UsingDeclaration>
                         <try>std::u32string TypeName::ToString() const</try>
                          <using>
                           <try>std::u32string TypeName::ToString() const</try>
                           <fail/>
                          </using>
                         <fail/>
                        </UsingDeclaration>
                        <OpaqueEnumDeclaration>
                         <try>std::u32string TypeName::ToString() const</try>
                          <EnumKey>
                           <try>std::u32string TypeName::ToString() const</try>
                            <enum>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </enum>
                            <enum>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </enum>
                           <fail/>
                          </EnumKey>
                         <fail/>
                        </OpaqueEnumDeclaration>
                        <TypedefDeclaration>
                         <try>std::u32string TypeName::ToString() const</try>
                          <typedef>
                           <try>std::u32string TypeName::ToString() const</try>
                           <fail/>
                          </typedef>
                         <fail/>
                        </TypedefDeclaration>
                        <ForwardClassDeclaration>
                         <try>std::u32string TypeName::ToString() const</try>
                          <ClassKey>
                           <try>std::u32string TypeName::ToString() const</try>
                            <class>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </class>
                            <struct>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </struct>
                            <union>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </union>
                           <fail/>
                          </ClassKey>
                         <fail/>
                        </ForwardClassDeclaration>
                       <fail/>
                      </BlockDeclaration>
                      <FunctionDefinition>
                       <try>std::u32string TypeName::ToString() const</try>
                        <DeclSpecifiers>
                         <try>std::u32string TypeName::ToString() const</try>
                          <DeclSpecifier>
                           <try>std::u32string TypeName::ToString() const</try>
                            <StorageClassSpecifier>
                             <try>std::u32string TypeName::ToString() const</try>
                              <register>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </register>
                              <static>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </static>
                              <thread_local>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </thread_local>
                              <extern>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </extern>
                              <mutable>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </mutable>
                             <fail/>
                            </StorageClassSpecifier>
                            <FunctionSpecifier>
                             <try>std::u32string TypeName::ToString() const</try>
                              <inline>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </inline>
                              <virtual>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </virtual>
                              <explicit>
                               <try>std::u32string TypeName::ToString() const</try>
                               <fail/>
                              </explicit>
                             <fail/>
                            </FunctionSpecifier>
                            <friend>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </friend>
                            <constexpr>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </constexpr>
                            <__declspec>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </__declspec>
                            <__thread>
                             <try>std::u32string TypeName::ToString() const</try>
                             <fail/>
                            </__thread>
                           <fail/>
                          </DeclSpecifier>
                         <success></success>
                        </DeclSpecifiers>
                        <TypeExpr>
                         <try>std::u32string TypeName::ToString() const</try>
                          <PrefixTypeExpr>
                           <try>std::u32string TypeName::ToString() const</try>
                            <CVSpecifierSequence>
                             <try>std::u32string TypeName::ToString() const</try>
                              <CVSpecifier>
                               <try>std::u32string TypeName::ToString() const</try>
                                <const>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </const>
                                <volatile>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </volatile>
                               <fail/>
                              </CVSpecifier>
                             <success></success>
                            </CVSpecifierSequence>
                            <PostfixTypeExpr>
                             <try>std::u32string TypeName::ToString() const</try>
                              <PrimaryTypeExpr>
                               <try>std::u32string TypeName::ToString() const</try>
                                <SimpleType>
                                 <try>std::u32string TypeName::ToString() const</try>
                                  <SimpleTypeSpecifier>
                                   <try>std::u32string TypeName::ToString() const</try>
                                    <char>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </char>
                                    <char16_t>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </char16_t>
                                    <char32_t>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </char32_t>
                                    <wchar_t>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </wchar_t>
                                    <bool>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </bool>
                                    <short>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </short>
                                    <int>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </int>
                                    <long>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </long>
                                    <signed>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </signed>
                                    <unsigned>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </unsigned>
                                    <float>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </float>
                                    <double>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </double>
                                    <void>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </void>
                                    <auto>
                                     <try>std::u32string TypeName::ToString() const</try>
                                     <fail/>
                                    </auto>
                                   <fail/>
                                  </SimpleTypeSpecifier>
                                 <fail/>
                                </SimpleType>
                                <typename>
                                 <try>std::u32string TypeName::ToString() const</try>
                                 <fail/>
                                </typename>
                                <ClassKey>
                                 <try>std::u32string TypeName::ToString() const</try>
                                  <class>
                                   <try>std::u32string TypeName::ToString() const</try>
                                   <fail/>
                                  </class>
                                  <struct>
                                   <try>std::u32string TypeName::ToString() const</try>
                                   <fail/>
                                  </struct>
                                  <union>
                                   <try>std::u32string TypeName::ToString() const</try>
                                   <fail/>
                                  </union>
                                 <fail/>
                                </ClassKey>
                                <QualifiedIdNode>
                                 <try>std::u32string TypeName::ToString() const</try>
                                  <NestedNameSpecifier>
                                   <try>std::u32string TypeName::ToString() const</try>
                                    <IdNode>
                                     <try>std::u32string TypeName::ToString() const</try>
                                      <SimpleTemplateId>
                                       <try>std::u32string TypeName::ToString() const</try>
                                        <TemplateName>
                                         <try>std::u32string TypeName::ToString() const</try>
                                          <Identifier>
                                           <try>std::u32string TypeName::ToString() const</try>
                                            <identifier>
                                             <try>std::u32string TypeName::ToString() const</try>
                                             <success>std</success>
                                            </identifier>
                                            <Keyword>
                                             <try>std::u32string TypeName::ToString() const</try>
                                              <identifier>
                                               <try>std::u32string TypeName::ToString() const</try>
                                               <success>std</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>std</success>
                                          </Identifier>
                                         <success>std</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>std::u32string TypeName::ToString() const</try>
                                        <identifier>
                                         <try>std::u32string TypeName::ToString() const</try>
                                         <success>std</success>
                                        </identifier>
                                        <Keyword>
                                         <try>std::u32string TypeName::ToString() const</try>
                                          <identifier>
                                           <try>std::u32string TypeName::ToString() const</try>
                                           <success>std</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>std</success>
                                      </Identifier>
                                     <success>std</success>
                                    </IdNode>
                                    <IdNode>
                                     <try>u32string TypeName::ToString() const</try>
                                      <SimpleTemplateId>
                                       <try>u32string TypeName::ToString() const</try>
                                        <TemplateName>
                                         <try>u32string TypeName::ToString() const</try>
                                          <Identifier>
                                           <try>u32string TypeName::ToString() const</try>
                                            <identifier>
                                             <try>u32string TypeName::ToString() const</try>
                                             <success>u32string</success>
                                            </identifier>
                                            <Keyword>
                                             <try>u32string TypeName::ToString() const</try>
                                              <identifier>
                                               <try>u32string TypeName::ToString() const</try>
                                               <success>u32string</success>
                                              </identifier>
                                             <fail/>
                                            </Keyword>
                                           <success>u32string</success>
                                          </Identifier>
                                         <success>u32string</success>
                                        </TemplateName>
                                       <fail/>
                                      </SimpleTemplateId>
                                      <Identifier>
                                       <try>u32string TypeName::ToString() const</try>
                                        <identifier>
                                         <try>u32string TypeName::ToString() const</try>
                                         <success>u32string</success>
                                        </identifier>
                                        <Keyword>
                                         <try>u32string TypeName::ToString() const</try>
                                          <identifier>
                                           <try>u32string TypeName::ToString() const</try>
                                           <success>u32string</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>u32string</success>
                                      </Identifier>
                                     <success>u32string</success>
                                    </IdNode>
                                   <success>std::</success>
                                  </NestedNameSpecifier>
                                  <IdNode>
                                   <try>u32string TypeName::ToString() const</try>
                                    <SimpleTemplateId>
                                     <try>u32string TypeName::ToString() const</try>
                                      <TemplateName>
                                       <try>u32string TypeName::ToString() const</try>
                                        <Identifier>
                                         <try>u32string TypeName::ToString() const</try>
                                          <identifier>
                                           <try>u32string TypeName::ToString() const</try>
                                           <success>u32string</success>
                                          </identifier>
                                          <Keyword>
                                           <try>u32string TypeName::ToString() const</try>
                                            <identifier>
                                             <try>u32string TypeName::ToString() const</try>
                                             <success>u32string</success>
                                            </identifier>
                                           <fail/>
                                          </Keyword>
                                         <success>u32string</success>
                                        </Identifier>
                                       <success>u32string</success>
                                      </TemplateName>
                                     <fail/>
                                    </SimpleTemplateId>
                                    <Identifier>
                                     <try>u32string TypeName::ToString() const</try>
                                      <identifier>
                                       <try>u32string TypeName::ToString() const</try>
                                       <success>u32string</success>
                                      </identifier>
                                      <Keyword>
                                       <try>u32string TypeName::ToString() const</try>
                                        <identifier>
                                         <try>u32string TypeName::ToString() const</try>
                                         <success>u32string</success>
                                        </identifier>
                                       <fail/>
                                      </Keyword>
                                     <success>u32string</success>
                                    </Identifier>
                                   <success>u32string</success>
                                  </IdNode>
                                 <success>std::u32string</success>
                                </QualifiedIdNode>
                               <success>std::u32string</success>
                              </PrimaryTypeExpr>
                             <success>std::u32string </success>
                            </PostfixTypeExpr>
                           <success>std::u32string </success>
                          </PrefixTypeExpr>
                         <success>std::u32string </success>
                        </TypeExpr>
                        <Declarator>
                         <try>TypeName::ToString() const</try>
                          <IdExpression>
                           <try>TypeName::ToString() const</try>
                            <QualifiedId>
                             <try>TypeName::ToString() const</try>
                              <NestedNameSpecifier>
                               <try>TypeName::ToString() const</try>
                                <IdNode>
                                 <try>TypeName::ToString() const</try>
                                  <SimpleTemplateId>
                                   <try>TypeName::ToString() const</try>
                                    <TemplateName>
                                     <try>TypeName::ToString() const</try>
                                      <Identifier>
                                       <try>TypeName::ToString() const</try>
                                        <identifier>
                                         <try>TypeName::ToString() const</try>
                                         <success>TypeName</success>
                                        </identifier>
                                        <Keyword>
                                         <try>TypeName::ToString() const</try>
                                          <identifier>
                                           <try>TypeName::ToString() const</try>
                                           <success>TypeName</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>TypeName</success>
                                      </Identifier>
                                     <success>TypeName</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>TypeName::ToString() const</try>
                                    <identifier>
                                     <try>TypeName::ToString() const</try>
                                     <success>TypeName</success>
                                    </identifier>
                                    <Keyword>
                                     <try>TypeName::ToString() const</try>
                                      <identifier>
                                       <try>TypeName::ToString() const</try>
                                       <success>TypeName</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>TypeName</success>
                                  </Identifier>
                                 <success>TypeName</success>
                                </IdNode>
                                <IdNode>
                                 <try>ToString() const</try>
                                  <SimpleTemplateId>
                                   <try>ToString() const</try>
                                    <TemplateName>
                                     <try>ToString() const</try>
                                      <Identifier>
                                       <try>ToString() const</try>
                                        <identifier>
                                         <try>ToString() const</try>
                                         <success>ToString</success>
                                        </identifier>
                                        <Keyword>
                                         <try>ToString() const</try>
                                          <identifier>
                                           <try>ToString() const</try>
                                           <success>ToString</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>ToString</success>
                                      </Identifier>
                                     <success>ToString</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                  <Identifier>
                                   <try>ToString() const</try>
                                    <identifier>
                                     <try>ToString() const</try>
                                     <success>ToString</success>
                                    </identifier>
                                    <Keyword>
                                     <try>ToString() const</try>
                                      <identifier>
                                       <try>ToString() const</try>
                                       <success>ToString</success>
                                      </identifier>
                                     <fail/>
                                    </Keyword>
                                   <success>ToString</success>
                                  </Identifier>
                                 <success>ToString</success>
                                </IdNode>
                               <success>TypeName::</success>
                              </NestedNameSpecifier>
                              <UnqualifiedId>
                               <try>ToString() const</try>
                                <TemplateId>
                                 <try>ToString() const</try>
                                  <SimpleTemplateId>
                                   <try>ToString() const</try>
                                    <TemplateName>
                                     <try>ToString() const</try>
                                      <Identifier>
                                       <try>ToString() const</try>
                                        <identifier>
                                         <try>ToString() const</try>
                                         <success>ToString</success>
                                        </identifier>
                                        <Keyword>
                                         <try>ToString() const</try>
                                          <identifier>
                                           <try>ToString() const</try>
                                           <success>ToString</success>
                                          </identifier>
                                         <fail/>
                                        </Keyword>
                                       <success>ToString</success>
                                      </Identifier>
                                     <success>ToString</success>
                                    </TemplateName>
                                   <fail/>
                                  </SimpleTemplateId>
                                 <fail/>
                                </TemplateId>
                                <Identifier>
                                 <try>ToString() const</try>
                                  <identifier>
                                   <try>ToString() const</try>
                                   <success>ToString</success>
                                  </identifier>
                                  <Keyword>
                                   <try>ToString() const</try>
                                    <identifier>
                                     <try>ToString() const</try>
                                     <success>ToString</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>ToString</success>
                                </Identifier>
                               <success>ToString</success>
                              </UnqualifiedId>
                             <success>TypeName::ToString</success>
                            </QualifiedId>
                           <success>TypeName::ToString</success>
                          </IdExpression>
                          <ParameterList>
                           <try>() const</try>
                            <ParameterDeclaration>
                             <try>) const</try>
                              <TypeExpr>
                               <try>) const</try>
                                <PrefixTypeExpr>
                                 <try>) const</try>
                                  <CVSpecifierSequence>
                                   <try>) const</try>
                                    <CVSpecifier>
                                     <try>) const</try>
                                      <const>
                                       <try>) const</try>
                                       <fail/>
                                      </const>
                                      <volatile>
                                       <try>) const</try>
                                       <fail/>
                                      </volatile>
                                     <fail/>
                                    </CVSpecifier>
                                   <success></success>
                                  </CVSpecifierSequence>
                                  <PostfixTypeExpr>
                                   <try>) const</try>
                                    <PrimaryTypeExpr>
                                     <try>) const</try>
                                      <SimpleType>
                                       <try>) const</try>
                                        <SimpleTypeSpecifier>
                                         <try>) const</try>
                                          <char>
                                           <try>) const</try>
                                           <fail/>
                                          </char>
                                          <char16_t>
                                           <try>) const</try>
                                           <fail/>
                                          </char16_t>
                                          <char32_t>
                                           <try>) const</try>
                                           <fail/>
                                          </char32_t>
                                          <wchar_t>
                                           <try>) const</try>
                                           <fail/>
                                          </wchar_t>
                                          <bool>
                                           <try>) const</try>
                                           <fail/>
                                          </bool>
                                          <short>
                                           <try>) const</try>
                                           <fail/>
                                          </short>
                                          <int>
                                           <try>) const</try>
                                           <fail/>
                                          </int>
                                          <long>
                                           <try>) const</try>
                                           <fail/>
                                          </long>
                                          <signed>
                                           <try>) const</try>
                                           <fail/>
                                          </signed>
                                          <unsigned>
                                           <try>) const</try>
                                           <fail/>
                                          </unsigned>
                                          <float>
                                           <try>) const</try>
                                           <fail/>
                                          </float>
                                          <double>
                                           <try>) const</try>
                                           <fail/>
                                          </double>
                                          <void>
                                           <try>) const</try>
                                           <fail/>
                                          </void>
                                          <auto>
                                           <try>) const</try>
                                           <fail/>
                                          </auto>
                                         <fail/>
                                        </SimpleTypeSpecifier>
                                       <fail/>
                                      </SimpleType>
                                      <typename>
                                       <try>) const</try>
                                       <fail/>
                                      </typename>
                                      <ClassKey>
                                       <try>) const</try>
                                        <class>
                                         <try>) const</try>
                                         <fail/>
                                        </class>
                                        <struct>
                                         <try>) const</try>
                                         <fail/>
                                        </struct>
                                        <union>
                                         <try>) const</try>
                                         <fail/>
                                        </union>
                                       <fail/>
                                      </ClassKey>
                                      <QualifiedIdNode>
                                       <try>) const</try>
                                        <NestedNameSpecifier>
                                         <try>) const</try>
                                          <IdNode>
                                           <try>) const</try>
                                            <SimpleTemplateId>
                                             <try>) const</try>
                                              <TemplateName>
                                               <try>) const</try>
                                                <Identifier>
                                                 <try>) const</try>
                                                  <identifier>
                                                   <try>) const</try>
                                                   <fail/>
                                                  </identifier>
                                                 <fail/>
                                                </Identifier>
                                               <fail/>
                                              </TemplateName>
                                             <fail/>
                                            </SimpleTemplateId>
                                            <Identifier>
                                             <try>) const</try>
                                              <identifier>
                                               <try>) const</try>
                                               <fail/>
                                              </identifier>
                                             <fail/>
                                            </Identifier>
                                           <fail/>
                                          </IdNode>
                                         <fail/>
                                        </NestedNameSpecifier>
                                        <IdNode>
                                         <try>) const</try>
                                          <SimpleTemplateId>
                                           <try>) const</try>
                                            <TemplateName>
                                             <try>) const</try>
                                              <Identifier>
                                               <try>) const</try>
                                                <identifier>
                                                 <try>) const</try>
                                                 <fail/>
                                                </identifier>
                                               <fail/>
                                              </Identifier>
                                             <fail/>
                                            </TemplateName>
                                           <fail/>
                                          </SimpleTemplateId>
                                          <Identifier>
                                           <try>) const</try>
                                            <identifier>
                                             <try>) const</try>
                                             <fail/>
                                            </identifier>
                                           <fail/>
                                          </Identifier>
                                         <fail/>
                                        </IdNode>
                                       <fail/>
                                      </QualifiedIdNode>
                                     <fail/>
                                    </PrimaryTypeExpr>
                                   <fail/>
                                  </PostfixTypeExpr>
                                 <fail/>
                                </PrefixTypeExpr>
                               <fail/>
                              </TypeExpr>
                             <fail/>
                            </ParameterDeclaration>
                           <success>()</success>
                          </ParameterList>
                          <CVSpecifierSequence>
                           <try>const</try>
                            <CVSpecifier>
                             <try>const</try>
                              <const>
                               <try>const</try>
                                <identifier_chars>
                                 <try></try>
                                 <fail/>
                                </identifier_chars>
                               <success>const</success>
                              </const>
                             <success>const</success>
                            </CVSpecifier>
                            <CVSpecifier>
                             <try>{</try>
                              <const>
                               <try>{</try>
                               <fail/>
                              </const>
                              <volatile>
                               <try>{</try>
                               <fail/>
                              </volatile>
                             <fail/>
                            </CVSpecifier>
                           <success>const</success>
                          </CVSpecifierSequence>
                         <success>TypeName::ToString() const</success>
                        </Declarator>
                        <FunctionBody>
                         <try>{</try>
                          <CompoundStatement>
                           <try>{</try>
                            <Statement>
                             <try>std::u32string s(Name());</try>
                              <LabeledStatement>
                               <try>std::u32string s(Name());</try>
                                <Identifier>
                                 <try>std::u32string s(Name());</try>
                                  <identifier>
                                   <try>std::u32string s(Name());</try>
                                   <success>std</success>
                                  </identifier>
                                  <Keyword>
                                   <try>std::u32string s(Name());</try>
                                    <identifier>
                                     <try>std::u32string s(Name());</try>
                                     <success>std</success>
                                    </identifier>
                                   <fail/>
                                  </Keyword>
                                 <success>std</success>
                                </Identifier>
                                <case>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </case>
                                <default>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </default>
                               <fail/>
                              </LabeledStatement>
                              <ExpressionStatement>
                               <try>std::u32string s(Name());</try>
                                <Expression>
                                 <try>std::u32string s(Name());</try>
                                  <AssignmentExpression>
                                   <try>std::u32string s(Name());</try>
                                    <LogicalOrExpression>
                                     <try>std::u32string s(Name());</try>
                                      <LogicalAndExpression>
                                       <try>std::u32string s(Name());</try>
                                        <InclusiveOrExpression>
                                         <try>std::u32string s(Name());</try>
                                          <ExclusiveOrExpression>
                                           <try>std::u32string s(Name());</try>
                                            <AndExpression>
                                             <try>std::u32string s(Name());</try>
                                              <EqualityExpression>
                                               <try>std::u32string s(Name());</try>
                                                <RelationalExpression>
                                                 <try>std::u32string s(Name());</try>
                                                  <ShiftExpression>
                                                   <try>std::u32string s(Name());</try>
                                                    <AdditiveExpression>
                                                     <try>std::u32string s(Name());</try>
                                                      <MultiplicativeExpression>
                                                       <try>std::u32string s(Name());</try>
                                                        <PMExpression>
                                                         <try>std::u32string s(Name());</try>
                                                          <CastExpression>
                                                           <try>std::u32string s(Name());</try>
                                                            <UnaryExpression>
                                                             <try>std::u32string s(Name());</try>
                                                              <UnaryOperator>
                                                               <try>std::u32string s(Name());</try>
                                                               <fail/>
                                                              </UnaryOperator>
                                                              <sizeof>
                                                               <try>std::u32string s(Name());</try>
                                                               <fail/>
                                                              </sizeof>
                                                              <alignof>
                                                               <try>std::u32string s(Name());</try>
                                                               <fail/>
                                                              </alignof>
                                                              <NewExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <new>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </new>
                                                               <fail/>
                                                              </NewExpression>
                                                              <DeleteExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <delete>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </delete>
                                                               <fail/>
                                                              </DeleteExpression>
                                                              <PostfixExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <PrimaryExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <Literal>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <FloatingLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <FractionalConstant>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <digit_sequence>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                        <digit_sequence>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FractionalConstant>
                                                                      <digit_sequence>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </digit_sequence>
                                                                     <fail/>
                                                                    </FloatingLiteral>
                                                                    <IntegerLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <HexadecimalLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </HexadecimalLiteral>
                                                                      <OctalLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </OctalLiteral>
                                                                      <DecimalLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </DecimalLiteral>
                                                                     <fail/>
                                                                    </IntegerLiteral>
                                                                    <CharacterLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </CharacterLiteral>
                                                                    <StringLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <EncodingPrefix>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                      <EncodingPrefix>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </EncodingPrefix>
                                                                     <fail/>
                                                                    </StringLiteral>
                                                                    <BooleanLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <true>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </true>
                                                                      <false>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </false>
                                                                     <fail/>
                                                                    </BooleanLiteral>
                                                                    <PointerLiteral>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <nullptr>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </nullptr>
                                                                     <fail/>
                                                                    </PointerLiteral>
                                                                   <fail/>
                                                                  </Literal>
                                                                  <this>
                                                                   <try>std::u32string s(Name());</try>
                                                                   <fail/>
                                                                  </this>
                                                                  <CppCastExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <dynamic_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </dynamic_cast>
                                                                    <static_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </static_cast>
                                                                    <reinterpret_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </reinterpret_cast>
                                                                    <const_cast>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </const_cast>
                                                                   <fail/>
                                                                  </CppCastExpression>
                                                                  <TypeIdExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <typeid>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                    <typeid>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </typeid>
                                                                   <fail/>
                                                                  </TypeIdExpression>
                                                                  <IdExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <QualifiedId>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <NestedNameSpecifier>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <IdNode>
                                                                         <try>std::u32string s(Name());</try>
                                                                          <SimpleTemplateId>
                                                                           <try>std::u32string s(Name());</try>
                                                                            <TemplateName>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <Identifier>
                                                                               <try>std::u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                 <success>std</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>std::u32string s(Name());</try>
                                                                                   <success>std</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>std</success>
                                                                              </Identifier>
                                                                             <success>std</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>std::u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>std::u32string s(Name());</try>
                                                                             <success>std</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>std::u32string s(Name());</try>
                                                                               <success>std</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>std</success>
                                                                          </Identifier>
                                                                         <success>std</success>
                                                                        </IdNode>
                                                                        <IdNode>
                                                                         <try>u32string s(Name());</try>
                                                                          <SimpleTemplateId>
                                                                           <try>u32string s(Name());</try>
                                                                            <TemplateName>
                                                                             <try>u32string s(Name());</try>
                                                                              <Identifier>
                                                                               <try>u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                 <success>u32string</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>u32string</success>
                                                                              </Identifier>
                                                                             <success>u32string</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                          <Identifier>
                                                                           <try>u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>u32string s(Name());</try>
                                                                             <success>u32string</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>u32string s(Name());</try>
                                                                               <success>u32string</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>u32string</success>
                                                                          </Identifier>
                                                                         <success>u32string</success>
                                                                        </IdNode>
                                                                       <success>std::</success>
                                                                      </NestedNameSpecifier>
                                                                      <UnqualifiedId>
                                                                       <try>u32string s(Name());</try>
                                                                        <TemplateId>
                                                                         <try>u32string s(Name());</try>
                                                                          <SimpleTemplateId>
                                                                           <try>u32string s(Name());</try>
                                                                            <TemplateName>
                                                                             <try>u32string s(Name());</try>
                                                                              <Identifier>
                                                                               <try>u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                 <success>u32string</success>
                                                                                </identifier>
                                                                                <Keyword>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                 <fail/>
                                                                                </Keyword>
                                                                               <success>u32string</success>
                                                                              </Identifier>
                                                                             <success>u32string</success>
                                                                            </TemplateName>
                                                                           <fail/>
                                                                          </SimpleTemplateId>
                                                                         <fail/>
                                                                        </TemplateId>
                                                                        <Identifier>
                                                                         <try>u32string s(Name());</try>
                                                                          <identifier>
                                                                           <try>u32string s(Name());</try>
                                                                           <success>u32string</success>
                                                                          </identifier>
                                                                          <Keyword>
                                                                           <try>u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>u32string s(Name());</try>
                                                                             <success>u32string</success>
                                                                            </identifier>
                                                                           <fail/>
                                                                          </Keyword>
                                                                         <success>u32string</success>
                                                                        </Identifier>
                                                                       <success>u32string</success>
                                                                      </UnqualifiedId>
                                                                     <success>std::u32string</success>
                                                                    </QualifiedId>
                                                                   <success>std::u32string</success>
                                                                  </IdExpression>
                                                                 <success>std::u32string</success>
                                                                </PrimaryExpression>
                                                               <success>std::u32string </success>
                                                              </PostfixExpression>
                                                             <success>std::u32string </success>
                                                            </UnaryExpression>
                                                           <success>std::u32string </success>
                                                          </CastExpression>
                                                         <success>std::u32string </success>
                                                        </PMExpression>
                                                       <success>std::u32string </success>
                                                      </MultiplicativeExpression>
                                                     <success>std::u32string </success>
                                                    </AdditiveExpression>
                                                   <success>std::u32string </success>
                                                  </ShiftExpression>
                                                 <success>std::u32string </success>
                                                </RelationalExpression>
                                               <success>std::u32string </success>
                                              </EqualityExpression>
                                             <success>std::u32string </success>
                                            </AndExpression>
                                           <success>std::u32string </success>
                                          </ExclusiveOrExpression>
                                         <success>std::u32string </success>
                                        </InclusiveOrExpression>
                                       <success>std::u32string </success>
                                      </LogicalAndExpression>
                                     <success>std::u32string </success>
                                    </LogicalOrExpression>
                                    <AssignmentOperator>
                                     <try>s(Name());</try>
                                     <fail/>
                                    </AssignmentOperator>
                                    <ConditionalExpression>
                                     <try>std::u32string s(Name());</try>
                                      <LogicalOrExpression>
                                       <try>std::u32string s(Name());</try>
                                        <LogicalAndExpression>
                                         <try>std::u32string s(Name());</try>
                                          <InclusiveOrExpression>
                                           <try>std::u32string s(Name());</try>
                                            <ExclusiveOrExpression>
                                             <try>std::u32string s(Name());</try>
                                              <AndExpression>
                                               <try>std::u32string s(Name());</try>
                                                <EqualityExpression>
                                                 <try>std::u32string s(Name());</try>
                                                  <RelationalExpression>
                                                   <try>std::u32string s(Name());</try>
                                                    <ShiftExpression>
                                                     <try>std::u32string s(Name());</try>
                                                      <AdditiveExpression>
                                                       <try>std::u32string s(Name());</try>
                                                        <MultiplicativeExpression>
                                                         <try>std::u32string s(Name());</try>
                                                          <PMExpression>
                                                           <try>std::u32string s(Name());</try>
                                                            <CastExpression>
                                                             <try>std::u32string s(Name());</try>
                                                              <UnaryExpression>
                                                               <try>std::u32string s(Name());</try>
                                                                <UnaryOperator>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </UnaryOperator>
                                                                <sizeof>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </sizeof>
                                                                <alignof>
                                                                 <try>std::u32string s(Name());</try>
                                                                 <fail/>
                                                                </alignof>
                                                                <NewExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <new>
                                                                   <try>std::u32string s(Name());</try>
                                                                   <fail/>
                                                                  </new>
                                                                 <fail/>
                                                                </NewExpression>
                                                                <DeleteExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <delete>
                                                                   <try>std::u32string s(Name());</try>
                                                                   <fail/>
                                                                  </delete>
                                                                 <fail/>
                                                                </DeleteExpression>
                                                                <PostfixExpression>
                                                                 <try>std::u32string s(Name());</try>
                                                                  <PrimaryExpression>
                                                                   <try>std::u32string s(Name());</try>
                                                                    <Literal>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <FloatingLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <FractionalConstant>
                                                                         <try>std::u32string s(Name());</try>
                                                                          <digit_sequence>
                                                                           <try>std::u32string s(Name());</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                          <digit_sequence>
                                                                           <try>std::u32string s(Name());</try>
                                                                           <fail/>
                                                                          </digit_sequence>
                                                                         <fail/>
                                                                        </FractionalConstant>
                                                                        <digit_sequence>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </digit_sequence>
                                                                       <fail/>
                                                                      </FloatingLiteral>
                                                                      <IntegerLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <HexadecimalLiteral>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </HexadecimalLiteral>
                                                                        <OctalLiteral>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </OctalLiteral>
                                                                        <DecimalLiteral>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </DecimalLiteral>
                                                                       <fail/>
                                                                      </IntegerLiteral>
                                                                      <CharacterLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </CharacterLiteral>
                                                                      <StringLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <EncodingPrefix>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                        <EncodingPrefix>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </EncodingPrefix>
                                                                       <fail/>
                                                                      </StringLiteral>
                                                                      <BooleanLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <true>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </true>
                                                                        <false>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </false>
                                                                       <fail/>
                                                                      </BooleanLiteral>
                                                                      <PointerLiteral>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <nullptr>
                                                                         <try>std::u32string s(Name());</try>
                                                                         <fail/>
                                                                        </nullptr>
                                                                       <fail/>
                                                                      </PointerLiteral>
                                                                     <fail/>
                                                                    </Literal>
                                                                    <this>
                                                                     <try>std::u32string s(Name());</try>
                                                                     <fail/>
                                                                    </this>
                                                                    <CppCastExpression>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <dynamic_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </dynamic_cast>
                                                                      <static_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </static_cast>
                                                                      <reinterpret_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </reinterpret_cast>
                                                                      <const_cast>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </const_cast>
                                                                     <fail/>
                                                                    </CppCastExpression>
                                                                    <TypeIdExpression>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <typeid>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                      <typeid>
                                                                       <try>std::u32string s(Name());</try>
                                                                       <fail/>
                                                                      </typeid>
                                                                     <fail/>
                                                                    </TypeIdExpression>
                                                                    <IdExpression>
                                                                     <try>std::u32string s(Name());</try>
                                                                      <QualifiedId>
                                                                       <try>std::u32string s(Name());</try>
                                                                        <NestedNameSpecifier>
                                                                         <try>std::u32string s(Name());</try>
                                                                          <IdNode>
                                                                           <try>std::u32string s(Name());</try>
                                                                            <SimpleTemplateId>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <TemplateName>
                                                                               <try>std::u32string s(Name());</try>
                                                                                <Identifier>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>std::u32string s(Name());</try>
                                                                                   <success>std</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>std::u32string s(Name());</try>
                                                                                    <identifier>
                                                                                     <try>std::u32string s(Name());</try>
                                                                                     <success>std</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>std</success>
                                                                                </Identifier>
                                                                               <success>std</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>std::u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>std::u32string s(Name());</try>
                                                                               <success>std</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>std::u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>std::u32string s(Name());</try>
                                                                                 <success>std</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>std</success>
                                                                            </Identifier>
                                                                           <success>std</success>
                                                                          </IdNode>
                                                                          <IdNode>
                                                                           <try>u32string s(Name());</try>
                                                                            <SimpleTemplateId>
                                                                             <try>u32string s(Name());</try>
                                                                              <TemplateName>
                                                                               <try>u32string s(Name());</try>
                                                                                <Identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>u32string s(Name());</try>
                                                                                    <identifier>
                                                                                     <try>u32string s(Name());</try>
                                                                                     <success>u32string</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>u32string</success>
                                                                                </Identifier>
                                                                               <success>u32string</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                            <Identifier>
                                                                             <try>u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>u32string s(Name());</try>
                                                                               <success>u32string</success>
                                                                              </identifier>
                                                                              <Keyword>
                                                                               <try>u32string s(Name());</try>
                                                                                <identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                 <success>u32string</success>
                                                                                </identifier>
                                                                               <fail/>
                                                                              </Keyword>
                                                                             <success>u32string</success>
                                                                            </Identifier>
                                                                           <success>u32string</success>
                                                                          </IdNode>
                                                                         <success>std::</success>
                                                                        </NestedNameSpecifier>
                                                                        <UnqualifiedId>
                                                                         <try>u32string s(Name());</try>
                                                                          <TemplateId>
                                                                           <try>u32string s(Name());</try>
                                                                            <SimpleTemplateId>
                                                                             <try>u32string s(Name());</try>
                                                                              <TemplateName>
                                                                               <try>u32string s(Name());</try>
                                                                                <Identifier>
                                                                                 <try>u32string s(Name());</try>
                                                                                  <identifier>
                                                                                   <try>u32string s(Name());</try>
                                                                                   <success>u32string</success>
                                                                                  </identifier>
                                                                                  <Keyword>
                                                                                   <try>u32string s(Name());</try>
                                                                                    <identifier>
                                                                                     <try>u32string s(Name());</try>
                                                                                     <success>u32string</success>
                                                                                    </identifier>
                                                                                   <fail/>
                                                                                  </Keyword>
                                                                                 <success>u32string</success>
                                                                                </Identifier>
                                                                               <success>u32string</success>
                                                                              </TemplateName>
                                                                             <fail/>
                                                                            </SimpleTemplateId>
                                                                           <fail/>
                                                                          </TemplateId>
                                                                          <Identifier>
                                                                           <try>u32string s(Name());</try>
                                                                            <identifier>
                                                                             <try>u32string s(Name());</try>
                                                                             <success>u32string</success>
                                                                            </identifier>
                                                                            <Keyword>
                                                                             <try>u32string s(Name());</try>
                                                                              <identifier>
                                                                               <try>u32string s(Name());</try>
                                                                               <success>u32string</success>
                                                                              </identifier>
                                                                             <fail/>
                                                                            </Keyword>
                                                                           <success>u32string</success>
                                                                          </Identifier>
                                                                         <success>u32string</success>
                                                                        </UnqualifiedId>
                                                                       <success>std::u32string</success>
                                                                      </QualifiedId>
                                                                     <success>std::u32string</success>
                                                                    </IdExpression>
                                                                   <success>std::u32string</success>
                                                                  </PrimaryExpression>
                                                                 <success>std::u32string </success>
                                                                </PostfixExpression>
                                                               <success>std::u32string </success>
                                                              </UnaryExpression>
                                                             <success>std::u32string </success>
                                                            </CastExpression>
                                                           <success>std::u32string </success>
                                                          </PMExpression>
                                                         <success>std::u32string </success>
                                                        </MultiplicativeExpression>
                                                       <success>std::u32string </success>
                                                      </AdditiveExpression>
                                                     <success>std::u32string </success>
                                                    </ShiftExpression>
                                                   <success>std::u32string </success>
                                                  </RelationalExpression>
                                                 <success>std::u32string </success>
                                                </EqualityExpression>
                                               <success>std::u32string </success>
                                              </AndExpression>
                                             <success>std::u32string </success>
                                            </ExclusiveOrExpression>
                                           <success>std::u32string </success>
                                          </InclusiveOrExpression>
                                         <success>std::u32string </success>
                                        </LogicalAndExpression>
                                       <success>std::u32string </success>
                                      </LogicalOrExpression>
                                     <success>std::u32string </success>
                                    </ConditionalExpression>
                                   <success>std::u32string </success>
                                  </AssignmentExpression>
                                 <success>std::u32string </success>
                                </Expression>
                               <fail/>
                              </ExpressionStatement>
                              <CompoundStatement>
                               <try>std::u32string s(Name());</try>
                               <fail/>
                              </CompoundStatement>
                              <SelectionStatement>
                               <try>std::u32string s(Name());</try>
                                <if>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </if>
                                <switch>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </switch>
                               <fail/>
                              </SelectionStatement>
                              <IterationStatement>
                               <try>std::u32string s(Name());</try>
                                <while>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </while>
                                <do>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </do>
                                <for>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </for>
                                <for>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </for>
                               <fail/>
                              </IterationStatement>
                              <JumpStatement>
                               <try>std::u32string s(Name());</try>
                                <break>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </break>
                                <continue>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </continue>
                                <return>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </return>
                                <return>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </return>
                                <goto>
                                 <try>std::u32string s(Name());</try>
                                 <fail/>
                                </goto>
                               <fail/>
                              </JumpStatement>
                              <DeclarationStatement>
                               <try>std::u32string s(Name());</try>
                                <BlockDeclaration>
                                 <try>std::u32string s(Name());</try>
                                  <SimpleDeclaration>
                                   <try>std::u32string s(Name());</try>
                                    <DeclSpecifiers>
                                     <try>std::u32string s(Name());</try>
                                      <DeclSpecifier>
                                       <try>std::u32string s(Name());</try>
                                        <StorageClassSpecifier>
                                         <try>std::u32string s(Name());</try>
                                          <register>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </register>
                                          <static>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </static>
                                          <thread_local>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </thread_local>
                                          <extern>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </extern>
                                          <mutable>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </mutable>
                                         <fail/>
                                        </StorageClassSpecifier>
                                        <FunctionSpecifier>
                                         <try>std::u32string s(Name());</try>
                                          <inline>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </inline>
                                          <virtual>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </virtual>
                                          <explicit>
                                           <try>std::u32string s(Name());</try>
                                           <fail/>
                                          </explicit>
                                         <fail/>
                                        </FunctionSpecifier>
                                        <friend>
                                         <try>std::u32string s(Name());</try>
                                         <fail/>
                                        </friend>
                                        <constexpr>
                                         <try>std::u32string s(Name());</try>
                                         <fail/>
                                        </constexpr>
                                        <__declspec>
                                         <try>std::u32string s(Name());</try>
                                         <fail/>
                                        </__declspec>
                                        <__thread>
                                         <try>std::u32string s(Name());</try>
                                         <fail/>
                                        </__thread>
                                       <fail/>
                                      </DeclSpecifier>
                                     <success></success>
                                    </DeclSpecifiers>
                                    <TypeExpr>
                                     <try>std::u32string s(Name());</try>
                                      <PrefixTypeExpr>
                                       <try>std::u32string s(Name());</try>
                                        <CVSpecifierSequence>
                                         <try>std::u32string s(Name());</try>
                                          <CVSpecifier>
                                           <try>std::u32string s(Name());</try>
                                            <const>
                                             <try>std::u32string s(Name());</try>
                                             <fail/>
                                            </const>
                                            <volatile>
                                             <try>std::u32string s(Name());</try>
                                             <fail/>
                                            </volatile>
                                           <fail/>
                                          </CVSpecifier>
                                         <success></success>
                                        </CVSpecifierSequence>
                                        <PostfixTypeExpr>
                                         <try>std::u32string s(Name());</try>
                                          <PrimaryTypeExpr>
                                           <try>std::u32string s(Name());</try>
                                            <SimpleType>
                                             <try>std::u32string s(Name());</try>
                                              <SimpleTypeSpecifier>
                                               <try>std::u32string s(Name());</try>
                                                <char>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </char>
                                                <char16_t>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </char16_t>
                                                <char32_t>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </char32_t>
                                                <wchar_t>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </wchar_t>
                                                <bool>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </bool>
                                                <short>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </short>
                                                <int>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </int>
                                                <long>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </long>
                                                <signed>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </signed>
                                                <unsigned>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </unsigned>
                                                <float>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </float>
                                                <double>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </double>
                                                <void>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </void>
                                                <auto>
                                                 <try>std::u32string s(Name());</try>
                                                 <fail/>
                                                </auto>
                                               <fail/>
                                              </SimpleTypeSpecifier>
                                             <fail/>
                                            </SimpleType>
                                            <typename>
                                             <try>std::u32string s(Name());</try>
                                             <fail/>
                                            </typename>
                                            <ClassKey>
                                             <try>std::u32string s(Name());</try>
                                              <class>
                                               <try>std::u32string s(Name());</try>
                                               <fail/>
                                              </class>
                                              <struct>
                                               <try>std::u32string s(Name());</try>
                                               <fail/>
                                              </struct>
                                              <union>
                                               <try>std::u32string s(Name());</try>
                                               <fail/>
                                              </union>
                                             <fail/>
                                            </ClassKey>
                                            <QualifiedIdNode>
                                             <try>std::u32string s(Name());</try>
                                              <NestedNameSpecifier>
                                               <try>std::u32string s(Name());</try>
                                                <IdNode>
                                                 <try>std::u32string s(Name());</try>
                                                  <SimpleTemplateId>
                                                   <try>std::u32string s(Name());</try>
                                                    <TemplateName>
                                                     <try>std::u32string s(Name());</try>
                                                      <Identifier>
                                                       <try>std::u32string s(Name());</try>
                                                        <identifier>
                                                         <try>std::u32string s(Name());</try>
                                                         <success>std</success>
                                                        </identifier>
                                                        <Keyword>
                                                         <try>std::u32string s(Name());</try>
                                                          <identifier>
                                                           <try>std::u32string s(Name());</try>
                                                           <success>std</success>
                                                          </identifier>
                                                         <fail/>
                                                        </Keyword>
                                                       <success>std</success>
                                                      </Identifier>
                                                     <success>std</success>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>std::u32string s(Name());</try>
                                                    <identifier>
                                                     <try>std::u32string s(Name());</try>
                                                     <success>std</success>
                                                    </identifier>
                                                    <Keyword>
                                                     <try>std::u32string s(Name());</try>
                                                      <identifier>
                                                       <try>std::u32string s(Name());</try>
                                                       <success>std</success>
                                                      </identifier>
                                                     <fail/>
                                                    </Keyword>
                                                   <success>std</success>
                                                  </Identifier>
                                                 <success>std</success>
                                                </IdNode>
                                                <IdNode>
                                                 <try>u32string s(Name());</try>
                                                  <SimpleTemplateId>
                                                   <try>u32string s(Name());</try>
                                                    <TemplateName>
                                                     <try>u32string s(Name());</try>
                                                      <Identifier>
                                                       <try>u32string s(Name());</try>
                                                        <identifier>
                                                         <try>u32string s(Name());</try>
                                                         <success>u32string</success>
                                                        </identifier>
                                                        <Keyword>
                                                         <try>u32string s(Name());</try>
                                                          <identifier>
                                                           <try>u32string s(Name());</try>
                                                           <success>u32string</success>
                                                          </identifier>
                                                         <fail/>
                                                        </Keyword>
                                                       <success>u32string</success>
                                                      </Identifier>
                                                     <success>u32string</success>
                                                    </TemplateName>
                                                   <fail/>
                                                  </SimpleTemplateId>
                                                  <Identifier>
                                                   <try>u32string s(Name());</try>
                                                    <identifier>
                                                     <try>u32string s(Name());</try>
                                                     <success>u32string</success>
                                                    </identifier>
                                                    <Keyword>
                                                     <try>u32string s(Name());</try>
                                                      <identifier>
                                                       <try>u32string s(Name());</try>
                                                       <success>u32string</success>
                                                      </identifier>
                                                     <fail/>
                                                    </Keyword>
                                                   <success>u32string</success>
                                                  </Identifier>
                                                 <success>u32string</success>
                                                </IdNode>
                                               <success>std::</success>
                                              </NestedNameSpecifier>
                                              <IdNode>
                                               <try>u32string s(Name());</try>
                                                <SimpleTemplateId>
                                                 <try>u32string s(Name());</try>
                                                  <TemplateName>
                                                   <try>u32string s(Name());</try>
                                                    <Identifier>
                                                     <try>u32string s(Name());</try>
                                                      <identifier>
                                                       <try>u32string s(Name());</try>
                                                       <success>u32string</success>
                                                      </identifier>
                                                      <Keyword>
                                                       <try>u32string s(Name());</try>
                                                        <identifier>
                                                         <try>u32string s(Name());</try>
                                                         <success>u32string</success>
                                                        </identifier>
                                                       <fail/>
                                                      </Keyword>
                                                     <success>u32string</success>
                                                    </Identifier>
                                                   <success>u32string</success>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>u32string s(Name());</try>
                                                  <identifier>
                                                   <try>u32string s(Name());</try>
                                                   <success>u32string</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>u32string s(Name());</try>
                                                    <identifier>
                                                     <try>u32string s(Name());</try>
                                                     <success>u32string</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>u32string</success>
                                                </Identifier>
                                               <success>u32string</success>
                                              </IdNode>
                                             <success>std::u32string</success>
                                            </QualifiedIdNode>
                                           <success>std::u32string</success>
                                          </PrimaryTypeExpr>
                                         <success>std::u32string </success>
                                        </PostfixTypeExpr>
                                       <success>std::u32string </success>
                                      </PrefixTypeExpr>
                                     <success>std::u32string </success>
                                    </TypeExpr>
                                    <InitDeclarator>
                                     <try>s(Name());</try>
                                      <Declarator>
                                       <try>s(Name());</try>
                                        <IdExpression>
                                         <try>s(Name());</try>
                                          <QualifiedId>
                                           <try>s(Name());</try>
                                            <NestedNameSpecifier>
                                             <try>s(Name());</try>
                                              <IdNode>
                                               <try>s(Name());</try>
                                                <SimpleTemplateId>
                                                 <try>s(Name());</try>
                                                  <TemplateName>
                                                   <try>s(Name());</try>
                                                    <Identifier>
                                                     <try>s(Name());</try>
                                                      <identifier>
                                                       <try>s(Name());</try>
                                                       <success>s</success>
                                                      </identifier>
                                                      <Keyword>
                                                       <try>s(Name());</try>
                                                        <identifier>
                                                         <try>s(Name());</try>
                                                         <success>s</success>
                                                        </identifier>
                                                       <fail/>
                                                      </Keyword>
                                                     <success>s</success>
                                                    </Identifier>
                                                   <success>s</success>
                                                  </TemplateName>
                                                 <fail/>
                                                </SimpleTemplateId>
                                                <Identifier>
                                                 <try>s(Name());</try>
                                                  <identifier>
                                                   <try>s(Name());</try>
                                                   <success>s</success>
                                                  </identifier>
                                                  <Keyword>
                                                   <try>s(Name());</try>
                                                    <identifier>
                                                     <try>s(Name());</try>
                                                     <success>s</success>
                                                    </identifier>
                                                   <fail/>
                                                  </Keyword>
                                                 <success>s</success>
                                                </Identifier>
                                               <success>s</success>
                                              </IdNode>
                                             <fail/>
                                            </NestedNameSpecifier>
                                           <fail/>
                                          </QualifiedId>
                                          <UnqualifiedId>
                                           <try>s(Name());</try>
                                            <TemplateId>
                                             <try>s(Name());</try>
                                              <SimpleTemplateId>
                                               <try>s(Name());</try>
                                                <TemplateName>
                                                 <try>s(Name());</try>
                                                  <Identifier>
                                                   <try>s(Name());</try>
                                                    <identifier>
                                                     <try>s(Name());</try>
                                                     <success>s</success>
                                                    </identifier>
                                                    <Keyword>
                                                     <try>s(Name());</try>
                                                      <identifier>
                                                       <try>s(Name());</try>
                                                       <success>s</success>
                                                      </identifier>
                                                     <fail/>
                                                    </Keyword>
                                                   <success>s</success>
                                                  </Identifier>
                                                 <success>s</success>
                                                </TemplateName>
                                               <fail/>
                                              </SimpleTemplateId>
                                             <fail/>
                                            </TemplateId>
                                            <Identifier>
                                             <try>s(Name());</try>
                                              <identifier>
                                               <try>s(Name());</try>
                                               <success>s</success>
                                              </identifier>
                                              <Keyword>
                                               <try>s(Name());</try>
                                                <identifier>
                                                 <try>s(Name());</try>
                                                 <success>s</success>
                                                </identifier>
                                               <fail/>
                                              </Keyword>
                                             <success>s</success>
                                            </Identifier>
                                           <success>s</success>
                                          </UnqualifiedId>
                                         <success>s</success>
                                        </IdExpression>
                                        <ParameterList>
                                         <try>(Name());</try>
                                          <ParameterDeclaration>
                                           <try>Name());</try>
                                            <TypeExpr>
                                             <try>Name());</try>
                                              <PrefixTypeExpr>
                                               <try>Name());</try>
                                                <CVSpecifierSequence>
                                                 <try>Name());</try>
                                                  <CVSpecifier>
                                                   <try>Name());</try>
                                                    <const>
                                                     <try>Name());</try>
                                                     <fail/>
                                                    </const>
                                                    <volatile>
                                                     <try>Name());</try>
                                                     <fail/>
                                                    </volatile>
                                                   <fail/>
                                                  </CVSpecifier>
                                                 <success></success>
                                                </CVSpecifierSequence>
                                                <PostfixTypeExpr>
                                                 <try>Name());</try>
                                                  <PrimaryTypeExpr>
                                                   <try>Name());</try>
                                                    <SimpleType>
                                                     <try>Name());</try>
                                                      <SimpleTypeSpecifier>
                                                       <try>Name());</try>
                                                        <char>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </char>
                                                        <char16_t>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </char16_t>
                                                        <char32_t>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </char32_t>
                                                        <wchar_t>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </wchar_t>
                                                        <bool>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </bool>
                                                        <short>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </short>
                                                        <int>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </int>
                                                        <long>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </long>
                                                        <signed>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </signed>
                                                        <unsigned>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </unsigned>
                                                        <float>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </float>
                                                        <double>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </double>
                                                        <void>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </void>
                                                        <auto>
                                                         <try>Name());</try>
                                                         <fail/>
                                                        </auto>
                                                       <fail/>
                                                      </SimpleTypeSpecifier>
                                                     <fail/>
                                                    </SimpleType>
                                                    <typename>
                                                     <try>Name());</try>
                                                     <fail/>
                                                    </typename>
                                                    <ClassKey>
                                                     <try>Name());</try>
                                                      <class>
                                                       <try>Name());</try>
                                                       <fail/>
                                                      </class>
                                                      <struct>
                                                       <try>Name());</try>
                                                       <fail/>
                                                      </struct>
                                                      <union>
                                                       <try>Name());</try>
                                                       <fail/>
                                                      </union>
                                                     <fail/>
                                                    </ClassKey>
                                                    <QualifiedIdNode>
                                                     <try>Name());</try>
                                                      <NestedNameSpecifier>
                                                       <try>Name());</try>
                                                        <IdNode>
                                                         <try>Name());</try>
                                                          <SimpleTemplateId>
                                                           <try>Name());</try>
                                                            <TemplateName>
                                                             <try>Name());</try>
                                                              <Identifier>
                                                               <try>Name());</try>
                                                                <identifier>
                                                                 <try>Name());</try>
                                                                 <success>Name</success>
                                                                </identifier>
                                                                <Keyword>
                                                                 <try>Name());</try>
                                                                  <identifier>
                                                                   <try>Name());</try>
                                                                   <success>Name</success>
                                                                  </identifier>
                                                                 <fail/>
                                                                </Keyword>
                                                               <success>Name</success>
                                                              </Identifier>
                                                             <success>Name</success>
                                                            </TemplateName>
                                                           <fail/>
                                                          </SimpleTemplateId>
                                                          <Identifier>
                                                           <try>Name());</try>
                                                            <identifier>
                                                             <try>Name());</try>
                                                             <success>Name</success>
                                                            </identifier>
                                                            <Keyword>
                                                             <try>Name());</try>
                                                              <identifier>
                                                               <try>Name());</try>
                                                               <success>Name</success>
                                                              </identifier>
                                                             <fail/>
                                                            </Keyword>
                                                           <success>Name</success>
                                                          </Identifier>
                                                         <success>Name</success>
                                                        </IdNode>
                                                       <fail/>
                                                      </NestedNameSpecifier>
                                                      <IdNode>
                                                       <try>Name());</try>
                                                        <SimpleTemplateId>
                                                         <try>Name());</try>
                                                          <TemplateName>
                                                           <try>Name());</try>
                                                            <Identifier>
                                                             <try>Name());</try>
                                                              <identifier>
                                                               <try>Name());</try>
                                                               <success>Name</success>
                                                              </identifier>
                                                              <Keyword>
                                                               <try>Name());</try>
                                                                <identifier>
                                                                 <try>Name());</try>
                                                                 <success>Name</success>
                                                                </identifier>
                                                               <fail/>
                                                              </Keyword>
                                                             <success>Name</success>
                                                            </Identifier>
                                                           <success>Name</success>
                                                          </TemplateName>
                                                         <fail/>
                                                        </SimpleTemplateId>
                                                        <Identifier>
                                                         <try>Name());</try>
                                                          <identifier>
                                                           <try>Name());</try>
                                                           <success>Name</success>
                                                          </identifier>
                                                          <Keyword>
                                                           <try>Name());</try>
                                                            <identifier>
                                                             <try>Name());</try>
                                                             <success>Name</success>
                                                            </identifier>
                                                           <fail/>
                                                          </Keyword>
                                                         <success>Name</success>
                                                        </Identifier>
                                                       <success>Name</success>
                                                      </IdNode>
                                                     <success>Name</success>
                                                    </QualifiedIdNode>
                                                   <success>Name</success>
                                                  </PrimaryTypeExpr>
                                                 <success>Name</success>
                                                </PostfixTypeExpr>
                                               <success>Name</success>
                                              </PrefixTypeExpr>
                                             <success>Name</success>
                                            </TypeExpr>
                                            <Declarator>
                                             <try>());</try>
                                              <IdExpression>
                                               <try>());</try>
                                                <QualifiedId>
                                                 <try>());</try>
                                                  <NestedNameSpecifier>
                                                   <try>());</try>
                                                    <IdNode>
                                                     <try>());</try>
                                                      <SimpleTemplateId>
                                                       <try>());</try>
                                                        <TemplateName>
                                                         <try>());</try>
                                                          <Identifier>
                                                           <try>());</try>
                                                            <identifier>
                                                             <try>());</try>
                                                             <fail/>
                                                            </identifier>
                                                           <fail/>
                                                          </Identifier>
                                                         <fail/>
                                                        </TemplateName>
                                                       <fail/>
                                                      </SimpleTemplateId>
                                                      <Identifier>
                                                       <try>());</try>
                                                        <identifier>
                                                         <try>());</try>
                                                         <fail/>
                                                        </identifier>
                                                       <fail/>
                                                      </Identifier>
                                                     <fail/>
                                                    </IdNode>
                                                   <fail/>
                                                  </NestedNameSpecifier>
                                                 <fail/>
                                                </QualifiedId>
                                                <UnqualifiedId>
                                                 <try>());</try>
                                                  <TemplateId>
                                                   <try>());</try>
                                                    <SimpleTemplateId>
                                                     <try>());</try>
                                                      <TemplateName>
                                                       <try>());</try>
                                                        <Identifier>
                                                         <try>());</try>
                                                          <identifier>
                                                           <try>());</try>
                                                           <fail/>
                                                          </identifier>
                                                         <fail/>
                                                        </Identifier>
                                                       <fail/>
                                                      </TemplateName>
                                                     <fail/>
                                                    </SimpleTemplateId>
                                                   <fail/>
                                                  </TemplateId>
                                                  <Identifier>
                                                   <try>());</try>
                                                    <identifier>
                                                     <try>());</try>
                                                     <fail/>
                                                    </identifier>
                                                   <fail/>
                                                  </Identifier>
                                                  <OperatorFunctionId>
                                                   <try>());</try>
                                                    <operator>
                                                     <try>());</try>
                                                     <fail/>
                                                    </operator>
                                                   <fail/>
                                                  </OperatorFunctionId>
                                                  <ConversionFunctionId>
                                                   <try>());</try>
                                                    <operator>
                                                     <try>());</try>
                                                     <fail/>
                                                    </operator>
                                                   <fail/>
                                                  </ConversionFunctionId>
                                                 <fail/>
                                                </UnqualifiedId>
                                               <fail/>
                                              </IdExpression>
                                             <fail/>
                                            </Declarator>
                                           <success>Name</success>
                                          </ParameterDeclaration>
