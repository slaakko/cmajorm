<grammar source="StatementParser" title="Statement Grammar">
    <rule source="Statement" name="statement"/>
    <rule source="Label" name="label"/>
    <rule source="LabeledStatement" name="labeled-statement"/>
    <rule source="ControlStatement" name="control-statement"/>
    <rule source="CompoundStatement" name="compound-statement"/>
    <rule source="ReturnStatement" name="return-statement"/>
    <rule source="IfStatement" name="if-statement"/>
    <rule source="WhileStatement" name="while-statement"/>
    <rule source="DoStatement" name="do-statement"/>
    <rule source="ForStatement" name="for-statement"/>
    <rule source="ForInitStatement" name="for-init-statement"/>
    <rule source="ForLoopStatementExpr" name="for-loop-statement-expr"/>
    <rule source="RangeForStatement" name="range-for-statement"/>
    <rule source="BreakStatement" name="break-statement"/>
    <rule source="ContinueStatement" name="continue-statement"/>
    <rule source="GotoStatement" name="goto-statement"/>
    <rule source="SwitchStatement" name="switch-statement"/>
    <rule source="CaseStatement" name="case-statement"/>
    <rule source="DefaultStatement" name="default-statement"/>
    <rule source="GotoCaseStatement" name="goto-case-statement"/>
    <rule source="GotoDefaultStatement" name="goto-default-statement"/>
    <rule source="AssignmentStatementExpr" name="assignment-statement-expr"/>
    <rule source="AssignmentStatement" name="assignment-statement"/>
    <rule source="ConstructionStatement" name="construction-statement"/>
    <rule source="DeleteStatement" name="delete-statement"/>
    <rule source="DestroyStatement" name="destroy-statement"/>
    <rule source="ExpressionStatement" name="expression-statement"/>
    <rule source="EmptyStatement" name="empty-statement"/>
    <rule source="ThrowStatement" name="throw-statement"/>
    <rule source="TryStatement" name="try-statement"/>
    <rule source="Catch" name="catch"/>
    <rule source="AssertStatement" name="assert-statement"/>
    <rule source="ConditionalCompilationStatement" name="conditional-compilation-statement"/>
    <rule source="ConditionalCompilationExpression" name="conditional-compilation-expression"/>
    <rule source="ConditionalCompilationDisjunction" name="conditional-compilation-disjunction"/>
    <rule source="ConditionalCompilationConjunction" name="conditional-compilation-conjunction"/>
    <rule source="ConditionalCompilationPrefix" name="conditional-compilation-prefix"/>
    <rule source="ConditionalCompilationPrimary" name="conditional-compilation-primary"/>
</grammar>
