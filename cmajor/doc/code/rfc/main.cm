using System;
using System.Collections;
using System.IO;
using System.Net.Http;
using System.Windows.API;

void PrintUsage()
{
    Console.Out() << "Usage: rfc [options] RFCNUMBER..." << endl();
    Console.Out() << "Fetch RFC document from rfc-editor.org, and show it in browser." << endl();
    Console.Out() << "Options:" << endl();
    Console.Out() << "--help | -h:" << endl();
    Console.Out() << "  Print help and exit." << endl();
    Console.Out() << "--verbose | -v:" << endl();
    Console.Out() << "  Be verbose." << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        bool verbose = false;
        List<string> rfcs;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("--"))
            {
                if (arg == "--help")
                {
                    PrintUsage();
                    return 1;
                }
                else if (arg == "--verbose")
                {
                    verbose = true;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else if (arg.StartsWith("-"))
            {
                string options = arg.Substring(1);
                for (char o : options)
                {
                    switch (o)
                    {
                        case 'h': PrintUsage(); return 1;
                        case 'v': verbose = true; break;
                        default: throw Exception("unknown option '-" + string(o) + "'"); break;
                    }
                }
            }
            else
            {
                rfcs.Add(arg);
            }
        }
        if (rfcs.IsEmpty())
        {
            throw Exception("no RFC numbers given");
        }
        StreamWriter* log = null;
        if (verbose)
        {
            log = &Console.Out();
        }
        for (const string& rfc : rfcs)
        {
            UriReference baseAddress = "https://www.rfc-editor.org/";
            HttpClient client(baseAddress, log);
            UriReference rfcUri("/rfc/rfc" + rfc + ".html");
            HttpHeaderCollection headers;
            SharedPtr<ByteStream> body;
            HttpStatus status = client.Get(rfcUri, headers, body);
            if (status.StatusCode() != statusSuccessOK)
            {
                throw Exception(status.ToString());
            }
            string fileName = "rfc" + rfc + ".html";
            StreamWriter writer = File.CreateText(fileName);
            body->CopyTo(*writer.ContainedStream());
            if (verbose)
            {
                Console.Out() << "==> " << fileName << endl();
            }
            if (verbose)
            {
                Console.Out() << "starting browser..." << endl();
            }
            ShellExecute(fileName);
            if (verbose)
            {
                Console.Out() << "done." << endl();
            }
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
