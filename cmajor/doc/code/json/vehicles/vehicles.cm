using System;
using System.Collections;
using System.Json;
using Vehicles;

namespace Vehicles
{
    [json]
    public abstract class Vehicle
    {
        public nothrow Vehicle(double speed_) : speed(speed_)
        {
        }
        public default virtual ~Vehicle();
        public inline nothrow double Speed() const 
        {
            return speed;
        }
        private double speed;
    }
    
    [json]
    public class Bicycle : Vehicle
    {
        public nothrow Bicycle(const string& brand_, double speed_) : base(speed_), brand(brand_)
        {
        }
        public inline nothrow string& Brand() const
        {
            return brand;
        }
        private string brand;
    }
    
    [json]
    public class Car : Vehicle
    {
        public nothrow Car(const string& model_, const string& registrationNumber_, double speed_) : base(speed_), model(model_), registrationNumber(registrationNumber_)
        {
        }
        public inline nothrow const string& Model() const
        {
            return model;
        }
        public inline nothrow const string& RegistrationNumber() const
        {
            return registrationNumber;
        }
        private string model;
        private string registrationNumber;
    }
    
    [json]
    public class Truck : Car
    {
        public nothrow Truck(const string& model_, const string& registrationNumber_, double speed_, int weight_) : base(model_, registrationNumber_, speed_), weight(weight_)
        {
        }
        public inline nothrow int Weight() const
        {
            return weight;
        }
        private int weight;
    }
}

public void SerializeOneVehicle()
{
    UniquePtr<Vehicle> porsche(new Car("Porsche", "ABC-123", 200));
    UniquePtr<JsonValue> porscheJsonValue = ToJson(porsche);
    string porscheJsonStr = porscheJsonValue->ToString();
    Console.WriteLine(porscheJsonStr);
    
    UniquePtr<JsonValue> parsedPorscheJsonValue = ParseJson(porscheJsonStr);
    UniquePtr<Vehicle> parsedVehicle;
    FromJson(parsedPorscheJsonValue.Get(), parsedVehicle);
    Car* parsedPorsche = parsedVehicle.Get() as Car*;
    if (parsedPorsche != null)
    {
        Console.Out() << parsedPorsche->Model() << ": " << parsedPorsche->RegistrationNumber() << " " << parsedPorsche->Speed() << endl();
    }
}

public void SerializeListOfVehicles()
{
    List<UniquePtr<Vehicle>> vehicles;
    vehicles.Add(UniquePtr<Vehicle>(new Truck("Volvo", "XYZ-987", 100, 1000)));
    vehicles.Add(UniquePtr<Vehicle>(new Car("Peugeot", "PRQ-567", 150)));
    vehicles.Add(UniquePtr<Vehicle>(new Bicycle("Pegoretti", 30)));
    UniquePtr<JsonValue> vehiclesJsonValue = ToJson(vehicles);
    string vehiclesJsonStr = vehiclesJsonValue->ToString();
    Console.WriteLine(vehiclesJsonStr);
    
    UniquePtr<JsonValue> parsedVehiclesJsonValue = ParseJson(vehiclesJsonStr);
    List<UniquePtr<Vehicle>> parsedVehicles;
    FromJson(parsedVehiclesJsonValue.Get(), parsedVehicles);
    for (const UniquePtr<Vehicle>& vehicle : parsedVehicles)
    {
        if (vehicle.Get() is Truck*)
        {
            Truck* truck = cast<Truck*>(vehicle.Get());
            Console.Out() << truck->Model() << ": " << truck->RegistrationNumber() << " " << truck->Speed() << " " << truck->Weight() << endl();
        }
        else if (vehicle.Get() is Car*)
        {
            Car* car = cast<Car*>(vehicle.Get());
            Console.Out() << car->Model() << ": " << car->RegistrationNumber() << " " << car->Speed() << endl();
        }
        else if (vehicle.Get() is Bicycle*)
        {
            Bicycle* bicycle = cast<Bicycle*>(vehicle.Get());
            Console.Out() << bicycle->Brand() << ": " << bicycle->Speed() << endl();
        }
    } 
}

internal int main(int argc, const char** argv)
{
    try
    {
        bool one = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg == "1")
            {
                one = true;
            }
        }
        if (one)
        {
            SerializeOneVehicle();
        }        
        else
        {
            SerializeListOfVehicles();
        }        
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
