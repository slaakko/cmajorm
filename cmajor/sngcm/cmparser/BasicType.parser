// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcm/cmparser/ParserApi.hpp>
[hpp]#include <sngcm/ast/BasicType.hpp>
[cpp]#include <sngcm/cmlexer/CmajorLexer.hpp>
[cpp]#include <sngcm/cmlexer/CmajorTokens.hpp>

using namespace sngcm::ast;
using namespace CmajorTokens;

parser api(SNGCM_PARSER_API) BasicTypeParser
{
    uselexer CmajorLexer;

    BasicType(boost::uuids::uuid* moduleId) : Node*
        ::= BOOL{ return new BoolNode(span, *moduleId); }
        |   SBYTE{ return new SByteNode(span, *moduleId); }
        |   BYTE{ return new ByteNode(span, *moduleId); }
        |   SHORT{ return new ShortNode(span, *moduleId); }
        |   USHORT{ return new UShortNode(span, *moduleId); }
        |   INT{ return new IntNode(span, *moduleId); }
        |   UINT{ return new UIntNode(span, *moduleId); }
        |   LONG{ return new LongNode(span, *moduleId); }
        |   ULONG{ return new ULongNode(span, *moduleId); }
        |   FLOAT{ return new FloatNode(span, *moduleId); }
        |   DOUBLE{ return new DoubleNode(span, *moduleId); }
        |   CHAR{ return new CharNode(span, *moduleId); }
        |   WCHAR{ return new WCharNode(span, *moduleId); }
        |   UCHAR{ return new UCharNode(span, *moduleId); }
        |   VOID{ return new VoidNode(span, *moduleId); }
        ;

    ruleinfo
    {
        (BasicType, "basic type")
    }
}
