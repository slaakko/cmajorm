// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcm/cmparser/ParserApi.hpp>
[hpp]#include <sngcm/ast/Enumeration.hpp>
[hpp]#include <sngcm/cmparser/ParsingContext.hpp>
[cpp]#include <sngcm/cmparser/Specifier.hpp>
[cpp]#include <sngcm/cmparser/Identifier.hpp>
[cpp]#include <sngcm/cmparser/TypeExpr.hpp>
[cpp]#include <sngcm/cmparser/Expression.hpp>
[cpp]#include <sngcm/cmlexer/CmajorLexer.hpp>
[cpp]#include <sngcm/cmlexer/CmajorTokens.hpp>

using namespace sngcm::ast;
using namespace CmajorTokens;

parser api(SNGCM_PARSER_API) EnumerationParser
{
    uselexer CmajorLexer;

    using SpecifierParser.Specifiers;
    using IdentifierParser.Identifier;
    using TypeExprParser.TypeExpr;
    using ExpressionParser.Expression;

    EnumType(ParsingContext* ctx, var std::unique_ptr<EnumTypeNode> enumTypeNode, var Span s, var Span beginBraceSpan, var Span endBraceSpan) : EnumTypeNode*
        ::= Specifiers:specifiers{ s = span; } ENUM Identifier:enumTypeId!{ s.end = span.end; enumTypeNode.reset(new EnumTypeNode(s, specifiers, enumTypeId)); }
            (UnderlyingType(ctx):underlyingType{ enumTypeNode->SetUnderlyingType(underlyingType); })?
            LBRACE!{ beginBraceSpan = span; } EnumConstants(ctx, enumTypeNode.get()):enumConstants RBRACE!
            {
                endBraceSpan = span;
                enumTypeNode->SetBeginBraceSpan(beginBraceSpan);
                enumTypeNode->SetEndBraceSpan(endBraceSpan);
                return enumTypeNode.release();
            }
        ;

    UnderlyingType(ParsingContext* ctx) : Node*
        ::= COLON TypeExpr(ctx):type{ return type; }
        ;

    EnumConstants(ParsingContext* ctx, sngcm::ast::EnumTypeNode* enumType)
        ::= EnumConstant(ctx, enumType):enumConstant!{ enumType->AddConstant(enumConstant); } % COMMA
        ;

    EnumConstant(ParsingContext* ctx, sngcm::ast::EnumTypeNode* enumType, var Span s, var std::unique_ptr<Node> expr) : EnumConstantNode*
        ::= Identifier:constantId!{ s = span; }
        (   ASSIGN Expression(ctx):constantValue
            {
                expr.reset(constantValue);
                expr->SetFullSpan();
                s.end = expr->GetSpan().end;
                EnumConstantNode* value = new EnumConstantNode(s, constantId, expr.release());
                value->SetHasValue();
                value->SetStrValue(lexer.GetMatch(s));
                return value;
            }
        |   empty{ return new EnumConstantNode(s, constantId, MakeNextEnumConstantValue(s, enumType)); }
        )
        ;

    ruleinfo
    {
        (EnumType, "enumerated type"), (UnderlyingType, "underlying type"), (EnumConstants, "enumeration constants"), (EnumConstant, "enumeration constant")
    }
}
