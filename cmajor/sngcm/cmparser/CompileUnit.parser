// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcm/cmparser/ParserApi.hpp>
[hpp]#include <sngcm/ast/CompileUnit.hpp>
[hpp]#include <sngcm/cmparser/ParsingContext.hpp>
[hpp]#include <memory>
[cpp]#include <sngcm/cmparser/Typedef.hpp>
[cpp]#include <sngcm/cmparser/Identifier.hpp>
[cpp]#include <sngcm/cmparser/Concept.hpp>
[cpp]#include <sngcm/cmparser/Function.hpp>
[cpp]#include <sngcm/cmparser/Class.hpp>
[cpp]#include <sngcm/cmparser/Interface.hpp>
[cpp]#include <sngcm/cmparser/Enumeration.hpp>
[cpp]#include <sngcm/cmparser/Constant.hpp>
[cpp]#include <sngcm/cmparser/Delegate.hpp>
[cpp]#include <sngcm/cmparser/GlobalVariable.hpp>
[cpp]#include <sngcm/cmparser/Template.hpp>
[cpp]#include <sngcm/cmlexer/CmajorLexer.hpp>
[cpp]#include <sngcm/cmlexer/CmajorTokens.hpp>

using namespace sngcm::ast;
using namespace CmajorTokens;

parser api(SNGCM_PARSER_API) CompileUnitParser
{
    main;
    uselexer CmajorLexer;

    using IdentifierParser.Identifier;
    using IdentifierParser.QualifiedId;
    using ConceptParser.Concept;
    using FunctionParser.Function;
    using ClassParser.Class;
    using InterfaceParser.Interface;
    using TypedefParser.Typedef;
    using EnumerationParser.EnumType;
    using ConstantParser.Constant;
    using DelegateParser.Delegate;
    using DelegateParser.ClassDelegate;
    using GlobalVariableParser.GlobalVariable;
    using TemplateParser.InstantiationRequest;

    CompileUnit(boost::uuids::uuid* moduleId, ParsingContext* ctx, var std::unique_ptr<CompileUnitNode> compileUnit) : sngcm::ast::CompileUnitNode*
        ::= empty{ compileUnit.reset(new CompileUnitNode(span, *moduleId, lexer.FileName())); }
            NamespaceContent(moduleId, ctx, compileUnit.get(), compileUnit->GlobalNs()):content{ return compileUnit.release(); }
        ;

    NamespaceContent(boost::uuids::uuid* moduleId, ParsingContext* ctx, sngcm::ast::CompileUnitNode* cu, sngcm::ast::NamespaceNode* ns)
        ::= UsingDirectives(moduleId, ctx, ns):usingDirectives
            Definitions(moduleId, ctx, cu, ns):definitions
        ;

    UsingDirectives(boost::uuids::uuid* moduleId, ParsingContext* ctx, sngcm::ast::NamespaceNode* ns)
        ::= UsingDirective(moduleId, ctx, ns):usingDirective*
        ;

    UsingDirective(boost::uuids::uuid* moduleId, ParsingContext* ctx, sngcm::ast::NamespaceNode* ns)
        ::= UsingAliasDirective(moduleId):usingAlias{ ns->AddMember(usingAlias); }
        |   UsingNamespaceDirective(moduleId, ctx):usingNs{ ns->AddMember(usingNs); }
        ;

    UsingAliasDirective(boost::uuids::uuid* moduleId, var Span s) : Node*
        ::= USING{ s = span; } Identifier(moduleId):id ASSIGN QualifiedId(moduleId):qid! SEMICOLON!
        {
            s.end = span.end;
            return new AliasNode(s, *moduleId, id, qid);
        }
        ;

    UsingNamespaceDirective(boost::uuids::uuid* moduleId, ParsingContext* ctx, var Span s) : Node*
        ::= USING{ s = span; } QualifiedId(moduleId):ns! SEMICOLON!
        {
            s.end = span.end;
            return new NamespaceImportNode(s, *moduleId, ns);
        }
        ;

    Definitions(boost::uuids::uuid* moduleId, ParsingContext* ctx, sngcm::ast::CompileUnitNode* cu, sngcm::ast::NamespaceNode* ns)
        ::= (Definition(moduleId, ctx, cu, ns):definition{ ns->AddMember(definition); })*
        ;

    Definition(boost::uuids::uuid* moduleId, ParsingContext* ctx, sngcm::ast::CompileUnitNode* cu, sngcm::ast::NamespaceNode* ns) : Node*
        ::= NamespaceDefinition(moduleId, ctx, cu, ns):nsDefinition{ return nsDefinition; }
        |   TypedefDeclaration(moduleId, ctx):typedefDeclaration{ return typedefDeclaration; }
        |   ConceptDefinition(moduleId, ctx):conceptDefinition{ return conceptDefinition; }
        |   FunctionDefinition(moduleId, ctx):functionDefinition{ return functionDefinition; }
        |   ClassDefinition(moduleId, ctx):classDefinition{ return classDefinition; }
        |   InterfaceDefinition(moduleId, ctx):interfaceDefinition{ return interfaceDefinition; }
        |   EnumTypeDefinition(moduleId, ctx):enumTypeDefinition{ return enumTypeDefinition; }
        |   ConstantDefinition(moduleId, ctx):constantDefinition{ return constantDefinition; }
        |   DelegateDefinition(moduleId, ctx):delegateDefinition{ return delegateDefinition; }
        |   ClassDelegateDefinition(moduleId, ctx):classDelegateDefinition{ return classDelegateDefinition; }
        |   GlobalVariableDefinition(moduleId, ctx, cu):globalVariableDefinition{ return globalVariableDefinition; }
        |   InstantiationRequestDeclaration(moduleId, ctx):instantiationRequestDeclaration{ return instantiationRequestDeclaration; }
        ;

    NamespaceDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx, sngcm::ast::CompileUnitNode* cu, sngcm::ast::NamespaceNode* ns, var std::unique_ptr<NamespaceNode> nsNode, var Span s) : NamespaceNode*
        ::= NAMESPACE{ s = span; } (QualifiedId(moduleId):nsName{ s.end = span.end; nsNode.reset(new NamespaceNode(s, *moduleId, nsName)); } | empty{ nsNode.reset(new NamespaceNode(s, *moduleId, nullptr)); })
            LBRACE! NamespaceContent(moduleId, ctx, cu, nsNode.get()):content! RBRACE!
        {
            return nsNode.release();
        }
        ;

    TypedefDeclaration(boost::uuids::uuid* moduleId, ParsingContext* ctx) : TypedefNode*
        ::= Typedef(moduleId, ctx):typedefDeclaration{ return typedefDeclaration; }
        ;

    ConceptDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : ConceptNode*
        ::= Concept(moduleId, ctx):conceptDefinition{ return conceptDefinition; }
        ;

    FunctionDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : FunctionNode*
        ::= Function(moduleId, ctx):functionDefinition{ return functionDefinition; }
        ;

    ClassDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : ClassNode*
        ::= Class(moduleId, ctx):classDefinition{ return classDefinition; }
        ;

    InterfaceDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : InterfaceNode*
        ::= Interface(moduleId, ctx):interfaceDefinition{ return interfaceDefinition; }
        ;

    EnumTypeDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : EnumTypeNode*
        ::= EnumType(moduleId, ctx):enumTypeDefinition{ return enumTypeDefinition; }
        ;

    ConstantDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : ConstantNode*
        ::= Constant(moduleId, ctx):constantDefinition{ return constantDefinition; }
        ;

    DelegateDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : DelegateNode*
        ::= Delegate(moduleId, ctx):delegateDefinition{ return delegateDefinition; }
        ;

    ClassDelegateDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx) : ClassDelegateNode*
        ::= ClassDelegate(moduleId, ctx):classDelegateDefinition{ return classDelegateDefinition; }
        ;

    GlobalVariableDefinition(boost::uuids::uuid* moduleId, ParsingContext* ctx, sngcm::ast::CompileUnitNode* cu) : GlobalVariableNode*
        ::= GlobalVariable(moduleId, ctx, cu):globalVariableDefinition{ return globalVariableDefinition; }
        ;

    InstantiationRequestDeclaration(boost::uuids::uuid* moduleId, ParsingContext* ctx) : FullInstantiationRequestNode*
        ::= InstantiationRequest(moduleId, ctx):instantiationRequest{ return instantiationRequest; }
        ;

    ruleinfo
    {
        (CompileUnit, "compile unit"), (NamespaceContent, "namespace content"), (UsingDirectives, "using directives"), (UsingDirective, "using directive"),
        (UsingAliasDirective, "using alias directive"), (UsingNamespaceDirective, "using namespace directive"), (Definitions, "definitions"),
        (Definition, "definition"), (NamespaceDefinition, "namespace definition"), (TypedefDeclaration , "typedef declaration"), (ConceptDefinition, "concept definition"),
        (FunctionDefinition, "function definition"), (ClassDefinition, "class definition"), (InterfaceDefinition, "interface definition"), (EnumTypeDefinition, "enumerated type definition"),
        (ConstantDefinition, "constant definition"), (DelegateDefinition, "delegate definition"), (ClassDelegateDefinition, "class delegate definition"),
        (GlobalVariableDefinition, "global variable definition"), (InstantiationRequestDeclaration, "instantiation request")
    }
}


