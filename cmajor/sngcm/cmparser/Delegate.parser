// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcm/cmparser/ParserApi.hpp>
[hpp]#include <sngcm/ast/Delegate.hpp>
[hpp]#include <sngcm/cmparser/ParsingContext.hpp>
[cpp]#include <sngcm/cmparser/Specifier.hpp>
[cpp]#include <sngcm/cmparser/TypeExpr.hpp>
[cpp]#include <sngcm/cmparser/Identifier.hpp>
[cpp]#include <sngcm/cmparser/Parameter.hpp>
[cpp]#include <sngcm/cmlexer/CmajorLexer.hpp>
[cpp]#include <sngcm/cmlexer/CmajorTokens.hpp>

using namespace sngcm::ast;
using namespace CmajorTokens;

parser api(SNGCM_PARSER_API) DelegateParser
{
    uselexer CmajorLexer;

    using SpecifierParser.Specifiers;
    using TypeExprParser.TypeExpr;
    using ParameterParser.ParameterList;
    using IdentifierParser.Identifier;

    Delegate(boost::uuids::uuid* moduleId, ParsingContext* ctx, var Span s, var std::unique_ptr<DelegateNode> dlg) : DelegateNode*
        ::= Specifiers:specifiers{ s = span; } DELEGATE TypeExpr(moduleId, ctx):type! Identifier(moduleId):id!{ dlg.reset(new DelegateNode(s, *moduleId, specifiers, type, id)); }
            ParameterList(moduleId, ctx, dlg.get()):paramList! SEMICOLON!{ dlg->SetSpanEnd(span.end); return dlg.release(); }
        ;

    ClassDelegate(boost::uuids::uuid* moduleId, ParsingContext* ctx, var Span s, var std::unique_ptr<ClassDelegateNode> clsDlg) : ClassDelegateNode*
        ::= Specifiers:specifiers{ s = span; } CLASS DELEGATE TypeExpr(moduleId, ctx):type! Identifier(moduleId):id!{ clsDlg.reset(new ClassDelegateNode(s, *moduleId, specifiers, type, id)); }
            ParameterList(moduleId, ctx, clsDlg.get()):paramList! SEMICOLON!{ clsDlg->SetSpanEnd(span.end); return clsDlg.release(); }
        ;

    ruleinfo
    {
        (Delegate, "delegate"), (ClassDelegate, "class delegate")
    }
}
