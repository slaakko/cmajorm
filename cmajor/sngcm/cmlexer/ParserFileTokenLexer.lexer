// =================================
// Copyright (c) 2020 Seppo Laakko
// Distributed under the MIT license
// =================================

#include <sngcm/cmlexer/CmajorLexerApi.hpp>

classmap ParserFileTokenLexerClassMap;

prefix "sngcm/cmlexer";

tokens ParserFileTokenLexerTokens
{
    (PARSER, "'parser'"), (MAIN, "'main'"), (USELEXER, "'uselexer'"), (RULEINFO, "'ruleinfo'"), (EMPTY, "'empty'"), (ANY, "'any'"), (VAR, "'var'"), (PRODUCES, "'::='"),
    (ASSERT, "'assert'"), (ELIF, "'elif'"), (ENDIF, "'endif'"), (BOOL, "'bool'"), (TRUE, "'true'"), (FALSE, "'false'"),
    (SBYTE, "'sbyte'"), (BYTE, "'byte'"), (SHORT, "'short'"), (USHORT, "'ushort'"), (INT, "'int'"),
    (UINT, "'uint'"), (LONG, "'long'"), (ULONG, "'ulong'"), (FLOAT, "'float'"), (DOUBLE, "'double'"), (CHAR, "'char'"), (WCHAR, "'wchar'"), (UCHAR, "'uchar'"), (VOID, "'void'"),
    (ENUM, "'enum'"), (CAST, "'cast'"), (INTERFACE, "'interface'"), (NAMESPACE, "'namespace'"), (USING, "'using'"),
    (STATIC, "'static'"), (EXTERN, "'extern'"), (AS, "'as'"), (IS, "'is'"), (EXPLICIT, "'explicit'"), (DELEGATE, "'delegate'"), (INLINE, "'inline'"), (CDECL, "'cdecl'"), (NOTHROW, "'nothrow'"),
    (PUBLIC, "'public'"), (PROTECTED, "'protected'"), (PRIVATE, "'private'"), (INTERNAL, "'internal'"), (VIRTUAL, "'virtual'"), (ABSTRACT, "'abstract'"), (OVERRIDE, "'override'"),
    (SUPPRESS, "'suppress'"), (OPERATOR, "'operator'"), (CLASS, "'class'"), (RETURN, "'return'"),
    (IF, "'if'"), (ELSE, "'else'"), (SWITCH, "'switch'"), (CASE, "'case'"), (DEFAULT, "'default'"),
    (WHILE, "'while'"), (DO, "'do'"), (FOR, "'for'"), (BREAK, "'break'"), (CONTINUE, "'continue'"), (GOTO, "'goto'"), (TYPEDEF, "'typedef'"), (TYPENAME, "'typename'"), (TYPEID, "'typeid'"),
    (CONST, "'const'"), (CONSTEXPR, "'constexpr'"), (NULLLIT, "'null'"), (THIS, "'this'"), (BASE, "'base'"), (CONSTRUCT, "'construct'"), (DESTROY, "'destroy'"),
    (NEW, "'new'"), (DELETE, "'delete'"), (SIZEOF, "'sizeof'"), (TRY, "'try'"), (CATCH, "'catch'"), (THROW, "'throw'"),
    (CONCEPT, "'concept'"), (WHERE, "'where'"), (AXIOM, "'axiom'"), (AND, "'and'"), (OR, "'or'"), (EXCLAMATION, "'!'"), (UNIT_TEST, "'unit_test'"),
    (FLOATINGLIT, "floating literal"), (INTLIT, "integer literal"), (CHARLIT, "character literal"), (STRINGLIT, "string literal"),
    (EQUIVALENCE, "'<=>'"), (IMPLICATION, "'=>'"), (DISJUNCTION, "'||'"), (AMPAMP, "'&&'"),
    (BITOR, "'|'"), (BITXOR, "'^'"), (AMP, "'&'"), (EQ, "'=='"), (NEQ, "'!='"), (LEQ, "'<='"), (GEQ, "'>='"), (SHIFTLEFT, "'<<'"), (SHIFTRIGHT, "'>>'"),
    (PLUS, "'+'"), (MINUS, "'-'"), (STAR, "'*'"), (DIV, "'/'"), (REM, "'%'"), (PLUSPLUS, "'++'"), (MINUSMINUS, "'--'"), (CPL, "'~'"), (DOT, "'.'"), (ARROW, "'->'"),
    (LBRACKET, "'['"), (RBRACKET, "']'"), (LPAREN, "'('"), (RPAREN, "')'"), (LANGLE, "'<'"), (RANGLE, "'>'"), (LBRACE, "'{'"), (RBRACE, "'}'"), (COMMA, "','"), (ASSIGN, "'='"),
    (COLON, "':'"), (SEMICOLON, "';'"), (HASH, "'#'"),
    (WS, "white space"), (LINECOMMENT, "line comment"), (BLOCKCOMMENT, "block comment"), (BLOCKCOMMENTLINE, "block comment line"),
    (KEYWORD, "keyword"), (ID, "identifier"), (NUMBER, "number"), (OTHER, "other"),
    (MAX, "max")
}

keywords ParserFileTokenLexerKeywords
{
    ("parser", PARSER), ("main", MAIN), ("uselexer", USELEXER), ("ruleinfo", RULEINFO), ("empty", EMPTY), ("any", ANY), ("var", VAR),
    ("assert", ASSERT), ("elif", ELIF), ("endif", ENDIF), ("bool", BOOL), ("true", TRUE), ("false", FALSE),
    ("sbyte", SBYTE), ("byte", BYTE), ("short", SHORT), ("ushort", USHORT), ("int", INT), ("uint", UINT), ("long", LONG), ("ulong", ULONG),
    ("float", FLOAT), ("double", DOUBLE), ("char", CHAR), ("wchar", WCHAR), ("uchar", UCHAR), ("void", VOID), ("enum", ENUM), ("cast", CAST), ("interface", INTERFACE),
    ("namespace", NAMESPACE), ("using", USING), ("static", STATIC), ("extern", EXTERN), ("as", AS), ("is", IS), ("explicit", EXPLICIT), ("delegate", DELEGATE), ("inline", INLINE), ("cdecl", CDECL), ("nothrow", NOTHROW),
    ("public", PUBLIC), ("protected", PROTECTED), ("private", PRIVATE), ("internal", INTERNAL), ("virtual", VIRTUAL), ("abstract", ABSTRACT), ("override", OVERRIDE), ("suppress", SUPPRESS),
    ("operator", OPERATOR), ("class", CLASS), ("return", RETURN), ("if", IF), ("else", ELSE), 
    ("switch", SWITCH), ("case", CASE), ("default", DEFAULT), ("while", WHILE), ("do", DO), ("for", FOR), 
    ("break", BREAK), ("continue", CONTINUE), ("goto", GOTO), ("typedef", TYPEDEF), ("typename", TYPENAME), ("typeid", TYPEID), ("const", CONST), ("constexpr", CONSTEXPR), ("null", NULLLIT), ("this", THIS), ("base", BASE),
    ("construct", CONSTRUCT), ("destroy", DESTROY), ("new", NEW), ("delete", DELETE), ("sizeof", SIZEOF), ("try", TRY), ("catch", CATCH), ("throw", THROW), 
    ("concept", CONCEPT), ("where", WHERE), ("axiom", AXIOM), ("and", AND), ("or", OR), ("unit_test", UNIT_TEST)
}

expressions
{
    ws = "[\t ]+";
    newline = "\r\n|\n|\r";
    linecomment = "//[^\n\r]*{newline}";
    blockcomment = "/\*([^*\n\r]|\*[^/\n\r])*(\*/|{newline})";
    blockcommentline = "([^*\n\r]|\*[^/\n\r])*(\*/|{newline})";
    comment = "{linecomment}|{blockcomment}";
    separators = "({ws}|{comment})+";
    id = "{idstart}{idcont}*";
    decdigits = "[0-9]+";
    hexdigit = "[0-9a-fA-F]";
    hexdigits = "{hexdigit}+";
    hex4 = "{hexdigit}{hexdigit}{hexdigit}{hexdigit}";
    hex8 = "{hex4}{hex4}";
    octaldigits = "[0-7]+";
    fraction = "{decdigits}?\.{decdigits}|{decdigits}\.";
    sign = "\+|-";
    exponent = "(e|E){sign}?{decdigits}";
    integer = "(0{octaldigits}?|[1-9]{decdigits}?|0(x|X){hexdigits})(u|U)?";
    floating = "({fraction}{exponent}?|{decdigits}{exponent})(f|F)?";
    escape = "\\((x|X){hexdigits}|(d|D){decdigits}|{octaldigits}|u{hex4}|U{hex8}|(a|b|f|n|r|t|v|.))";
    character = "(w|u)?'([^\\\r\n']+|{escape})'";
    string = "((w|u)?@\"[^\"]*\")|(w|u)?\"([^\\\r\n\"]|{escape})*\"";
}

lexer api(SNGCM_LEXER_API) ParserFileTokenLexer
{
    "{ws}" { return WS; }
    "{newline}" { }
    "{linecomment}" { return LINECOMMENT; }
    "{blockcomment}" { return BLOCKCOMMENT; }
    "{blockcommentline}" $(1) { return BLOCKCOMMENTLINE; }
    "{id}" { if (GetKeywordToken(token.match) != INVALID_TOKEN) return KEYWORD; else return ID; }
    "{character}" { return CHARLIT; }
    "{string}" { return STRINGLIT; }
    "{floating}" { return NUMBER; }
    "{integer}" { return NUMBER; }
    "<=>" { return OTHER; }
    "=>" { return OTHER; }
    "\|\|" { return OTHER; }
    "&&" { return OTHER; }
    "\|" { return OTHER; }
    "^" { return OTHER; }
    "&" { return OTHER; }
    "==" { return OTHER; }
    "!=" { return OTHER; }
    "<=" { return OTHER; }
    ">=" { return OTHER; }
    "<" { return OTHER; }
    ">" { return OTHER; }
    "<<" { return OTHER; }
    ">>" { return OTHER; }
    "\+" { return OTHER; }
    "-" { return OTHER; }
    "\*" { return OTHER; }
    "/" { return OTHER; }
    "%" { return OTHER; }
    "\+\+" { return OTHER; }
    "--" { return OTHER; }
    "!" { return OTHER; }
    "~" { return OTHER; }
    "\." { return OTHER; }
    "->" { return OTHER; }
    "\[" { return OTHER; }
    "\]" { return OTHER; }
    "\(" { return OTHER; }
    "\)" { return OTHER; }
    "\{" { return OTHER; }
    "\}" { return OTHER; }
    "," { return OTHER; }
    "=" { return OTHER; }
    ":" { return OTHER; }
    ";" { return OTHER; }
    "#" { return OTHER; }
    "::=" { return OTHER; }
    "\?" { return OTHER; }

    actions
    {
        $(1)={ if (!inBlockComment) return INVALID_TOKEN; }
    }

    variables
    {
        bool inBlockComment;
    }
}
