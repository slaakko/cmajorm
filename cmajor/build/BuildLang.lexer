// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

#include <cmajor/build/BuildApi.hpp>

classmap BuildLangClassMap;

prefix "cmajor/build";

tokens BuildLangTokens
{
    (ADD, "'add'"), (REMOVE, "'remove'"), (RUN, "'run'"), (HOST, "'host'"), (PORT, "'port'"), (CONFIGURATION, "'configuration'"),
    (DEFAULT, "'default'"), (TOOLCHAIN, "'toolchain'"), (CLANG, "'clang'"), (GCC, "'gcc'"), (VS, "'vs'"),
    (PUSH, "'push'"), (BUILD, "'build'"), (SHOW, "'show'"), (DEBUG, "'debug'"), (RELEASE, "'release'"), (INSTALL, "'install'"),
    (TO, "'to'"), (FROM, "'from'"), (USING, "'using'"), (SERVER, "'server'"),
    (ID, "'id'"), (FILEPATH, "'filepath'"), (INTEGER, "'integer'"),
    (VERBOSE, "'verbose'"), (MESSAGES, "'messages'"), (FORCE, "'force'"), (ONLY, "'only"), (ALL, "'all'"), (REBUILD, "'rebuild'"), (CONFIG, "'config'"),
    (LBRACKET, "'['"), (RBRACKET, "']'"), (EQ, "'='"), (DOT, "'.'")
}

keywords BuildLangKeywords
{
    ("add", ADD), ("remove", REMOVE), ("run", RUN), ("host", HOST), ("port", PORT), ("configuration", CONFIGURATION), ("default", DEFAULT), ("toolchain", TOOLCHAIN),
    ("clang", CLANG), ("gcc", GCC), ("vs", VS),
    ("push", PUSH), ("build", BUILD), ("show", SHOW), ("debug", DEBUG), ("release", RELEASE), ("install", INSTALL), ("to", TO), ("from", FROM), ("using", USING), ("server", SERVER),
    ("verbose", VERBOSE), ("messages", MESSAGES), ("force", FORCE), ("only", ONLY), ("all", ALL), ("rebuild", REBUILD), ("config", CONFIG)
}

expressions
{
    ws = "[\t ]+";
    newline = "\r\n|\n|\r";
    id = "{idstart}{idcont}*";
    digit = "[0-9]";
    integer = "{digit}+";
    filepath = "<[^>]*>";
}

lexer api(BUILD_API) BuildLangLexer
{
    "{ws}" { }
    "{newline}" { }
    "{id}" { int kw = GetKeywordToken(token.match); if (kw == INVALID_TOKEN) return ID; else return kw; }
    "{integer}"{ return INTEGER; }
    "{filepath}"{ return FILEPATH; }
    "\["{ return LBRACKET; }
    "\]"{ return RBRACKET; }
    "="{ return EQ; }
    "\."{ return DOT; }
}
