// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/build/BuildApi.hpp>
[hpp]#include <cmajor/build/BuildOption.hpp>
[cpp]#include <cmajor/build/BuildLangLexer.hpp>
[cpp]#include <cmajor/build/BuildLangTokens.hpp>
[cpp]#include <cmajor/build/BuildLangOptionParser.hpp>
[hpp]#include <cmajor/build/ServerCommand.hpp>
[hpp]#include <memory>

using namespace BuildLangTokens;

parser api(BUILD_API) BuildLangServerParser
{
    uselexer BuildLangLexer;
    main;
    using BuildLangOptionParser.Options;

    ServerSentence(cmajor::build::BuildOptionSetter* optionSetter) : cmajor::build::ServerCommand*
        ::= Options(optionSetter):options?
            ServerCommandSentence:sentence!{ return sentence; }
        ;

    ServerCommandSentence : cmajor::build::ServerCommand*
        ::=
        (   AddServerSentence:addServerCommand{ return addServerCommand; }
        |   RemoveServerSentence:removeServerCommand{ return removeServerCommand; }
        |   RunServerSentence:runServerCommand{ return runServerCommand; }
        |   ShowConfigurationSentence:showConfigurationCommand{ return showConfigurationCommand; }
        )
        ;

    AddServerSentence : cmajor::build::ServerCommand*
        ::=
        (
            ADD SERVER! ServerId:server! PORT! Port:port
        )
        {
            return new cmajor::build::AddServerServerCommand(server, port);
        }
        ;

    RemoveServerSentence : cmajor::build::ServerCommand*
        ::=
        (
            REMOVE SERVER! ServerId:server!
        )
        {
            return new cmajor::build::RemoveServerServerCommand(server);
        }
        ;

    RunServerSentence : cmajor::build::ServerCommand*
        ::=
        (
            RUN SERVER ServerId:server!
        )
        {
            return new cmajor::build::RunServerServerCommand(server);
        }
        ;

    ShowConfigurationSentence : cmajor::build::ServerCommand*
        ::=
        (
            SHOW CONFIGURATION
        )
        {
            return new cmajor::build::ShowConfigurationServerCommand();
        }
        ;

    ServerId : std::string
        ::= ID{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        ;


    Port(var std::string portStr) : int
        ::= INTEGER{ portStr = ToUtf8(lexer.GetToken(pos).match.ToString()); return std::stoi(portStr); }
        ;

    ruleinfo
    {
        (ServerSentence, "cmserver (add server | remove server | run server | show condiguration) ..."),
        (ServerCommandSentence, "cmserver (add server | remove server | run server | show condiguration) ..."),
        (AddServerSentence, "add server command"),
        (RemoveServerSentence, "remove server command"),
        (RunServerSentence, "run server command"),
        (ShowConfigurationSentence, "show configuration command"),
        (ServerId, "server name"),
        (Port, "port number")
    }
}
