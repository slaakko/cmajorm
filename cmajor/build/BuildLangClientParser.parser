// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/build/BuildApi.hpp>
[hpp]#include <cmajor/build/BuildOption.hpp>
[cpp]#include <cmajor/build/BuildLangLexer.hpp>
[cpp]#include <cmajor/build/BuildLangTokens.hpp>
[cpp]#include <cmajor/build/BuildLangOptionParser.hpp>
[hpp]#include <cmajor/build/ClientCommand.hpp>
[hpp]#include <memory>

using namespace BuildLangTokens;

parser api(BUILD_API) BuildLangClientParser
{
    uselexer BuildLangLexer;
    main;
    using BuildLangOptionParser.Options;

    ClientSentence(cmajor::build::BuildOptionSetter* optionSetter) : cmajor::build::ClientCommand*
        ::= Options(optionSetter):options?
            ClientCommandSentence:sentence!{ return sentence; }
        ;

    ClientCommandSentence : cmajor::build::ClientCommand*
        ::=
        (   PushProjectSentence:pushCommand{ return pushCommand; }
        |   RemoveProjectSentence:removeProjectCommand{ return removeProjectCommand; }
        |   AddServerSentence:addServerCommand{ return addServerCommand; }
        |   RemoveServerSentence:removeServerCommand{ return removeServerCommand; }
        |   BuildProjectSentence:buildCommand{ return buildCommand; }
        |   DebugProjectSentence:debugCommand{ return debugCommand; }
        |   InstallProjectSentence:installCommand{ return installCommand; }
        |   ShowConfigurationSentence:showConfigurationCommand{ return showConfigurationCommand; }
        )
        ;

    PushProjectSentence(var std::string serverName) : cmajor::build::ClientCommand*
        ::=
        (
            PUSH ProjectFilePath:project!
            (   TO SERVER! ServerName:server!{ serverName = server; }
            )?
        )
        {
            return new cmajor::build::PushProjectClientCommand(project, serverName);
        }
        ;

    RemoveProjectSentence(var std::string serverName) : cmajor::build::ClientCommand*
        ::=
        (
            REMOVE ProjectFilePath:project
            (   FROM SERVER! ServerName:server!{ serverName = server; }
            )?
        )
        {
            return new cmajor::build::RemoveProjectClientCommand(project, serverName);
        }
        ;

    AddServerSentence(var std::string host, var std::string toolChain) : cmajor::build::ClientCommand*
        ::= (ADD SERVER ServerName:server (HOST Host:h!{ host = h; })? PORT Port:port! (DEFAULT TOOLCHAIN! ToolChain:defaultToolChain!{ toolChain = defaultToolChain; })?)
        {
            return new cmajor::build::AddServerClientCommand(server, host, port, toolChain);
        }
        ;

    RemoveServerSentence : cmajor::build::ClientCommand*
        ::= REMOVE SERVER ServerName:server{ return new cmajor::build::RemoveServerClientCommand(server); }
        ;

    BuildProjectSentence(var std::string serverName) : cmajor::build::ClientCommand*
        ::=
        (
            BUILD ProjectFilePath:project!
            (   USING SERVER! ServerName:server!{ serverName = server; }
            )?
        )
        {
            return new cmajor::build::BuildProjectClientCommand(project, serverName);
        }
        ;

    DebugProjectSentence(var std::string serverName) : cmajor::build::ClientCommand*
        ::=
        (
            DEBUG ProjectFilePath:project!
            (   USING SERVER! ServerName:server!{ serverName = server; }
            )?
        )
        {
            return new cmajor::build::DebugProjectClientCommand(project, serverName);
        }
        ;

    InstallProjectSentence(var std::string serverName) : cmajor::build::ClientCommand*
        ::=
        (
            INSTALL ProjectFilePath:project! TO! DirectoryPath:directory!
            (
                FROM SERVER! ServerName:server!{ serverName = server; }
            )?
        )
        {
            return new cmajor::build::InstallProjectClientCommand(project, directory, serverName);
        }
        ;

    ShowConfigurationSentence : cmajor::build::ClientCommand*
        ::=
        (
            SHOW CONFIGURATION
        )
        {
            return new cmajor::build::ShowConfigurationClientCommand();
        }
        ;

    ProjectFilePath : std::string
        ::= FILEPATH{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        ;

    DirectoryPath : std::string
        ::= FILEPATH{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        ;

    ServerName : std::string
        ::= ID{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        ;

    Host : std::string
        ::= HostName:hostName{ return hostName; }
        |   IpAddress:ipAddress{ return ipAddress; }
        ;

    HostName(var std::string hostName) : std::string
        ::=
        (
            ID{ hostName.append(ToUtf8(lexer.GetToken(pos).match.ToString())); } (DOT{ hostName.append(1, '.'); } ID{ hostName.append(ToUtf8(lexer.GetToken(pos).match.ToString())); })*
        )
        {
            return hostName;
        }
        ;

    IpAddress(var std::string ip) : std::string
        ::=
        (
            INTEGER{ ip.append(ToUtf8(lexer.GetToken(pos).match.ToString())); }
            DOT{ ip.append(1, '.'); } INTEGER{ ip.append(ToUtf8(lexer.GetToken(pos).match.ToString())); }
            DOT{ ip.append(1, '.'); } INTEGER{ ip.append(ToUtf8(lexer.GetToken(pos).match.ToString())); }
            DOT{ ip.append(1, '.'); } INTEGER{ ip.append(ToUtf8(lexer.GetToken(pos).match.ToString())); }
        )
        {
            return ip;
        }
        ;

    Port(var std::string portStr) : int
        ::= INTEGER{ portStr = ToUtf8(lexer.GetToken(pos).match.ToString()); return std::stoi(portStr); }
        ;

    ToolChain : std::string
        ::= CLANG{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        |   GCC{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        |   VS{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        |   ID{ return ToUtf8(lexer.GetToken(pos).match.ToString()); }
        ;

    ruleinfo
    {
        (ClientSentence, "cmclient [options] (add | remove | show | push | build | debug | install) ..."),
        (ClientCommandSentence, "cmclient [options] (add | remove | show | push | build | debug | install) ..."),
        (PushProjectSentence, "push project command"),
        (RemoveProjectSentence, "remove project command"),
        (AddServerSentence, "add server command"),
        (RemoveServerSentence, "remove server command"),
        (BuildProjectSentence, "build project command"),
        (DebugProjectSentence, "debug project command"),
        (InstallProjectSentence, "install project command"),
        (ShowConfigurationSentence, "show configuration command"),
        (ProjectFilePath, "PROJECT.cmp"),
        (DirectoryPath, "directory name"),
        (ServerName, "server name"),
        (Host, "host name or IP-address"),
        (Port, "port number"),
        (ToolChain, "tool chain (clang | gcc | vs)"),
        (PushProjectSentence, "push project command"),
        (RemoveProjectSentence, "remove project command"),
        (AddServerSentence, "add server command"),
        (RemoveServerSentence, "remove server command"),
        (ShowConfigurationSentence, "show configuration command"),
        (BuildProjectSentence, "build project command"),
        (DebugProjectSentence, "debug project command"),
        (InstallProjectSentence, "install project command")
    }
}
