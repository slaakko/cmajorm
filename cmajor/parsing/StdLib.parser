// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <stdint.h>
[cpp]#include <sstream>
[cpp]#include <cmajor/util/Unicode.hpp>

namespace cmajor.parsing
{
    grammar stdlib
    {
        spaces                              ::= space+
                                            ;

        newline                             ::= "\r\n" | "\n" | "\r"
                                            ;

        comment                             ::= line_comment | block_comment
                                            ;

        line_comment                        ::= "//" [^\r\n]* newline
                                            ;

        block_comment                       ::= "/*" (string | char | (anychar - "*/"))* "*/"
                                            ;

        spaces_and_comments                 ::= (space | comment)+
                                            ;

        digit_sequence                      ::= token(digit+)
                                            ;

        sign                                ::= '+' | '-'
                                            ;

        int: int32_t                        ::= token(sign? digit_sequence)
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> value;
                                            }
                                            ;

        uint: uint32_t                      ::= digit_sequence
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> value;
                                            }
                                            ;

        long: int64_t                       ::= token(sign? digit_sequence)
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> value;
                                            }
                                            ;

        ulong: uint64_t                     ::= digit_sequence
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> value;
                                            }
                                            ;

        hexuint: uint32_t                   ::= token(hexdigit+)
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> std::hex >> value;
                                            }
                                            ;


        hex: uint64_t                       ::= token(hexdigit+)
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> std::hex >> value;
                                            }
                                            ;

        hex_literal: uint64_t               ::= token(("0x" | "0X") hex!){ value = hex; }
                                            ;

        real: double                        ::= token(sign? (fractional_real | exponent_real))
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> value;
                                            }
                                            ;

        ureal: double                       ::= (fractional_real | exponent_real)
                                            {
                                                std::stringstream s;
                                                s.str(ToUtf8(std::u32string(matchBegin, matchEnd)));
                                                s >> value;
                                            }
                                            ;

        fractional_real                     ::= token(digit_sequence? '.' digit_sequence exponent_part?)
                                            |   token(digit_sequence '.')
                                            ;

        exponent_real                       ::= token(digit_sequence exponent_part)
                                            ;

        exponent_part                       ::= token([eE] sign? digit_sequence)
                                            ;

        num: double                         ::= real:r{ value = r; } | int:i{ value = i; }
                                            ;

        bool: bool                          ::= keyword("true"){ value = true; } | keyword("false"){ value = false; }
                                            ;

        identifier: std::u32string          ::= token((idstart | '_') idcont*)
                                            {
                                                value = std::u32string(matchBegin, matchEnd);
                                            }
                                            ;

        qualified_id: std::u32string        ::= token(identifier:first ('.' identifier:rest)*)
                                            {
                                                value = std::u32string(matchBegin, matchEnd);
                                            }
                                            ;

        escape: char32_t                    ::= token('\\'
                                            (
                                                [xX] hex:x{ value = char32_t(x); }
                                            |   [dD] uint:decimalEscape{ value = char32_t(decimalEscape); }
                                            |   [^dDxX]
                                            {
                                                char32_t c = *matchBegin;
                                                switch (c)
                                                {
                                                    case 'a': value = '\a'; break;
                                                    case 'b': value = '\b'; break;
                                                    case 'f': value = '\f'; break;
                                                    case 'n': value = '\n'; break;
                                                    case 'r': value = '\r'; break;
                                                    case 't': value = '\t'; break;
                                                    case 'v': value = '\v'; break;
                                                    case '0': value = '\0'; break;
                                                    default:  value = c; break;
                                                }
                                            }
                                            )
                                            )
                                            ;

        char: char32_t                      ::= token('\''
                                            (   [^\\\r\n]{ value = *matchBegin; }
                                            |   escape{ value = escape; }
                                            )   '\''!)
                                            ;

        string: std::u32string             ::= token('"'
                                                (
                                                    ([^"\\\r\n]+){ value.append(std::u32string(matchBegin, matchEnd)); }
                                                |   escape{ value.append(1, escape); }
                                                )*
                                            '"'!)
                                            ;
    }
}
